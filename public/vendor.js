(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],3:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],4:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],5:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],6:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],7:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],8:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],9:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],10:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],11:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],12:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],13:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],14:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}]},{},[1,2,3,4,5,6,7,8,9,10,11,12,13,14]);

/** @license Material-UI v4.1.1
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('react-dom')) :
    typeof define === 'function' && define.amd ? define(['exports', 'react', 'react-dom'], factory) :
    (global = global || self, factory(global.MaterialUI = {}, global.React, global.ReactDOM));
  }(this, function (exports, React, ReactDOM) { 'use strict';
  
    var React__default = 'default' in React ? React['default'] : React;
    var ReactDOM__default = 'default' in ReactDOM ? ReactDOM['default'] : ReactDOM;
  
    var common = {
      black: '#000',
      white: '#fff'
    };
  
    var red = {
      50: '#ffebee',
      100: '#ffcdd2',
      200: '#ef9a9a',
      300: '#e57373',
      400: '#ef5350',
      500: '#f44336',
      600: '#e53935',
      700: '#d32f2f',
      800: '#c62828',
      900: '#b71c1c',
      A100: '#ff8a80',
      A200: '#ff5252',
      A400: '#ff1744',
      A700: '#d50000'
    };
  
    var pink = {
      50: '#fce4ec',
      100: '#f8bbd0',
      200: '#f48fb1',
      300: '#f06292',
      400: '#ec407a',
      500: '#e91e63',
      600: '#d81b60',
      700: '#c2185b',
      800: '#ad1457',
      900: '#880e4f',
      A100: '#ff80ab',
      A200: '#ff4081',
      A400: '#f50057',
      A700: '#c51162'
    };
  
    var purple = {
      50: '#f3e5f5',
      100: '#e1bee7',
      200: '#ce93d8',
      300: '#ba68c8',
      400: '#ab47bc',
      500: '#9c27b0',
      600: '#8e24aa',
      700: '#7b1fa2',
      800: '#6a1b9a',
      900: '#4a148c',
      A100: '#ea80fc',
      A200: '#e040fb',
      A400: '#d500f9',
      A700: '#aa00ff'
    };
  
    var deepPurple = {
      50: '#ede7f6',
      100: '#d1c4e9',
      200: '#b39ddb',
      300: '#9575cd',
      400: '#7e57c2',
      500: '#673ab7',
      600: '#5e35b1',
      700: '#512da8',
      800: '#4527a0',
      900: '#311b92',
      A100: '#b388ff',
      A200: '#7c4dff',
      A400: '#651fff',
      A700: '#6200ea'
    };
  
    var indigo = {
      50: '#e8eaf6',
      100: '#c5cae9',
      200: '#9fa8da',
      300: '#7986cb',
      400: '#5c6bc0',
      500: '#3f51b5',
      600: '#3949ab',
      700: '#303f9f',
      800: '#283593',
      900: '#1a237e',
      A100: '#8c9eff',
      A200: '#536dfe',
      A400: '#3d5afe',
      A700: '#304ffe'
    };
  
    var blue = {
      50: '#e3f2fd',
      100: '#bbdefb',
      200: '#90caf9',
      300: '#64b5f6',
      400: '#42a5f5',
      500: '#2196f3',
      600: '#1e88e5',
      700: '#1976d2',
      800: '#1565c0',
      900: '#0d47a1',
      A100: '#82b1ff',
      A200: '#448aff',
      A400: '#2979ff',
      A700: '#2962ff'
    };
  
    var lightBlue = {
      50: '#e1f5fe',
      100: '#b3e5fc',
      200: '#81d4fa',
      300: '#4fc3f7',
      400: '#29b6f6',
      500: '#03a9f4',
      600: '#039be5',
      700: '#0288d1',
      800: '#0277bd',
      900: '#01579b',
      A100: '#80d8ff',
      A200: '#40c4ff',
      A400: '#00b0ff',
      A700: '#0091ea'
    };
  
    var cyan = {
      50: '#e0f7fa',
      100: '#b2ebf2',
      200: '#80deea',
      300: '#4dd0e1',
      400: '#26c6da',
      500: '#00bcd4',
      600: '#00acc1',
      700: '#0097a7',
      800: '#00838f',
      900: '#006064',
      A100: '#84ffff',
      A200: '#18ffff',
      A400: '#00e5ff',
      A700: '#00b8d4'
    };
  
    var teal = {
      50: '#e0f2f1',
      100: '#b2dfdb',
      200: '#80cbc4',
      300: '#4db6ac',
      400: '#26a69a',
      500: '#009688',
      600: '#00897b',
      700: '#00796b',
      800: '#00695c',
      900: '#004d40',
      A100: '#a7ffeb',
      A200: '#64ffda',
      A400: '#1de9b6',
      A700: '#00bfa5'
    };
  
    var green = {
      50: '#e8f5e9',
      100: '#c8e6c9',
      200: '#a5d6a7',
      300: '#81c784',
      400: '#66bb6a',
      500: '#4caf50',
      600: '#43a047',
      700: '#388e3c',
      800: '#2e7d32',
      900: '#1b5e20',
      A100: '#b9f6ca',
      A200: '#69f0ae',
      A400: '#00e676',
      A700: '#00c853'
    };
  
    var lightGreen = {
      50: '#f1f8e9',
      100: '#dcedc8',
      200: '#c5e1a5',
      300: '#aed581',
      400: '#9ccc65',
      500: '#8bc34a',
      600: '#7cb342',
      700: '#689f38',
      800: '#558b2f',
      900: '#33691e',
      A100: '#ccff90',
      A200: '#b2ff59',
      A400: '#76ff03',
      A700: '#64dd17'
    };
  
    var lime = {
      50: '#f9fbe7',
      100: '#f0f4c3',
      200: '#e6ee9c',
      300: '#dce775',
      400: '#d4e157',
      500: '#cddc39',
      600: '#c0ca33',
      700: '#afb42b',
      800: '#9e9d24',
      900: '#827717',
      A100: '#f4ff81',
      A200: '#eeff41',
      A400: '#c6ff00',
      A700: '#aeea00'
    };
  
    var yellow = {
      50: '#fffde7',
      100: '#fff9c4',
      200: '#fff59d',
      300: '#fff176',
      400: '#ffee58',
      500: '#ffeb3b',
      600: '#fdd835',
      700: '#fbc02d',
      800: '#f9a825',
      900: '#f57f17',
      A100: '#ffff8d',
      A200: '#ffff00',
      A400: '#ffea00',
      A700: '#ffd600'
    };
  
    var amber = {
      50: '#fff8e1',
      100: '#ffecb3',
      200: '#ffe082',
      300: '#ffd54f',
      400: '#ffca28',
      500: '#ffc107',
      600: '#ffb300',
      700: '#ffa000',
      800: '#ff8f00',
      900: '#ff6f00',
      A100: '#ffe57f',
      A200: '#ffd740',
      A400: '#ffc400',
      A700: '#ffab00'
    };
  
    var orange = {
      50: '#fff3e0',
      100: '#ffe0b2',
      200: '#ffcc80',
      300: '#ffb74d',
      400: '#ffa726',
      500: '#ff9800',
      600: '#fb8c00',
      700: '#f57c00',
      800: '#ef6c00',
      900: '#e65100',
      A100: '#ffd180',
      A200: '#ffab40',
      A400: '#ff9100',
      A700: '#ff6d00'
    };
  
    var deepOrange = {
      50: '#fbe9e7',
      100: '#ffccbc',
      200: '#ffab91',
      300: '#ff8a65',
      400: '#ff7043',
      500: '#ff5722',
      600: '#f4511e',
      700: '#e64a19',
      800: '#d84315',
      900: '#bf360c',
      A100: '#ff9e80',
      A200: '#ff6e40',
      A400: '#ff3d00',
      A700: '#dd2c00'
    };
  
    var brown = {
      50: '#efebe9',
      100: '#d7ccc8',
      200: '#bcaaa4',
      300: '#a1887f',
      400: '#8d6e63',
      500: '#795548',
      600: '#6d4c41',
      700: '#5d4037',
      800: '#4e342e',
      900: '#3e2723',
      A100: '#d7ccc8',
      A200: '#bcaaa4',
      A400: '#8d6e63',
      A700: '#5d4037'
    };
  
    var grey = {
      50: '#fafafa',
      100: '#f5f5f5',
      200: '#eeeeee',
      300: '#e0e0e0',
      400: '#bdbdbd',
      500: '#9e9e9e',
      600: '#757575',
      700: '#616161',
      800: '#424242',
      900: '#212121',
      A100: '#d5d5d5',
      A200: '#aaaaaa',
      A400: '#303030',
      A700: '#616161'
    };
  
    var blueGrey = {
      50: '#eceff1',
      100: '#cfd8dc',
      200: '#b0bec5',
      300: '#90a4ae',
      400: '#78909c',
      500: '#607d8b',
      600: '#546e7a',
      700: '#455a64',
      800: '#37474f',
      900: '#263238',
      A100: '#cfd8dc',
      A200: '#b0bec5',
      A400: '#78909c',
      A700: '#455a64'
    };
  
  
  
    var index = /*#__PURE__*/Object.freeze({
      common: common,
      red: red,
      pink: pink,
      purple: purple,
      deepPurple: deepPurple,
      indigo: indigo,
      blue: blue,
      lightBlue: lightBlue,
      cyan: cyan,
      teal: teal,
      green: green,
      lightGreen: lightGreen,
      lime: lime,
      yellow: yellow,
      amber: amber,
      orange: orange,
      deepOrange: deepOrange,
      brown: brown,
      grey: grey,
      blueGrey: blueGrey
    });
  
    var global$1 = (typeof global !== "undefined" ? global :
                typeof self !== "undefined" ? self :
                typeof window !== "undefined" ? window : {});
  
    if (typeof global$1.setTimeout === 'function') ;
    if (typeof global$1.clearTimeout === 'function') ;
  
    // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
    var performance$1 = global$1.performance || {};
    var performanceNow =
      performance$1.now        ||
      performance$1.mozNow     ||
      performance$1.msNow      ||
      performance$1.oNow       ||
      performance$1.webkitNow  ||
      function(){ return (new Date()).getTime() };
  
    var warning = function() {};
  
    {
      var printWarning = function printWarning(format, args) {
        var len = arguments.length;
        args = new Array(len > 1 ? len - 1 : 0);
        for (var key = 1; key < len; key++) {
          args[key - 1] = arguments[key];
        }
        var argIndex = 0;
        var message = 'Warning: ' +
          format.replace(/%s/g, function() {
            return args[argIndex++];
          });
        if (typeof console !== 'undefined') {
          console.error(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };
  
      warning = function(condition, format, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for (var key = 2; key < len; key++) {
          args[key - 2] = arguments[key];
        }
        if (format === undefined) {
          throw new Error(
              '`warning(condition, format, ...args)` requires a warning ' +
              'message argument'
          );
        }
        if (!condition) {
          printWarning.apply(null, [format].concat(args));
        }
      };
    }
  
    var warning_1 = warning;
  
    /**
     * Returns a number whose value is limited to the given range.
     *
     * @param {number} value The value to be clamped
     * @param {number} min The lower boundary of the output range
     * @param {number} max The upper boundary of the output range
     * @returns {number} A number in the range [min, max]
     */
  
    function clamp(value) {
      var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      warning_1(value >= min && value <= max, "Material-UI: the value provided ".concat(value, " is out of range [").concat(min, ", ").concat(max, "]."));
  
      if (value < min) {
        return min;
      }
  
      if (value > max) {
        return max;
      }
  
      return value;
    }
    /**
     * Converts a color from CSS hex format to CSS rgb format.
     *
     * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
     * @returns {string} A CSS rgb color string
     */
  
  
    function hexToRgb(color) {
      color = color.substr(1);
      var re = new RegExp(".{1,".concat(color.length / 3, "}"), 'g');
      var colors = color.match(re);
  
      if (colors && colors[0].length === 1) {
        colors = colors.map(function (n) {
          return n + n;
        });
      }
  
      return colors ? "rgb(".concat(colors.map(function (n) {
        return parseInt(n, 16);
      }).join(', '), ")") : '';
    }
    /**
     * Converts a color from hsl format to rgb format.
     *
     * @param {string} color - HSL color values
     * @returns {string} rgb color values
     */
  
    function hslToRgb(color) {
      color = decomposeColor(color);
      var _color = color,
          values = _color.values;
      var h = values[0];
      var s = values[1] / 100;
      var l = values[2] / 100;
      var a = s * Math.min(l, 1 - l);
  
      var f = function f(n) {
        var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;
        return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
      };
  
      var type = 'rgb';
      var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
  
      if (color.type === 'hsla') {
        type += 'a';
        rgb.push(values[3]);
      }
  
      return recomposeColor({
        type: type,
        values: rgb
      });
    }
    /**
     * Returns an object with the type and values of a color.
     *
     * Note: Does not support rgb % values.
     *
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @returns {object} - A MUI color object: {type: string, values: number[]}
     */
  
    function decomposeColor(color) {
      // Idempotent
      if (color.type) {
        return color;
      }
  
      if (color.charAt(0) === '#') {
        return decomposeColor(hexToRgb(color));
      }
  
      var marker = color.indexOf('(');
      var type = color.substring(0, marker);
  
      if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {
        throw new Error(["Material-UI: unsupported `".concat(color, "` color."), 'We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().'].join('\n'));
      }
  
      var values = color.substring(marker + 1, color.length - 1).split(',');
      values = values.map(function (value) {
        return parseFloat(value);
      });
      return {
        type: type,
        values: values
      };
    }
    /**
     * Converts a color object with type and values to a string.
     *
     * @param {object} color - Decomposed color
     * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'
     * @param {array} color.values - [n,n,n] or [n,n,n,n]
     * @returns {string} A CSS color string
     */
  
    function recomposeColor(color) {
      var type = color.type;
      var values = color.values;
  
      if (type.indexOf('rgb') !== -1) {
        // Only convert the first 3 values to int (i.e. not alpha)
        values = values.map(function (n, i) {
          return i < 3 ? parseInt(n, 10) : n;
        });
      } else if (type.indexOf('hsl') !== -1) {
        values[1] = "".concat(values[1], "%");
        values[2] = "".concat(values[2], "%");
      }
  
      return "".concat(type, "(").concat(values.join(', '), ")");
    }
    /**
     * Calculates the contrast ratio between two colors.
     *
     * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
     *
     * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @returns {number} A contrast ratio value in the range 0 - 21.
     */
  
    function getContrastRatio(foreground, background) {
      var lumA = getLuminance(foreground);
      var lumB = getLuminance(background);
      return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
    }
    /**
     * The relative brightness of any point in a color space,
     * normalized to 0 for darkest black and 1 for lightest white.
     *
     * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
     *
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @returns {number} The relative brightness of the color in the range 0 - 1
     */
  
    function getLuminance(color) {
      color = decomposeColor(color);
      var rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;
      rgb = rgb.map(function (val) {
        val /= 255; // normalized
  
        return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
      }); // Truncate at 3 digits
  
      return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
    }
    /**
     * Darken or lighten a color, depending on its luminance.
     * Light colors are darkened, dark colors are lightened.
     *
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
     * @returns {string} A CSS color string. Hex input values are returned as rgb
     */
  
    function emphasize(color) {
      var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;
      return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
    }
    /**
     * Set the absolute transparency of a color.
     * Any existing alpha values are overwritten.
     *
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @param {number} value - value to set the alpha channel to in the range 0 -1
     * @returns {string} A CSS color string. Hex input values are returned as rgb
     */
  
    function fade(color, value) {
      color = decomposeColor(color);
      value = clamp(value);
  
      if (color.type === 'rgb' || color.type === 'hsl') {
        color.type += 'a';
      }
  
      color.values[3] = value;
      return recomposeColor(color);
    }
    /**
     * Darkens a color.
     *
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @param {number} coefficient - multiplier in the range 0 - 1
     * @returns {string} A CSS color string. Hex input values are returned as rgb
     */
  
    function darken(color, coefficient) {
      color = decomposeColor(color);
      coefficient = clamp(coefficient);
  
      if (color.type.indexOf('hsl') !== -1) {
        color.values[2] *= 1 - coefficient;
      } else if (color.type.indexOf('rgb') !== -1) {
        for (var i = 0; i < 3; i += 1) {
          color.values[i] *= 1 - coefficient;
        }
      }
  
      return recomposeColor(color);
    }
    /**
     * Lightens a color.
     *
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @param {number} coefficient - multiplier in the range 0 - 1
     * @returns {string} A CSS color string. Hex input values are returned as rgb
     */
  
    function lighten(color, coefficient) {
      color = decomposeColor(color);
      coefficient = clamp(coefficient);
  
      if (color.type.indexOf('hsl') !== -1) {
        color.values[2] += (100 - color.values[2]) * coefficient;
      } else if (color.type.indexOf('rgb') !== -1) {
        for (var i = 0; i < 3; i += 1) {
          color.values[i] += (255 - color.values[i]) * coefficient;
        }
      }
  
      return recomposeColor(color);
    }
  
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
  
      return obj;
    }
  
    var defineProperty = _defineProperty;
  
    function unwrapExports (x) {
        return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }
  
    function createCommonjsModule(fn, module) {
        return module = { exports: {} }, fn(module, module.exports), module.exports;
    }
  
    var _extends_1 = createCommonjsModule(function (module) {
    function _extends() {
      module.exports = _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
  
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
  
        return target;
      };
  
      return _extends.apply(this, arguments);
    }
  
    module.exports = _extends;
    });
  
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
  
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
  
      return target;
    }
  
    var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;
  
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = objectWithoutPropertiesLoose(source, excluded);
      var key, i;
  
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
  
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
  
      return target;
    }
  
    var objectWithoutProperties = _objectWithoutProperties;
  
    var umd = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
        module.exports = factory();
    }(this, (function () {
    var isMergeableObject = function isMergeableObject(value) {
        return isNonNullObject(value)
            && !isSpecial(value)
    };
  
    function isNonNullObject(value) {
        return !!value && typeof value === 'object'
    }
  
    function isSpecial(value) {
        var stringValue = Object.prototype.toString.call(value);
  
        return stringValue === '[object RegExp]'
            || stringValue === '[object Date]'
            || isReactElement(value)
    }
  
    // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
    var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;
  
    function isReactElement(value) {
        return value.$$typeof === REACT_ELEMENT_TYPE
    }
  
    function emptyTarget(val) {
        return Array.isArray(val) ? [] : {}
    }
  
    function cloneUnlessOtherwiseSpecified(value, options) {
        return (options.clone !== false && options.isMergeableObject(value))
            ? deepmerge(emptyTarget(value), value, options)
            : value
    }
  
    function defaultArrayMerge(target, source, options) {
        return target.concat(source).map(function(element) {
            return cloneUnlessOtherwiseSpecified(element, options)
        })
    }
  
    function getMergeFunction(key, options) {
        if (!options.customMerge) {
            return deepmerge
        }
        var customMerge = options.customMerge(key);
        return typeof customMerge === 'function' ? customMerge : deepmerge
    }
  
    function mergeObject(target, source, options) {
        var destination = {};
        if (options.isMergeableObject(target)) {
            Object.keys(target).forEach(function(key) {
                destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
            });
        }
        Object.keys(source).forEach(function(key) {
            if (!options.isMergeableObject(source[key]) || !target[key]) {
                destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
            } else {
                destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
            }
        });
        return destination
    }
  
    function deepmerge(target, source, options) {
        options = options || {};
        options.arrayMerge = options.arrayMerge || defaultArrayMerge;
        options.isMergeableObject = options.isMergeableObject || isMergeableObject;
  
        var sourceIsArray = Array.isArray(source);
        var targetIsArray = Array.isArray(target);
        var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
  
        if (!sourceAndTargetTypesMatch) {
            return cloneUnlessOtherwiseSpecified(source, options)
        } else if (sourceIsArray) {
            return options.arrayMerge(target, source, options)
        } else {
            return mergeObject(target, source, options)
        }
    }
  
    deepmerge.all = function deepmergeAll(array, options) {
        if (!Array.isArray(array)) {
            throw new Error('first argument should be an array')
        }
  
        return array.reduce(function(prev, next) {
            return deepmerge(prev, next, options)
        }, {})
    };
  
    var deepmerge_1 = deepmerge;
  
    return deepmerge_1;
  
    })));
    });
  
    /*!
     * isobject <https://github.com/jonschlinkert/isobject>
     *
     * Copyright (c) 2014-2017, Jon Schlinkert.
     * Released under the MIT License.
     */
  
    function isObject(val) {
      return val != null && typeof val === 'object' && Array.isArray(val) === false;
    }
  
    /*!
     * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
     *
     * Copyright (c) 2014-2017, Jon Schlinkert.
     * Released under the MIT License.
     */
  
    function isObjectObject(o) {
      return isObject(o) === true
        && Object.prototype.toString.call(o) === '[object Object]';
    }
  
    function isPlainObject(o) {
      var ctor,prot;
  
      if (isObjectObject(o) === false) return false;
  
      // If has modified constructor
      ctor = o.constructor;
      if (typeof ctor !== 'function') return false;
  
      // If has modified prototype
      prot = ctor.prototype;
      if (isObjectObject(prot) === false) return false;
  
      // If constructor does not have an Object-specific method
      if (prot.hasOwnProperty('isPrototypeOf') === false) {
        return false;
      }
  
      // Most likely a plain Object
      return true;
    }
  
    // Sorted ASC by size. That's important.
    // It can't be configured as it's used statically for propTypes.
    var keys = ['xs', 'sm', 'md', 'lg', 'xl']; // Keep in mind that @media is inclusive by the CSS specification.
  
    function createBreakpoints(breakpoints) {
      var _breakpoints$values = breakpoints.values,
          values = _breakpoints$values === void 0 ? {
        xs: 0,
        sm: 600,
        md: 960,
        lg: 1280,
        xl: 1920
      } : _breakpoints$values,
          _breakpoints$unit = breakpoints.unit,
          unit = _breakpoints$unit === void 0 ? 'px' : _breakpoints$unit,
          _breakpoints$step = breakpoints.step,
          step = _breakpoints$step === void 0 ? 5 : _breakpoints$step,
          other = objectWithoutProperties(breakpoints, ["values", "unit", "step"]);
  
      function up(key) {
        var value = typeof values[key] === 'number' ? values[key] : key;
        return "@media (min-width:".concat(value).concat(unit, ")");
      }
  
      function down(key) {
        var endIndex = keys.indexOf(key) + 1;
        var upperbound = values[keys[endIndex]];
  
        if (endIndex === keys.length) {
          // xl down applies to all sizes
          return up('xs');
        }
  
        var value = typeof upperbound === 'number' && endIndex > 0 ? upperbound : key;
        return "@media (max-width:".concat(value - step / 100).concat(unit, ")");
      }
  
      function between(start, end) {
        var endIndex = keys.indexOf(end) + 1;
  
        if (endIndex === keys.length) {
          return up(start);
        }
  
        return "@media (min-width:".concat(values[start]).concat(unit, ") and ") + "(max-width:".concat(values[keys[endIndex]] - step / 100).concat(unit, ")");
      }
  
      function only(key) {
        return between(key, key);
      }
  
      function width(key) {
        return values[key];
      }
  
      return _extends_1({
        keys: keys,
        values: values,
        up: up,
        down: down,
        between: between,
        only: only,
        width: width
      }, other);
    }
  
    // import warning from 'warning';
    function createMixins(breakpoints, spacing, mixins) {
      var _toolbar;
  
      return _extends_1({
        gutters: function gutters() {
          var styles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          // To deprecate in v4.1
          //       warning(
          //         false,
          //         [
          //           'Material-UI: theme.mixins.gutters() is deprecated.',
          //           'You can use the source of the mixin directly:',
          //           `
          // paddingLeft: theme.spacing(2),
          // paddingRight: theme.spacing(2),
          // [theme.breakpoints.up('sm')]: {
          //   paddingLeft: theme.spacing(3),
          //   paddingRight: theme.spacing(3),
          // },
          // `,
          //         ].join('\n'),
          //       );
          return _extends_1({
            paddingLeft: spacing(2),
            paddingRight: spacing(2)
          }, styles, defineProperty({}, breakpoints.up('sm'), _extends_1({
            paddingLeft: spacing(3),
            paddingRight: spacing(3)
          }, styles[breakpoints.up('sm')])));
        },
        toolbar: (_toolbar = {
          minHeight: 56
        }, defineProperty(_toolbar, "".concat(breakpoints.up('xs'), " and (orientation: landscape)"), {
          minHeight: 48
        }), defineProperty(_toolbar, breakpoints.up('sm'), {
          minHeight: 64
        }), _toolbar)
      }, mixins);
    }
  
    var light = {
      // The colors used to style the text.
      text: {
        // The most important text.
        primary: 'rgba(0, 0, 0, 0.87)',
        // Secondary text.
        secondary: 'rgba(0, 0, 0, 0.54)',
        // Disabled text have even lower visual prominence.
        disabled: 'rgba(0, 0, 0, 0.38)',
        // Text hints.
        hint: 'rgba(0, 0, 0, 0.38)'
      },
      // The color used to divide different elements.
      divider: 'rgba(0, 0, 0, 0.12)',
      // The background colors used to style the surfaces.
      // Consistency between these values is important.
      background: {
        paper: common.white,
        default: grey[50]
      },
      // The colors used to style the action elements.
      action: {
        // The color of an active action like an icon button.
        active: 'rgba(0, 0, 0, 0.54)',
        // The color of an hovered action.
        hover: 'rgba(0, 0, 0, 0.08)',
        hoverOpacity: 0.08,
        // The color of a selected action.
        selected: 'rgba(0, 0, 0, 0.14)',
        // The color of a disabled action.
        disabled: 'rgba(0, 0, 0, 0.26)',
        // The background color of a disabled action.
        disabledBackground: 'rgba(0, 0, 0, 0.12)'
      }
    };
    var dark = {
      text: {
        primary: common.white,
        secondary: 'rgba(255, 255, 255, 0.7)',
        disabled: 'rgba(255, 255, 255, 0.5)',
        hint: 'rgba(255, 255, 255, 0.5)',
        icon: 'rgba(255, 255, 255, 0.5)'
      },
      divider: 'rgba(255, 255, 255, 0.12)',
      background: {
        paper: grey[800],
        default: '#303030'
      },
      action: {
        active: common.white,
        hover: 'rgba(255, 255, 255, 0.1)',
        hoverOpacity: 0.1,
        selected: 'rgba(255, 255, 255, 0.2)',
        disabled: 'rgba(255, 255, 255, 0.3)',
        disabledBackground: 'rgba(255, 255, 255, 0.12)'
      }
    };
  
    function addLightOrDark(intent, direction, shade, tonalOffset) {
      if (!intent[direction]) {
        if (intent.hasOwnProperty(shade)) {
          intent[direction] = intent[shade];
        } else if (direction === 'light') {
          intent.light = lighten(intent.main, tonalOffset);
        } else if (direction === 'dark') {
          intent.dark = darken(intent.main, tonalOffset * 1.5);
        }
      }
    }
  
    function createPalette(palette) {
      var _palette$primary = palette.primary,
          primary = _palette$primary === void 0 ? {
        light: indigo[300],
        main: indigo[500],
        dark: indigo[700]
      } : _palette$primary,
          _palette$secondary = palette.secondary,
          secondary = _palette$secondary === void 0 ? {
        light: pink.A200,
        main: pink.A400,
        dark: pink.A700
      } : _palette$secondary,
          _palette$error = palette.error,
          error = _palette$error === void 0 ? {
        light: red[300],
        main: red[500],
        dark: red[700]
      } : _palette$error,
          _palette$type = palette.type,
          type = _palette$type === void 0 ? 'light' : _palette$type,
          _palette$contrastThre = palette.contrastThreshold,
          contrastThreshold = _palette$contrastThre === void 0 ? 3 : _palette$contrastThre,
          _palette$tonalOffset = palette.tonalOffset,
          tonalOffset = _palette$tonalOffset === void 0 ? 0.2 : _palette$tonalOffset,
          other = objectWithoutProperties(palette, ["primary", "secondary", "error", "type", "contrastThreshold", "tonalOffset"]); // Use the same logic as
      // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
      // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54
  
  
      function getContrastText(background) {
        warning_1(background, "Material-UI: missing background argument in getContrastText(".concat(background, ")."));
        var contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
  
        {
          var contrast = getContrastRatio(background, contrastText);
          warning_1(contrast >= 3, ["Material-UI: the contrast ratio of ".concat(contrast, ":1 for ").concat(contrastText, " on ").concat(background), 'falls below the WACG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\n'));
        }
  
        return contrastText;
      }
  
      function augmentColor(color) {
        var mainShade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
        var lightShade = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 300;
        var darkShade = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 700;
        color = _extends_1({}, color);
  
        if (!color.main && color[mainShade]) {
          color.main = color[mainShade];
        }
  
        if (!color.main) {
          throw new Error(['Material-UI: the color provided to augmentColor(color) is invalid.', "The color object needs to have a `main` property or a `".concat(mainShade, "` property.")].join('\n'));
        }
  
        addLightOrDark(color, 'light', lightShade, tonalOffset);
        addLightOrDark(color, 'dark', darkShade, tonalOffset);
  
        if (!color.contrastText) {
          color.contrastText = getContrastText(color.main);
        }
  
        return color;
      }
  
      var types = {
        dark: dark,
        light: light
      };
      warning_1(types[type], "Material-UI: the palette type `".concat(type, "` is not supported."));
      var paletteOutput = umd(_extends_1({
        // A collection of common colors.
        common: common,
        // The palette type, can be light or dark.
        type: type,
        // The colors used to represent primary interface elements for a user.
        primary: augmentColor(primary),
        // The colors used to represent secondary interface elements for a user.
        secondary: augmentColor(secondary, 'A400', 'A200', 'A700'),
        // The colors used to represent interface elements that the user should be made aware of.
        error: augmentColor(error),
        // The grey colors.
        grey: grey,
        // Used by `getContrastText()` to maximize the contrast between the background and
        // the text.
        contrastThreshold: contrastThreshold,
        // Take a background color and return the color of the text to maximize the contrast.
        getContrastText: getContrastText,
        // Generate a rich color object.
        augmentColor: augmentColor,
        // Used by the functions below to shift a color's luminance by approximately
        // two indexes within its tonal palette.
        // E.g., shift from Red 500 to Red 300 or Red 700.
        tonalOffset: tonalOffset
      }, types[type]), other, {
        clone: false // No need to clone deep
  
      });
      return paletteOutput;
    }
  
    function round(value) {
      return Math.round(value * 1e5) / 1e5;
    }
  
    var caseAllCaps = {
      textTransform: 'uppercase'
    };
    var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
    /**
     * @see @link{https://material.io/design/typography/the-type-system.html}
     * @see @link{https://material.io/design/typography/understanding-typography.html}
     */
  
    function createTypography(palette, typography) {
      var _ref = typeof typography === 'function' ? typography(palette) : typography,
          _ref$fontFamily = _ref.fontFamily,
          fontFamily = _ref$fontFamily === void 0 ? defaultFontFamily : _ref$fontFamily,
          _ref$fontSize = _ref.fontSize,
          fontSize = _ref$fontSize === void 0 ? 14 : _ref$fontSize,
          _ref$fontWeightLight = _ref.fontWeightLight,
          fontWeightLight = _ref$fontWeightLight === void 0 ? 300 : _ref$fontWeightLight,
          _ref$fontWeightRegula = _ref.fontWeightRegular,
          fontWeightRegular = _ref$fontWeightRegula === void 0 ? 400 : _ref$fontWeightRegula,
          _ref$fontWeightMedium = _ref.fontWeightMedium,
          fontWeightMedium = _ref$fontWeightMedium === void 0 ? 500 : _ref$fontWeightMedium,
          _ref$fontWeightBold = _ref.fontWeightBold,
          fontWeightBold = _ref$fontWeightBold === void 0 ? 700 : _ref$fontWeightBold,
          _ref$htmlFontSize = _ref.htmlFontSize,
          htmlFontSize = _ref$htmlFontSize === void 0 ? 16 : _ref$htmlFontSize,
          allVariants = _ref.allVariants,
          other = objectWithoutProperties(_ref, ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants"]);
  
      var coef = fontSize / 14;
  
      var pxToRem = function pxToRem(size) {
        return "".concat(size / htmlFontSize * coef, "rem");
      };
  
      var buildVariant = function buildVariant(fontWeight, size, lineHeight, letterSpacing, casing) {
        return _extends_1({
          fontFamily: fontFamily,
          fontWeight: fontWeight,
          fontSize: pxToRem(size),
          // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
          lineHeight: lineHeight
        }, fontFamily === defaultFontFamily ? {
          letterSpacing: "".concat(round(letterSpacing / size), "em")
        } : {}, casing, allVariants);
      };
  
      var variants = {
        h1: buildVariant(fontWeightLight, 96, 1, -1.5),
        h2: buildVariant(fontWeightLight, 60, 1, -0.5),
        h3: buildVariant(fontWeightRegular, 48, 1.04, 0),
        h4: buildVariant(fontWeightRegular, 34, 1.17, 0.25),
        h5: buildVariant(fontWeightRegular, 24, 1.33, 0),
        h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
        subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
        subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
        body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
        body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
        button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
        caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
        overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
      };
      return umd(_extends_1({
        htmlFontSize: htmlFontSize,
        pxToRem: pxToRem,
        round: round,
        fontFamily: fontFamily,
        fontSize: fontSize,
        fontWeightLight: fontWeightLight,
        fontWeightRegular: fontWeightRegular,
        fontWeightMedium: fontWeightMedium,
        fontWeightBold: fontWeightBold
      }, variants), other, {
        clone: false // No need to clone deep
  
      });
    }
  
    var shadowKeyUmbraOpacity = 0.2;
    var shadowKeyPenumbraOpacity = 0.14;
    var shadowAmbientShadowOpacity = 0.12;
  
    function createShadow() {
      return ["".concat(arguments.length <= 0 ? undefined : arguments[0], "px ").concat(arguments.length <= 1 ? undefined : arguments[1], "px ").concat(arguments.length <= 2 ? undefined : arguments[2], "px ").concat(arguments.length <= 3 ? undefined : arguments[3], "px rgba(0,0,0,").concat(shadowKeyUmbraOpacity, ")"), "".concat(arguments.length <= 4 ? undefined : arguments[4], "px ").concat(arguments.length <= 5 ? undefined : arguments[5], "px ").concat(arguments.length <= 6 ? undefined : arguments[6], "px ").concat(arguments.length <= 7 ? undefined : arguments[7], "px rgba(0,0,0,").concat(shadowKeyPenumbraOpacity, ")"), "".concat(arguments.length <= 8 ? undefined : arguments[8], "px ").concat(arguments.length <= 9 ? undefined : arguments[9], "px ").concat(arguments.length <= 10 ? undefined : arguments[10], "px ").concat(arguments.length <= 11 ? undefined : arguments[11], "px rgba(0,0,0,").concat(shadowAmbientShadowOpacity, ")")].join(',');
    }
  
    var shadows = ['none', createShadow(0, 1, 3, 0, 0, 1, 1, 0, 0, 2, 1, -1), createShadow(0, 1, 5, 0, 0, 2, 2, 0, 0, 3, 1, -2), createShadow(0, 1, 8, 0, 0, 3, 4, 0, 0, 3, 3, -2), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
  
    var shape = {
      borderRadius: 4
    };
  
    var warnOnce;
    function createSpacing() {
      var spacingInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;
  
      // Already transformed.
      if (spacingInput.mui) {
        return spacingInput;
      } // All components align to an 8dp square baseline grid for mobile, tablet, and desktop.
      // https://material.io/design/layout/understanding-layout.html#pixel-density
  
  
      var transform;
  
      if (typeof spacingInput === 'function') {
        transform = spacingInput;
      } else {
        warning_1(typeof spacingInput === 'number', ["Material-UI: the `theme.spacing` value (".concat(spacingInput, ") is invalid."), 'It should be a number or a function.'].join('\n'));
  
        transform = function transform(factor) {
          warning_1(typeof factor === 'number', "Expected spacing argument to be a number, got ".concat(factor));
          return spacingInput * factor;
        };
      }
  
      var spacing = function spacing() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
  
        warning_1(args.length <= 4, "Material-UI: Too many arguments provided, expected between 0 and 4, got ".concat(args.length));
  
        if (args.length === 0) {
          return transform(1);
        }
  
        if (args.length === 1) {
          return transform(args[0]);
        }
  
        return args.map(function (factor) {
          var output = transform(factor);
          return typeof output === 'number' ? "".concat(output, "px") : output;
        }).join(' ');
      }; // Backward compatibility, to remove in v5.
  
  
      Object.defineProperty(spacing, 'unit', {
        get: function get() {
          {
            warning_1(warnOnce && "development" !== 'test', ['Material-UI: theme.spacing.unit usage has been deprecated.', 'It will be removed in v5.', 'You can replace `theme.spacing.unit * y` with `theme.spacing(y)`.', '', 'You can use the `https://github.com/mui-org/material-ui/tree/master/packages/material-ui-codemod/README.md#theme-spacing-api` migration helper to make the process smoother.'].join('\n'));
            warnOnce = true;
          }
  
          return spacingInput;
        }
      });
      spacing.mui = true;
      return spacing;
    }
  
    // to learn the context in which each easing should be used.
  
    var easing = {
      // This is the most common easing curve.
      easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
      // Objects enter the screen at full velocity from off-screen and
      // slowly decelerate to a resting point.
      easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
      // Objects leave the screen at full velocity. They do not decelerate when off-screen.
      easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
      // The sharp curve is used by objects that may return to the screen at any time.
      sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
    }; // Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
    // to learn when use what timing
  
    var duration = {
      shortest: 150,
      shorter: 200,
      short: 250,
      // most basic recommended timing
      standard: 300,
      // this is to be used in complex animations
      complex: 375,
      // recommended when something is entering screen
      enteringScreen: 225,
      // recommended when something is leaving screen
      leavingScreen: 195
    };
    var formatMs = function formatMs(milliseconds) {
      return "".concat(Math.round(milliseconds), "ms");
    };
    var isString = function isString(value) {
      return typeof value === 'string';
    };
    var isNumber = function isNumber(value) {
      return !isNaN(parseFloat(value));
    };
    /**
     * @param {string|Array} props
     * @param {object} param
     * @param {string} param.prop
     * @param {number} param.duration
     * @param {string} param.easing
     * @param {number} param.delay
     */
  
    var transitions = {
      easing: easing,
      duration: duration,
      create: function create() {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['all'];
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  
        var _options$duration = options.duration,
            durationOption = _options$duration === void 0 ? duration.standard : _options$duration,
            _options$easing = options.easing,
            easingOption = _options$easing === void 0 ? easing.easeInOut : _options$easing,
            _options$delay = options.delay,
            delay = _options$delay === void 0 ? 0 : _options$delay,
            other = objectWithoutProperties(options, ["duration", "easing", "delay"]);
  
        warning_1(isString(props) || Array.isArray(props), 'Material-UI: argument "props" must be a string or Array.');
        warning_1(isNumber(durationOption) || isString(durationOption), "Material-UI: argument \"duration\" must be a number or a string but found ".concat(durationOption, "."));
        warning_1(isString(easingOption), 'Material-UI: argument "easing" must be a string.');
        warning_1(isNumber(delay) || isString(delay), 'Material-UI: argument "delay" must be a number or a string.');
        warning_1(Object.keys(other).length === 0, "Material-UI: unrecognized argument(s) [".concat(Object.keys(other).join(','), "]"));
        return (Array.isArray(props) ? props : [props]).map(function (animatedProp) {
          return "".concat(animatedProp, " ").concat(typeof durationOption === 'string' ? durationOption : formatMs(durationOption), " ").concat(easingOption, " ").concat(typeof delay === 'string' ? delay : formatMs(delay));
        }).join(',');
      },
      getAutoHeightDuration: function getAutoHeightDuration(height) {
        if (!height) {
          return 0;
        }
  
        var constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10
  
        return Math.round((4 + 15 * Math.pow(constant, 0.25) + constant / 5) * 10);
      }
    };
  
    // We need to centralize the zIndex definitions as they work
    // like global values in the browser.
    var zIndex = {
      mobileStepper: 1000,
      appBar: 1100,
      drawer: 1200,
      modal: 1300,
      snackbar: 1400,
      tooltip: 1500
    };
  
    function createMuiTheme() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  
      var _options$breakpoints = options.breakpoints,
          breakpointsInput = _options$breakpoints === void 0 ? {} : _options$breakpoints,
          _options$mixins = options.mixins,
          mixinsInput = _options$mixins === void 0 ? {} : _options$mixins,
          _options$palette = options.palette,
          paletteInput = _options$palette === void 0 ? {} : _options$palette,
          shadowsInput = options.shadows,
          spacingInput = options.spacing,
          _options$typography = options.typography,
          typographyInput = _options$typography === void 0 ? {} : _options$typography,
          other = objectWithoutProperties(options, ["breakpoints", "mixins", "palette", "shadows", "spacing", "typography"]);
  
      var palette = createPalette(paletteInput);
      var breakpoints = createBreakpoints(breakpointsInput);
      var spacing = createSpacing(spacingInput);
  
      var muiTheme = _extends_1({
        breakpoints: breakpoints,
        direction: 'ltr',
        mixins: createMixins(breakpoints, spacing, mixinsInput),
        overrides: {},
        // Inject custom styles
        palette: palette,
        props: {},
        // Inject custom properties
        shadows: shadowsInput || shadows,
        typography: createTypography(palette, typographyInput),
        spacing: spacing
      }, umd({
        shape: shape,
        transitions: transitions,
        zIndex: zIndex
      }, other, {
        isMergeableObject: isPlainObject
      }));
  
      {
        var pseudoClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected'];
  
        var traverse = function traverse(node, parentKey) {
          var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
          var key; // eslint-disable-next-line guard-for-in, no-restricted-syntax
  
          for (key in node) {
            var child = node[key];
  
            if (depth === 1) {
              if (key.indexOf('Mui') === 0 && child) {
                traverse(child, key, depth + 1);
              }
            } else if (pseudoClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
              warning_1(false, ["Material-UI: the `".concat(parentKey, "` component increases ") + "the CSS specificity of the `".concat(key, "` internal state."), 'You can not override it like this: ', JSON.stringify(node, null, 2), '', 'Instead, you need to use the $ruleName syntax:', JSON.stringify({
                root: defineProperty({}, "&$".concat(key), child)
              }, null, 2), '', 'https://material-ui.com/r/pseudo-classes-guide'].join('\n')); // Remove the style to prevent global conflicts.
  
              node[key] = {};
            }
          }
        };
  
        traverse(muiTheme.overrides);
      }
  
      warning_1(muiTheme.shadows.length === 25, 'Material-UI: the shadows array provided to createMuiTheme should support 25 elevations.');
      return muiTheme;
    }
  
    function chainPropTypes(propType1, propType2) {
  
      return function validate() {
        return propType1.apply(void 0, arguments) || propType2.apply(void 0, arguments);
      };
    }
  
    var reactIs_production_min = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports,"__esModule",{value:!0});
    var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?Symbol.for("react.memo"):
    60115,r=b?Symbol.for("react.lazy"):60116;function t(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case h:return a;default:return u}}case r:case q:case d:return u}}}function v(a){return t(a)===m}exports.typeOf=t;exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;
    exports.Fragment=e;exports.Lazy=r;exports.Memo=q;exports.Portal=d;exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||"object"===typeof a&&null!==a&&(a.$$typeof===r||a.$$typeof===q||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n)};exports.isAsyncMode=function(a){return v(a)||t(a)===l};exports.isConcurrentMode=v;exports.isContextConsumer=function(a){return t(a)===k};
    exports.isContextProvider=function(a){return t(a)===h};exports.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return t(a)===n};exports.isFragment=function(a){return t(a)===e};exports.isLazy=function(a){return t(a)===r};exports.isMemo=function(a){return t(a)===q};exports.isPortal=function(a){return t(a)===d};exports.isProfiler=function(a){return t(a)===g};exports.isStrictMode=function(a){return t(a)===f};
    exports.isSuspense=function(a){return t(a)===p};
    });
  
    unwrapExports(reactIs_production_min);
    var reactIs_production_min_1 = reactIs_production_min.typeOf;
    var reactIs_production_min_2 = reactIs_production_min.AsyncMode;
    var reactIs_production_min_3 = reactIs_production_min.ConcurrentMode;
    var reactIs_production_min_4 = reactIs_production_min.ContextConsumer;
    var reactIs_production_min_5 = reactIs_production_min.ContextProvider;
    var reactIs_production_min_6 = reactIs_production_min.Element;
    var reactIs_production_min_7 = reactIs_production_min.ForwardRef;
    var reactIs_production_min_8 = reactIs_production_min.Fragment;
    var reactIs_production_min_9 = reactIs_production_min.Lazy;
    var reactIs_production_min_10 = reactIs_production_min.Memo;
    var reactIs_production_min_11 = reactIs_production_min.Portal;
    var reactIs_production_min_12 = reactIs_production_min.Profiler;
    var reactIs_production_min_13 = reactIs_production_min.StrictMode;
    var reactIs_production_min_14 = reactIs_production_min.Suspense;
    var reactIs_production_min_15 = reactIs_production_min.isValidElementType;
    var reactIs_production_min_16 = reactIs_production_min.isAsyncMode;
    var reactIs_production_min_17 = reactIs_production_min.isConcurrentMode;
    var reactIs_production_min_18 = reactIs_production_min.isContextConsumer;
    var reactIs_production_min_19 = reactIs_production_min.isContextProvider;
    var reactIs_production_min_20 = reactIs_production_min.isElement;
    var reactIs_production_min_21 = reactIs_production_min.isForwardRef;
    var reactIs_production_min_22 = reactIs_production_min.isFragment;
    var reactIs_production_min_23 = reactIs_production_min.isLazy;
    var reactIs_production_min_24 = reactIs_production_min.isMemo;
    var reactIs_production_min_25 = reactIs_production_min.isPortal;
    var reactIs_production_min_26 = reactIs_production_min.isProfiler;
    var reactIs_production_min_27 = reactIs_production_min.isStrictMode;
    var reactIs_production_min_28 = reactIs_production_min.isSuspense;
  
    var reactIs_development = createCommonjsModule(function (module, exports) {
  
  
  
    {
      (function() {
  
    Object.defineProperty(exports, '__esModule', { value: true });
  
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
  
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
  
    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' ||
      // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
    }
  
    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */
  
    var lowPriorityWarning = function () {};
  
    {
      var printWarning = function (format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
  
        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });
        if (typeof console !== 'undefined') {
          console.warn(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };
  
      lowPriorityWarning = function (condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }
        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }
  
          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }
  
    var lowPriorityWarning$1 = lowPriorityWarning;
  
    function typeOf(object) {
      if (typeof object === 'object' && object !== null) {
        var $$typeof = object.$$typeof;
        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;
  
            switch (type) {
              case REACT_ASYNC_MODE_TYPE:
              case REACT_CONCURRENT_MODE_TYPE:
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
                return type;
              default:
                var $$typeofType = type && type.$$typeof;
  
                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;
                  default:
                    return $$typeof;
                }
            }
          case REACT_LAZY_TYPE:
          case REACT_MEMO_TYPE:
          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }
  
      return undefined;
    }
  
    // AsyncMode is deprecated along with isAsyncMode
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
  
    var hasWarnedAboutDeprecatedIsAsyncMode = false;
  
    // AsyncMode should be deprecated
    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true;
          lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
        }
      }
      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
  
    exports.typeOf = typeOf;
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isValidElementType = isValidElementType;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
      })();
    }
    });
  
    unwrapExports(reactIs_development);
    var reactIs_development_1 = reactIs_development.typeOf;
    var reactIs_development_2 = reactIs_development.AsyncMode;
    var reactIs_development_3 = reactIs_development.ConcurrentMode;
    var reactIs_development_4 = reactIs_development.ContextConsumer;
    var reactIs_development_5 = reactIs_development.ContextProvider;
    var reactIs_development_6 = reactIs_development.Element;
    var reactIs_development_7 = reactIs_development.ForwardRef;
    var reactIs_development_8 = reactIs_development.Fragment;
    var reactIs_development_9 = reactIs_development.Lazy;
    var reactIs_development_10 = reactIs_development.Memo;
    var reactIs_development_11 = reactIs_development.Portal;
    var reactIs_development_12 = reactIs_development.Profiler;
    var reactIs_development_13 = reactIs_development.StrictMode;
    var reactIs_development_14 = reactIs_development.Suspense;
    var reactIs_development_15 = reactIs_development.isValidElementType;
    var reactIs_development_16 = reactIs_development.isAsyncMode;
    var reactIs_development_17 = reactIs_development.isConcurrentMode;
    var reactIs_development_18 = reactIs_development.isContextConsumer;
    var reactIs_development_19 = reactIs_development.isContextProvider;
    var reactIs_development_20 = reactIs_development.isElement;
    var reactIs_development_21 = reactIs_development.isForwardRef;
    var reactIs_development_22 = reactIs_development.isFragment;
    var reactIs_development_23 = reactIs_development.isLazy;
    var reactIs_development_24 = reactIs_development.isMemo;
    var reactIs_development_25 = reactIs_development.isPortal;
    var reactIs_development_26 = reactIs_development.isProfiler;
    var reactIs_development_27 = reactIs_development.isStrictMode;
    var reactIs_development_28 = reactIs_development.isSuspense;
  
    var reactIs = createCommonjsModule(function (module) {
  
    {
      module.exports = reactIs_development;
    }
    });
    var reactIs_1 = reactIs.ForwardRef;
    var reactIs_2 = reactIs.isLazy;
    var reactIs_3 = reactIs.isMemo;
    var reactIs_4 = reactIs.isValidElementType;
  
    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
  
    function toObject(val) {
        if (val === null || val === undefined) {
            throw new TypeError('Object.assign cannot be called with null or undefined');
        }
  
        return Object(val);
    }
  
    function shouldUseNative() {
        try {
            if (!Object.assign) {
                return false;
            }
  
            // Detect buggy property enumeration order in older V8 versions.
  
            // https://bugs.chromium.org/p/v8/issues/detail?id=4118
            var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
            test1[5] = 'de';
            if (Object.getOwnPropertyNames(test1)[0] === '5') {
                return false;
            }
  
            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test2 = {};
            for (var i = 0; i < 10; i++) {
                test2['_' + String.fromCharCode(i)] = i;
            }
            var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
                return test2[n];
            });
            if (order2.join('') !== '0123456789') {
                return false;
            }
  
            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test3 = {};
            'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
                test3[letter] = letter;
            });
            if (Object.keys(Object.assign({}, test3)).join('') !==
                    'abcdefghijklmnopqrst') {
                return false;
            }
  
            return true;
        } catch (err) {
            // We don't expect any of the above to throw, but better to be safe.
            return false;
        }
    }
  
    var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
        var from;
        var to = toObject(target);
        var symbols;
  
        for (var s = 1; s < arguments.length; s++) {
            from = Object(arguments[s]);
  
            for (var key in from) {
                if (hasOwnProperty.call(from, key)) {
                    to[key] = from[key];
                }
            }
  
            if (getOwnPropertySymbols) {
                symbols = getOwnPropertySymbols(from);
                for (var i = 0; i < symbols.length; i++) {
                    if (propIsEnumerable.call(from, symbols[i])) {
                        to[symbols[i]] = from[symbols[i]];
                    }
                }
            }
        }
  
        return to;
    };
  
    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
  
    var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  
    var ReactPropTypesSecret_1 = ReactPropTypesSecret;
  
    var printWarning$1 = function() {};
  
    {
      var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
      var loggedTypeFailures = {};
      var has = Function.call.bind(Object.prototype.hasOwnProperty);
  
      printWarning$1 = function(text) {
        var message = 'Warning: ' + text;
        if (typeof console !== 'undefined') {
          console.error(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };
    }
  
    /**
     * Assert that the values match with the type specs.
     * Error messages are memorized and will only be shown once.
     *
     * @param {object} typeSpecs Map of name to a ReactPropType
     * @param {object} values Runtime values that need to be type-checked
     * @param {string} location e.g. "prop", "context", "child context"
     * @param {string} componentName Name of the component for error messages.
     * @param {?Function} getStack Returns the component stack.
     * @private
     */
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
              // This is intentionally an invariant that gets caught. It's the same
              // behavior as without this statement except with a better message.
              if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error(
                  (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
                  'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
                );
                err.name = 'Invariant Violation';
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning$1(
                (componentName || 'React class') + ': type specification of ' +
                location + ' `' + typeSpecName + '` is invalid; the type checker ' +
                'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
                'You may have forgotten to pass an argument to the type checker ' +
                'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
                'shape all require an argument).'
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              // Only monitor this failure once because there tends to be a lot of the
              // same error.
              loggedTypeFailures[error.message] = true;
  
              var stack = getStack ? getStack() : '';
  
              printWarning$1(
                'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
              );
            }
          }
        }
      }
    }
  
    /**
     * Resets warning cache when testing.
     *
     * @private
     */
    checkPropTypes.resetWarningCache = function() {
      {
        loggedTypeFailures = {};
      }
    };
  
    var checkPropTypes_1 = checkPropTypes;
  
    var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);
    var printWarning$2 = function() {};
  
    {
      printWarning$2 = function(text) {
        var message = 'Warning: ' + text;
        if (typeof console !== 'undefined') {
          console.error(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };
    }
  
    function emptyFunctionThatReturnsNull() {
      return null;
    }
  
    var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
      /* global Symbol */
      var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
  
      /**
       * Returns the iterator method function contained on the iterable object.
       *
       * Be sure to invoke the function with the iterable as context:
       *
       *     var iteratorFn = getIteratorFn(myIterable);
       *     if (iteratorFn) {
       *       var iterator = iteratorFn.call(myIterable);
       *       ...
       *     }
       *
       * @param {?object} maybeIterable
       * @return {?function}
       */
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === 'function') {
          return iteratorFn;
        }
      }
  
      /**
       * Collection of methods that allow declaration and validation of props that are
       * supplied to React components. Example usage:
       *
       *   var Props = require('ReactPropTypes');
       *   var MyArticle = React.createClass({
       *     propTypes: {
       *       // An optional string prop named "description".
       *       description: Props.string,
       *
       *       // A required enum prop named "category".
       *       category: Props.oneOf(['News','Photos']).isRequired,
       *
       *       // A prop named "dialog" that requires an instance of Dialog.
       *       dialog: Props.instanceOf(Dialog).isRequired
       *     },
       *     render: function() { ... }
       *   });
       *
       * A more formal specification of how these methods are used:
       *
       *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
       *   decl := ReactPropTypes.{type}(.isRequired)?
       *
       * Each and every declaration produces a function with the same signature. This
       * allows the creation of custom validation functions. For example:
       *
       *  var MyLink = React.createClass({
       *    propTypes: {
       *      // An optional string or URI prop named "href".
       *      href: function(props, propName, componentName) {
       *        var propValue = props[propName];
       *        if (propValue != null && typeof propValue !== 'string' &&
       *            !(propValue instanceof URI)) {
       *          return new Error(
       *            'Expected a string or an URI for ' + propName + ' in ' +
       *            componentName
       *          );
       *        }
       *      }
       *    },
       *    render: function() {...}
       *  });
       *
       * @internal
       */
  
      var ANONYMOUS = '<<anonymous>>';
  
      // Important!
      // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        symbol: createPrimitiveTypeChecker('symbol'),
  
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker,
      };
  
      /**
       * inlined Object.is polyfill to avoid requiring consumers ship their own
       * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
       */
      /*eslint-disable no-self-compare*/
      function is(x, y) {
        // SameValue algorithm
        if (x === y) {
          // Steps 1-5, 7-10
          // Steps 6.b-6.e: +0 != -0
          return x !== 0 || 1 / x === 1 / y;
        } else {
          // Step 6.a: NaN == NaN
          return x !== x && y !== y;
        }
      }
      /*eslint-enable no-self-compare*/
  
      /**
       * We use an Error-like object for backward compatibility as people may call
       * PropTypes directly and inspect their output. However, we don't use real
       * Errors anymore. We don't inspect their stack anyway, and creating them
       * is prohibitively expensive if they are created too often, such as what
       * happens in oneOfType() for any type before the one that matched.
       */
      function PropTypeError(message) {
        this.message = message;
        this.stack = '';
      }
      // Make `instanceof Error` still work for returned errors.
      PropTypeError.prototype = Error.prototype;
  
      function createChainableTypeChecker(validate) {
        {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
  
          if (secret !== ReactPropTypesSecret_1) {
            if (throwOnDirectAccess) {
              // New behavior only for users of `prop-types` package
              var err = new Error(
                'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
                'Use `PropTypes.checkPropTypes()` to call them. ' +
                'Read more at http://fb.me/use-check-prop-types'
              );
              err.name = 'Invariant Violation';
              throw err;
            } else if (typeof console !== 'undefined') {
              // Old behavior for people using React.PropTypes
              var cacheKey = componentName + ':' + propName;
              if (
                !manualPropTypeCallCache[cacheKey] &&
                // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3
              ) {
                printWarning$2(
                  'You are manually calling a React.PropTypes validation ' +
                  'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
                  'and will throw in the standalone `prop-types` package. ' +
                  'You may be seeing this warning due to a third-party PropTypes ' +
                  'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
              }
              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
  
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
  
        return chainedCheckType;
      }
  
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            // `propValue` being instance of, say, date/regexp, pass the 'object'
            // check, but we can offer a more precise error message here rather than
            // 'of type `object`'.
            var preciseType = getPreciseType(propValue);
  
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
  
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
  
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== 'function') {
            return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
  
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
  
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!reactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
  
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
  
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          {
            if (arguments.length > 1) {
              printWarning$2(
                'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
                'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
              );
            } else {
              printWarning$2('Invalid argument supplied to oneOf, expected an array.');
            }
          }
          return emptyFunctionThatReturnsNull;
        }
  
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
  
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === 'symbol') {
              return String(value);
            }
            return value;
          });
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
        }
        return createChainableTypeChecker(validate);
      }
  
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== 'function') {
            return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== 'object') {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
          }
          for (var key in propValue) {
            if (has$1(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
  
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          printWarning$2('Invalid argument supplied to oneOfType, expected an instance of array.');
          return emptyFunctionThatReturnsNull;
        }
  
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== 'function') {
            printWarning$2(
              'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
              'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
            );
            return emptyFunctionThatReturnsNull;
          }
        }
  
        function validate(props, propName, componentName, location, propFullName) {
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
              return null;
            }
          }
  
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
        }
        return createChainableTypeChecker(validate);
      }
  
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
  
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== 'object') {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (!checker) {
              continue;
            }
            var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
  
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== 'object') {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
          }
          // We need to check all keys in case some are required but missing from
          // props.
          var allKeys = objectAssign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (!checker) {
              return new PropTypeError(
                'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
                '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
                '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
            if (error) {
              return error;
            }
          }
          return null;
        }
  
        return createChainableTypeChecker(validate);
      }
  
      function isNode(propValue) {
        switch (typeof propValue) {
          case 'number':
          case 'string':
          case 'undefined':
            return true;
          case 'boolean':
            return !propValue;
          case 'object':
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
  
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                // Iterator will provide entry [k,v] tuples rather than values.
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
  
            return true;
          default:
            return false;
        }
      }
  
      function isSymbol(propType, propValue) {
        // Native Symbol.
        if (propType === 'symbol') {
          return true;
        }
  
        // falsy value can't be a Symbol
        if (!propValue) {
          return false;
        }
  
        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
        if (propValue['@@toStringTag'] === 'Symbol') {
          return true;
        }
  
        // Fallback for non-spec compliant Symbols which are polyfilled.
        if (typeof Symbol === 'function' && propValue instanceof Symbol) {
          return true;
        }
  
        return false;
      }
  
      // Equivalent of `typeof` but with special handling for array and regexp.
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return 'array';
        }
        if (propValue instanceof RegExp) {
          // Old webkits (at least until Android 4.0) return 'function' rather than
          // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
          // passes PropTypes.object.
          return 'object';
        }
        if (isSymbol(propType, propValue)) {
          return 'symbol';
        }
        return propType;
      }
  
      // This handles more types than `getPropType`. Only used for error messages.
      // See `createPrimitiveTypeChecker`.
      function getPreciseType(propValue) {
        if (typeof propValue === 'undefined' || propValue === null) {
          return '' + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === 'object') {
          if (propValue instanceof Date) {
            return 'date';
          } else if (propValue instanceof RegExp) {
            return 'regexp';
          }
        }
        return propType;
      }
  
      // Returns a string that is postfixed to a warning about an invalid type.
      // For example, "undefined" or "of type array"
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case 'array':
          case 'object':
            return 'an ' + type;
          case 'boolean':
          case 'date':
          case 'regexp':
            return 'a ' + type;
          default:
            return type;
        }
      }
  
      // Returns class name of the object, if any.
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
  
      ReactPropTypes.checkPropTypes = checkPropTypes_1;
      ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
  
      return ReactPropTypes;
    };
  
    var propTypes = createCommonjsModule(function (module) {
    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
  
    {
      var ReactIs = reactIs;
  
      // By explicitly using `prop-types` you are opting into new development behavior.
      // http://fb.me/prop-types-in-prod
      var throwOnDirectAccess = true;
      module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
    }
    });
    var propTypes_1 = propTypes.elementType;
    var propTypes_2 = propTypes.bool;
    var propTypes_3 = propTypes.func;
    var propTypes_4 = propTypes.object;
    var propTypes_5 = propTypes.oneOfType;
    var propTypes_6 = propTypes.element;
  
    function isClassComponent(elementType) {
      // elementType.prototype?.isReactComponent
      var _elementType$prototyp = elementType.prototype,
          prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;
      return Boolean(prototype.isReactComponent);
    }
  
    function acceptingRef(props, propName, componentName, location, propFullName) {
      var element = props[propName];
      var safePropName = propFullName || propName;
  
      if (element == null) {
        return null;
      }
  
      var warningHint;
      var elementType = element.type;
      /**
       * Blacklisting instead of whitelisting
       *
       * Blacklisting will miss some components, such as React.Fragment. Those will at least
       * trigger a warning in React.
       * We can't whitelist because there is no safe way to detect React.forwardRef
       * or class components. "Safe" means there's no public API.
       *
       */
  
      if (typeof elementType === 'function' && !isClassComponent(elementType)) {
        warningHint = 'Did you accidentally use a plain function component for an element instead?';
      }
  
      if (warningHint !== undefined) {
        return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an element that can hold a ref. ".concat(warningHint, " ") + 'For more information see https://material-ui.com/r/caveat-with-refs-guide');
      }
  
      return null;
    }
  
    var elementAcceptingRef = chainPropTypes(propTypes_6, acceptingRef);
    elementAcceptingRef.isRequired = chainPropTypes(propTypes_6.isRequired, acceptingRef);
  
    function isClassComponent$1(elementType) {
      // elementType.prototype?.isReactComponent
      var _elementType$prototyp = elementType.prototype,
          prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;
      return Boolean(prototype.isReactComponent);
    }
  
    function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var safePropName = propFullName || propName;
  
      if (propValue == null) {
        return null;
      }
  
      var warningHint;
      /**
       * Blacklisting instead of whitelisting
       *
       * Blacklisting will miss some components, such as React.Fragment. Those will at least
       * trigger a warning in React.
       * We can't whitelist because there is no safe way to detect React.forwardRef
       * or class components. "Safe" means there's no public API.
       *
       */
  
      if (typeof propValue === 'function' && !isClassComponent$1(propValue)) {
        warningHint = 'Did you accidentally provide a plain function component instead?';
      }
  
      if (warningHint !== undefined) {
        return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an element type that can hold a ref. ".concat(warningHint, " ") + 'For more information see https://material-ui.com/r/caveat-with-refs-guide');
      }
  
      return null;
    }
  
    var elementTypeAcceptingRef$1 = chainPropTypes(propTypes_1, elementTypeAcceptingRef);
  
    // This module is based on https://github.com/airbnb/prop-types-exact repository.
    // However, in order to reduce the number of dependencies and to remove some extra safe checks
    // the module was forked.
    // Only exported for test purposes.
    var specialProperty = "exact-prop: \u200B";
  
    function exactProp(propTypes) {
  
      return _extends_1({}, propTypes, defineProperty({}, specialProperty, function (props) {
        var unsupportedProps = Object.keys(props).filter(function (prop) {
          return !propTypes.hasOwnProperty(prop);
        });
  
        if (unsupportedProps.length > 0) {
          return new Error("The following properties are not supported: ".concat(unsupportedProps.map(function (prop) {
            return "`".concat(prop, "`");
          }).join(', '), ". Please remove them."));
        }
  
        return null;
      }));
    }
  
    var _typeof_1 = createCommonjsModule(function (module) {
    function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }
  
    function _typeof(obj) {
      if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
        module.exports = _typeof = function _typeof(obj) {
          return _typeof2(obj);
        };
      } else {
        module.exports = _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
        };
      }
  
      return _typeof(obj);
    }
  
    module.exports = _typeof;
    });
  
    // https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3
  
    var fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
    function getFunctionName(fn) {
      var match = "".concat(fn).match(fnNameMatchRegex);
      var name = match && match[1];
      return name || '';
    }
    /**
     * @param {function} Component
     * @param {string} fallback
     * @returns {string | undefined}
     */
  
    function getFunctionComponentName(Component) {
      var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      return Component.displayName || Component.name || getFunctionName(Component) || fallback;
    }
  
    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = getFunctionComponentName(innerType);
      return outerType.displayName || (functionName !== '' ? "".concat(wrapperName, "(").concat(functionName, ")") : wrapperName);
    }
    /**
     * cherry-pick from
     * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js
     * originally forked from recompose/getDisplayName with added IE 11 support
     *
     * @param {React.ReactType} Component
     * @returns {string | undefined}
     */
  
  
    function getDisplayName(Component) {
      if (Component == null) {
        return undefined;
      }
  
      if (typeof Component === 'string') {
        return Component;
      }
  
      if (typeof Component === 'function') {
        return getFunctionComponentName(Component, 'Component');
      }
  
      if (_typeof_1(Component) === 'object') {
        switch (Component.$$typeof) {
          case reactIs_1:
            return getWrappedName(Component, Component.render, 'ForwardRef');
  
          default:
            return undefined;
        }
      }
  
      return undefined;
    }
  
    /* eslint-disable */
  
    var hasSymbol = typeof Symbol === 'function';
    var nested = hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';
  
    /**
     * This is the list of the style rule name we use as drop in replacement for the built-in
     * pseudo classes (:checked, :disabled, :focused, etc.).
     *
     * Why do they exist in the first place?
     * These classes are used at a specificity of 2.
     * It allows them to override previously definied styles as well as
     * being untouched by simple user overrides.
     */
  
    var pseudoClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected']; // Returns a function which generates unique class names based on counters.
    // When new generator function is created, rule counter is reset.
    // We need to reset the rule counter for SSR for each request.
    //
    // It's inspired by
    // https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js
  
    function createGenerateClassName() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _options$disableGloba = options.disableGlobal,
          disableGlobal = _options$disableGloba === void 0 ? false : _options$disableGloba,
          _options$productionPr = options.productionPrefix,
          _options$seed = options.seed,
          seed = _options$seed === void 0 ? '' : _options$seed;
      var seedPrefix = seed === '' ? '' : "".concat(seed, "-");
      var ruleCounter = 0;
      return function (rule, styleSheet) {
        ruleCounter += 1;
        warning_1(ruleCounter < 1e10, ['Material-UI: you might have a memory leak.', 'The ruleCounter is not supposed to grow that much.'].join(''));
        var name = styleSheet.options.name; // Is a global static MUI style?
  
        if (name && name.indexOf('Mui') === 0 && !styleSheet.options.link && !disableGlobal) {
          // We can use a shorthand class name, we never use the keys to style the components.
          if (pseudoClasses.indexOf(rule.key) !== -1) {
            return "Mui-".concat(rule.key);
          }
  
          var prefix = "".concat(seedPrefix).concat(name, "-").concat(rule.key);
  
          if (!styleSheet.options.theme[nested] || seed !== '') {
            return prefix;
          }
  
          return "".concat(prefix, "-").concat(ruleCounter);
        }
  
        var suffix = "".concat(rule.key, "-").concat(ruleCounter); // Help with debuggability.
  
        if (styleSheet.options.classNamePrefix) {
          return "".concat(seedPrefix).concat(styleSheet.options.classNamePrefix, "-").concat(suffix);
        }
  
        return "".concat(seedPrefix).concat(suffix);
      };
    }
  
    function createStyles(styles) {
      return styles;
    }
  
    /* eslint-disable no-restricted-syntax */
    function getThemeProps(params) {
      var theme = params.theme,
          name = params.name,
          props = params.props;
  
      if (!theme || !theme.props || !theme.props[name]) {
        return props;
      } // Resolve default props, code borrow from React source.
      // https://github.com/facebook/react/blob/15a8f031838a553e41c0b66eb1bcf1da8448104d/packages/react/src/ReactElement.js#L221
  
  
      var defaultProps = theme.props[name];
      var propName;
  
      for (propName in defaultProps) {
        if (props[propName] === undefined) {
          props[propName] = defaultProps[propName];
        }
      }
  
      return props;
    }
  
    function _extends() {
      _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
  
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
  
        return target;
      };
  
      return _extends.apply(this, arguments);
    }
  
    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
  
    var isBrowser = (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && (typeof document === "undefined" ? "undefined" : _typeof(document)) === 'object' && document.nodeType === 9;
  
    function warning$1(condition, message) {
      {
        if (condition) {
          return;
        }
  
        var text = "Warning: " + message;
  
        if (typeof console !== 'undefined') {
          console.warn(text);
        }
  
        try {
          throw Error(text);
        } catch (x) {}
      }
    }
  
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
  
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
  
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
  
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
  
      return self;
    }
  
    var plainObjectConstrurctor = {}.constructor;
    function cloneStyle(style) {
      if (style == null || typeof style !== 'object') return style;
      if (Array.isArray(style)) return style.map(cloneStyle);
      if (style.constructor !== plainObjectConstrurctor) return style;
      var newStyle = {};
  
      for (var name in style) {
        newStyle[name] = cloneStyle(style[name]);
      }
  
      return newStyle;
    }
  
    /**
     * Create a rule instance.
     */
  
    function createRule(name, decl, options) {
      if (name === void 0) {
        name = 'unnamed';
      }
  
      var jss = options.jss;
      var declCopy = cloneStyle(decl);
      var rule = jss.plugins.onCreateRule(name, declCopy, options);
      if (rule) return rule; // It is an at-rule and it has no instance.
  
      if (name[0] === '@') {
        warning$1(false, "[JSS] Unknown rule " + name);
      }
  
      return null;
    }
  
    var join = function join(value, by) {
      var result = '';
  
      for (var i = 0; i < value.length; i++) {
        // Remove !important from the value, it will be readded later.
        if (value[i] === '!important') break;
        if (result) result += by;
        result += value[i];
      }
  
      return result;
    };
    /**
     * Converts array values to string.
     *
     * `margin: [['5px', '10px']]` > `margin: 5px 10px;`
     * `border: ['1px', '2px']` > `border: 1px, 2px;`
     * `margin: [['5px', '10px'], '!important']` > `margin: 5px 10px !important;`
     * `color: ['red', !important]` > `color: red !important;`
     */
  
  
    function toCssValue(value, ignoreImportant) {
      if (ignoreImportant === void 0) {
        ignoreImportant = false;
      }
  
      if (!Array.isArray(value)) return value;
      var cssValue = ''; // Support space separated values via `[['5px', '10px']]`.
  
      if (Array.isArray(value[0])) {
        for (var i = 0; i < value.length; i++) {
          if (value[i] === '!important') break;
          if (cssValue) cssValue += ', ';
          cssValue += join(value[i], ' ');
        }
      } else cssValue = join(value, ', '); // Add !important, because it was ignored.
  
  
      if (!ignoreImportant && value[value.length - 1] === '!important') {
        cssValue += ' !important';
      }
  
      return cssValue;
    }
  
    /**
     * Indent a string.
     * http://jsperf.com/array-join-vs-for
     */
    function indentStr(str, indent) {
      var result = '';
  
      for (var index = 0; index < indent; index++) {
        result += '  ';
      }
  
      return result + str;
    }
    /**
     * Converts a Rule to CSS string.
     */
  
  
    function toCss(selector, style, options) {
      if (options === void 0) {
        options = {};
      }
  
      var result = '';
      if (!style) return result;
      var _options = options,
          _options$indent = _options.indent,
          indent = _options$indent === void 0 ? 0 : _options$indent;
      var fallbacks = style.fallbacks;
      if (selector) indent++; // Apply fallbacks first.
  
      if (fallbacks) {
        // Array syntax {fallbacks: [{prop: value}]}
        if (Array.isArray(fallbacks)) {
          for (var index = 0; index < fallbacks.length; index++) {
            var fallback = fallbacks[index];
  
            for (var prop in fallback) {
              var value = fallback[prop];
  
              if (value != null) {
                if (result) result += '\n';
                result += "" + indentStr(prop + ": " + toCssValue(value) + ";", indent);
              }
            }
          }
        } else {
          // Object syntax {fallbacks: {prop: value}}
          for (var _prop in fallbacks) {
            var _value = fallbacks[_prop];
  
            if (_value != null) {
              if (result) result += '\n';
              result += "" + indentStr(_prop + ": " + toCssValue(_value) + ";", indent);
            }
          }
        }
      }
  
      for (var _prop2 in style) {
        var _value2 = style[_prop2];
  
        if (_value2 != null && _prop2 !== 'fallbacks') {
          if (result) result += '\n';
          result += "" + indentStr(_prop2 + ": " + toCssValue(_value2) + ";", indent);
        }
      } // Allow empty style in this case, because properties will be added dynamically.
  
  
      if (!result && !options.allowEmpty) return result; // When rule is being stringified before selector was defined.
  
      if (!selector) return result;
      indent--;
      if (result) result = "\n" + result + "\n";
      return indentStr(selector + " {" + result, indent) + indentStr('}', indent);
    }
  
    var escapeRegex = /([[\].#*$><+~=|^:(),"'`\s])/g;
    var nativeEscape = typeof CSS !== 'undefined' && CSS.escape;
    var escape = (function (str) {
      return nativeEscape ? nativeEscape(str) : str.replace(escapeRegex, '\\$1');
    });
  
    var BaseStyleRule =
    /*#__PURE__*/
    function () {
      function BaseStyleRule(key, style, options) {
        this.type = 'style';
        this.key = void 0;
        this.isProcessed = false;
        this.style = void 0;
        this.renderer = void 0;
        this.renderable = void 0;
        this.options = void 0;
        var sheet = options.sheet,
            Renderer = options.Renderer;
        this.key = key;
        this.options = options;
        this.style = style;
        if (sheet) this.renderer = sheet.renderer;else if (Renderer) this.renderer = new Renderer();
      }
      /**
       * Get or set a style property.
       */
  
  
      var _proto = BaseStyleRule.prototype;
  
      _proto.prop = function prop(name, value, options) {
        // It's a getter.
        if (value === undefined) return this.style[name]; // Don't do anything if the value has not changed.
  
        var force = options ? options.force : false;
        if (!force && this.style[name] === value) return this;
        var newValue = value;
  
        if (!options || options.process !== false) {
          newValue = this.options.jss.plugins.onChangeValue(value, name, this);
        }
  
        var isEmpty = newValue == null || newValue === false;
        var isDefined = name in this.style; // Value is empty and wasn't defined before.
  
        if (isEmpty && !isDefined && !force) return this; // We are going to remove this value.
  
        var remove = isEmpty && isDefined;
        if (remove) delete this.style[name];else this.style[name] = newValue; // Renderable is defined if StyleSheet option `link` is true.
  
        if (this.renderable && this.renderer) {
          if (remove) this.renderer.removeProperty(this.renderable, name);else this.renderer.setProperty(this.renderable, name, newValue);
          return this;
        }
  
        var sheet = this.options.sheet;
  
        if (sheet && sheet.attached) {
          warning$1(false, '[JSS] Rule is not linked. Missing sheet option "link: true".');
        }
  
        return this;
      };
  
      return BaseStyleRule;
    }();
    var StyleRule =
    /*#__PURE__*/
    function (_BaseStyleRule) {
      _inheritsLoose(StyleRule, _BaseStyleRule);
  
      function StyleRule(key, style, options) {
        var _this;
  
        _this = _BaseStyleRule.call(this, key, style, options) || this;
        _this.selectorText = void 0;
        _this.id = void 0;
        _this.renderable = void 0;
        var selector = options.selector,
            scoped = options.scoped,
            sheet = options.sheet,
            generateId = options.generateId;
  
        if (selector) {
          _this.selectorText = selector;
        } else if (scoped !== false) {
          _this.id = generateId(_assertThisInitialized(_assertThisInitialized(_this)), sheet);
          _this.selectorText = "." + escape(_this.id);
        }
  
        return _this;
      }
      /**
       * Set selector string.
       * Attention: use this with caution. Most browsers didn't implement
       * selectorText setter, so this may result in rerendering of entire Style Sheet.
       */
  
  
      var _proto2 = StyleRule.prototype;
  
      /**
       * Apply rule to an element inline.
       */
      _proto2.applyTo = function applyTo(renderable) {
        var renderer = this.renderer;
  
        if (renderer) {
          var json = this.toJSON();
  
          for (var prop in json) {
            renderer.setProperty(renderable, prop, json[prop]);
          }
        }
  
        return this;
      }
      /**
       * Returns JSON representation of the rule.
       * Fallbacks are not supported.
       * Useful for inline styles.
       */
      ;
  
      _proto2.toJSON = function toJSON() {
        var json = {};
  
        for (var prop in this.style) {
          var value = this.style[prop];
          if (typeof value !== 'object') json[prop] = value;else if (Array.isArray(value)) json[prop] = toCssValue(value);
        }
  
        return json;
      }
      /**
       * Generates a CSS string.
       */
      ;
  
      _proto2.toString = function toString(options) {
        var sheet = this.options.sheet;
        var link = sheet ? sheet.options.link : false;
        var opts = link ? _extends({}, options, {
          allowEmpty: true
        }) : options;
        return toCss(this.selectorText, this.style, opts);
      };
  
      _createClass(StyleRule, [{
        key: "selector",
        set: function set(selector) {
          if (selector === this.selectorText) return;
          this.selectorText = selector;
          var renderer = this.renderer,
              renderable = this.renderable;
          if (!renderable || !renderer) return;
          var hasChanged = renderer.setSelector(renderable, selector); // If selector setter is not implemented, rerender the rule.
  
          if (!hasChanged) {
            renderer.replaceRule(renderable, this);
          }
        }
        /**
         * Get selector string.
         */
        ,
        get: function get() {
          return this.selectorText;
        }
      }]);
  
      return StyleRule;
    }(BaseStyleRule);
    var pluginStyleRule = {
      onCreateRule: function onCreateRule(name, style, options) {
        if (name[0] === '@' || options.parent && options.parent.type === 'keyframes') {
          return null;
        }
  
        return new StyleRule(name, style, options);
      }
    };
  
    var defaultToStringOptions = {
      indent: 1,
      children: true
    };
    var atRegExp = /@([\w-]+)/;
    /**
     * Conditional rule for @media, @supports
     */
  
    var ConditionalRule =
    /*#__PURE__*/
    function () {
      function ConditionalRule(key, styles, options) {
        this.type = 'conditional';
        this.at = void 0;
        this.key = void 0;
        this.rules = void 0;
        this.options = void 0;
        this.isProcessed = false;
        this.renderable = void 0;
        this.key = key;
        var atMatch = key.match(atRegExp);
        this.at = atMatch ? atMatch[1] : 'unknown';
        this.options = options;
        this.rules = new RuleList(_extends({}, options, {
          parent: this
        }));
  
        for (var name in styles) {
          this.rules.add(name, styles[name]);
        }
  
        this.rules.process();
      }
      /**
       * Get a rule.
       */
  
  
      var _proto = ConditionalRule.prototype;
  
      _proto.getRule = function getRule(name) {
        return this.rules.get(name);
      }
      /**
       * Get index of a rule.
       */
      ;
  
      _proto.indexOf = function indexOf(rule) {
        return this.rules.indexOf(rule);
      }
      /**
       * Create and register rule, run plugins.
       */
      ;
  
      _proto.addRule = function addRule(name, style, options) {
        var rule = this.rules.add(name, style, options);
        if (!rule) return null;
        this.options.jss.plugins.onProcessRule(rule);
        return rule;
      }
      /**
       * Generates a CSS string.
       */
      ;
  
      _proto.toString = function toString(options) {
        if (options === void 0) {
          options = defaultToStringOptions;
        }
  
        if (options.children === false) {
          return this.key + " {}";
        }
  
        var children = this.rules.toString(options);
        return children ? this.key + " {\n" + children + "\n}" : '';
      };
  
      return ConditionalRule;
    }();
    var keyRegExp = /@media|@supports\s+/;
    var pluginConditionalRule = {
      onCreateRule: function onCreateRule(key, styles, options) {
        return keyRegExp.test(key) ? new ConditionalRule(key, styles, options) : null;
      }
    };
  
    var defaultToStringOptions$1 = {
      indent: 1,
      children: true
    };
    var nameRegExp = /@keyframes\s+([\w-]+)/;
    /**
     * Rule for @keyframes
     */
  
    var KeyframesRule =
    /*#__PURE__*/
    function () {
      function KeyframesRule(key, frames, options) {
        this.type = 'keyframes';
        this.at = '@keyframes';
        this.key = void 0;
        this.name = void 0;
        this.id = void 0;
        this.rules = void 0;
        this.options = void 0;
        this.isProcessed = false;
        this.renderable = void 0;
        var nameMatch = key.match(nameRegExp);
  
        if (nameMatch && nameMatch[1]) {
          this.name = nameMatch[1];
        } else {
          this.name = 'noname';
          warning$1(false, "[JSS] Bad keyframes name " + key);
        }
  
        this.key = this.type + "-" + this.name;
        this.options = options;
        var scoped = options.scoped,
            sheet = options.sheet,
            generateId = options.generateId;
        this.id = scoped === false ? this.name : escape(generateId(this, sheet));
        this.rules = new RuleList(_extends({}, options, {
          parent: this
        }));
  
        for (var name in frames) {
          this.rules.add(name, frames[name], _extends({}, options, {
            parent: this
          }));
        }
  
        this.rules.process();
      }
      /**
       * Generates a CSS string.
       */
  
  
      var _proto = KeyframesRule.prototype;
  
      _proto.toString = function toString(options) {
        if (options === void 0) {
          options = defaultToStringOptions$1;
        }
  
        if (options.children === false) {
          return this.at + " " + this.id + " {}";
        }
  
        var children = this.rules.toString(options);
        if (children) children = "\n" + children + "\n";
        return this.at + " " + this.id + " {" + children + "}";
      };
  
      return KeyframesRule;
    }();
    var keyRegExp$1 = /@keyframes\s+/;
    var refRegExp = /\$([\w-]+)/g;
  
    var findReferencedKeyframe = function findReferencedKeyframe(val, keyframes) {
      if (typeof val === 'string') {
        return val.replace(refRegExp, function (match, name) {
          if (name in keyframes) {
            return keyframes[name];
          }
  
          warning$1(false, "[JSS] Referenced keyframes rule \"" + name + "\" is not defined.");
          return match;
        });
      }
  
      return val;
    };
    /**
     * Replace the reference for a animation name.
     */
  
  
    var replaceRef = function replaceRef(style, prop, keyframes) {
      var value = style[prop];
      var refKeyframe = findReferencedKeyframe(value, keyframes);
  
      if (refKeyframe !== value) {
        style[prop] = refKeyframe;
      }
    };
  
    var plugin = {
      onCreateRule: function onCreateRule(key, frames, options) {
        return typeof key === 'string' && keyRegExp$1.test(key) ? new KeyframesRule(key, frames, options) : null;
      },
      // Animation name ref replacer.
      onProcessStyle: function onProcessStyle(style, rule, sheet) {
        if (rule.type !== 'style' || !sheet) return style;
        if ('animation-name' in style) replaceRef(style, 'animation-name', sheet.keyframes);
        if ('animation' in style) replaceRef(style, 'animation', sheet.keyframes);
        return style;
      },
      onChangeValue: function onChangeValue(val, prop, rule) {
        var sheet = rule.options.sheet;
  
        if (!sheet) {
          return val;
        }
  
        switch (prop) {
          case 'animation':
            return findReferencedKeyframe(val, sheet.keyframes);
  
          case 'animation-name':
            return findReferencedKeyframe(val, sheet.keyframes);
  
          default:
            return val;
        }
      }
    };
  
    var KeyframeRule =
    /*#__PURE__*/
    function (_BaseStyleRule) {
      _inheritsLoose(KeyframeRule, _BaseStyleRule);
  
      function KeyframeRule() {
        var _this;
  
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
  
        _this = _BaseStyleRule.call.apply(_BaseStyleRule, [this].concat(args)) || this;
        _this.renderable = void 0;
        return _this;
      }
  
      var _proto = KeyframeRule.prototype;
  
      /**
       * Generates a CSS string.
       */
      _proto.toString = function toString(options) {
        var sheet = this.options.sheet;
        var link = sheet ? sheet.options.link : false;
        var opts = link ? _extends({}, options, {
          allowEmpty: true
        }) : options;
        return toCss(this.key, this.style, opts);
      };
  
      return KeyframeRule;
    }(BaseStyleRule);
    var pluginKeyframeRule = {
      onCreateRule: function onCreateRule(key, style, options) {
        if (options.parent && options.parent.type === 'keyframes') {
          return new KeyframeRule(key, style, options);
        }
  
        return null;
      }
    };
  
    var FontFaceRule =
    /*#__PURE__*/
    function () {
      function FontFaceRule(key, style, options) {
        this.type = 'font-face';
        this.at = '@font-face';
        this.key = void 0;
        this.style = void 0;
        this.options = void 0;
        this.isProcessed = false;
        this.renderable = void 0;
        this.key = key;
        this.style = style;
        this.options = options;
      }
      /**
       * Generates a CSS string.
       */
  
  
      var _proto = FontFaceRule.prototype;
  
      _proto.toString = function toString(options) {
        if (Array.isArray(this.style)) {
          var str = '';
  
          for (var index = 0; index < this.style.length; index++) {
            str += toCss(this.key, this.style[index]);
            if (this.style[index + 1]) str += '\n';
          }
  
          return str;
        }
  
        return toCss(this.key, this.style, options);
      };
  
      return FontFaceRule;
    }();
    var pluginFontFaceRule = {
      onCreateRule: function onCreateRule(key, style, options) {
        return key === '@font-face' ? new FontFaceRule(key, style, options) : null;
      }
    };
  
    var ViewportRule =
    /*#__PURE__*/
    function () {
      function ViewportRule(key, style, options) {
        this.type = 'viewport';
        this.at = '@viewport';
        this.key = void 0;
        this.style = void 0;
        this.options = void 0;
        this.isProcessed = false;
        this.renderable = void 0;
        this.key = key;
        this.style = style;
        this.options = options;
      }
      /**
       * Generates a CSS string.
       */
  
  
      var _proto = ViewportRule.prototype;
  
      _proto.toString = function toString(options) {
        return toCss(this.key, this.style, options);
      };
  
      return ViewportRule;
    }();
    var pluginViewportRule = {
      onCreateRule: function onCreateRule(key, style, options) {
        return key === '@viewport' || key === '@-ms-viewport' ? new ViewportRule(key, style, options) : null;
      }
    };
  
    var SimpleRule =
    /*#__PURE__*/
    function () {
      function SimpleRule(key, value, options) {
        this.type = 'simple';
        this.key = void 0;
        this.value = void 0;
        this.options = void 0;
        this.isProcessed = false;
        this.renderable = void 0;
        this.key = key;
        this.value = value;
        this.options = options;
      }
      /**
       * Generates a CSS string.
       */
      // eslint-disable-next-line no-unused-vars
  
  
      var _proto = SimpleRule.prototype;
  
      _proto.toString = function toString(options) {
        if (Array.isArray(this.value)) {
          var str = '';
  
          for (var index = 0; index < this.value.length; index++) {
            str += this.key + " " + this.value[index] + ";";
            if (this.value[index + 1]) str += '\n';
          }
  
          return str;
        }
  
        return this.key + " " + this.value + ";";
      };
  
      return SimpleRule;
    }();
    var keysMap = {
      '@charset': true,
      '@import': true,
      '@namespace': true
    };
    var pluginSimpleRule = {
      onCreateRule: function onCreateRule(key, value, options) {
        return key in keysMap ? new SimpleRule(key, value, options) : null;
      }
    };
  
    var plugins = [pluginStyleRule, pluginConditionalRule, plugin, pluginKeyframeRule, pluginFontFaceRule, pluginViewportRule, pluginSimpleRule];
  
    var defaultUpdateOptions = {
      process: true
    };
    var forceUpdateOptions = {
      force: true,
      process: true
      /**
       * Contains rules objects and allows adding/removing etc.
       * Is used for e.g. by `StyleSheet` or `ConditionalRule`.
       */
  
    };
  
    var RuleList =
    /*#__PURE__*/
    function () {
      // Rules registry for access by .get() method.
      // It contains the same rule registered by name and by selector.
      // Original styles object.
      // Used to ensure correct rules order.
      function RuleList(options) {
        this.map = {};
        this.raw = {};
        this.index = [];
        this.options = void 0;
        this.classes = void 0;
        this.keyframes = void 0;
        this.options = options;
        this.classes = options.classes;
        this.keyframes = options.keyframes;
      }
      /**
       * Create and register rule.
       *
       * Will not render after Style Sheet was rendered the first time.
       */
  
  
      var _proto = RuleList.prototype;
  
      _proto.add = function add(key, decl, ruleOptions) {
        var _this$options = this.options,
            parent = _this$options.parent,
            sheet = _this$options.sheet,
            jss = _this$options.jss,
            Renderer = _this$options.Renderer,
            generateId = _this$options.generateId,
            scoped = _this$options.scoped;
  
        var options = _extends({
          classes: this.classes,
          parent: parent,
          sheet: sheet,
          jss: jss,
          Renderer: Renderer,
          generateId: generateId,
          scoped: scoped
        }, ruleOptions); // We need to save the original decl before creating the rule
        // because cache plugin needs to use it as a key to return a cached rule.
  
  
        this.raw[key] = decl;
  
        if (key in this.classes) {
          // For e.g. rules inside of @media container
          options.selector = "." + escape(this.classes[key]);
        }
  
        var rule = createRule(key, decl, options);
        if (!rule) return null;
        this.register(rule);
        var index = options.index === undefined ? this.index.length : options.index;
        this.index.splice(index, 0, rule);
        return rule;
      }
      /**
       * Get a rule.
       */
      ;
  
      _proto.get = function get(name) {
        return this.map[name];
      }
      /**
       * Delete a rule.
       */
      ;
  
      _proto.remove = function remove(rule) {
        this.unregister(rule);
        delete this.raw[rule.key];
        this.index.splice(this.indexOf(rule), 1);
      }
      /**
       * Get index of a rule.
       */
      ;
  
      _proto.indexOf = function indexOf(rule) {
        return this.index.indexOf(rule);
      }
      /**
       * Run `onProcessRule()` plugins on every rule.
       */
      ;
  
      _proto.process = function process() {
        var plugins$$1 = this.options.jss.plugins; // We need to clone array because if we modify the index somewhere else during a loop
        // we end up with very hard-to-track-down side effects.
  
        this.index.slice(0).forEach(plugins$$1.onProcessRule, plugins$$1);
      }
      /**
       * Register a rule in `.map` and `.classes` maps.
       */
      ;
  
      _proto.register = function register(rule) {
        this.map[rule.key] = rule;
  
        if (rule instanceof StyleRule) {
          this.map[rule.selector] = rule;
          if (rule.id) this.classes[rule.key] = rule.id;
        } else if (rule instanceof KeyframesRule && this.keyframes) {
          this.keyframes[rule.name] = rule.id;
        }
      }
      /**
       * Unregister a rule.
       */
      ;
  
      _proto.unregister = function unregister(rule) {
        delete this.map[rule.key];
  
        if (rule instanceof StyleRule) {
          delete this.map[rule.selector];
          delete this.classes[rule.key];
        } else if (rule instanceof KeyframesRule) {
          delete this.keyframes[rule.name];
        }
      }
      /**
       * Update the function values with a new data.
       */
      ;
  
      _proto.update = function update() {
        var name;
        var data;
        var options;
  
        if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {
          name = arguments.length <= 0 ? undefined : arguments[0]; // $FlowFixMe
  
          data = arguments.length <= 1 ? undefined : arguments[1]; // $FlowFixMe
  
          options = arguments.length <= 2 ? undefined : arguments[2];
        } else {
          data = arguments.length <= 0 ? undefined : arguments[0]; // $FlowFixMe
  
          options = arguments.length <= 1 ? undefined : arguments[1];
          name = null;
        }
  
        if (name) {
          this.onUpdate(data, this.get(name), options);
        } else {
          for (var index = 0; index < this.index.length; index++) {
            this.onUpdate(data, this.index[index], options);
          }
        }
      }
      /**
       * Execute plugins, update rule props.
       */
      ;
  
      _proto.onUpdate = function onUpdate(data, rule, options) {
        if (options === void 0) {
          options = defaultUpdateOptions;
        }
  
        var _this$options2 = this.options,
            plugins$$1 = _this$options2.jss.plugins,
            sheet = _this$options2.sheet; // It is a rules container like for e.g. ConditionalRule.
  
        if (rule.rules instanceof RuleList) {
          rule.rules.update(data, options);
          return;
        }
  
        var styleRule = rule;
        var style = styleRule.style;
        plugins$$1.onUpdate(data, rule, sheet, options); // We rely on a new `style` ref in case it was mutated during onUpdate hook.
  
        if (options.process && style && style !== styleRule.style) {
          // We need to run the plugins in case new `style` relies on syntax plugins.
          plugins$$1.onProcessStyle(styleRule.style, styleRule, sheet); // Update and add props.
  
          for (var prop in styleRule.style) {
            var nextValue = styleRule.style[prop];
            var prevValue = style[prop]; // We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.
            // We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.
  
            if (nextValue !== prevValue) {
              styleRule.prop(prop, nextValue, forceUpdateOptions);
            }
          } // Remove props.
  
  
          for (var _prop in style) {
            var _nextValue = styleRule.style[_prop];
            var _prevValue = style[_prop]; // We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.
            // We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.
  
            if (_nextValue == null && _nextValue !== _prevValue) {
              styleRule.prop(_prop, null, forceUpdateOptions);
            }
          }
        }
      }
      /**
       * Convert rules to a CSS string.
       */
      ;
  
      _proto.toString = function toString(options) {
        var str = '';
        var sheet = this.options.sheet;
        var link = sheet ? sheet.options.link : false;
  
        for (var index = 0; index < this.index.length; index++) {
          var rule = this.index[index];
          var css = rule.toString(options); // No need to render an empty rule.
  
          if (!css && !link) continue;
          if (str) str += '\n';
          str += css;
        }
  
        return str;
      };
  
      return RuleList;
    }();
  
    var StyleSheet =
    /*#__PURE__*/
    function () {
      function StyleSheet(styles, options) {
        this.options = void 0;
        this.deployed = void 0;
        this.attached = void 0;
        this.rules = void 0;
        this.renderer = void 0;
        this.classes = void 0;
        this.keyframes = void 0;
        this.queue = void 0;
        this.attached = false;
        this.deployed = false;
        this.classes = {};
        this.keyframes = {};
        this.options = _extends({}, options, {
          sheet: this,
          parent: this,
          classes: this.classes,
          keyframes: this.keyframes
        });
  
        if (options.Renderer) {
          this.renderer = new options.Renderer(this);
        }
  
        this.rules = new RuleList(this.options);
  
        for (var name in styles) {
          this.rules.add(name, styles[name]);
        }
  
        this.rules.process();
      }
      /**
       * Attach renderable to the render tree.
       */
  
  
      var _proto = StyleSheet.prototype;
  
      _proto.attach = function attach() {
        if (this.attached) return this;
        if (this.renderer) this.renderer.attach();
        this.attached = true; // Order is important, because we can't use insertRule API if style element is not attached.
  
        if (!this.deployed) this.deploy();
        return this;
      }
      /**
       * Remove renderable from render tree.
       */
      ;
  
      _proto.detach = function detach() {
        if (!this.attached) return this;
        if (this.renderer) this.renderer.detach();
        this.attached = false;
        return this;
      }
      /**
       * Add a rule to the current stylesheet.
       * Will insert a rule also after the stylesheet has been rendered first time.
       */
      ;
  
      _proto.addRule = function addRule(name, decl, options) {
        var queue = this.queue; // Plugins can create rules.
        // In order to preserve the right order, we need to queue all `.addRule` calls,
        // which happen after the first `rules.add()` call.
  
        if (this.attached && !queue) this.queue = [];
        var rule = this.rules.add(name, decl, options);
        if (!rule) return null;
        this.options.jss.plugins.onProcessRule(rule);
  
        if (this.attached) {
          if (!this.deployed) return rule; // Don't insert rule directly if there is no stringified version yet.
          // It will be inserted all together when .attach is called.
  
          if (queue) queue.push(rule);else {
            this.insertRule(rule);
  
            if (this.queue) {
              this.queue.forEach(this.insertRule, this);
              this.queue = undefined;
            }
          }
          return rule;
        } // We can't add rules to a detached style node.
        // We will redeploy the sheet once user will attach it.
  
  
        this.deployed = false;
        return rule;
      }
      /**
       * Insert rule into the StyleSheet
       */
      ;
  
      _proto.insertRule = function insertRule(rule) {
        if (this.renderer) {
          this.renderer.insertRule(rule);
        }
      }
      /**
       * Create and add rules.
       * Will render also after Style Sheet was rendered the first time.
       */
      ;
  
      _proto.addRules = function addRules(styles, options) {
        var added = [];
  
        for (var name in styles) {
          var rule = this.addRule(name, styles[name], options);
          if (rule) added.push(rule);
        }
  
        return added;
      }
      /**
       * Get a rule by name.
       */
      ;
  
      _proto.getRule = function getRule(name) {
        return this.rules.get(name);
      }
      /**
       * Delete a rule by name.
       * Returns `true`: if rule has been deleted from the DOM.
       */
      ;
  
      _proto.deleteRule = function deleteRule(name) {
        var rule = this.rules.get(name);
        if (!rule) return false;
        this.rules.remove(rule);
  
        if (this.attached && rule.renderable && this.renderer) {
          return this.renderer.deleteRule(rule.renderable);
        }
  
        return true;
      }
      /**
       * Get index of a rule.
       */
      ;
  
      _proto.indexOf = function indexOf(rule) {
        return this.rules.indexOf(rule);
      }
      /**
       * Deploy pure CSS string to a renderable.
       */
      ;
  
      _proto.deploy = function deploy() {
        if (this.renderer) this.renderer.deploy();
        this.deployed = true;
        return this;
      }
      /**
       * Update the function values with a new data.
       */
      ;
  
      _proto.update = function update() {
        var _this$rules;
  
        (_this$rules = this.rules).update.apply(_this$rules, arguments);
  
        return this;
      }
      /**
       * Convert rules to a CSS string.
       */
      ;
  
      _proto.toString = function toString(options) {
        return this.rules.toString(options);
      };
  
      return StyleSheet;
    }();
  
    var PluginsRegistry =
    /*#__PURE__*/
    function () {
      function PluginsRegistry() {
        this.plugins = {
          internal: [],
          external: []
        };
        this.registry = void 0;
      }
  
      var _proto = PluginsRegistry.prototype;
  
      /**
       * Call `onCreateRule` hooks and return an object if returned by a hook.
       */
      _proto.onCreateRule = function onCreateRule(name, decl, options) {
        for (var i = 0; i < this.registry.onCreateRule.length; i++) {
          var rule = this.registry.onCreateRule[i](name, decl, options);
          if (rule) return rule;
        }
  
        return null;
      }
      /**
       * Call `onProcessRule` hooks.
       */
      ;
  
      _proto.onProcessRule = function onProcessRule(rule) {
        if (rule.isProcessed) return;
        var sheet = rule.options.sheet;
  
        for (var i = 0; i < this.registry.onProcessRule.length; i++) {
          this.registry.onProcessRule[i](rule, sheet);
        }
  
        if (rule.style) this.onProcessStyle(rule.style, rule, sheet);
        rule.isProcessed = true;
      }
      /**
       * Call `onProcessStyle` hooks.
       */
      ;
  
      _proto.onProcessStyle = function onProcessStyle(style, rule, sheet) {
        for (var i = 0; i < this.registry.onProcessStyle.length; i++) {
          // $FlowFixMe
          rule.style = this.registry.onProcessStyle[i](rule.style, rule, sheet);
        }
      }
      /**
       * Call `onProcessSheet` hooks.
       */
      ;
  
      _proto.onProcessSheet = function onProcessSheet(sheet) {
        for (var i = 0; i < this.registry.onProcessSheet.length; i++) {
          this.registry.onProcessSheet[i](sheet);
        }
      }
      /**
       * Call `onUpdate` hooks.
       */
      ;
  
      _proto.onUpdate = function onUpdate(data, rule, sheet, options) {
        for (var i = 0; i < this.registry.onUpdate.length; i++) {
          this.registry.onUpdate[i](data, rule, sheet, options);
        }
      }
      /**
       * Call `onChangeValue` hooks.
       */
      ;
  
      _proto.onChangeValue = function onChangeValue(value, prop, rule) {
        var processedValue = value;
  
        for (var i = 0; i < this.registry.onChangeValue.length; i++) {
          processedValue = this.registry.onChangeValue[i](processedValue, prop, rule);
        }
  
        return processedValue;
      }
      /**
       * Register a plugin.
       */
      ;
  
      _proto.use = function use(newPlugin, options) {
        if (options === void 0) {
          options = {
            queue: 'external'
          };
        }
  
        var plugins = this.plugins[options.queue]; // Avoids applying same plugin twice, at least based on ref.
  
        if (plugins.indexOf(newPlugin) !== -1) {
          return;
        }
  
        plugins.push(newPlugin);
        this.registry = [].concat(this.plugins.external, this.plugins.internal).reduce(function (registry, plugin) {
          for (var name in plugin) {
            if (name in registry) {
              registry[name].push(plugin[name]);
            } else {
              warning$1(false, "[JSS] Unknown hook \"" + name + "\".");
            }
          }
  
          return registry;
        }, {
          onCreateRule: [],
          onProcessRule: [],
          onProcessStyle: [],
          onProcessSheet: [],
          onChangeValue: [],
          onUpdate: []
        });
      };
  
      return PluginsRegistry;
    }();
  
    /**
     * Sheets registry to access them all at one place.
     */
    var SheetsRegistry =
    /*#__PURE__*/
    function () {
      function SheetsRegistry() {
        this.registry = [];
      }
  
      var _proto = SheetsRegistry.prototype;
  
      /**
       * Register a Style Sheet.
       */
      _proto.add = function add(sheet) {
        var registry = this.registry;
        var index = sheet.options.index;
        if (registry.indexOf(sheet) !== -1) return;
  
        if (registry.length === 0 || index >= this.index) {
          registry.push(sheet);
          return;
        } // Find a position.
  
  
        for (var i = 0; i < registry.length; i++) {
          if (registry[i].options.index > index) {
            registry.splice(i, 0, sheet);
            return;
          }
        }
      }
      /**
       * Reset the registry.
       */
      ;
  
      _proto.reset = function reset() {
        this.registry = [];
      }
      /**
       * Remove a Style Sheet.
       */
      ;
  
      _proto.remove = function remove(sheet) {
        var index = this.registry.indexOf(sheet);
        this.registry.splice(index, 1);
      }
      /**
       * Convert all attached sheets to a CSS string.
       */
      ;
  
      _proto.toString = function toString(options) {
        return this.registry.filter(function (sheet) {
          return sheet.attached;
        }).map(function (sheet) {
          return sheet.toString(options);
        }).join('\n');
      };
  
      _createClass(SheetsRegistry, [{
        key: "index",
  
        /**
         * Current highest index number.
         */
        get: function get() {
          return this.registry.length === 0 ? 0 : this.registry[this.registry.length - 1].options.index;
        }
      }]);
  
      return SheetsRegistry;
    }();
  
    /**
     * This is a global sheets registry. Only DomRenderer will add sheets to it.
     * On the server one should use an own SheetsRegistry instance and add the
     * sheets to it, because you need to make sure to create a new registry for
     * each request in order to not leak sheets across requests.
     */
  
    var sheets = new SheetsRegistry();
  
    var global$1$1 = (typeof global$1 !== "undefined" ? global$1 :
                typeof self !== "undefined" ? self :
                typeof window !== "undefined" ? window : {});
  
    var ns = '2f1acc6c3a606b082e5eef5e54414ffb';
    if (global$1$1[ns] == null) global$1$1[ns] = 0; // Bundle may contain multiple JSS versions at the same time. In order to identify
    // the current version with just one short number and use it for classes generation
    // we use a counter. Also it is more accurate, because user can manually reevaluate
    // the module.
  
    var moduleId = global$1$1[ns]++;
  
    var maxRules = 1e10;
  
    /**
     * Returns a function which generates unique class names based on counters.
     * When new generator function is created, rule counter is reseted.
     * We need to reset the rule counter for SSR for each request.
     */
    var createGenerateId = function createGenerateId(options) {
      if (options === void 0) {
        options = {};
      }
  
      var ruleCounter = 0;
      var defaultPrefix = options.minify ? 'c' : '';
      return function (rule, sheet) {
        ruleCounter += 1;
  
        if (ruleCounter > maxRules) {
          warning$1(false, "[JSS] You might have a memory leak. Rule counter is at " + ruleCounter + ".");
        }
  
        var prefix = defaultPrefix;
        var jssId = '';
  
        if (sheet) {
          prefix = sheet.options.classNamePrefix || defaultPrefix;
          if (sheet.options.jss.id != null) jssId += sheet.options.jss.id;
        }
  
        if (options.minify) {
          return "" + prefix + moduleId + jssId + ruleCounter;
        }
  
        return prefix + rule.key + "-" + moduleId + (jssId && "-" + jssId) + "-" + ruleCounter;
      };
    };
  
    /**
     * Cache the value from the first time a function is called.
     */
    var memoize = function memoize(fn) {
      var value;
      return function () {
        if (!value) value = fn();
        return value;
      };
    };
    /**
     * Get a style property value.
     */
  
  
    function getPropertyValue(cssRule, prop) {
      try {
        // Support CSSTOM.
        if (cssRule.attributeStyleMap) {
          return cssRule.attributeStyleMap.get(prop);
        }
  
        return cssRule.style.getPropertyValue(prop);
      } catch (err) {
        // IE may throw if property is unknown.
        return '';
      }
    }
    /**
     * Set a style property.
     */
  
  
    function setProperty(cssRule, prop, value) {
      try {
        var cssValue = value;
  
        if (Array.isArray(value)) {
          cssValue = toCssValue(value, true);
  
          if (value[value.length - 1] === '!important') {
            cssRule.style.setProperty(prop, cssValue, 'important');
            return true;
          }
        } // Support CSSTOM.
  
  
        if (cssRule.attributeStyleMap) {
          cssRule.attributeStyleMap.set(prop, cssValue);
        } else {
          cssRule.style.setProperty(prop, cssValue);
        }
      } catch (err) {
        // IE may throw if property is unknown.
        return false;
      }
  
      return true;
    }
    /**
     * Remove a style property.
     */
  
  
    function removeProperty(cssRule, prop) {
      try {
        // Support CSSTOM.
        if (cssRule.attributeStyleMap) {
          cssRule.attributeStyleMap.delete(prop);
        } else {
          cssRule.style.removeProperty(prop);
        }
      } catch (err) {
        warning$1(false, "[JSS] DOMException \"" + err.message + "\" was thrown. Tried to remove property \"" + prop + "\".");
      }
    }
    /**
     * Set the selector.
     */
  
  
    function setSelector(cssRule, selectorText) {
      cssRule.selectorText = selectorText; // Return false if setter was not successful.
      // Currently works in chrome only.
  
      return cssRule.selectorText === selectorText;
    }
    /**
     * Gets the `head` element upon the first call and caches it.
     * We assume it can't be null.
     */
  
  
    var getHead = memoize(function () {
      return document.querySelector('head');
    });
    /**
     * Find attached sheet with an index higher than the passed one.
     */
  
    function findHigherSheet(registry, options) {
      for (var i = 0; i < registry.length; i++) {
        var sheet = registry[i];
  
        if (sheet.attached && sheet.options.index > options.index && sheet.options.insertionPoint === options.insertionPoint) {
          return sheet;
        }
      }
  
      return null;
    }
    /**
     * Find attached sheet with the highest index.
     */
  
  
    function findHighestSheet(registry, options) {
      for (var i = registry.length - 1; i >= 0; i--) {
        var sheet = registry[i];
  
        if (sheet.attached && sheet.options.insertionPoint === options.insertionPoint) {
          return sheet;
        }
      }
  
      return null;
    }
    /**
     * Find a comment with "jss" inside.
     */
  
  
    function findCommentNode(text) {
      var head = getHead();
  
      for (var i = 0; i < head.childNodes.length; i++) {
        var node = head.childNodes[i];
  
        if (node.nodeType === 8 && node.nodeValue.trim() === text) {
          return node;
        }
      }
  
      return null;
    }
  
    /**
     * Find a node before which we can insert the sheet.
     */
    function findPrevNode(options) {
      var registry = sheets.registry;
  
      if (registry.length > 0) {
        // Try to insert before the next higher sheet.
        var sheet = findHigherSheet(registry, options);
  
        if (sheet && sheet.renderer) {
          return {
            parent: sheet.renderer.element.parentNode,
            node: sheet.renderer.element
          };
        } // Otherwise insert after the last attached.
  
  
        sheet = findHighestSheet(registry, options);
  
        if (sheet && sheet.renderer) {
          return {
            parent: sheet.renderer.element.parentNode,
            node: sheet.renderer.element.nextSibling
          };
        }
      } // Try to find a comment placeholder if registry is empty.
  
  
      var insertionPoint = options.insertionPoint;
  
      if (insertionPoint && typeof insertionPoint === 'string') {
        var comment = findCommentNode(insertionPoint);
  
        if (comment) {
          return {
            parent: comment.parentNode,
            node: comment.nextSibling
          };
        } // If user specifies an insertion point and it can't be found in the document -
        // bad specificity issues may appear.
  
  
        warning$1(false, "[JSS] Insertion point \"" + insertionPoint + "\" not found.");
      }
  
      return false;
    }
    /**
     * Insert style element into the DOM.
     */
  
  
    function insertStyle(style, options) {
      var insertionPoint = options.insertionPoint;
      var nextNode = findPrevNode(options);
  
      if (nextNode !== false && nextNode.parent) {
        nextNode.parent.insertBefore(style, nextNode.node);
        return;
      } // Works with iframes and any node types.
  
  
      if (insertionPoint && typeof insertionPoint.nodeType === 'number') {
        // https://stackoverflow.com/questions/41328728/force-casting-in-flow
        var insertionPointElement = insertionPoint;
        var parentNode = insertionPointElement.parentNode;
        if (parentNode) parentNode.insertBefore(style, insertionPointElement.nextSibling);else warning$1(false, '[JSS] Insertion point is not in the DOM.');
        return;
      }
  
      getHead().appendChild(style);
    }
    /**
     * Read jss nonce setting from the page if the user has set it.
     */
  
  
    var getNonce = memoize(function () {
      var node = document.querySelector('meta[property="csp-nonce"]');
      return node ? node.getAttribute('content') : null;
    });
  
    var _insertRule = function insertRule(container, rule, index) {
      if (index === void 0) {
        index = container.cssRules.length;
      }
  
      try {
        if ('insertRule' in container) {
          var c = container;
          c.insertRule(rule, index);
        } // Keyframes rule.
        else if ('appendRule' in container) {
            var _c = container;
  
            _c.appendRule(rule);
          }
      } catch (err) {
        warning$1(false, "[JSS] Can not insert an unsupported rule \n" + rule);
        return false;
      }
  
      return container.cssRules[index];
    };
  
    var createStyle = function createStyle() {
      var el = document.createElement('style'); // Without it, IE will have a broken source order specificity if we
      // insert rules after we insert the style tag.
      // It seems to kick-off the source order specificity algorithm.
  
      el.textContent = '\n';
      return el;
    };
  
    var DomRenderer =
    /*#__PURE__*/
    function () {
      // HTMLStyleElement needs fixing https://github.com/facebook/flow/issues/2696
      function DomRenderer(sheet) {
        this.getPropertyValue = getPropertyValue;
        this.setProperty = setProperty;
        this.removeProperty = removeProperty;
        this.setSelector = setSelector;
        this.element = void 0;
        this.sheet = void 0;
        this.hasInsertedRules = false;
        // There is no sheet when the renderer is used from a standalone StyleRule.
        if (sheet) sheets.add(sheet);
        this.sheet = sheet;
  
        var _ref = this.sheet ? this.sheet.options : {},
            media = _ref.media,
            meta = _ref.meta,
            element = _ref.element;
  
        this.element = element || createStyle();
        this.element.setAttribute('data-jss', '');
        if (media) this.element.setAttribute('media', media);
        if (meta) this.element.setAttribute('data-meta', meta);
        var nonce = getNonce();
        if (nonce) this.element.setAttribute('nonce', nonce);
      }
      /**
       * Insert style element into render tree.
       */
  
  
      var _proto = DomRenderer.prototype;
  
      _proto.attach = function attach() {
        // In the case the element node is external and it is already in the DOM.
        if (this.element.parentNode || !this.sheet) return;
        insertStyle(this.element, this.sheet.options); // When rules are inserted using `insertRule` API, after `sheet.detach().attach()`
        // browsers remove those rules.
        // TODO figure out if its a bug and if it is known.
        // Workaround is to redeploy the sheet.
  
        if (this.hasInsertedRules) {
          this.hasInsertedRules = false;
          this.deploy();
        }
      }
      /**
       * Remove style element from render tree.
       */
      ;
  
      _proto.detach = function detach() {
        this.element.parentNode.removeChild(this.element);
      }
      /**
       * Inject CSS string into element.
       */
      ;
  
      _proto.deploy = function deploy() {
        var sheet = this.sheet;
        if (!sheet) return;
  
        if (sheet.options.link) {
          this.insertRules(sheet.rules);
          return;
        }
  
        this.element.textContent = "\n" + sheet.toString() + "\n";
      }
      /**
       * Insert RuleList into an element.
       */
      ;
  
      _proto.insertRules = function insertRules(rules, nativeParent) {
        for (var i = 0; i < rules.index.length; i++) {
          this.insertRule(rules.index[i], i, nativeParent);
        }
      }
      /**
       * Insert a rule into element.
       */
      ;
  
      _proto.insertRule = function insertRule(rule, index, nativeParent) {
        if (nativeParent === void 0) {
          nativeParent = this.element.sheet;
        }
  
        if (rule.rules) {
          var parent = rule;
          var latestNativeParent = nativeParent;
  
          if (rule.type === 'conditional' || rule.type === 'keyframes') {
            // We need to render the container without children first.
            latestNativeParent = _insertRule(nativeParent, parent.toString({
              children: false
            }), index);
  
            if (latestNativeParent === false) {
              return false;
            }
          }
  
          this.insertRules(parent.rules, latestNativeParent);
          return latestNativeParent;
        }
  
        var ruleStr = rule.toString();
        if (!ruleStr) return false;
  
        var nativeRule = _insertRule(nativeParent, ruleStr, index);
  
        if (nativeRule === false) {
          return false;
        }
  
        this.hasInsertedRules = true;
        rule.renderable = nativeRule;
        return nativeRule;
      }
      /**
       * Delete a rule.
       */
      ;
  
      _proto.deleteRule = function deleteRule(cssRule) {
        var sheet = this.element.sheet;
        var index = this.indexOf(cssRule);
        if (index === -1) return false;
        sheet.deleteRule(index);
        return true;
      }
      /**
       * Get index of a CSS Rule.
       */
      ;
  
      _proto.indexOf = function indexOf(cssRule) {
        var cssRules = this.element.sheet.cssRules;
  
        for (var index = 0; index < cssRules.length; index++) {
          if (cssRule === cssRules[index]) return index;
        }
  
        return -1;
      }
      /**
       * Generate a new CSS rule and replace the existing one.
       *
       * Only used for some old browsers because they can't set a selector.
       */
      ;
  
      _proto.replaceRule = function replaceRule(cssRule, rule) {
        var index = this.indexOf(cssRule);
        if (index === -1) return false;
        this.element.sheet.deleteRule(index);
        return this.insertRule(rule, index);
      }
      /**
       * Get all rules elements.
       */
      ;
  
      _proto.getRules = function getRules() {
        return this.element.sheet.cssRules;
      };
  
      return DomRenderer;
    }();
  
    var instanceCounter = 0;
  
    var Jss =
    /*#__PURE__*/
    function () {
      function Jss(options) {
        this.id = instanceCounter++;
        this.version = "10.0.0-alpha.17";
        this.plugins = new PluginsRegistry();
        this.options = {
          id: {
            minify: false
          },
          createGenerateId: createGenerateId,
          Renderer: isBrowser ? DomRenderer : null,
          plugins: []
        };
        this.generateId = createGenerateId({
          minify: false
        });
  
        for (var i = 0; i < plugins.length; i++) {
          this.plugins.use(plugins[i], {
            queue: 'internal'
          });
        }
  
        this.setup(options);
      }
      /**
       * Prepares various options, applies plugins.
       * Should not be used twice on the same instance, because there is no plugins
       * deduplication logic.
       */
  
  
      var _proto = Jss.prototype;
  
      _proto.setup = function setup(options) {
        if (options === void 0) {
          options = {};
        }
  
        if (options.createGenerateId) {
          this.options.createGenerateId = options.createGenerateId;
        }
  
        if (options.id) {
          this.options.id = _extends({}, this.options.id, options.id);
        }
  
        if (options.createGenerateId || options.id) {
          this.generateId = this.options.createGenerateId(this.options.id);
        }
  
        if (options.insertionPoint != null) this.options.insertionPoint = options.insertionPoint;
  
        if ('Renderer' in options) {
          this.options.Renderer = options.Renderer;
        } // eslint-disable-next-line prefer-spread
  
  
        if (options.plugins) this.use.apply(this, options.plugins);
        return this;
      }
      /**
       * Create a Style Sheet.
       */
      ;
  
      _proto.createStyleSheet = function createStyleSheet(styles, options) {
        if (options === void 0) {
          options = {};
        }
  
        var _options = options,
            index = _options.index;
  
        if (typeof index !== 'number') {
          index = sheets.index === 0 ? 0 : sheets.index + 1;
        }
  
        var sheet = new StyleSheet(styles, _extends({}, options, {
          jss: this,
          generateId: options.generateId || this.generateId,
          insertionPoint: this.options.insertionPoint,
          Renderer: this.options.Renderer,
          index: index
        }));
        this.plugins.onProcessSheet(sheet);
        return sheet;
      }
      /**
       * Detach the Style Sheet and remove it from the registry.
       */
      ;
  
      _proto.removeStyleSheet = function removeStyleSheet(sheet) {
        sheet.detach();
        sheets.remove(sheet);
        return this;
      }
      /**
       * Create a rule without a Style Sheet.
       */
      ;
  
      _proto.createRule = function createRule$$1(name, style, options) {
        if (style === void 0) {
          style = {};
        }
  
        if (options === void 0) {
          options = {};
        }
  
        // Enable rule without name for inline styles.
        if (typeof name === 'object') {
          return this.createRule(undefined, name, style);
        }
  
        var ruleOptions = _extends({}, options, {
          jss: this,
          Renderer: this.options.Renderer
        });
  
        if (!ruleOptions.generateId) ruleOptions.generateId = this.generateId;
        if (!ruleOptions.classes) ruleOptions.classes = {};
        if (!ruleOptions.keyframes) ruleOptions.keyframes = {};
  
        var rule = createRule(name, style, ruleOptions);
  
        if (rule) this.plugins.onProcessRule(rule);
        return rule;
      }
      /**
       * Register plugin. Passed function will be invoked with a rule instance.
       */
      ;
  
      _proto.use = function use() {
        var _this = this;
  
        for (var _len = arguments.length, plugins$$1 = new Array(_len), _key = 0; _key < _len; _key++) {
          plugins$$1[_key] = arguments[_key];
        }
  
        plugins$$1.forEach(function (plugin) {
          _this.plugins.use(plugin);
        });
        return this;
      };
  
      return Jss;
    }();
  
    /**
     * Extracts a styles object with only props that contain function values.
     */
    function getDynamicStyles(styles) {
      var to = null;
  
      for (var key in styles) {
        var value = styles[key];
        var type = typeof value;
  
        if (type === 'function') {
          if (!to) to = {};
          to[key] = value;
        } else if (type === 'object' && value !== null && !Array.isArray(value)) {
          var extracted = getDynamicStyles(value);
  
          if (extracted) {
            if (!to) to = {};
            to[key] = extracted;
          }
        }
      }
  
      return to;
    }
  
    /**
     * A better abstraction over CSS.
     *
     * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
     * @website https://github.com/cssinjs/jss
     * @license MIT
     */
  
    /**
     * Export a constant indicating if this browser has CSSTOM support.
     * https://developers.google.com/web/updates/2018/03/cssom
     */
    var hasCSSTOMSupport = typeof CSS !== 'undefined' && CSS && 'number' in CSS;
    /**
     * Creates a new instance of Jss.
     */
  
    var create = function create(options) {
      return new Jss(options);
    };
    /**
     * A global Jss instance.
     */
  
    var index$1 = create();
  
    var now = Date.now();
    var fnValuesNs = "fnValues" + now;
    var fnRuleNs = "fnStyle" + ++now;
    function functionPlugin() {
      return {
        onCreateRule: function onCreateRule(name, decl, options) {
          if (typeof decl !== 'function') return null;
          var rule = createRule(name, {}, options);
          rule[fnRuleNs] = decl;
          return rule;
        },
        onProcessStyle: function onProcessStyle(style, rule) {
          // We need to extract function values from the declaration, so that we can keep core unaware of them.
          // We need to do that only once.
          // We don't need to extract functions on each style update, since this can happen only once.
          // We don't support function values inside of function rules.
          if (fnValuesNs in rule || fnRuleNs in rule) return style;
          var fnValues = {};
  
          for (var prop in style) {
            var value = style[prop];
            if (typeof value !== 'function') continue;
            delete style[prop];
            fnValues[prop] = value;
          } // $FlowFixMe
  
  
          rule[fnValuesNs] = fnValues;
          return style;
        },
        onUpdate: function onUpdate(data, rule, sheet, options) {
          var styleRule = rule;
          var fnRule = styleRule[fnRuleNs]; // If we have a style function, the entire rule is dynamic and style object
          // will be returned from that function.
  
          if (fnRule) {
            styleRule.style = fnRule(data);
          }
  
          var fnValues = styleRule[fnValuesNs]; // If we have a fn values map, it is a rule with function values.
  
          if (fnValues) {
            for (var prop in fnValues) {
              styleRule.prop(prop, fnValues[prop](data), options);
            }
          }
        }
      };
    }
  
    var at = '@global';
    var atPrefix = '@global ';
  
    var GlobalContainerRule =
    /*#__PURE__*/
    function () {
      function GlobalContainerRule(key, styles, options) {
        this.type = 'global';
        this.at = at;
        this.rules = void 0;
        this.options = void 0;
        this.key = void 0;
        this.isProcessed = false;
        this.key = key;
        this.options = options;
        this.rules = new RuleList(_extends({}, options, {
          parent: this
        }));
  
        for (var selector in styles) {
          this.rules.add(selector, styles[selector]);
        }
  
        this.rules.process();
      }
      /**
       * Get a rule.
       */
  
  
      var _proto = GlobalContainerRule.prototype;
  
      _proto.getRule = function getRule(name) {
        return this.rules.get(name);
      }
      /**
       * Create and register rule, run plugins.
       */
      ;
  
      _proto.addRule = function addRule(name, style, options) {
        var rule = this.rules.add(name, style, options);
        this.options.jss.plugins.onProcessRule(rule);
        return rule;
      }
      /**
       * Get index of a rule.
       */
      ;
  
      _proto.indexOf = function indexOf(rule) {
        return this.rules.indexOf(rule);
      }
      /**
       * Generates a CSS string.
       */
      ;
  
      _proto.toString = function toString() {
        return this.rules.toString();
      };
  
      return GlobalContainerRule;
    }();
  
    var GlobalPrefixedRule =
    /*#__PURE__*/
    function () {
      function GlobalPrefixedRule(key, style, options) {
        this.type = 'global';
        this.at = at;
        this.options = void 0;
        this.rule = void 0;
        this.isProcessed = false;
        this.key = void 0;
        this.key = key;
        this.options = options;
        var selector = key.substr(atPrefix.length);
        this.rule = options.jss.createRule(selector, style, _extends({}, options, {
          parent: this
        }));
      }
  
      var _proto2 = GlobalPrefixedRule.prototype;
  
      _proto2.toString = function toString(options) {
        return this.rule ? this.rule.toString(options) : '';
      };
  
      return GlobalPrefixedRule;
    }();
  
    var separatorRegExp = /\s*,\s*/g;
  
    function addScope(selector, scope) {
      var parts = selector.split(separatorRegExp);
      var scoped = '';
  
      for (var i = 0; i < parts.length; i++) {
        scoped += scope + " " + parts[i].trim();
        if (parts[i + 1]) scoped += ', ';
      }
  
      return scoped;
    }
  
    function handleNestedGlobalContainerRule(rule) {
      var options = rule.options,
          style = rule.style;
      var rules = style ? style[at] : null;
      if (!rules) return;
  
      for (var name in rules) {
        options.sheet.addRule(name, rules[name], _extends({}, options, {
          selector: addScope(name, rule.selector)
        }));
      }
  
      delete style[at];
    }
  
    function handlePrefixedGlobalRule(rule) {
      var options = rule.options,
          style = rule.style;
  
      for (var prop in style) {
        if (prop[0] !== '@' || prop.substr(0, at.length) !== at) continue;
        var selector = addScope(prop.substr(at.length), rule.selector);
        options.sheet.addRule(selector, style[prop], _extends({}, options, {
          selector: selector
        }));
        delete style[prop];
      }
    }
    /**
     * Convert nested rules to separate, remove them from original styles.
     *
     * @param {Rule} rule
     * @api public
     */
  
  
    function jssGlobal() {
      function onCreateRule(name, styles, options) {
        if (!name) return null;
  
        if (name === at) {
          return new GlobalContainerRule(name, styles, options);
        }
  
        if (name[0] === '@' && name.substr(0, atPrefix.length) === atPrefix) {
          return new GlobalPrefixedRule(name, styles, options);
        }
  
        var parent = options.parent;
  
        if (parent) {
          if (parent.type === 'global' || parent.options.parent && parent.options.parent.type === 'global') {
            options.scoped = false;
          }
        }
  
        if (options.scoped === false) {
          options.selector = name;
        }
  
        return null;
      }
  
      function onProcessRule(rule) {
        if (rule.type !== 'style') return;
        handleNestedGlobalContainerRule(rule);
        handlePrefixedGlobalRule(rule);
      }
  
      return {
        onCreateRule: onCreateRule,
        onProcessRule: onProcessRule
      };
    }
  
    var separatorRegExp$1 = /\s*,\s*/g;
    var parentRegExp = /&/g;
    var refRegExp$1 = /\$([\w-]+)/g;
    /**
     * Convert nested rules to separate, remove them from original styles.
     *
     * @param {Rule} rule
     * @api public
     */
  
    function jssNested() {
      // Get a function to be used for $ref replacement.
      function getReplaceRef(container, sheet) {
        return function (match, key) {
          var rule = container.getRule(key) || sheet && sheet.getRule(key);
  
          if (rule) {
            rule = rule;
            return rule.selector;
          }
  
          warning$1(false, "[JSS] Could not find the referenced rule " + key + " in " + (container.options.meta || container.toString()) + ".");
          return key;
        };
      }
  
      function replaceParentRefs(nestedProp, parentProp) {
        var parentSelectors = parentProp.split(separatorRegExp$1);
        var nestedSelectors = nestedProp.split(separatorRegExp$1);
        var result = '';
  
        for (var i = 0; i < parentSelectors.length; i++) {
          var parent = parentSelectors[i];
  
          for (var j = 0; j < nestedSelectors.length; j++) {
            var nested = nestedSelectors[j];
            if (result) result += ', '; // Replace all & by the parent or prefix & with the parent.
  
            result += nested.indexOf('&') !== -1 ? nested.replace(parentRegExp, parent) : parent + " " + nested;
          }
        }
  
        return result;
      }
  
      function getOptions(rule, container, options) {
        // Options has been already created, now we only increase index.
        if (options) return _extends({}, options, {
          index: options.index + 1
        });
        var nestingLevel = rule.options.nestingLevel;
        nestingLevel = nestingLevel === undefined ? 1 : nestingLevel + 1;
        return _extends({}, rule.options, {
          nestingLevel: nestingLevel,
          index: container.indexOf(rule) + 1
        });
      }
  
      function onProcessStyle(style, rule, sheet) {
        if (rule.type !== 'style') return style;
        var styleRule = rule;
        var container = styleRule.options.parent;
        var options;
        var replaceRef;
  
        for (var prop in style) {
          var isNested = prop.indexOf('&') !== -1;
          var isNestedConditional = prop[0] === '@';
          if (!isNested && !isNestedConditional) continue;
          options = getOptions(styleRule, container, options);
  
          if (isNested) {
            var selector = replaceParentRefs(prop, styleRule.selector); // Lazily create the ref replacer function just once for
            // all nested rules within the sheet.
  
            if (!replaceRef) replaceRef = getReplaceRef(container, sheet); // Replace all $refs.
  
            selector = selector.replace(refRegExp$1, replaceRef);
            container.addRule(selector, style[prop], _extends({}, options, {
              selector: selector
            }));
          } else if (isNestedConditional) {
            // Place conditional right after the parent rule to ensure right ordering.
            container.addRule(prop, {}, options) // Flow expects more options but they aren't required
            // And flow doesn't know this will always be a StyleRule which has the addRule method
            // $FlowFixMe
            .addRule(styleRule.key, style[prop], {
              selector: styleRule.selector
            });
          }
  
          delete style[prop];
        }
  
        return style;
      }
  
      return {
        onProcessStyle: onProcessStyle
      };
    }
  
    /* eslint-disable no-var, prefer-template */
    var uppercasePattern = /[A-Z]/g;
    var msPattern = /^ms-/;
    var cache = {};
  
    function toHyphenLower(match) {
      return '-' + match.toLowerCase()
    }
  
    function hyphenateStyleName(name) {
      if (cache.hasOwnProperty(name)) {
        return cache[name]
      }
  
      var hName = name.replace(uppercasePattern, toHyphenLower);
      return (cache[name] = msPattern.test(hName) ? '-' + hName : hName)
    }
  
    /**
     * Convert camel cased property names to dash separated.
     *
     * @param {Object} style
     * @return {Object}
     */
  
    function convertCase(style) {
      var converted = {};
  
      for (var prop in style) {
        var key = prop.indexOf('--') === 0 ? prop : hyphenateStyleName(prop);
        converted[key] = style[prop];
      }
  
      if (style.fallbacks) {
        if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);else converted.fallbacks = convertCase(style.fallbacks);
      }
  
      return converted;
    }
    /**
     * Allow camel cased property names by converting them back to dasherized.
     *
     * @param {Rule} rule
     */
  
  
    function camelCase() {
      function onProcessStyle(style) {
        if (Array.isArray(style)) {
          // Handle rules like @font-face, which can have multiple styles in an array
          for (var index = 0; index < style.length; index++) {
            style[index] = convertCase(style[index]);
          }
  
          return style;
        }
  
        return convertCase(style);
      }
  
      function onChangeValue(value, prop, rule) {
        if (prop.indexOf('--') === 0) {
          return value;
        }
  
        var hyphenatedProp = hyphenateStyleName(prop); // There was no camel case in place
  
        if (prop === hyphenatedProp) return value;
        rule.prop(hyphenatedProp, value); // Core will ignore that property value we set the proper one above.
  
        return null;
      }
  
      return {
        onProcessStyle: onProcessStyle,
        onChangeValue: onChangeValue
      };
    }
  
    var px = hasCSSTOMSupport ? window.CSS.px : 'px';
    var ms = hasCSSTOMSupport ? window.CSS.ms : 'ms';
    var percent = hasCSSTOMSupport ? window.CSS.percent : '%';
    /**
     * Generated jss-plugin-default-unit CSS property units
     *
     * @type object
     */
  
    var defaultUnits = {
      // Animation properties
      'animation-delay': ms,
      'animation-duration': ms,
      // Background properties
      'background-position': px,
      'background-position-x': px,
      'background-position-y': px,
      'background-size': px,
      // Border Properties
      border: px,
      'border-bottom': px,
      'border-bottom-left-radius': px,
      'border-bottom-right-radius': px,
      'border-bottom-width': px,
      'border-left': px,
      'border-left-width': px,
      'border-radius': px,
      'border-right': px,
      'border-right-width': px,
      'border-top': px,
      'border-top-left-radius': px,
      'border-top-right-radius': px,
      'border-top-width': px,
      'border-width': px,
      // Margin properties
      margin: px,
      'margin-bottom': px,
      'margin-left': px,
      'margin-right': px,
      'margin-top': px,
      // Padding properties
      padding: px,
      'padding-bottom': px,
      'padding-left': px,
      'padding-right': px,
      'padding-top': px,
      // Mask properties
      'mask-position-x': px,
      'mask-position-y': px,
      'mask-size': px,
      // Width and height properties
      height: px,
      width: px,
      'min-height': px,
      'max-height': px,
      'min-width': px,
      'max-width': px,
      // Position properties
      bottom: px,
      left: px,
      top: px,
      right: px,
      // Shadow properties
      'box-shadow': px,
      'text-shadow': px,
      // Column properties
      'column-gap': px,
      'column-rule': px,
      'column-rule-width': px,
      'column-width': px,
      // Font and text properties
      'font-size': px,
      'font-size-delta': px,
      'letter-spacing': px,
      'text-indent': px,
      'text-stroke': px,
      'text-stroke-width': px,
      'word-spacing': px,
      // Motion properties
      motion: px,
      'motion-offset': px,
      // Outline properties
      outline: px,
      'outline-offset': px,
      'outline-width': px,
      // Perspective properties
      perspective: px,
      'perspective-origin-x': percent,
      'perspective-origin-y': percent,
      // Transform properties
      'transform-origin': percent,
      'transform-origin-x': percent,
      'transform-origin-y': percent,
      'transform-origin-z': percent,
      // Transition properties
      'transition-delay': ms,
      'transition-duration': ms,
      // Alignment properties
      'vertical-align': px,
      'flex-basis': px,
      // Some random properties
      'shape-margin': px,
      size: px,
      // Grid properties
      grid: px,
      'grid-gap': px,
      'grid-row-gap': px,
      'grid-column-gap': px,
      'grid-template-rows': px,
      'grid-template-columns': px,
      'grid-auto-rows': px,
      'grid-auto-columns': px,
      // Not existing properties.
      // Used to avoid issues with jss-plugin-expand integration.
      'box-shadow-x': px,
      'box-shadow-y': px,
      'box-shadow-blur': px,
      'box-shadow-spread': px,
      'font-line-height': px,
      'text-shadow-x': px,
      'text-shadow-y': px,
      'text-shadow-blur': px
    };
  
    /**
     * Clones the object and adds a camel cased property version.
     */
    function addCamelCasedVersion(obj) {
      var regExp = /(-[a-z])/g;
  
      var replace = function replace(str) {
        return str[1].toUpperCase();
      };
  
      var newObj = {};
  
      for (var _key in obj) {
        newObj[_key] = obj[_key];
        newObj[_key.replace(regExp, replace)] = obj[_key];
      }
  
      return newObj;
    }
  
    var units = addCamelCasedVersion(defaultUnits);
    /**
     * Recursive deep style passing function
     */
  
    function iterate(prop, value, options) {
      if (!value) return value;
  
      if (Array.isArray(value)) {
        for (var i = 0; i < value.length; i++) {
          value[i] = iterate(prop, value[i], options);
        }
      } else if (typeof value === 'object') {
        if (prop === 'fallbacks') {
          for (var innerProp in value) {
            value[innerProp] = iterate(innerProp, value[innerProp], options);
          }
        } else {
          for (var _innerProp in value) {
            value[_innerProp] = iterate(prop + "-" + _innerProp, value[_innerProp], options);
          }
        }
      } else if (typeof value === 'number') {
        if (options[prop]) {
          return "" + value + options[prop];
        }
  
        if (units[prop]) {
          return typeof units[prop] === 'function' ? units[prop](value).toString() : "" + value + units[prop];
        }
  
        return value.toString();
      }
  
      return value;
    }
    /**
     * Add unit to numeric values.
     */
  
  
    function defaultUnit(options) {
      if (options === void 0) {
        options = {};
      }
  
      var camelCasedOptions = addCamelCasedVersion(options);
  
      function onProcessStyle(style, rule) {
        if (rule.type !== 'style') return style;
  
        for (var prop in style) {
          style[prop] = iterate(prop, style[prop], camelCasedOptions);
        }
  
        return style;
      }
  
      function onChangeValue(value, prop) {
        return iterate(prop, value, camelCasedOptions);
      }
  
      return {
        onProcessStyle: onProcessStyle,
        onChangeValue: onChangeValue
      };
    }
  
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
          arr2[i] = arr[i];
        }
  
        return arr2;
      }
    }
  
    function _iterableToArray(iter) {
      if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
    }
  
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance");
    }
  
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
    }
  
    // Export javascript style and css style vendor prefixes.
    var js = '';
    var css = '';
    var vendor = '';
    var browser = ''; // We should not do anything if required serverside.
  
    if (isBrowser) {
      // Order matters. We need to check Webkit the last one because
      // other vendors use to add Webkit prefixes to some properties
      var jsCssMap = {
        Moz: '-moz-',
        ms: '-ms-',
        O: '-o-',
        Webkit: '-webkit-'
      };
  
      var _document$createEleme = document.createElement('p'),
          style = _document$createEleme.style;
  
      var testProp = 'Transform';
  
      for (var key in jsCssMap) {
        if (key + testProp in style) {
          js = key;
          css = jsCssMap[key];
          break;
        }
      } // Correctly detect the Edge browser.
  
  
      if (js === 'Webkit' && 'msHyphens' in style) {
        js = 'ms';
        css = jsCssMap.ms;
        browser = 'edge';
      } // Correctly detect the Safari browser.
  
  
      if (js === 'Webkit' && '-apple-trailing-word' in style) {
        vendor = 'apple';
      }
    }
    /**
     * Vendor prefix string for the current browser.
     *
     * @type {{js: String, css: String, vendor: String, browser: String}}
     * @api public
     */
  
  
    var prefix = {
      js: js,
      css: css,
      vendor: vendor,
      browser: browser
    };
  
    /**
     * Test if a keyframe at-rule should be prefixed or not
     *
     * @param {String} vendor prefix string for the current browser.
     * @return {String}
     * @api public
     */
  
    function supportedKeyframes(key) {
      // Keyframes is already prefixed. e.g. key = '@-webkit-keyframes a'
      if (key[1] === '-') return key; // No need to prefix IE/Edge. Older browsers will ignore unsupported rules.
      // https://caniuse.com/#search=keyframes
  
      if (prefix.js === 'ms') return key;
      return "@" + prefix.css + "keyframes" + key.substr(10);
    }
  
    // https://caniuse.com/#search=appearance
  
    var appearence = {
      noPrefill: ['appearance'],
      supportedProperty: function supportedProperty(prop) {
        if (prop !== 'appearance') return false;
        if (prefix.js === 'ms') return "-webkit-" + prop;
        return prefix.css + prop;
      }
    };
  
    var regExp = /[-\s]+(.)?/g;
    /**
     * Replaces the letter with the capital letter
     *
     * @param {String} match
     * @param {String} c
     * @return {String}
     * @api private
     */
  
    function toUpper(match, c) {
      return c ? c.toUpperCase() : '';
    }
    /**
     * Convert dash separated strings to camel-cased.
     *
     * @param {String} str
     * @return {String}
     * @api private
     */
  
  
    function camelize(str) {
      return str.replace(regExp, toUpper);
    }
  
    /**
     * Convert dash separated strings to pascal cased.
     *
     * @param {String} str
     * @return {String}
     * @api private
     */
  
    function pascalize(str) {
      return camelize("-" + str);
    }
  
    // https://caniuse.com/#search=multicolumn
    // https://github.com/postcss/autoprefixer/issues/491
    // https://github.com/postcss/autoprefixer/issues/177
  
    var breakPropsOld = {
      supportedProperty: function supportedProperty(prop, style) {
        if (!/^break-/.test(prop)) return false;
  
        if (prefix.js === 'Webkit') {
          var jsProp = "WebkitColumn" + pascalize(prop);
          return jsProp in style ? prefix.css + "column-" + prop : false;
        }
  
        if (prefix.js === 'Moz') {
          var _jsProp = "page" + pascalize(prop);
  
          return _jsProp in style ? "page-" + prop : false;
        }
  
        return false;
      }
    };
  
    // https://caniuse.com/#feat=text-decoration
  
    var textDecorationSkipInk = {
      noPrefill: ['text-decoration-skip-ink'],
      supportedProperty: function supportedProperty(prop) {
        if (prop !== 'text-decoration-skip-ink') return false;
        if (prefix.vendor === 'apple') return "" + prefix.css + prop;
        if (prefix.js === 'Webkit' || prefix.js === 'Moz') return prop;
        return prefix.css + prop;
      }
    };
  
    // https://caniuse.com/#search=color-adjust
  
    var colorAdjust = {
      noPrefill: ['color-adjust'],
      supportedProperty: function supportedProperty(prop) {
        if (prop !== 'color-adjust') return false;
        if (prefix.js === 'Webkit') return prefix.css + "print-" + prop;
        return prop;
      }
    };
  
    var propMap = {
      flex: 'box-flex',
      'flex-grow': 'box-flex',
      'flex-direction': ['box-orient', 'box-direction'],
      order: 'box-ordinal-group',
      'align-items': 'box-align',
      'flex-flow': ['box-orient', 'box-direction'],
      'justify-content': 'box-pack'
    };
    var propKeys = Object.keys(propMap);
  
    var prefixCss = function prefixCss(p) {
      return prefix.css + p;
    }; // Support old flex spec from 2009.
  
  
    var flex2009 = {
      supportedProperty: function supportedProperty(prop, style, _ref) {
        var multiple = _ref.multiple;
  
        if (propKeys.indexOf(prop) > -1) {
          var newProp = propMap[prop];
  
          if (!Array.isArray(newProp)) {
            return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
          }
  
          if (!multiple) return false;
  
          for (var i = 0; i < newProp.length; i++) {
            if (!(prefix.js + pascalize(newProp[0]) in style)) {
              return false;
            }
          }
  
          return newProp.map(prefixCss);
        }
  
        return false;
      }
    };
  
    var propMap$1 = {
      'flex-grow': 'flex-positive',
      'flex-shrink': 'flex-negative',
      'flex-basis': 'flex-preferred-size',
      'justify-content': 'flex-pack',
      order: 'flex-order',
      'align-items': 'flex-align',
      'align-content': 'flex-line-pack' // 'align-self' is handled by 'align-self' plugin.
      // Support old flex spec from 2012.
  
    };
    var flex2012 = {
      supportedProperty: function supportedProperty(prop, style) {
        var newProp = propMap$1[prop];
        if (!newProp) return false;
        return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
      }
    };
  
    // See https://github.com/postcss/autoprefixer/issues/324.
  
    var inlineLogicalOld = {
      supportedProperty: function supportedProperty(prop, style) {
        if (!/^(border|margin|padding)-inline/.test(prop)) return false;
        if (prefix.js === 'Moz') return prop;
        var newProp = prop.replace('-inline', '');
        return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
      }
    };
  
    // but we can use a longhand property instead.
    // https://caniuse.com/#search=mask
  
    var mask = {
      noPrefill: ['mask'],
      supportedProperty: function supportedProperty(prop, style) {
        if (!/^mask/.test(prop)) return false;
  
        if (prefix.js === 'Webkit') {
          var longhand = 'mask-image';
  
          if (camelize(longhand) in style) {
            return prop;
          }
  
          if (prefix.js + pascalize(longhand) in style) {
            return prefix.css + prop;
          }
        }
  
        return prop;
      }
    };
  
    var prefixed = {
      supportedProperty: function supportedProperty(prop, style) {
        var pascalized = pascalize(prop);
        if (prefix.js + pascalized in style) return prefix.css + prop; // Try webkit fallback.
  
        if (prefix.js !== 'Webkit' && "Webkit" + pascalized in style) return prop;
        return false;
      }
    };
  
    // https://caniuse.com/#search=scroll-snap
  
    var scrollSnap = {
      supportedProperty: function supportedProperty(prop) {
        if (prop.substring(0, 11) !== 'scroll-snap') return false;
  
        if (prefix.js === 'ms') {
          return "" + prefix.css + prop;
        }
  
        return prop;
      }
    };
  
    // https://caniuse.com/#search=overscroll-behavior
  
    var overscrollBehavior = {
      supportedProperty: function supportedProperty(prop) {
        if (prop !== 'overscroll-behavior') return false;
  
        if (prefix.js === 'ms') {
          return prefix.css + "scroll-chaining";
        }
  
        return prop;
      }
    };
  
    // https://caniuse.com/#search=transform
  
    var transform = {
      noPrefill: ['transform'],
      supportedProperty: function supportedProperty(prop, style, options) {
        if (prop !== 'transform') return false;
  
        if (options.transform) {
          return prop;
        }
  
        return prefix.css + prop;
      }
    };
  
    // https://caniuse.com/#search=transition
  
    var transition = {
      noPrefill: ['transition'],
      supportedProperty: function supportedProperty(prop, style, options) {
        if (prop !== 'transition') return false;
  
        if (options.transition) {
          return prop;
        }
  
        return prefix.css + prop;
      }
    };
  
    // Camelization is required because we can't test using.
    // CSS syntax for e.g. in FF.
  
    var unprefixed = {
      supportedProperty: function supportedProperty(prop, style) {
        return camelize(prop) in style ? prop : false;
      }
    };
  
    // https://caniuse.com/#search=writing-mode
  
    var writingMode = {
      noPrefill: ['writing-mode'],
      supportedProperty: function supportedProperty(prop) {
        if (prop !== 'writing-mode') return false;
  
        if (prefix.js === 'Webkit' || prefix.js === 'ms') {
          return prefix.css + prop;
        }
  
        return prop;
      }
    };
  
    // plugins = [
    //   ...plugins,
    //    breakPropsOld,
    //    inlineLogicalOld,
    //    unprefixed,
    //    prefixed,
    //    scrollSnap,
    //    flex2012,
    //    flex2009
    // ]
    // Plugins without 'noPrefill' value, going last.
    // 'flex-*' plugins should be at the bottom.
    // 'flex2009' going after 'flex2012'.
    // 'prefixed' going after 'unprefixed'
  
    var plugins$1 = [appearence, transform, transition, mask, writingMode, colorAdjust, textDecorationSkipInk, breakPropsOld, inlineLogicalOld, unprefixed, prefixed, scrollSnap, overscrollBehavior, flex2012, flex2009];
    var propertyDetectors = plugins$1.filter(function (p) {
      return p.supportedProperty;
    }).map(function (p) {
      return p.supportedProperty;
    });
    var noPrefill = plugins$1.filter(function (p) {
      return p.noPrefill;
    }).reduce(function (a, p) {
      a.push.apply(a, _toConsumableArray(p.noPrefill));
      return a;
    }, []);
  
    var el;
    var cache$1 = {};
  
    if (isBrowser) {
      el = document.createElement('p'); // We test every property on vendor prefix requirement.
      // Once tested, result is cached. It gives us up to 70% perf boost.
      // http://jsperf.com/element-style-object-access-vs-plain-object
      //
      // Prefill cache with known css properties to reduce amount of
      // properties we need to feature test at runtime.
      // http://davidwalsh.name/vendor-prefix
  
      var computed = window.getComputedStyle(document.documentElement, '');
  
      for (var key$1 in computed) {
        // eslint-disable-next-line no-restricted-globals
        if (!isNaN(key$1)) cache$1[computed[key$1]] = computed[key$1];
      } // Properties that cannot be correctly detected using the
      // cache prefill method.
  
  
      noPrefill.forEach(function (x) {
        return delete cache$1[x];
      });
    }
    /**
     * Test if a property is supported, returns supported property with vendor
     * prefix if required. Returns `false` if not supported.
     *
     * @param {String} prop dash separated
     * @param {Object} [options]
     * @return {String|Boolean}
     * @api public
     */
  
  
    function supportedProperty(prop, options) {
      if (options === void 0) {
        options = {};
      }
  
      // For server-side rendering.
      if (!el) return prop; // Remove cache for benchmark tests or return property from the cache.
  
      if (cache$1[prop] != null) {
        return cache$1[prop];
      } // Check if 'transition' or 'transform' natively supported in browser.
  
  
      if (prop === 'transition' || prop === 'transform') {
        options[prop] = prop in el.style;
      } // Find a plugin for current prefix property.
  
  
      for (var i = 0; i < propertyDetectors.length; i++) {
        cache$1[prop] = propertyDetectors[i](prop, el.style, options); // Break loop, if value found.
  
        if (cache$1[prop]) break;
      } // Reset styles for current property.
      // Firefox can even throw an error for invalid properties, e.g., "0".
  
  
      try {
        el.style[prop] = '';
      } catch (err) {
        return false;
      }
  
      return cache$1[prop];
    }
  
    var cache$1$1 = {};
    var transitionProperties = {
      transition: 1,
      'transition-property': 1,
      '-webkit-transition': 1,
      '-webkit-transition-property': 1
    };
    var transPropsRegExp = /(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;
    var el$1;
    /**
     * Returns prefixed value transition/transform if needed.
     *
     * @param {String} match
     * @param {String} p1
     * @param {String} p2
     * @return {String}
     * @api private
     */
  
    function prefixTransitionCallback(match, p1, p2) {
      if (p1 === 'all') return 'all';
      if (p2 === 'all') return ', all';
      return p1 ? supportedProperty(p1) : ", " + supportedProperty(p2);
    }
  
    if (isBrowser) el$1 = document.createElement('p');
    /**
     * Returns prefixed value if needed. Returns `false` if value is not supported.
     *
     * @param {String} property
     * @param {String} value
     * @return {String|Boolean}
     * @api public
     */
  
    function supportedValue(property, value) {
      // For server-side rendering.
      var prefixedValue = value;
      if (!el$1) return value; // It is a string or a number as a string like '1'.
      // We want only prefixable values here.
      // eslint-disable-next-line no-restricted-globals
  
      if (typeof prefixedValue !== 'string' || !isNaN(parseInt(prefixedValue, 10))) {
        return prefixedValue;
      } // Create cache key for current value.
  
  
      var cacheKey = property + prefixedValue; // Remove cache for benchmark tests or return value from cache.
  
      if (cache$1$1[cacheKey] != null) {
        return cache$1$1[cacheKey];
      } // IE can even throw an error in some cases, for e.g. style.content = 'bar'.
  
  
      try {
        // Test value as it is.
        el$1.style[property] = prefixedValue;
      } catch (err) {
        // Return false if value not supported.
        cache$1$1[cacheKey] = false;
        return false;
      } // If 'transition' or 'transition-property' property.
  
  
      if (transitionProperties[property]) {
        prefixedValue = prefixedValue.replace(transPropsRegExp, prefixTransitionCallback);
      } else if (el$1.style[property] === '') {
        // Value with a vendor prefix.
        prefixedValue = prefix.css + prefixedValue; // Hardcode test to convert "flex" to "-ms-flexbox" for IE10.
  
        if (prefixedValue === '-ms-flex') el$1.style[property] = '-ms-flexbox'; // Test prefixed value.
  
        el$1.style[property] = prefixedValue; // Return false if value not supported.
  
        if (el$1.style[property] === '') {
          cache$1$1[cacheKey] = false;
          return false;
        }
      } // Reset styles for current property.
  
  
      el$1.style[property] = ''; // Write current value to cache.
  
      cache$1$1[cacheKey] = prefixedValue;
      return cache$1$1[cacheKey];
    }
  
    /**
     * Add vendor prefix to a property name when needed.
     *
     * @api public
     */
  
    function jssVendorPrefixer() {
      function onProcessRule(rule) {
        if (rule.type === 'keyframes') {
          var atRule = rule;
          atRule.at = supportedKeyframes(atRule.at);
        }
      }
  
      function onProcessStyle(style, rule) {
        if (rule.type !== 'style') return style;
  
        for (var prop in style) {
          var value = style[prop];
          var changeProp = false;
          var supportedProp = supportedProperty(prop);
          if (supportedProp && supportedProp !== prop) changeProp = true;
          var changeValue = false;
          var supportedValue$$1 = supportedValue(supportedProp, toCssValue(value));
          if (supportedValue$$1 && supportedValue$$1 !== value) changeValue = true;
  
          if (changeProp || changeValue) {
            if (changeProp) delete style[prop];
            style[supportedProp || prop] = supportedValue$$1 || value;
          }
        }
  
        return style;
      }
  
      function onChangeValue(value, prop) {
        return supportedValue(prop, toCssValue(value)) || value;
      }
  
      return {
        onProcessRule: onProcessRule,
        onProcessStyle: onProcessStyle,
        onChangeValue: onChangeValue
      };
    }
  
    /**
     * Sort props by length.
     */
    function jssPropsSort() {
      var sort = function sort(prop0, prop1) {
        if (prop0.length === prop1.length) {
          return prop0 > prop1 ? 1 : -1;
        }
  
        return prop0.length - prop1.length;
      };
  
      return {
        onProcessStyle: function onProcessStyle(style, rule) {
          if (rule.type !== 'style') return style;
          var newStyle = {};
          var props = Object.keys(style).sort(sort);
  
          for (var i = 0; i < props.length; i++) {
            newStyle[props[i]] = style[props[i]];
          }
  
          return newStyle;
        }
      };
    }
  
    function jssPreset() {
      return {
        plugins: [functionPlugin(), jssGlobal(), jssNested(), camelCase(), defaultUnit(), // Disable the vendor prefixer server-side, it does nothing.
        // This way, we can get a performance boost.
        // In the documentation, we are using `autoprefixer` to solve this problem.
        typeof window === 'undefined' ? null : jssVendorPrefixer(), jssPropsSort()]
      };
    }
  
    function mergeClasses() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var baseClasses = options.baseClasses,
          newClasses = options.newClasses,
          Component = options.Component;
  
      if (!newClasses) {
        return baseClasses;
      }
  
      var nextClasses = _extends_1({}, baseClasses);
  
      if (typeof newClasses === 'string') {
        warning_1(false, ["Material-UI: the value `".concat(newClasses, "` ") + "provided to the classes property of ".concat(getDisplayName(Component), " is incorrect."), 'You might want to use the className property instead.'].join('\n'));
        return baseClasses;
      }
  
      Object.keys(newClasses).forEach(function (key) {
        warning_1(baseClasses[key] || !newClasses[key], ["Material-UI: the key `".concat(key, "` ") + "provided to the classes property is not implemented in ".concat(getDisplayName(Component), "."), "You can only override one of the following: ".concat(Object.keys(baseClasses).join(','), ".")].join('\n'));
        warning_1(!newClasses[key] || typeof newClasses[key] === 'string', ["Material-UI: the key `".concat(key, "` ") + "provided to the classes property is not valid for ".concat(getDisplayName(Component), "."), "You need to provide a non empty string instead of: ".concat(newClasses[key], ".")].join('\n'));
  
        if (newClasses[key]) {
          nextClasses[key] = "".concat(baseClasses[key], " ").concat(newClasses[key]);
        }
      });
      return nextClasses;
    }
  
    // Used https://github.com/thinkloop/multi-key-cache as inspiration
    var multiKeyStore = {
      set: function set(cache, key1, key2, value) {
        var subCache = cache.get(key1);
  
        if (!subCache) {
          subCache = new Map();
          cache.set(key1, subCache);
        }
  
        subCache.set(key2, value);
      },
      get: function get(cache, key1, key2) {
        var subCache = cache.get(key1);
        return subCache ? subCache.get(key2) : undefined;
      },
      delete: function _delete(cache, key1, key2) {
        var subCache = cache.get(key1);
        subCache.delete(key2);
      }
    };
  
    var ThemeContext = React__default.createContext(null);
  
    function useTheme() {
      return React__default.useContext(ThemeContext);
    }
  
    var jss = create(jssPreset()); // Use a singleton or the provided one by the context.
    //
    // The counter-based approach doesn't tolerate any mistake.
    // It's much safer to use the same counter everywhere.
  
    var generateClassName = createGenerateClassName(); // Exported for test purposes
  
    var sheetsManager = new Map();
    var defaultOptions = {
      disableGeneration: false,
      generateClassName: generateClassName,
      jss: jss,
      sheetsCache: null,
      sheetsManager: sheetsManager,
      sheetsRegistry: null
    };
    var StylesContext = React__default.createContext(defaultOptions);
    var injectFirstNode;
  
    function StylesProvider(props) {
      var children = props.children,
          injectFirst = props.injectFirst,
          localOptions = objectWithoutProperties(props, ["children", "injectFirst"]);
  
      var outerOptions = React__default.useContext(StylesContext);
  
      var context = _extends_1({}, outerOptions, localOptions);
  
      warning_1(typeof window !== 'undefined' || context.sheetsManager, 'Material-UI: you need to use the ServerStyleSheets API when rendering on the server.');
      warning_1(!context.jss.options.insertionPoint || !injectFirst, 'Material-UI: you cannot use a custom insertionPoint and <StylesContext injectFirst> at the same time.');
      warning_1(!injectFirst || !localOptions.jss, 'Material-UI: you cannot use the jss and injectFirst props at the same time.');
  
      if (!context.jss.options.insertionPoint && injectFirst && typeof window !== 'undefined') {
        if (!injectFirstNode) {
          var head = document.head;
          injectFirstNode = document.createComment('mui-inject-first');
          head.insertBefore(injectFirstNode, head.firstChild);
        }
  
        context.jss = create({
          plugins: jssPreset().plugins,
          insertionPoint: injectFirstNode
        });
      }
  
      return React__default.createElement(StylesContext.Provider, {
        value: context
      }, children);
    }
  
    StylesProvider.propTypes = {
      /**
       * Your component tree.
       */
      children: propTypes.node.isRequired,
  
      /**
       * You can disable the generation of the styles with this option.
       * It can be useful when traversing the React tree outside of the HTML
       * rendering step on the server.
       * Let's say you are using react-apollo to extract all
       * the queries made by the interface server-side - you can significantly speed up the traversal with this prop.
       */
      disableGeneration: propTypes.bool,
  
      /**
       * JSS's class name generator.
       */
      generateClassName: propTypes.func,
  
      /**
       * By default, the styles are injected last in the <head> element of the page.
       * As a result, they gain more specificity than any other style sheet.
       * If you want to override Material-UI's styles, set this prop.
       */
      injectFirst: propTypes.bool,
  
      /**
       * JSS's instance.
       */
      jss: propTypes.object,
  
      /**
       * @ignore
       */
      serverGenerateClassName: propTypes.func,
  
      /**
       * @ignore
       *
       * Beta feature.
       *
       * Cache for the sheets.
       */
      sheetsCache: propTypes.object,
  
      /**
       * @ignore
       *
       * The sheetsManager is used to deduplicate style sheet injection in the page.
       * It's deduplicating using the (theme, styles) couple.
       * On the server, you should provide a new instance for each request.
       */
      sheetsManager: propTypes.object,
  
      /**
       * @ignore
       *
       * Collect the sheets.
       */
      sheetsRegistry: propTypes.object
    };
  
    {
      StylesProvider.propTypes = exactProp(StylesProvider.propTypes);
    }
  
    StylesProvider.defaultProps = {
      disableGeneration: false,
      injectFirst: false
    };
  
    // We create the style sheet during at the creation of the component,
    // children are handled after the parents, so the order of style elements would be parent->child.
    // It is a problem though when a parent passes a className
    // which needs to override any child's styles.
    // StyleSheet of the child has a higher specificity, because of the source order.
    // So our solution is to render sheets them in the reverse order child->sheet, so
    // that parent has a higher specificity.
  
    var indexCounter = -1e9;
    function increment() {
      indexCounter += 1;
      warning_1(indexCounter < 0, ['Material-UI: you might have a memory leak.', 'The indexCounter is not supposed to grow that much.'].join('\n'));
      return indexCounter;
    }
  
    // We use the same empty object to ref count the styles that don't need a theme object.
    var noopTheme = {};
  
    function arrayMerge(destination, source) {
      return source;
    }
  
    function getStylesCreator(stylesOrCreator) {
      var themingEnabled = typeof stylesOrCreator === 'function';
      warning_1(_typeof_1(stylesOrCreator) === 'object' || themingEnabled, ['Material-UI: the `styles` argument provided is invalid.', 'You need to provide a function generating the styles or a styles object.'].join('\n'));
      return {
        create: function create(theme, name) {
          var styles;
  
          try {
            styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;
          } catch (err) {
            warning_1(!themingEnabled || theme !== noopTheme, ['Material-UI: the `styles` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\n'));
            throw err;
          }
  
          if (!name || !theme.overrides || !theme.overrides[name]) {
            return styles;
          }
  
          var overrides = theme.overrides[name];
  
          var stylesWithOverrides = _extends_1({}, styles);
  
          Object.keys(overrides).forEach(function (key) {
            warning_1(stylesWithOverrides[key], ['Material-UI: you are trying to override a style that does not exist.', "Fix the `".concat(key, "` key of `theme.overrides.").concat(name, "`.")].join('\n'));
            stylesWithOverrides[key] = umd(stylesWithOverrides[key], overrides[key], {
              arrayMerge: arrayMerge
            });
          });
          return stylesWithOverrides;
        },
        options: {},
        themingEnabled: themingEnabled
      };
    }
  
    function getClasses(_ref, classes, Component) {
      var state = _ref.state,
          stylesOptions = _ref.stylesOptions;
  
      if (stylesOptions.disableGeneration) {
        return classes || {};
      }
  
      if (!state.cacheClasses) {
        state.cacheClasses = {
          // Cache for the finalized classes value.
          value: null,
          // Cache for the last used classes prop pointer.
          lastProp: null,
          // Cache for the last used rendered classes pointer.
          lastJSS: {}
        };
      } // Tracks if either the rendered classes or classes prop has changed,
      // requiring the generation of a new finalized classes object.
  
  
      var generate = false;
  
      if (state.classes !== state.cacheClasses.lastJSS) {
        state.cacheClasses.lastJSS = state.classes;
        generate = true;
      }
  
      if (classes !== state.cacheClasses.lastProp) {
        state.cacheClasses.lastProp = classes;
        generate = true;
      }
  
      if (generate) {
        state.cacheClasses.value = mergeClasses({
          baseClasses: state.cacheClasses.lastJSS,
          newClasses: classes,
          Component: Component
        });
      }
  
      return state.cacheClasses.value;
    }
  
    function attach(_ref2, props) {
      var state = _ref2.state,
          theme = _ref2.theme,
          stylesOptions = _ref2.stylesOptions,
          stylesCreator = _ref2.stylesCreator,
          name = _ref2.name;
  
      if (stylesOptions.disableGeneration) {
        return;
      }
  
      var sheetManager = multiKeyStore.get(stylesOptions.sheetsManager, stylesCreator, theme);
  
      if (!sheetManager) {
        sheetManager = {
          refs: 0,
          staticSheet: null,
          dynamicStyles: null
        };
        multiKeyStore.set(stylesOptions.sheetsManager, stylesCreator, theme, sheetManager);
      }
  
      var options = _extends_1({}, stylesCreator.options, stylesOptions, {
        theme: theme,
        flip: typeof stylesOptions.flip === 'boolean' ? stylesOptions.flip : theme.direction === 'rtl'
      });
  
      options.generateId = options.serverGenerateClassName || options.generateClassName;
      var sheetsRegistry = stylesOptions.sheetsRegistry;
  
      if (sheetManager.refs === 0) {
        var staticSheet;
  
        if (stylesOptions.sheetsCache) {
          staticSheet = multiKeyStore.get(stylesOptions.sheetsCache, stylesCreator, theme);
        }
  
        var styles = stylesCreator.create(theme, name);
  
        if (!staticSheet) {
          staticSheet = stylesOptions.jss.createStyleSheet(styles, _extends_1({
            link: false
          }, options));
          staticSheet.attach();
  
          if (stylesOptions.sheetsCache) {
            multiKeyStore.set(stylesOptions.sheetsCache, stylesCreator, theme, staticSheet);
          }
        }
  
        if (sheetsRegistry) {
          sheetsRegistry.add(staticSheet);
        }
  
        sheetManager.staticSheet = staticSheet;
        sheetManager.dynamicStyles = getDynamicStyles(styles);
      }
  
      if (sheetManager.dynamicStyles) {
        var dynamicSheet = stylesOptions.jss.createStyleSheet(sheetManager.dynamicStyles, _extends_1({
          link: true
        }, options));
        warning_1(props, 'Material-UI: properties missing.');
        dynamicSheet.update(props).attach();
        state.dynamicSheet = dynamicSheet;
        state.classes = mergeClasses({
          baseClasses: sheetManager.staticSheet.classes,
          newClasses: dynamicSheet.classes
        });
  
        if (sheetsRegistry) {
          sheetsRegistry.add(dynamicSheet);
        }
      } else {
        state.classes = sheetManager.staticSheet.classes;
      }
  
      sheetManager.refs += 1;
    }
  
    function update(_ref3, props) {
      var state = _ref3.state;
  
      if (state.dynamicSheet) {
        state.dynamicSheet.update(props);
      }
    }
  
    function detach(_ref4) {
      var state = _ref4.state,
          theme = _ref4.theme,
          stylesOptions = _ref4.stylesOptions,
          stylesCreator = _ref4.stylesCreator;
  
      if (stylesOptions.disableGeneration) {
        return;
      }
  
      var sheetManager = multiKeyStore.get(stylesOptions.sheetsManager, stylesCreator, theme);
      sheetManager.refs -= 1;
      var sheetsRegistry = stylesOptions.sheetsRegistry;
  
      if (sheetManager.refs === 0) {
        multiKeyStore.delete(stylesOptions.sheetsManager, stylesCreator, theme);
        stylesOptions.jss.removeStyleSheet(sheetManager.staticSheet);
  
        if (sheetsRegistry) {
          sheetsRegistry.remove(sheetManager.staticSheet);
        }
      }
  
      if (state.dynamicSheet) {
        stylesOptions.jss.removeStyleSheet(state.dynamicSheet);
  
        if (sheetsRegistry) {
          sheetsRegistry.remove(state.dynamicSheet);
        }
      }
    }
  
    function useSynchronousEffect(func, values) {
      var key = React__default.useRef([]);
      var output; // Store "generation" key. Just returns a new object every time
  
      var currentKey = React__default.useMemo(function () {
        return {};
      }, values); // eslint-disable-line react-hooks/exhaustive-deps
      // "the first render", or "memo dropped the value"
  
      if (key.current !== currentKey) {
        key.current = currentKey;
        output = func();
      }
  
      React__default.useEffect(function () {
        return function () {
          if (output) {
            output();
          }
        };
      }, [currentKey] // eslint-disable-line react-hooks/exhaustive-deps
      );
    }
  
    function makeStyles(stylesOrCreator) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  
      var name = options.name,
          classNamePrefixOption = options.classNamePrefix,
          Component = options.Component,
          _options$defaultTheme = options.defaultTheme,
          defaultTheme = _options$defaultTheme === void 0 ? noopTheme : _options$defaultTheme,
          stylesOptions2 = objectWithoutProperties(options, ["name", "classNamePrefix", "Component", "defaultTheme"]);
  
      var stylesCreator = getStylesCreator(stylesOrCreator);
      var classNamePrefix = name || classNamePrefixOption || 'makeStyles';
      stylesCreator.options = {
        index: increment(),
        name: name,
        meta: classNamePrefix,
        classNamePrefix: classNamePrefix
      };
      var listenToTheme = stylesCreator.themingEnabled || typeof name === 'string';
      return function () {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var theme = (listenToTheme ? useTheme() : null) || defaultTheme;
  
        var stylesOptions = _extends_1({}, React__default.useContext(StylesContext), stylesOptions2);
  
        var instance = React__default.useRef();
        var shouldUpdate = React__default.useRef();
        useSynchronousEffect(function () {
          var current = {
            name: name,
            state: {},
            stylesCreator: stylesCreator,
            stylesOptions: stylesOptions,
            theme: theme
          };
          attach(current, props);
          shouldUpdate.current = false;
          instance.current = current;
          return function () {
            detach(current);
          };
        }, [theme, stylesCreator]);
        React__default.useEffect(function () {
          if (shouldUpdate.current) {
            update(instance.current, props);
          }
  
          shouldUpdate.current = true;
        });
        return getClasses(instance.current, props.classes, Component);
      };
    }
  
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
  
    var classCallCheck = _classCallCheck;
  
    function _defineProperties$1(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
  
    function _createClass$1(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties$1(Constructor, staticProps);
      return Constructor;
    }
  
    var createClass = _createClass$1;
  
    function toVal(mix) {
        var k, y, str='';
        if (mix) {
            if (typeof mix === 'object') {
                if (!!mix.push) {
                    for (k=0; k < mix.length; k++) {
                        if (mix[k] && (y = toVal(mix[k]))) {
                            str && (str += ' ');
                            str += y;
                        }
                    }
                } else {
                    for (k in mix) {
                        if (mix[k] && (y = toVal(k))) {
                            str && (str += ' ');
                            str += y;
                        }
                    }
                }
            } else if (typeof mix !== 'boolean' && !mix.call) {
                str && (str += ' ');
                str += mix;
            }
        }
        return str;
    }
  
    function clsx () {
        var i=0, x, str='';
        while (i < arguments.length) {
            if (x = toVal(arguments[i++])) {
                str && (str += ' ');
                str += x;
            }
        }
        return str;
    }
  
    /**
     * Copyright 2015, Yahoo! Inc.
     * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
     */
  
    var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
    };
  
    var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
    };
  
    var FORWARD_REF_STATICS = {
        '$$typeof': true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
    };
  
    var MEMO_STATICS = {
        '$$typeof': true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
    };
  
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
  
    function getStatics(component) {
        if (reactIs.isMemo(component)) {
            return MEMO_STATICS;
        }
        return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
    }
  
    var defineProperty$1 = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
  
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== 'string') {
            // don't hoist over string (html) components
  
            if (objectPrototype) {
                var inheritedComponent = getPrototypeOf(sourceComponent);
                if (inheritedComponent && inheritedComponent !== objectPrototype) {
                    hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
                }
            }
  
            var keys = getOwnPropertyNames(sourceComponent);
  
            if (getOwnPropertySymbols$1) {
                keys = keys.concat(getOwnPropertySymbols$1(sourceComponent));
            }
  
            var targetStatics = getStatics(targetComponent);
            var sourceStatics = getStatics(sourceComponent);
  
            for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                    var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                    try {
                        // Avoid failures from read-only properties
                        defineProperty$1(targetComponent, key, descriptor);
                    } catch (e) {}
                }
            }
  
            return targetComponent;
        }
  
        return targetComponent;
    }
  
    var hoistNonReactStatics_cjs = hoistNonReactStatics;
  
    function omit(input, fields) {
      var output = {};
      Object.keys(input).forEach(function (prop) {
        if (fields.indexOf(prop) === -1) {
          output[prop] = input[prop];
        }
      });
      return output;
    } // styled-components's API removes the mapping between components and styles.
    // Using components as a low-level styling construct can be simpler.
  
  
    function styled(Component) {
      var componentCreator = function componentCreator(style) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  
        var name = options.name,
            stylesOptions = objectWithoutProperties(options, ["name"]);
  
        if (Component === undefined) {
          throw new Error(['You are calling styled(Component)(style) with an undefined component.', 'You may have forgotten to import it.'].join('\n'));
        }
  
        var classNamePrefix = name;
  
        if (!name) {
          // Provide a better DX outside production.
          var displayName = getDisplayName(Component);
  
          if (displayName !== undefined) {
            classNamePrefix = displayName;
          }
        }
  
        var stylesOrCreator = typeof style === 'function' ? function (theme) {
          return {
            root: function root(props) {
              return style(_extends_1({
                theme: theme
              }, props));
            }
          };
        } : {
          root: style
        };
        var useStyles = makeStyles(stylesOrCreator, _extends_1({
          Component: Component,
          name: name || Component.displayName,
          classNamePrefix: classNamePrefix
        }, stylesOptions));
        var filterProps;
        var propTypes$1 = {};
  
        if (style.filterProps) {
          filterProps = style.filterProps;
          delete style.filterProps;
        }
        /* eslint-disable react/forbid-foreign-prop-types */
  
  
        if (style.propTypes) {
          propTypes$1 = style.propTypes;
          delete style.propTypes;
        }
        /* eslint-enable react/forbid-foreign-prop-types */
  
  
        var StyledComponent = React__default.forwardRef(function StyledComponent(props, ref) {
          var children = props.children,
              classNameProp = props.className,
              clone = props.clone,
              ComponentProp = props.component,
              other = objectWithoutProperties(props, ["children", "className", "clone", "component"]);
  
          var classes = useStyles(props);
          var className = clsx(classes.root, classNameProp);
  
          if (clone) {
            return React__default.cloneElement(children, {
              className: clsx(children.props.className, className)
            });
          }
  
          var spread = other;
  
          if (filterProps) {
            spread = omit(spread, filterProps);
          }
  
          if (typeof children === 'function') {
            return children(_extends_1({
              className: className
            }, spread));
          }
  
          var FinalComponent = ComponentProp || Component;
          return React__default.createElement(FinalComponent, _extends_1({
            ref: ref,
            className: className
          }, spread), children);
        });
        StyledComponent.propTypes = _extends_1({
          /**
           * A render function or node.
           */
          children: propTypes.oneOfType([propTypes.node, propTypes.func]),
  
          /**
           * @ignore
           */
          className: propTypes.string,
  
          /**
           * If `true`, the component will recycle it's children DOM element.
           * It's using `React.cloneElement` internally.
           */
          clone: chainPropTypes(propTypes.bool, function (props) {
            if (props.clone && props.component) {
              return new Error('You can not use the clone and component properties at the same time.');
            }
  
            return null;
          }),
  
          /**
           * The component used for the root node.
           * Either a string to use a DOM element or a component.
           */
          component: propTypes.elementType
        }, propTypes$1);
  
        {
          StyledComponent.displayName = "Styled(".concat(classNamePrefix, ")");
        }
  
        hoistNonReactStatics_cjs(StyledComponent, Component);
        return StyledComponent;
      };
  
      return componentCreator;
    }
  
    function mergeOuterLocalTheme(outerTheme, localTheme) {
      if (typeof localTheme === 'function') {
        var mergedTheme = localTheme(outerTheme);
        warning_1(mergedTheme, ['Material-UI: you should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\n'));
        return mergedTheme;
      }
  
      return _extends_1({}, outerTheme, localTheme);
    }
    /**
     * This component takes a `theme` property.
     * It makes the `theme` available down the React tree thanks to React context.
     * This component should preferably be used at **the root of your component tree**.
     */
  
  
    function ThemeProvider(props) {
      var children = props.children,
          localTheme = props.theme;
      var outerTheme = useTheme();
      warning_1(outerTheme !== null || typeof localTheme !== 'function', ['Material-UI: you are providing a theme function property ' + 'to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\n'));
      var theme = React__default.useMemo(function () {
        var output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
  
        if (outerTheme !== null && output) {
          output[nested] = true;
        }
  
        return output;
      }, [localTheme, outerTheme]);
      return React__default.createElement(ThemeContext.Provider, {
        value: theme
      }, children);
    }
  
    ThemeProvider.propTypes = {
      /**
       * Your component tree
       */
      children: propTypes.node.isRequired,
  
      /**
       * A theme object. You can provide a function to extend the outer theme.
       */
      theme: propTypes.oneOfType([propTypes.object, propTypes.func]).isRequired
    };
  
    {
      ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes);
    }
  
    // It does not modify the component passed to it;
    // instead, it returns a new component, with a `classes` property.
  
    var withStyles = function withStyles(stylesOrCreator) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return function (Component) {
        var defaultTheme = options.defaultTheme,
            _options$withTheme = options.withTheme,
            withTheme = _options$withTheme === void 0 ? false : _options$withTheme,
            name = options.name,
            stylesOptions = objectWithoutProperties(options, ["defaultTheme", "withTheme", "name"]);
  
        if (Component === undefined) {
          throw new Error(['You are calling withStyles(styles)(Component) with an undefined component.', 'You may have forgotten to import it.'].join('\n'));
        }
  
        var classNamePrefix = name;
  
        if (!name) {
          // Provide a better DX outside production.
          var displayName = getDisplayName(Component);
  
          if (displayName !== undefined) {
            classNamePrefix = displayName;
          }
        }
  
        var useStyles = makeStyles(stylesOrCreator, _extends_1({
          defaultTheme: defaultTheme,
          Component: Component,
          name: name || Component.displayName,
          classNamePrefix: classNamePrefix
        }, stylesOptions));
        var WithStyles = React__default.forwardRef(function WithStyles(props, ref) {
          var classesProp = props.classes,
              innerRef = props.innerRef,
              other = objectWithoutProperties(props, ["classes", "innerRef"]);
  
          var classes = useStyles(props);
          var theme;
          var more = other;
  
          if (typeof name === 'string' || withTheme) {
            // name and withTheme are invariant in the outer scope
            // eslint-disable-next-line react-hooks/rules-of-hooks
            theme = useTheme() || defaultTheme;
  
            if (name) {
              more = getThemeProps({
                theme: theme,
                name: name,
                props: other
              });
            } // Provide the theme to the wrapped component.
            // So we don't have to use the `withTheme()` Higher-order Component.
  
  
            if (withTheme && !more.theme) {
              more.theme = theme;
            }
          }
  
          return React__default.createElement(Component, _extends_1({
            ref: innerRef || ref,
            classes: classes
          }, more));
        });
        WithStyles.propTypes = {
          /**
           * Override or extend the styles applied to the component.
           */
          classes: propTypes.object,
  
          /**
           * Use that property to pass a ref callback to the decorated component.
           * @deprecated
           */
          innerRef: chainPropTypes(propTypes.oneOfType([propTypes.func, propTypes.object]), function (props) {
            if (props.innerRef == null) {
              return null;
            }
  
            return null; // return new Error(
            //   'Material-UI: the `innerRef` prop is deprecated and will be removed in v5. ' +
            //     'Refs are now automatically forwarded to the inner component.',
            // );
          })
        };
  
        {
          WithStyles.displayName = "WithStyles(".concat(getDisplayName(Component), ")");
        }
  
        hoistNonReactStatics_cjs(WithStyles, Component);
  
        {
          // Exposed for test purposes.
          WithStyles.Naked = Component;
          WithStyles.options = options;
          WithStyles.useStyles = useStyles;
        }
  
        return WithStyles;
      };
    };
  
    function withThemeCreator() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var defaultTheme = options.defaultTheme;
  
      var withTheme = function withTheme(Component) {
        if (Component === undefined) {
          throw new Error(['You are calling withTheme(Component) with an undefined component.', 'You may have forgotten to import it.'].join('\n'));
        }
  
        var WithTheme = React__default.forwardRef(function WithTheme(props, ref) {
          var innerRef = props.innerRef,
              other = objectWithoutProperties(props, ["innerRef"]);
  
          var theme = useTheme() || defaultTheme;
          return React__default.createElement(Component, _extends_1({
            theme: theme,
            ref: innerRef || ref
          }, other));
        });
        WithTheme.propTypes = {
          /**
           * Use that property to pass a ref callback to the decorated component.
           * @deprecated
           */
          innerRef: chainPropTypes(propTypes.oneOfType([propTypes.func, propTypes.object]), function (props) {
            if (props.innerRef == null) {
              return null;
            }
  
            return new Error('Material-UI: the `innerRef` prop is deprecated and will be removed in v5. ' + 'Refs are now automatically forwarded to the inner component.');
          })
        };
  
        {
          WithTheme.displayName = "WithTheme(".concat(getDisplayName(Component), ")");
        }
  
        hoistNonReactStatics_cjs(WithTheme, Component);
  
        {
          // Exposed for test purposes.
          WithTheme.Naked = Component;
        }
  
        return WithTheme;
      };
  
      return withTheme;
    } // Provide the theme object as a property to the input component.
    // It's an alternative API to useTheme().
    // We encourage the usage of useTheme() where possible.
  
    var withTheme = withThemeCreator();
  
    // import warning from 'warning';
    // To remove in v5
  
    function createStyles$1(styles) {
      // warning(
      //   warnOnce,
      //   [
      //     'Material-UI: createStyles from @material-ui/core/styles is deprecated.',
      //     'Please use @material-ui/styles/createStyles',
      //   ].join('\n'),
      // );
      // warnOnce = true;
      return createStyles(styles);
    }
  
    var defaultTheme = createMuiTheme();
  
    function makeStyles$1(stylesOrCreator) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return makeStyles(stylesOrCreator, _extends_1({
        defaultTheme: defaultTheme
      }, options));
    }
  
    var styled$1 = function styled$1(Component) {
      var componentCreator = styled(Component);
      return function (style, options) {
        return componentCreator(style, _extends_1({
          defaultTheme: defaultTheme
        }, options));
      };
    };
  
    function useTheme$1() {
      return useTheme() || defaultTheme;
    }
  
    function withStyles$1(stylesOrCreator, options) {
      return withStyles(stylesOrCreator, _extends_1({
        defaultTheme: defaultTheme
      }, options));
    }
  
    var withTheme$1 = withThemeCreator({
      defaultTheme: defaultTheme
    });
  
    //
    // A strict capitalization should uppercase the first letter of each word a the sentence.
    // We only handle the first word.
  
    function capitalize(string) {
      if (typeof string !== 'string') {
        throw new Error('Material-UI: capitalize(string) expects a string argument.');
      }
  
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
    /**
     * Safe chained function
     *
     * Will only create a new function if needed,
     * otherwise will pass back existing functions or null.
     *
     * @param {function} functions to chain
     * @returns {function|null}
     */
  
    function createChainedFunction() {
      for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
        funcs[_key] = arguments[_key];
      }
  
      return funcs.reduce(function (acc, func) {
        if (func == null) {
          return acc;
        }
  
        warning_1(typeof func === 'function', 'Material-UI: invalid Argument Type, must only provide functions, undefined, or null.');
        return function chainedFunction() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
  
          acc.apply(this, args);
          func.apply(this, args);
        };
      }, function () {});
    }
  
    var styles = function styles(theme) {
      var elevations = {};
      theme.shadows.forEach(function (shadow, index) {
        elevations["elevation".concat(index)] = {
          boxShadow: shadow
        };
      });
      return _extends_1({
        /* Styles applied to the root element. */
        root: {
          backgroundColor: theme.palette.background.paper,
          color: theme.palette.text.primary,
          transition: theme.transitions.create('box-shadow')
        },
  
        /* Styles applied to the root element if `square={false}`. */
        rounded: {
          borderRadius: theme.shape.borderRadius
        }
      }, elevations);
    };
    var Paper = React__default.forwardRef(function Paper(props, ref) {
      var classes = props.classes,
          classNameProp = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _props$square = props.square,
          square = _props$square === void 0 ? false : _props$square,
          _props$elevation = props.elevation,
          elevation = _props$elevation === void 0 ? 1 : _props$elevation,
          other = objectWithoutProperties(props, ["classes", "className", "component", "square", "elevation"]);
  
      warning_1(elevation >= 0 && elevation < 25, "Material-UI: this elevation `".concat(elevation, "` is not implemented."));
      var className = clsx(classes.root, classes["elevation".concat(elevation)], classNameProp, !square && classes.rounded);
      return React__default.createElement(Component, _extends_1({
        className: className,
        ref: ref
      }, other));
    });
    Paper.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * Shadow depth, corresponds to `dp` in the spec.
       * It accepts values between 0 and 24 inclusive.
       */
      elevation: propTypes.number,
  
      /**
       * If `true`, rounded corners are disabled.
       */
      square: propTypes.bool
    };
    var Paper$1 = withStyles$1(styles, {
      name: 'MuiPaper'
    })(Paper);
  
    var styles$1 = function styles(theme) {
      var backgroundColorDefault = theme.palette.type === 'light' ? theme.palette.grey[100] : theme.palette.grey[900];
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'flex',
          flexDirection: 'column',
          width: '100%',
          boxSizing: 'border-box',
          // Prevent padding issue with the Modal and fixed positioned AppBar.
          zIndex: theme.zIndex.appBar,
          flexShrink: 0
        },
  
        /* Styles applied to the root element if `position="fixed"`. */
        positionFixed: {
          position: 'fixed',
          top: 0,
          left: 'auto',
          right: 0
        },
  
        /* Styles applied to the root element if `position="absolute"`. */
        positionAbsolute: {
          position: 'absolute',
          top: 0,
          left: 'auto',
          right: 0
        },
  
        /* Styles applied to the root element if `position="sticky"`. */
        positionSticky: {
          position: 'sticky',
          top: 0,
          left: 'auto',
          right: 0
        },
  
        /* Styles applied to the root element if `position="static"`. */
        positionStatic: {
          position: 'static'
        },
  
        /* Styles applied to the root element if `position="relative"`. */
        positionRelative: {
          position: 'relative'
        },
  
        /* Styles applied to the root element if `color="default"`. */
        colorDefault: {
          backgroundColor: backgroundColorDefault,
          color: theme.palette.getContrastText(backgroundColorDefault)
        },
  
        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          backgroundColor: theme.palette.primary.main,
          color: theme.palette.primary.contrastText
        },
  
        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          backgroundColor: theme.palette.secondary.main,
          color: theme.palette.secondary.contrastText
        }
      };
    };
    var AppBar = React__default.forwardRef(function AppBar(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'primary' : _props$color,
          _props$position = props.position,
          position = _props$position === void 0 ? 'fixed' : _props$position,
          other = objectWithoutProperties(props, ["classes", "className", "color", "position"]);
  
      return React__default.createElement(Paper$1, _extends_1({
        square: true,
        component: "header",
        elevation: 4,
        className: clsx(classes.root, classes["position".concat(capitalize(position))], className, color !== 'inherit' && classes["color".concat(capitalize(color))], position === 'fixed' && 'mui-fixed'),
        ref: ref
      }, other));
    });
    AppBar.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['inherit', 'primary', 'secondary', 'default']),
  
      /**
       * The positioning type. The behavior of the different options is described
       * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).
       * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.
       */
      position: propTypes.oneOf(['fixed', 'absolute', 'sticky', 'static', 'relative'])
    };
    var AppBar$1 = withStyles$1(styles$1, {
      name: 'MuiAppBar'
    })(AppBar);
  
    var styles$2 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'relative',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          flexShrink: 0,
          width: 40,
          height: 40,
          fontFamily: theme.typography.fontFamily,
          fontSize: theme.typography.pxToRem(20),
          borderRadius: '50%',
          overflow: 'hidden',
          userSelect: 'none'
        },
  
        /* Styles applied to the root element if there are children and not `src` or `srcSet`. */
        colorDefault: {
          color: theme.palette.background.default,
          backgroundColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]
        },
  
        /* Styles applied to the img element if either `src` or `srcSet` is defined. */
        img: {
          width: '100%',
          height: '100%',
          textAlign: 'center',
          // Handle non-square image. The property isn't supported by IE 11.
          objectFit: 'cover'
        }
      };
    };
    var Avatar = React__default.forwardRef(function Avatar(props, ref) {
      var alt = props.alt,
          childrenProp = props.children,
          childrenClassNameProp = props.childrenClassName,
          classes = props.classes,
          classNameProp = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          imgProps = props.imgProps,
          sizes = props.sizes,
          src = props.src,
          srcSet = props.srcSet,
          other = objectWithoutProperties(props, ["alt", "children", "childrenClassName", "classes", "className", "component", "imgProps", "sizes", "src", "srcSet"]);
  
      var children = null;
      var img = src || srcSet;
  
      if (img) {
        children = React__default.createElement("img", _extends_1({
          alt: alt,
          src: src,
          srcSet: srcSet,
          sizes: sizes,
          className: classes.img
        }, imgProps));
      } else if (childrenClassNameProp && React__default.isValidElement(childrenProp)) {
        children = React__default.cloneElement(childrenProp, {
          className: clsx(childrenClassNameProp, childrenProp.props.className)
        });
      } else {
        children = childrenProp;
      }
  
      return React__default.createElement(Component, _extends_1({
        className: clsx(classes.root, classes.system, classNameProp, !img && classes.colorDefault),
        ref: ref
      }, other), children);
    });
    Avatar.propTypes = {
      /**
       * Used in combination with `src` or `srcSet` to
       * provide an alt attribute for the rendered `img` element.
       */
      alt: propTypes.string,
  
      /**
       * Used to render icon or text elements inside the Avatar.
       * `src` and `alt` props will not be used and no `img` will
       * be rendered by default.
       *
       * This can be an element, or just a string.
       */
      children: propTypes.node,
  
      /**
       * @ignore
       * The className of the child element.
       * Used by Chip and ListItemIcon to style the Avatar icon.
       */
      childrenClassName: propTypes.string,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * Attributes applied to the `img` element if the component
       * is used to display an image.
       */
      imgProps: propTypes.object,
  
      /**
       * The `sizes` attribute for the `img` element.
       */
      sizes: propTypes.string,
  
      /**
       * The `src` attribute for the `img` element.
       */
      src: propTypes.string,
  
      /**
       * The `srcSet` attribute for the `img` element.
       */
      srcSet: propTypes.string
    };
    var Avatar$1 = withStyles$1(styles$2, {
      name: 'MuiAvatar'
    })(Avatar);
  
    function _objectWithoutPropertiesLoose$1(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
  
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
  
      return target;
    }
  
    var timeoutsShape = propTypes.oneOfType([propTypes.number, propTypes.shape({
      enter: propTypes.number,
      exit: propTypes.number,
      appear: propTypes.number
    }).isRequired]);
    var classNamesShape = propTypes.oneOfType([propTypes.string, propTypes.shape({
      enter: propTypes.string,
      exit: propTypes.string,
      active: propTypes.string
    }), propTypes.shape({
      enter: propTypes.string,
      enterDone: propTypes.string,
      enterActive: propTypes.string,
      exit: propTypes.string,
      exitDone: propTypes.string,
      exitActive: propTypes.string
    })]);
  
    var TransitionGroupContext = React__default.createContext(null);
  
    var UNMOUNTED = 'unmounted';
    var EXITED = 'exited';
    var ENTERING = 'entering';
    var ENTERED = 'entered';
    var EXITING = 'exiting';
    /**
     * The Transition component lets you describe a transition from one component
     * state to another _over time_ with a simple declarative API. Most commonly
     * it's used to animate the mounting and unmounting of a component, but can also
     * be used to describe in-place transition states as well.
     *
     * ---
     *
     * **Note**: `Transition` is a platform-agnostic base component. If you're using
     * transitions in CSS, you'll probably want to use
     * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
     * instead. It inherits all the features of `Transition`, but contains
     * additional features necessary to play nice with CSS transitions (hence the
     * name of the component).
     *
     * ---
     *
     * By default the `Transition` component does not alter the behavior of the
     * component it renders, it only tracks "enter" and "exit" states for the
     * components. It's up to you to give meaning and effect to those states. For
     * example we can add styles to a component when it enters or exits:
     *
     * ```jsx
     * import { Transition } from 'react-transition-group';
     *
     * const duration = 300;
     *
     * const defaultStyle = {
     *   transition: `opacity ${duration}ms ease-in-out`,
     *   opacity: 0,
     * }
     *
     * const transitionStyles = {
     *   entering: { opacity: 1 },
     *   entered:  { opacity: 1 },
     *   exiting:  { opacity: 0 },
     *   exited:  { opacity: 0 },
     * };
     *
     * const Fade = ({ in: inProp }) => (
     *   <Transition in={inProp} timeout={duration}>
     *     {state => (
     *       <div style={{
     *         ...defaultStyle,
     *         ...transitionStyles[state]
     *       }}>
     *         I'm a fade Transition!
     *       </div>
     *     )}
     *   </Transition>
     * );
     * ```
     *
     * There are 4 main states a Transition can be in:
     *  - `'entering'`
     *  - `'entered'`
     *  - `'exiting'`
     *  - `'exited'`
     *
     * Transition state is toggled via the `in` prop. When `true` the component
     * begins the "Enter" stage. During this stage, the component will shift from
     * its current transition state, to `'entering'` for the duration of the
     * transition and then to the `'entered'` stage once it's complete. Let's take
     * the following example (we'll use the
     * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
     *
     * ```jsx
     * function App() {
     *   const [inProp, setInProp] = useState(false);
     *   return (
     *     <div>
     *       <Transition in={inProp} timeout={500}>
     *         {state => (
     *           // ...
     *         )}
     *       </Transition>
     *       <button onClick={() => setInProp(true)}>
     *         Click to Enter
     *       </button>
     *     </div>
     *   );
     * }
     * ```
     *
     * When the button is clicked the component will shift to the `'entering'` state
     * and stay there for 500ms (the value of `timeout`) before it finally switches
     * to `'entered'`.
     *
     * When `in` is `false` the same thing happens except the state moves from
     * `'exiting'` to `'exited'`.
     */
  
    var Transition =
    /*#__PURE__*/
    function (_React$Component) {
      _inheritsLoose(Transition, _React$Component);
  
      function Transition(props, context) {
        var _this;
  
        _this = _React$Component.call(this, props, context) || this;
        var parentGroup = context; // In the context of a TransitionGroup all enters are really appears
  
        var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
        var initialStatus;
        _this.appearStatus = null;
  
        if (props.in) {
          if (appear) {
            initialStatus = EXITED;
            _this.appearStatus = ENTERING;
          } else {
            initialStatus = ENTERED;
          }
        } else {
          if (props.unmountOnExit || props.mountOnEnter) {
            initialStatus = UNMOUNTED;
          } else {
            initialStatus = EXITED;
          }
        }
  
        _this.state = {
          status: initialStatus
        };
        _this.nextCallback = null;
        return _this;
      }
  
      Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
        var nextIn = _ref.in;
  
        if (nextIn && prevState.status === UNMOUNTED) {
          return {
            status: EXITED
          };
        }
  
        return null;
      }; // getSnapshotBeforeUpdate(prevProps) {
      //   let nextStatus = null
      //   if (prevProps !== this.props) {
      //     const { status } = this.state
      //     if (this.props.in) {
      //       if (status !== ENTERING && status !== ENTERED) {
      //         nextStatus = ENTERING
      //       }
      //     } else {
      //       if (status === ENTERING || status === ENTERED) {
      //         nextStatus = EXITING
      //       }
      //     }
      //   }
      //   return { nextStatus }
      // }
  
  
      var _proto = Transition.prototype;
  
      _proto.componentDidMount = function componentDidMount() {
        this.updateStatus(true, this.appearStatus);
      };
  
      _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        var nextStatus = null;
  
        if (prevProps !== this.props) {
          var status = this.state.status;
  
          if (this.props.in) {
            if (status !== ENTERING && status !== ENTERED) {
              nextStatus = ENTERING;
            }
          } else {
            if (status === ENTERING || status === ENTERED) {
              nextStatus = EXITING;
            }
          }
        }
  
        this.updateStatus(false, nextStatus);
      };
  
      _proto.componentWillUnmount = function componentWillUnmount() {
        this.cancelNextCallback();
      };
  
      _proto.getTimeouts = function getTimeouts() {
        var timeout = this.props.timeout;
        var exit, enter, appear;
        exit = enter = appear = timeout;
  
        if (timeout != null && typeof timeout !== 'number') {
          exit = timeout.exit;
          enter = timeout.enter; // TODO: remove fallback for next major
  
          appear = timeout.appear !== undefined ? timeout.appear : enter;
        }
  
        return {
          exit: exit,
          enter: enter,
          appear: appear
        };
      };
  
      _proto.updateStatus = function updateStatus(mounting, nextStatus) {
        if (mounting === void 0) {
          mounting = false;
        }
  
        if (nextStatus !== null) {
          // nextStatus will always be ENTERING or EXITING.
          this.cancelNextCallback();
          var node = ReactDOM__default.findDOMNode(this);
  
          if (nextStatus === ENTERING) {
            this.performEnter(node, mounting);
          } else {
            this.performExit(node);
          }
        } else if (this.props.unmountOnExit && this.state.status === EXITED) {
          this.setState({
            status: UNMOUNTED
          });
        }
      };
  
      _proto.performEnter = function performEnter(node, mounting) {
        var _this2 = this;
  
        var enter = this.props.enter;
        var appearing = this.context ? this.context.isMounting : mounting;
        var timeouts = this.getTimeouts();
        var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
        // if we are mounting and running this it means appear _must_ be set
  
        if (!mounting && !enter) {
          this.safeSetState({
            status: ENTERED
          }, function () {
            _this2.props.onEntered(node);
          });
          return;
        }
  
        this.props.onEnter(node, appearing);
        this.safeSetState({
          status: ENTERING
        }, function () {
          _this2.props.onEntering(node, appearing);
  
          _this2.onTransitionEnd(node, enterTimeout, function () {
            _this2.safeSetState({
              status: ENTERED
            }, function () {
              _this2.props.onEntered(node, appearing);
            });
          });
        });
      };
  
      _proto.performExit = function performExit(node) {
        var _this3 = this;
  
        var exit = this.props.exit;
        var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED
  
        if (!exit) {
          this.safeSetState({
            status: EXITED
          }, function () {
            _this3.props.onExited(node);
          });
          return;
        }
  
        this.props.onExit(node);
        this.safeSetState({
          status: EXITING
        }, function () {
          _this3.props.onExiting(node);
  
          _this3.onTransitionEnd(node, timeouts.exit, function () {
            _this3.safeSetState({
              status: EXITED
            }, function () {
              _this3.props.onExited(node);
            });
          });
        });
      };
  
      _proto.cancelNextCallback = function cancelNextCallback() {
        if (this.nextCallback !== null) {
          this.nextCallback.cancel();
          this.nextCallback = null;
        }
      };
  
      _proto.safeSetState = function safeSetState(nextState, callback) {
        // This shouldn't be necessary, but there are weird race conditions with
        // setState callbacks and unmounting in testing, so always make sure that
        // we can cancel any pending setState callbacks after we unmount.
        callback = this.setNextCallback(callback);
        this.setState(nextState, callback);
      };
  
      _proto.setNextCallback = function setNextCallback(callback) {
        var _this4 = this;
  
        var active = true;
  
        this.nextCallback = function (event) {
          if (active) {
            active = false;
            _this4.nextCallback = null;
            callback(event);
          }
        };
  
        this.nextCallback.cancel = function () {
          active = false;
        };
  
        return this.nextCallback;
      };
  
      _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
        this.setNextCallback(handler);
        var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
  
        if (!node || doesNotHaveTimeoutOrListener) {
          setTimeout(this.nextCallback, 0);
          return;
        }
  
        if (this.props.addEndListener) {
          this.props.addEndListener(node, this.nextCallback);
        }
  
        if (timeout != null) {
          setTimeout(this.nextCallback, timeout);
        }
      };
  
      _proto.render = function render() {
        var status = this.state.status;
  
        if (status === UNMOUNTED) {
          return null;
        }
  
        var _this$props = this.props,
            children = _this$props.children,
            childProps = _objectWithoutPropertiesLoose$1(_this$props, ["children"]); // filter props for Transtition
  
  
        delete childProps.in;
        delete childProps.mountOnEnter;
        delete childProps.unmountOnExit;
        delete childProps.appear;
        delete childProps.enter;
        delete childProps.exit;
        delete childProps.timeout;
        delete childProps.addEndListener;
        delete childProps.onEnter;
        delete childProps.onEntering;
        delete childProps.onEntered;
        delete childProps.onExit;
        delete childProps.onExiting;
        delete childProps.onExited;
  
        if (typeof children === 'function') {
          // allows for nested Transitions
          return React__default.createElement(TransitionGroupContext.Provider, {
            value: null
          }, children(status, childProps));
        }
  
        var child = React__default.Children.only(children);
        return (// allows for nested Transitions
          React__default.createElement(TransitionGroupContext.Provider, {
            value: null
          }, React__default.cloneElement(child, childProps))
        );
      };
  
      return Transition;
    }(React__default.Component);
  
    Transition.contextType = TransitionGroupContext;
    Transition.propTypes = {
      /**
       * A `function` child can be used instead of a React element. This function is
       * called with the current transition status (`'entering'`, `'entered'`,
       * `'exiting'`, `'exited'`, `'unmounted'`), which can be used to apply context
       * specific props to a component.
       *
       * ```jsx
       * <Transition in={this.state.in} timeout={150}>
       *   {state => (
       *     <MyComponent className={`fade fade-${state}`} />
       *   )}
       * </Transition>
       * ```
       */
      children: propTypes_5([propTypes_3.isRequired, propTypes_6.isRequired]).isRequired,
  
      /**
       * Show the component; triggers the enter or exit states
       */
      in: propTypes_2,
  
      /**
       * By default the child component is mounted immediately along with
       * the parent `Transition` component. If you want to "lazy mount" the component on the
       * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
       * mounted, even on "exited", unless you also specify `unmountOnExit`.
       */
      mountOnEnter: propTypes_2,
  
      /**
       * By default the child component stays mounted after it reaches the `'exited'` state.
       * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
       */
      unmountOnExit: propTypes_2,
  
      /**
       * Normally a component is not transitioned if it is shown when the `<Transition>` component mounts.
       * If you want to transition on the first mount set `appear` to `true`, and the
       * component will transition in as soon as the `<Transition>` mounts.
       *
       * > Note: there are no specific "appear" states. `appear` only adds an additional `enter` transition.
       */
      appear: propTypes_2,
  
      /**
       * Enable or disable enter transitions.
       */
      enter: propTypes_2,
  
      /**
       * Enable or disable exit transitions.
       */
      exit: propTypes_2,
  
      /**
       * The duration of the transition, in milliseconds.
       * Required unless `addEndListener` is provided.
       *
       * You may specify a single timeout for all transitions:
       *
       * ```jsx
       * timeout={500}
       * ```
       *
       * or individually:
       *
       * ```jsx
       * timeout={{
       *  appear: 500,
       *  enter: 300,
       *  exit: 500,
       * }}
       * ```
       *
       * - `appear` defaults to the value of `enter`
       * - `enter` defaults to `0`
       * - `exit` defaults to `0`
       *
       * @type {number | { enter?: number, exit?: number, appear?: number }}
       */
      timeout: function timeout(props) {
        var pt = timeoutsShape;
        if (!props.addEndListener) pt = pt.isRequired;
  
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
  
        return pt.apply(void 0, [props].concat(args));
      },
  
      /**
       * Add a custom transition end trigger. Called with the transitioning
       * DOM node and a `done` callback. Allows for more fine grained transition end
       * logic. **Note:** Timeouts are still used as a fallback if provided.
       *
       * ```jsx
       * addEndListener={(node, done) => {
       *   // use the css transitionend event to mark the finish of a transition
       *   node.addEventListener('transitionend', done, false);
       * }}
       * ```
       */
      addEndListener: propTypes_3,
  
      /**
       * Callback fired before the "entering" status is applied. An extra parameter
       * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
       *
       * @type Function(node: HtmlElement, isAppearing: bool) -> void
       */
      onEnter: propTypes_3,
  
      /**
       * Callback fired after the "entering" status is applied. An extra parameter
       * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEntering: propTypes_3,
  
      /**
       * Callback fired after the "entered" status is applied. An extra parameter
       * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
       *
       * @type Function(node: HtmlElement, isAppearing: bool) -> void
       */
      onEntered: propTypes_3,
  
      /**
       * Callback fired before the "exiting" status is applied.
       *
       * @type Function(node: HtmlElement) -> void
       */
      onExit: propTypes_3,
  
      /**
       * Callback fired after the "exiting" status is applied.
       *
       * @type Function(node: HtmlElement) -> void
       */
      onExiting: propTypes_3,
  
      /**
       * Callback fired after the "exited" status is applied.
       *
       * @type Function(node: HtmlElement) -> void
       */
      onExited: propTypes_3 // Name the function so it is clearer in the documentation
  
    };
  
    function noop() {}
  
    Transition.defaultProps = {
      in: false,
      mountOnEnter: false,
      unmountOnExit: false,
      appear: false,
      enter: true,
      exit: true,
      onEnter: noop,
      onEntering: noop,
      onEntered: noop,
      onExit: noop,
      onExiting: noop,
      onExited: noop
    };
    Transition.UNMOUNTED = 0;
    Transition.EXITED = 1;
    Transition.ENTERING = 2;
    Transition.ENTERED = 3;
    Transition.EXITING = 4;
  
    /**
     * Given `this.props.children`, return an object mapping key to child.
     *
     * @param {*} children `this.props.children`
     * @return {object} Mapping of key to child
     */
  
    function getChildMapping(children, mapFn) {
      var mapper = function mapper(child) {
        return mapFn && React.isValidElement(child) ? mapFn(child) : child;
      };
  
      var result = Object.create(null);
      if (children) React.Children.map(children, function (c) {
        return c;
      }).forEach(function (child) {
        // run the map function here instead so that the key is the computed one
        result[child.key] = mapper(child);
      });
      return result;
    }
    /**
     * When you're adding or removing children some may be added or removed in the
     * same render pass. We want to show *both* since we want to simultaneously
     * animate elements in and out. This function takes a previous set of keys
     * and a new set of keys and merges them with its best guess of the correct
     * ordering. In the future we may expose some of the utilities in
     * ReactMultiChild to make this easy, but for now React itself does not
     * directly have this concept of the union of prevChildren and nextChildren
     * so we implement it here.
     *
     * @param {object} prev prev children as returned from
     * `ReactTransitionChildMapping.getChildMapping()`.
     * @param {object} next next children as returned from
     * `ReactTransitionChildMapping.getChildMapping()`.
     * @return {object} a key set that contains all keys in `prev` and all keys
     * in `next` in a reasonable order.
     */
  
    function mergeChildMappings(prev, next) {
      prev = prev || {};
      next = next || {};
  
      function getValueForKey(key) {
        return key in next ? next[key] : prev[key];
      } // For each key of `next`, the list of keys to insert before that key in
      // the combined list
  
  
      var nextKeysPending = Object.create(null);
      var pendingKeys = [];
  
      for (var prevKey in prev) {
        if (prevKey in next) {
          if (pendingKeys.length) {
            nextKeysPending[prevKey] = pendingKeys;
            pendingKeys = [];
          }
        } else {
          pendingKeys.push(prevKey);
        }
      }
  
      var i;
      var childMapping = {};
  
      for (var nextKey in next) {
        if (nextKeysPending[nextKey]) {
          for (i = 0; i < nextKeysPending[nextKey].length; i++) {
            var pendingNextKey = nextKeysPending[nextKey][i];
            childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
          }
        }
  
        childMapping[nextKey] = getValueForKey(nextKey);
      } // Finally, add the keys which didn't appear before any key in `next`
  
  
      for (i = 0; i < pendingKeys.length; i++) {
        childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
      }
  
      return childMapping;
    }
  
    function getProp(child, prop, props) {
      return props[prop] != null ? props[prop] : child.props[prop];
    }
  
    function getInitialChildMapping(props, onExited) {
      return getChildMapping(props.children, function (child) {
        return React.cloneElement(child, {
          onExited: onExited.bind(null, child),
          in: true,
          appear: getProp(child, 'appear', props),
          enter: getProp(child, 'enter', props),
          exit: getProp(child, 'exit', props)
        });
      });
    }
    function getNextChildMapping(nextProps, prevChildMapping, onExited) {
      var nextChildMapping = getChildMapping(nextProps.children);
      var children = mergeChildMappings(prevChildMapping, nextChildMapping);
      Object.keys(children).forEach(function (key) {
        var child = children[key];
        if (!React.isValidElement(child)) return;
        var hasPrev = key in prevChildMapping;
        var hasNext = key in nextChildMapping;
        var prevChild = prevChildMapping[key];
        var isLeaving = React.isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)
  
        if (hasNext && (!hasPrev || isLeaving)) {
          // console.log('entering', key)
          children[key] = React.cloneElement(child, {
            onExited: onExited.bind(null, child),
            in: true,
            exit: getProp(child, 'exit', nextProps),
            enter: getProp(child, 'enter', nextProps)
          });
        } else if (!hasNext && hasPrev && !isLeaving) {
          // item is old (exiting)
          // console.log('leaving', key)
          children[key] = React.cloneElement(child, {
            in: false
          });
        } else if (hasNext && hasPrev && React.isValidElement(prevChild)) {
          // item hasn't changed transition states
          // copy over the last transition props;
          // console.log('unchanged', key)
          children[key] = React.cloneElement(child, {
            onExited: onExited.bind(null, child),
            in: prevChild.props.in,
            exit: getProp(child, 'exit', nextProps),
            enter: getProp(child, 'enter', nextProps)
          });
        }
      });
      return children;
    }
  
    var values = Object.values || function (obj) {
      return Object.keys(obj).map(function (k) {
        return obj[k];
      });
    };
  
    var defaultProps = {
      component: 'div',
      childFactory: function childFactory(child) {
        return child;
      }
      /**
       * The `<TransitionGroup>` component manages a set of transition components
       * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
       * components, `<TransitionGroup>` is a state machine for managing the mounting
       * and unmounting of components over time.
       *
       * Consider the example below. As items are removed or added to the TodoList the
       * `in` prop is toggled automatically by the `<TransitionGroup>`.
       *
       * Note that `<TransitionGroup>`  does not define any animation behavior!
       * Exactly _how_ a list item animates is up to the individual transition
       * component. This means you can mix and match animations across different list
       * items.
       */
  
    };
  
    var TransitionGroup =
    /*#__PURE__*/
    function (_React$Component) {
      _inheritsLoose(TransitionGroup, _React$Component);
  
      function TransitionGroup(props, context) {
        var _this;
  
        _this = _React$Component.call(this, props, context) || this;
  
        var handleExited = _this.handleExited.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Initial children should all be entering, dependent on appear
  
  
        _this.state = {
          contextValue: {
            isMounting: true
          },
          handleExited: handleExited,
          firstRender: true
        };
        return _this;
      }
  
      var _proto = TransitionGroup.prototype;
  
      _proto.componentDidMount = function componentDidMount() {
        this.mounted = true;
        this.setState({
          contextValue: {
            isMounting: false
          }
        });
      };
  
      _proto.componentWillUnmount = function componentWillUnmount() {
        this.mounted = false;
      };
  
      TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
        var prevChildMapping = _ref.children,
            handleExited = _ref.handleExited,
            firstRender = _ref.firstRender;
        return {
          children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
          firstRender: false
        };
      };
  
      _proto.handleExited = function handleExited(child, node) {
        var currentChildMapping = getChildMapping(this.props.children);
        if (child.key in currentChildMapping) return;
  
        if (child.props.onExited) {
          child.props.onExited(node);
        }
  
        if (this.mounted) {
          this.setState(function (state) {
            var children = _extends({}, state.children);
  
            delete children[child.key];
            return {
              children: children
            };
          });
        }
      };
  
      _proto.render = function render() {
        var _this$props = this.props,
            Component = _this$props.component,
            childFactory = _this$props.childFactory,
            props = _objectWithoutPropertiesLoose$1(_this$props, ["component", "childFactory"]);
  
        var contextValue = this.state.contextValue;
        var children = values(this.state.children).map(childFactory);
        delete props.appear;
        delete props.enter;
        delete props.exit;
  
        if (Component === null) {
          return React__default.createElement(TransitionGroupContext.Provider, {
            value: contextValue
          }, children);
        }
  
        return React__default.createElement(TransitionGroupContext.Provider, {
          value: contextValue
        }, React__default.createElement(Component, props, children));
      };
  
      return TransitionGroup;
    }(React__default.Component);
  
    TransitionGroup.propTypes = {
      /**
       * `<TransitionGroup>` renders a `<div>` by default. You can change this
       * behavior by providing a `component` prop.
       * If you use React v16+ and would like to avoid a wrapping `<div>` element
       * you can pass in `component={null}`. This is useful if the wrapping div
       * borks your css styles.
       */
      component: propTypes.any,
  
      /**
       * A set of `<Transition>` components, that are toggled `in` and out as they
       * leave. the `<TransitionGroup>` will inject specific transition props, so
       * remember to spread them through if you are wrapping the `<Transition>` as
       * with our `<Fade>` example.
       *
       * While this component is meant for multiple `Transition` or `CSSTransition`
       * children, sometimes you may want to have a single transition child with
       * content that you want to be transitioned out and in when you change it
       * (e.g. routes, images etc.) In that case you can change the `key` prop of
       * the transition child as you change its content, this will cause
       * `TransitionGroup` to transition the child out and back in.
       */
      children: propTypes.node,
  
      /**
       * A convenience prop that enables or disables appear animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      appear: propTypes.bool,
  
      /**
       * A convenience prop that enables or disables enter animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      enter: propTypes.bool,
  
      /**
       * A convenience prop that enables or disables exit animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      exit: propTypes.bool,
  
      /**
       * You may need to apply reactive updates to a child as it is exiting.
       * This is generally done by using `cloneElement` however in the case of an exiting
       * child the element has already been removed and not accessible to the consumer.
       *
       * If you do need to update a child as it leaves you can provide a `childFactory`
       * to wrap every child, even the ones that are leaving.
       *
       * @type Function(child: ReactElement) -> ReactElement
       */
      childFactory: propTypes.func
    };
    TransitionGroup.defaultProps = defaultProps;
  
    var reflow = function reflow(node) {
      return node.scrollTop;
    };
    function getTransitionProps(props, options) {
      var timeout = props.timeout,
          _props$style = props.style,
          style = _props$style === void 0 ? {} : _props$style;
      return {
        duration: style.transitionDuration || typeof timeout === 'number' ? timeout : timeout[options.mode],
        delay: style.transitionDelay
      };
    }
  
    function isMuiElement(element, muiNames) {
      return React__default.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
    }
    function setRef(ref, value) {
      if (typeof ref === 'function') {
        ref(value);
      } else if (ref) {
        ref.current = value;
      }
    }
    function useForkRef(refA, refB) {
      /**
       * This will create a new function if the ref props change and are defined.
       * This means react will call the old forkRef with `null` and the new forkRef
       * with the ref. Cleanup naturally emerges from this behavior
       */
      return React__default.useMemo(function () {
        if (refA == null && refB == null) {
          return null;
        }
  
        return function (refValue) {
          setRef(refA, refValue);
          setRef(refB, refValue);
        };
      }, [refA, refB]);
    }
  
    var styles$3 = {
      entering: {
        opacity: 1
      },
      entered: {
        opacity: 1
      }
    };
    var defaultTimeout = {
      enter: duration.enteringScreen,
      exit: duration.leavingScreen
    };
    /**
     * The Fade transition is used by the [Modal](/components/modal/) component.
     * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
     */
  
    var Fade = React__default.forwardRef(function Fade(props, ref) {
      var children = props.children,
          inProp = props.in,
          onEnter = props.onEnter,
          onExit = props.onExit,
          style = props.style,
          theme = props.theme,
          _props$timeout = props.timeout,
          timeout = _props$timeout === void 0 ? defaultTimeout : _props$timeout,
          other = objectWithoutProperties(props, ["children", "in", "onEnter", "onExit", "style", "theme", "timeout"]);
  
      var handleRef = useForkRef(children.ref, ref);
  
      var handleEnter = function handleEnter(node) {
        reflow(node); // So the animation always start from the start.
  
        var transitionProps = getTransitionProps({
          style: style,
          timeout: timeout
        }, {
          mode: 'enter'
        });
        node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
        node.style.transition = theme.transitions.create('opacity', transitionProps);
  
        if (onEnter) {
          onEnter(node);
        }
      };
  
      var handleExit = function handleExit(node) {
        var transitionProps = getTransitionProps({
          style: style,
          timeout: timeout
        }, {
          mode: 'exit'
        });
        node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
        node.style.transition = theme.transitions.create('opacity', transitionProps);
  
        if (onExit) {
          onExit(node);
        }
      };
  
      return React__default.createElement(Transition, _extends_1({
        appear: true,
        in: inProp,
        onEnter: handleEnter,
        onExit: handleExit,
        timeout: timeout
      }, other), function (state, childProps) {
        return React__default.cloneElement(children, _extends_1({
          style: _extends_1({
            opacity: 0,
            visibility: state === 'exited' && !inProp ? 'hidden' : undefined
          }, styles$3[state], style, children.props.style),
          ref: handleRef
        }, childProps));
      });
    });
    Fade.propTypes = {
      /**
       * A single child content element.
       */
      children: propTypes.element,
  
      /**
       * If `true`, the component will transition in.
       */
      in: propTypes.bool,
  
      /**
       * @ignore
       */
      onEnter: propTypes.func,
  
      /**
       * @ignore
       */
      onExit: propTypes.func,
  
      /**
       * @ignore
       */
      style: propTypes.object,
  
      /**
       * @ignore
       */
      theme: propTypes.object.isRequired,
  
      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      timeout: propTypes.oneOfType([propTypes.number, propTypes.shape({
        enter: propTypes.number,
        exit: propTypes.number
      })])
    };
    var Fade$1 = withTheme$1(Fade);
  
    var styles$4 = {
      /* Styles applied to the root element. */
      root: {
        zIndex: -1,
        position: 'fixed',
        right: 0,
        bottom: 0,
        top: 0,
        left: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        // Remove grey highlight
        WebkitTapHighlightColor: 'transparent',
        // Disable scroll capabilities.
        touchAction: 'none'
      },
  
      /* Styles applied to the root element if `invisible={true}`. */
      invisible: {
        backgroundColor: 'transparent'
      }
    };
    var Backdrop = React__default.forwardRef(function Backdrop(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$invisible = props.invisible,
          invisible = _props$invisible === void 0 ? false : _props$invisible,
          open = props.open,
          transitionDuration = props.transitionDuration,
          other = objectWithoutProperties(props, ["classes", "className", "invisible", "open", "transitionDuration"]);
  
      return React__default.createElement(Fade$1, _extends_1({
        in: open,
        timeout: transitionDuration
      }, other), React__default.createElement("div", {
        className: clsx(classes.root, className, invisible && classes.invisible),
        "aria-hidden": true,
        ref: ref
      }));
    });
    Backdrop.propTypes = {
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * If `true`, the backdrop is invisible.
       * It can be used when rendering a popover or a custom select component.
       */
      invisible: propTypes.bool,
  
      /**
       * If `true`, the backdrop is open.
       */
      open: propTypes.bool.isRequired,
  
      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      transitionDuration: propTypes.oneOfType([propTypes.number, propTypes.shape({
        enter: propTypes.number,
        exit: propTypes.number
      })])
    };
    var Backdrop$1 = withStyles$1(styles$4, {
      name: 'MuiBackdrop'
    })(Backdrop);
  
    var RADIUS = 10;
    var styles$5 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'relative',
          display: 'inline-flex',
          // For correct alignment with the text.
          verticalAlign: 'middle'
        },
  
        /* Styles applied to the badge `span` element. */
        badge: {
          display: 'flex',
          flexDirection: 'row',
          flexWrap: 'wrap',
          justifyContent: 'center',
          alignContent: 'center',
          alignItems: 'center',
          position: 'absolute',
          top: 0,
          right: 0,
          boxSizing: 'border-box',
          fontFamily: theme.typography.fontFamily,
          fontWeight: theme.typography.fontWeightMedium,
          fontSize: theme.typography.pxToRem(12),
          minWidth: RADIUS * 2,
          padding: '0 4px',
          height: RADIUS * 2,
          borderRadius: RADIUS,
          backgroundColor: theme.palette.color,
          color: theme.palette.textColor,
          zIndex: 1,
          // Render the badge on top of potential ripples.
          transform: 'scale(1) translate(50%, -50%)',
          transformOrigin: '100% 0%',
          transition: theme.transitions.create('transform', {
            easing: theme.transitions.easing.easeInOut,
            duration: theme.transitions.duration.enteringScreen
          })
        },
  
        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          backgroundColor: theme.palette.primary.main,
          color: theme.palette.primary.contrastText
        },
  
        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          backgroundColor: theme.palette.secondary.main,
          color: theme.palette.secondary.contrastText
        },
  
        /* Styles applied to the root element if `color="error"`. */
        colorError: {
          backgroundColor: theme.palette.error.main,
          color: theme.palette.error.contrastText
        },
  
        /* Styles applied to the badge `span` element if `invisible={true}`. */
        invisible: {
          transition: theme.transitions.create('transform', {
            easing: theme.transitions.easing.easeInOut,
            duration: theme.transitions.duration.leavingScreen
          }),
          transform: 'scale(0) translate(50%, -50%)',
          transformOrigin: '100% 0%'
        },
  
        /* Styles applied to the root element if `variant="dot"`. */
        dot: {
          height: 6,
          minWidth: 6,
          padding: 0
        }
      };
    };
    var Badge = React__default.forwardRef(function Badge(props, ref) {
      var badgeContent = props.badgeContent,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'default' : _props$color,
          _props$component = props.component,
          ComponentProp = _props$component === void 0 ? 'span' : _props$component,
          invisibleProp = props.invisible,
          _props$max = props.max,
          max = _props$max === void 0 ? 99 : _props$max,
          _props$showZero = props.showZero,
          showZero = _props$showZero === void 0 ? false : _props$showZero,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'standard' : _props$variant,
          other = objectWithoutProperties(props, ["badgeContent", "children", "classes", "className", "color", "component", "invisible", "max", "showZero", "variant"]);
  
      var invisible = invisibleProp;
  
      if (invisibleProp == null && (badgeContent === 0 && !showZero || badgeContent == null && variant !== 'dot')) {
        invisible = true;
      }
  
      var displayValue = '';
  
      if (variant !== 'dot') {
        displayValue = badgeContent > max ? "".concat(max, "+") : badgeContent;
      }
  
      return React__default.createElement(ComponentProp, _extends_1({
        className: clsx(classes.root, className),
        ref: ref
      }, other), children, React__default.createElement("span", {
        className: clsx(classes.badge, color !== 'default' && classes["color".concat(capitalize(color))], invisible && classes.invisible, variant === 'dot' && classes.dot)
      }, displayValue));
    });
    Badge.propTypes = {
      /**
       * The content rendered within the badge.
       */
      badgeContent: propTypes.node,
  
      /**
       * The badge will be added relative to this node.
       */
      children: propTypes.node.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['default', 'primary', 'secondary', 'error']),
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * If `true`, the badge will be invisible.
       */
      invisible: propTypes.bool,
  
      /**
       * Max count to show.
       */
      max: propTypes.number,
  
      /**
       * Controls whether the badge is hidden when `badgeContent` is zero.
       */
      showZero: propTypes.bool,
  
      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['standard', 'dot'])
    };
    var Badge$1 = withStyles$1(styles$5, {
      name: 'MuiBadge'
    })(Badge);
  
    var styles$6 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'flex',
          justifyContent: 'center',
          height: 56,
          backgroundColor: theme.palette.background.paper
        }
      };
    };
    var BottomNavigation = React__default.forwardRef(function BottomNavigation(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          onChange = props.onChange,
          _props$showLabels = props.showLabels,
          showLabels = _props$showLabels === void 0 ? false : _props$showLabels,
          value = props.value,
          other = objectWithoutProperties(props, ["children", "classes", "className", "component", "onChange", "showLabels", "value"]);
  
      return React__default.createElement(Component, _extends_1({
        className: clsx(classes.root, className),
        ref: ref
      }, other), React__default.Children.map(children, function (child, childIndex) {
        if (!React__default.isValidElement(child)) {
          return null;
        }
  
        warning_1(child.type !== React__default.Fragment, ["Material-UI: the BottomNavigation component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
        var childValue = child.props.value === undefined ? childIndex : child.props.value;
        return React__default.cloneElement(child, {
          selected: childValue === value,
          showLabel: child.props.showLabel !== undefined ? child.props.showLabel : showLabels,
          value: childValue,
          onChange: onChange
        });
      }));
    });
    BottomNavigation.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * Callback fired when the value changes.
       *
       * @param {object} event The event source of the callback
       * @param {any} value We default to the index of the child
       */
      onChange: propTypes.func,
  
      /**
       * If `true`, all `BottomNavigationAction`s will show their labels.
       * By default, only the selected `BottomNavigationAction` will show its label.
       */
      showLabels: propTypes.bool,
  
      /**
       * The value of the currently selected `BottomNavigationAction`.
       */
      value: propTypes.any
    };
    var BottomNavigation$1 = withStyles$1(styles$6, {
      name: 'MuiBottomNavigation'
    })(BottomNavigation);
  
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
  
    var arrayWithHoles = _arrayWithHoles;
  
    function _iterableToArrayLimit(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;
  
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
  
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
  
      return _arr;
    }
  
    var iterableToArrayLimit = _iterableToArrayLimit;
  
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  
    var nonIterableRest = _nonIterableRest;
  
    function _slicedToArray(arr, i) {
      return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
    }
  
    var slicedToArray = _slicedToArray;
  
    var useEnhancedEffect = typeof window !== 'undefined' && "development" !== 'test' ? React__default.useLayoutEffect : React__default.useEffect;
    /**
     * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).
     *
     * This component can be useful in a variety of situations:
     * - Escape hatch for broken dependencies not supporting SSR.
     * - Improve the time-to-first paint on the client by only rendering above the fold.
     * - Reduce the rendering time on the server.
     * - Under too heavy server load, you can turn on service degradation.
     */
  
    function NoSsr(props) {
      var children = props.children,
          _props$defer = props.defer,
          defer = _props$defer === void 0 ? false : _props$defer,
          _props$fallback = props.fallback,
          fallback = _props$fallback === void 0 ? null : _props$fallback;
  
      var _React$useState = React__default.useState(false),
          _React$useState2 = slicedToArray(_React$useState, 2),
          mountedState = _React$useState2[0],
          setMountedState = _React$useState2[1];
  
      useEnhancedEffect(function () {
        if (!defer) {
          setMountedState(true);
        }
      }, [defer]);
      React__default.useEffect(function () {
        if (defer) {
          setMountedState(true);
        }
      }, [defer]); // We need the Fragment here to force react-docgen to recognise NoSsr as a component.
  
      return React__default.createElement(React__default.Fragment, null, mountedState ? children : fallback);
    }
  
    NoSsr.propTypes = {
      /**
       * You can wrap a node.
       */
      children: propTypes.node.isRequired,
  
      /**
       * If `true`, the component will not only prevent server-side rendering.
       * It will also defer the rendering of the children into a different screen frame.
       */
      defer: propTypes.bool,
  
      /**
       * The fallback content to display.
       */
      fallback: propTypes.node
    };
  
    {
      // eslint-disable-next-line
      NoSsr['propTypes' + ''] = exactProp(NoSsr.propTypes);
    }
  
    // based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js
    var hadKeyboardEvent = true;
    var hadFocusVisibleRecently = false;
    var hadFocusVisibleRecentlyTimeout = null;
    var inputTypesWhitelist = {
      text: true,
      search: true,
      url: true,
      tel: true,
      email: true,
      password: true,
      number: true,
      date: true,
      month: true,
      week: true,
      time: true,
      datetime: true,
      'datetime-local': true
    };
    /**
     * Computes whether the given element should automatically trigger the
     * `focus-visible` class being added, i.e. whether it should always match
     * `:focus-visible` when focused.
     * @param {Element} node
     * @return {boolean}
     */
  
    function focusTriggersKeyboardModality(node) {
      var type = node.type,
          tagName = node.tagName;
  
      if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {
        return true;
      }
  
      if (tagName === 'TEXTAREA' && !node.readOnly) {
        return true;
      }
  
      if (node.isContentEditable) {
        return true;
      }
  
      return false;
    }
  
    function handleKeyDown() {
      hadKeyboardEvent = true;
    }
    /**
     * If at any point a user clicks with a pointing device, ensure that we change
     * the modality away from keyboard.
     * This avoids the situation where a user presses a key on an already focused
     * element, and then clicks on a different element, focusing it with a
     * pointing device, while we still think we're in keyboard modality.
     * @param {Event} e
     */
  
  
    function handlePointerDown() {
      hadKeyboardEvent = false;
    }
  
    function handleVisibilityChange() {
      if (this.visibilityState === 'hidden') {
        // If the tab becomes active again, the browser will handle calling focus
        // on the element (Safari actually calls it twice).
        // If this tab change caused a blur on an element with focus-visible,
        // re-apply the class when the user switches back to the tab.
        if (hadFocusVisibleRecently) {
          hadKeyboardEvent = true;
        }
      }
    }
  
    function prepare(ownerDocument) {
      ownerDocument.addEventListener('keydown', handleKeyDown, true);
      ownerDocument.addEventListener('mousedown', handlePointerDown, true);
      ownerDocument.addEventListener('pointerdown', handlePointerDown, true);
      ownerDocument.addEventListener('touchstart', handlePointerDown, true);
      ownerDocument.addEventListener('visibilitychange', handleVisibilityChange, true);
    }
  
    function isFocusVisible(event) {
      var target = event.target;
  
      try {
        return target.matches(':focus-visible');
      } catch (error) {} // browsers not implementing :focus-visible will throw a SyntaxError
      // we use our own heuristic for those browsers
      // rethrow might be better if it's not the expected error but do we really
      // want to crash if focus-visible malfunctioned?
      // no need for validFocusTarget check. the user does that by attaching it to
      // focusable events only
  
  
      return hadKeyboardEvent || focusTriggersKeyboardModality(target);
    }
    /**
     * Should be called if a blur event is fired on a focus-visible element
     */
  
  
    function handleBlurVisible() {
      // To detect a tab/window switch, we look for a blur event followed
      // rapidly by a visibility change.
      // If we don't see a visibility change within 100ms, it's probably a
      // regular focus change.
      hadFocusVisibleRecently = true;
      window.clearTimeout(hadFocusVisibleRecentlyTimeout);
      hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {
        hadFocusVisibleRecently = false;
        window.clearTimeout(hadFocusVisibleRecentlyTimeout);
      }, 100);
    }
  
    function useIsFocusVisible() {
      var ref = React__default.useCallback(function (instance) {
        var node = ReactDOM__default.findDOMNode(instance);
  
        if (node != null) {
          prepare(node.ownerDocument);
        }
      }, []);
      return {
        isFocusVisible: isFocusVisible,
        onBlurVisible: handleBlurVisible,
        ref: ref
      };
    }
  
    function _arrayWithoutHoles$1(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
          arr2[i] = arr[i];
        }
  
        return arr2;
      }
    }
  
    var arrayWithoutHoles = _arrayWithoutHoles$1;
  
    function _iterableToArray$1(iter) {
      if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
    }
  
    var iterableToArray = _iterableToArray$1;
  
    function _nonIterableSpread$1() {
      throw new TypeError("Invalid attempt to spread non-iterable instance");
    }
  
    var nonIterableSpread = _nonIterableSpread$1;
  
    function _toConsumableArray$1(arr) {
      return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
    }
  
    var toConsumableArray = _toConsumableArray$1;
  
    function _assertThisInitialized$1(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
  
      return self;
    }
  
    var assertThisInitialized = _assertThisInitialized$1;
  
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof_1(call) === "object" || typeof call === "function")) {
        return call;
      }
  
      return assertThisInitialized(self);
    }
  
    var possibleConstructorReturn = _possibleConstructorReturn;
  
    var getPrototypeOf$1 = createCommonjsModule(function (module) {
    function _getPrototypeOf(o) {
      module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
  
    module.exports = _getPrototypeOf;
    });
  
    var setPrototypeOf = createCommonjsModule(function (module) {
    function _setPrototypeOf(o, p) {
      module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
  
      return _setPrototypeOf(o, p);
    }
  
    module.exports = _setPrototypeOf;
    });
  
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
  
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      if (superClass) setPrototypeOf(subClass, superClass);
    }
  
    var inherits = _inherits;
  
    /**
     * @ignore - internal component.
     */
  
    function Ripple(props) {
      var classes = props.classes,
          className = props.className,
          _props$pulsate = props.pulsate,
          pulsate = _props$pulsate === void 0 ? false : _props$pulsate,
          rippleX = props.rippleX,
          rippleY = props.rippleY,
          rippleSize = props.rippleSize,
          other = objectWithoutProperties(props, ["classes", "className", "pulsate", "rippleX", "rippleY", "rippleSize"]);
  
      var _React$useState = React__default.useState(false),
          _React$useState2 = slicedToArray(_React$useState, 2),
          visible = _React$useState2[0],
          setVisible = _React$useState2[1];
  
      var _React$useState3 = React__default.useState(false),
          _React$useState4 = slicedToArray(_React$useState3, 2),
          leaving = _React$useState4[0],
          setLeaving = _React$useState4[1];
  
      var handleEnter = function handleEnter() {
        setVisible(true);
      };
  
      var handleExit = function handleExit() {
        setLeaving(true);
      };
  
      var rippleClassName = clsx(classes.ripple, className, visible && classes.rippleVisible, pulsate && classes.ripplePulsate);
      var rippleStyles = {
        width: rippleSize,
        height: rippleSize,
        top: -(rippleSize / 2) + rippleY,
        left: -(rippleSize / 2) + rippleX
      };
      var childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
      return React__default.createElement(Transition, _extends_1({
        onEnter: handleEnter,
        onExit: handleExit
      }, other), React__default.createElement("span", {
        className: rippleClassName,
        style: rippleStyles
      }, React__default.createElement("span", {
        className: childClassName
      })));
    }
  
    Ripple.propTypes = {
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
       */
      pulsate: propTypes.bool,
  
      /**
       * Diameter of the ripple.
       */
      rippleSize: propTypes.number,
  
      /**
       * Horizontal position of the ripple center.
       */
      rippleX: propTypes.number,
  
      /**
       * Vertical position of the ripple center.
       */
      rippleY: propTypes.number
    };
  
    var DURATION = 550;
    var DELAY_RIPPLE = 80;
    var styles$7 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'block',
          position: 'absolute',
          overflow: 'hidden',
          borderRadius: 'inherit',
          width: '100%',
          height: '100%',
          left: 0,
          top: 0,
          pointerEvents: 'none',
          zIndex: 0
        },
  
        /* Styles applied to the internal `Ripple` components `ripple` class. */
        ripple: {
          opacity: 0,
          position: 'absolute'
        },
  
        /* Styles applied to the internal `Ripple` components `rippleVisible` class. */
        rippleVisible: {
          opacity: 0.3,
          transform: 'scale(1)',
          animation: "mui-ripple-enter ".concat(DURATION, "ms ").concat(theme.transitions.easing.easeInOut),
          // Backward compatible logic between JSS v9 and v10.
          // To remove with the release of Material-UI v4
          animationName: '$mui-ripple-enter'
        },
  
        /* Styles applied to the internal `Ripple` components `ripplePulsate` class. */
        ripplePulsate: {
          animationDuration: "".concat(theme.transitions.duration.shorter, "ms")
        },
  
        /* Styles applied to the internal `Ripple` components `child` class. */
        child: {
          opacity: 1,
          display: 'block',
          width: '100%',
          height: '100%',
          borderRadius: '50%',
          backgroundColor: 'currentColor'
        },
  
        /* Styles applied to the internal `Ripple` components `childLeaving` class. */
        childLeaving: {
          opacity: 0,
          animation: "mui-ripple-exit ".concat(DURATION, "ms ").concat(theme.transitions.easing.easeInOut),
          // Backward compatible logic between JSS v9 and v10.
          // To remove with the release of Material-UI v4
          animationName: '$mui-ripple-exit'
        },
  
        /* Styles applied to the internal `Ripple` components `childPulsate` class. */
        childPulsate: {
          position: 'absolute',
          left: 0,
          top: 0,
          animation: "mui-ripple-pulsate 2500ms ".concat(theme.transitions.easing.easeInOut, " 200ms infinite"),
          // Backward compatible logic between JSS v9 and v10.
          // To remove with the release of Material-UI v4
          animationName: '$mui-ripple-pulsate'
        },
        '@keyframes mui-ripple-enter': {
          '0%': {
            transform: 'scale(0)',
            opacity: 0.1
          },
          '100%': {
            transform: 'scale(1)',
            opacity: 0.3
          }
        },
        '@keyframes mui-ripple-exit': {
          '0%': {
            opacity: 1
          },
          '100%': {
            opacity: 0
          }
        },
        '@keyframes mui-ripple-pulsate': {
          '0%': {
            transform: 'scale(1)'
          },
          '50%': {
            transform: 'scale(0.92)'
          },
          '100%': {
            transform: 'scale(1)'
          }
        }
      };
    };
  
    var TouchRipple =
    /*#__PURE__*/
    function (_React$PureComponent) {
      inherits(TouchRipple, _React$PureComponent);
  
      function TouchRipple() {
        var _getPrototypeOf2;
  
        var _this;
  
        classCallCheck(this, TouchRipple);
  
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
  
        _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf$1(TouchRipple)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _this.state = {
          nextKey: 0,
          ripples: []
        };
        _this.container = React__default.createRef();
  
        _this.pulsate = function () {
          _this.start({}, {
            pulsate: true
          });
        };
  
        _this.start = function () {
          var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var cb = arguments.length > 2 ? arguments[2] : undefined;
          var _options$pulsate = options.pulsate,
              pulsate = _options$pulsate === void 0 ? false : _options$pulsate,
              _options$center = options.center,
              center = _options$center === void 0 ? _this.props.center || options.pulsate : _options$center,
              _options$fakeElement = options.fakeElement,
              fakeElement = _options$fakeElement === void 0 ? false : _options$fakeElement;
  
          if (event.type === 'mousedown' && _this.ignoringMouseDown) {
            _this.ignoringMouseDown = false;
            return;
          }
  
          if (event.type === 'touchstart') {
            _this.ignoringMouseDown = true;
          }
  
          var element = fakeElement ? null : _this.container.current;
          var rect = element ? element.getBoundingClientRect() : {
            width: 0,
            height: 0,
            left: 0,
            top: 0
          }; // Get the size of the ripple
  
          var rippleX;
          var rippleY;
          var rippleSize;
  
          if (center || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
            rippleX = Math.round(rect.width / 2);
            rippleY = Math.round(rect.height / 2);
          } else {
            var clientX = event.clientX ? event.clientX : event.touches[0].clientX;
            var clientY = event.clientY ? event.clientY : event.touches[0].clientY;
            rippleX = Math.round(clientX - rect.left);
            rippleY = Math.round(clientY - rect.top);
          }
  
          if (center) {
            rippleSize = Math.sqrt((2 * Math.pow(rect.width, 2) + Math.pow(rect.height, 2)) / 3); // For some reason the animation is broken on Mobile Chrome if the size if even.
  
            if (rippleSize % 2 === 0) {
              rippleSize += 1;
            }
          } else {
            var sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
            var sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
            rippleSize = Math.sqrt(Math.pow(sizeX, 2) + Math.pow(sizeY, 2));
          } // Touche devices
  
  
          if (event.touches) {
            // Prepare the ripple effect.
            _this.startTimerCommit = function () {
              _this.startCommit({
                pulsate: pulsate,
                rippleX: rippleX,
                rippleY: rippleY,
                rippleSize: rippleSize,
                cb: cb
              });
            }; // Delay the execution of the ripple effect.
  
  
            _this.startTimer = setTimeout(function () {
              if (_this.startTimerCommit) {
                _this.startTimerCommit();
  
                _this.startTimerCommit = null;
              }
            }, DELAY_RIPPLE); // We have to make a tradeoff with this value.
          } else {
            _this.startCommit({
              pulsate: pulsate,
              rippleX: rippleX,
              rippleY: rippleY,
              rippleSize: rippleSize,
              cb: cb
            });
          }
        };
  
        _this.startCommit = function (params) {
          var pulsate = params.pulsate,
              rippleX = params.rippleX,
              rippleY = params.rippleY,
              rippleSize = params.rippleSize,
              cb = params.cb;
  
          _this.setState(function (state) {
            return {
              nextKey: state.nextKey + 1,
              ripples: [].concat(toConsumableArray(state.ripples), [React__default.createElement(Ripple, {
                key: state.nextKey,
                classes: _this.props.classes,
                timeout: {
                  exit: DURATION,
                  enter: DURATION
                },
                pulsate: pulsate,
                rippleX: rippleX,
                rippleY: rippleY,
                rippleSize: rippleSize
              })])
            };
          }, cb);
        };
  
        _this.stop = function (event, cb) {
          clearTimeout(_this.startTimer);
          var ripples = _this.state.ripples; // The touch interaction occurs too quickly.
          // We still want to show ripple effect.
  
          if (event.type === 'touchend' && _this.startTimerCommit) {
            event.persist();
  
            _this.startTimerCommit();
  
            _this.startTimerCommit = null;
            _this.startTimer = setTimeout(function () {
              _this.stop(event, cb);
            });
            return;
          }
  
          _this.startTimerCommit = null;
  
          if (ripples && ripples.length) {
            _this.setState({
              ripples: ripples.slice(1)
            }, cb);
          }
        };
  
        return _this;
      }
  
      createClass(TouchRipple, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          clearTimeout(this.startTimer);
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props,
              center = _this$props.center,
              classes = _this$props.classes,
              className = _this$props.className,
              other = objectWithoutProperties(_this$props, ["center", "classes", "className"]);
  
          return React__default.createElement("span", _extends_1({
            className: clsx(classes.root, className),
            ref: this.container
          }, other), React__default.createElement(TransitionGroup, {
            component: null,
            enter: true,
            exit: true
          }, this.state.ripples));
        }
      }]);
  
      return TouchRipple;
    }(React__default.PureComponent);
  
    TouchRipple.propTypes = {
      /**
       * If `true`, the ripple starts at the center of the component
       * rather than at the point of interaction.
       */
      center: propTypes.bool,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string
    };
    TouchRipple.defaultProps = {
      center: false
    };
    var TouchRipple$1 = withStyles$1(styles$7, {
      flip: false,
      name: 'MuiTouchRipple'
    })(TouchRipple);
  
    var styles$8 = {
      /* Styles applied to the root element. */
      root: {
        display: 'inline-flex',
        alignItems: 'center',
        justifyContent: 'center',
        position: 'relative',
        // Remove grey highlight
        WebkitTapHighlightColor: 'transparent',
        backgroundColor: 'transparent',
        // Reset default value
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 'none',
        border: 0,
        margin: 0,
        // Remove the margin in Safari
        borderRadius: 0,
        padding: 0,
        // Remove the padding in Firefox
        cursor: 'pointer',
        userSelect: 'none',
        verticalAlign: 'middle',
        '-moz-appearance': 'none',
        // Reset
        '-webkit-appearance': 'none',
        // Reset
        textDecoration: 'none',
        // So we take precedent over the style of a native <a /> element.
        color: 'inherit',
        '&::-moz-focus-inner': {
          borderStyle: 'none' // Remove Firefox dotted outline.
  
        },
        '&$disabled': {
          pointerEvents: 'none',
          // Disable link interactions
          cursor: 'default'
        }
      },
  
      /* Pseudo-class applied to the root element if `disabled={true}`. */
      disabled: {},
  
      /* Pseudo-class applied to the root element if keyboard focused. */
      focusVisible: {}
    };
    var useEnhancedEffect$1 = typeof window !== 'undefined' ? React__default.useLayoutEffect : React__default.useEffect;
    /**
     * https://github.com/facebook/react/issues/14099#issuecomment-440013892
     *
     * @param {function} fn
     */
  
    function useEventCallback(fn) {
      var ref = React__default.useRef(fn);
      useEnhancedEffect$1(function () {
        ref.current = fn;
      });
      return React__default.useCallback(function (event) {
        return (0, ref.current)(event);
      }, []);
    }
    /**
     * `ButtonBase` contains as few styles as possible.
     * It aims to be a simple building block for creating a button.
     * It contains a load of style reset and some focus/ripple logic.
     */
  
  
    var ButtonBase = React__default.forwardRef(function ButtonBase(props, ref) {
      var action = props.action,
          buttonRefProp = props.buttonRef,
          _props$centerRipple = props.centerRipple,
          centerRipple = _props$centerRipple === void 0 ? false : _props$centerRipple,
          children = props.children,
          classes = props.classes,
          classNameProp = props.className,
          _props$component = props.component,
          component = _props$component === void 0 ? 'button' : _props$component,
          disabled = props.disabled,
          _props$disableRipple = props.disableRipple,
          disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple,
          _props$disableTouchRi = props.disableTouchRipple,
          disableTouchRipple = _props$disableTouchRi === void 0 ? false : _props$disableTouchRi,
          _props$focusRipple = props.focusRipple,
          focusRipple = _props$focusRipple === void 0 ? false : _props$focusRipple,
          focusVisibleClassName = props.focusVisibleClassName,
          onBlur = props.onBlur,
          onClick = props.onClick,
          onFocus = props.onFocus,
          onFocusVisible = props.onFocusVisible,
          onKeyDown = props.onKeyDown,
          onKeyUp = props.onKeyUp,
          onMouseDown = props.onMouseDown,
          onMouseLeave = props.onMouseLeave,
          onMouseUp = props.onMouseUp,
          onTouchEnd = props.onTouchEnd,
          onTouchMove = props.onTouchMove,
          onTouchStart = props.onTouchStart,
          onDragEnd = props.onDragEnd,
          _props$tabIndex = props.tabIndex,
          tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,
          TouchRippleProps = props.TouchRippleProps,
          _props$type = props.type,
          type = _props$type === void 0 ? 'button' : _props$type,
          other = objectWithoutProperties(props, ["action", "buttonRef", "centerRipple", "children", "classes", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "onBlur", "onClick", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "onDragEnd", "tabIndex", "TouchRippleProps", "type"]);
  
      var buttonRef = React__default.useRef(null);
  
      function getButtonNode() {
        // #StrictMode ready
        return ReactDOM__default.findDOMNode(buttonRef.current);
      }
  
      var rippleRef = React__default.useRef(null);
  
      var _React$useState = React__default.useState(false),
          _React$useState2 = slicedToArray(_React$useState, 2),
          focusVisible = _React$useState2[0],
          setFocusVisible = _React$useState2[1];
  
      if (disabled && focusVisible) {
        setFocusVisible(false);
      }
  
      var _useIsFocusVisible = useIsFocusVisible(),
          isFocusVisible = _useIsFocusVisible.isFocusVisible,
          onBlurVisible = _useIsFocusVisible.onBlurVisible,
          focusVisibleRef = _useIsFocusVisible.ref;
  
      React__default.useImperativeHandle(action, function () {
        return {
          focusVisible: function focusVisible() {
            setFocusVisible(true);
            buttonRef.current.focus();
          }
        };
      }, []);
      React__default.useEffect(function () {
        if (focusVisible && focusRipple && !disableRipple) {
          rippleRef.current.pulsate();
        }
      }, [disableRipple, focusRipple, focusVisible]);
  
      function useRippleHandler(rippleAction, eventCallback) {
        var skipRippleAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : disableTouchRipple;
        return useEventCallback(function (event) {
          if (eventCallback) {
            eventCallback(event);
          }
  
          var ignore = event.defaultPrevented || skipRippleAction;
  
          if (!ignore && rippleRef.current) {
            rippleRef.current[rippleAction](event);
          }
  
          return true;
        });
      }
  
      var handleMouseDown = useRippleHandler('start', onMouseDown);
      var handleDragEnd = useRippleHandler('stop', onDragEnd);
      var handleMouseUp = useRippleHandler('stop', onMouseUp);
      var handleMouseLeave = useRippleHandler('stop', function (event) {
        if (focusVisible) {
          event.preventDefault();
        }
  
        if (onMouseLeave) {
          onMouseLeave(event);
        }
      });
      var handleTouchStart = useRippleHandler('start', onTouchStart);
      var handleTouchEnd = useRippleHandler('stop', onTouchEnd);
      var handleTouchMove = useRippleHandler('stop', onTouchMove);
      var handleBlur = useRippleHandler('stop', function (event) {
        if (focusVisible) {
          onBlurVisible(event);
          setFocusVisible(false);
        }
  
        if (onBlur) {
          onBlur(event);
        }
      }, false);
      var handleFocus = useEventCallback(function (event) {
        if (disabled) {
          return;
        } // Fix for https://github.com/facebook/react/issues/7769
  
  
        if (!buttonRef.current) {
          buttonRef.current = event.currentTarget;
        }
  
        if (isFocusVisible(event)) {
          setFocusVisible(true);
  
          if (onFocusVisible) {
            onFocusVisible(event);
          }
        }
  
        if (onFocus) {
          onFocus(event);
        }
      });
      var keydownRef = React__default.useRef(false);
      var handleKeyDown = useEventCallback(function (event) {
        // Check if key is already down to avoid repeats being counted as multiple activations
        if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {
          keydownRef.current = true;
          event.persist();
          rippleRef.current.stop(event, function () {
            rippleRef.current.start(event);
          });
        }
  
        if (onKeyDown) {
          onKeyDown(event);
        }
  
        var button = getButtonNode(); // Keyboard accessibility for non interactive elements
  
        if (event.target === event.currentTarget && component && component !== 'button' && (event.key === ' ' || event.key === 'Enter') && !(button.tagName === 'A' && button.href)) {
          event.preventDefault();
  
          if (onClick) {
            onClick(event);
          }
        }
      });
      var handleKeyUp = useEventCallback(function (event) {
        if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible) {
          keydownRef.current = false;
          event.persist();
          rippleRef.current.stop(event, function () {
            rippleRef.current.pulsate(event);
          });
        }
  
        if (onKeyUp) {
          onKeyUp(event);
        }
      });
      var className = clsx(classes.root, classNameProp, focusVisible && [classes.focusVisible, focusVisibleClassName], disabled && classes.disabled);
      var ComponentProp = component;
  
      if (ComponentProp === 'button' && other.href) {
        ComponentProp = 'a';
      }
  
      var buttonProps = {};
  
      if (ComponentProp === 'button') {
        buttonProps.type = type;
        buttonProps.disabled = disabled;
      } else {
        buttonProps.role = 'button';
        buttonProps['aria-disabled'] = disabled;
      }
  
      var handleUserRef = useForkRef(buttonRefProp, ref);
      var handleOwnRef = useForkRef(focusVisibleRef, buttonRef);
      var handleRef = useForkRef(handleUserRef, handleOwnRef);
      return React__default.createElement(ComponentProp, _extends_1({
        className: className,
        onBlur: handleBlur,
        onClick: onClick,
        onFocus: handleFocus,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp,
        onMouseDown: handleMouseDown,
        onMouseLeave: handleMouseLeave,
        onMouseUp: handleMouseUp,
        onDragEnd: handleDragEnd,
        onTouchEnd: handleTouchEnd,
        onTouchMove: handleTouchMove,
        onTouchStart: handleTouchStart,
        ref: handleRef,
        tabIndex: disabled ? -1 : tabIndex
      }, buttonProps, other), children, !disableRipple && !disabled ? React__default.createElement(NoSsr, null, React__default.createElement(TouchRipple$1, _extends_1({
        ref: rippleRef,
        center: centerRipple
      }, TouchRippleProps))) : null);
    });
    ButtonBase.propTypes = {
      /**
       * Callback fired when the component mounts.
       * This is useful when you want to trigger an action programmatically.
       * It currently only supports `focusVisible()` action.
       *
       * @param {object} actions This object contains all possible actions
       * that can be triggered programmatically.
       */
      action: propTypes.func,
  
      /**
       * Use that property to pass a ref callback to the native button component.
       * @deprecated Use `ref` instead
       */
      buttonRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  
      /**
       * If `true`, the ripples will be centered.
       * They won't start at the cursor interaction position.
       */
      centerRipple: propTypes.bool,
  
      /**
       * The content of the component.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: elementTypeAcceptingRef$1,
  
      /**
       * If `true`, the base button will be disabled.
       */
      disabled: propTypes.bool,
  
      /**
       * If `true`, the ripple effect will be disabled.
       *
       * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
       * to highlight the element by applying separate styles with the `focusVisibleClassName`.
       */
      disableRipple: propTypes.bool,
  
      /**
       * If `true`, the touch ripple effect will be disabled.
       */
      disableTouchRipple: propTypes.bool,
  
      /**
       * If `true`, the base button will have a keyboard focus ripple.
       * `disableRipple` must also be `false`.
       */
      focusRipple: propTypes.bool,
  
      /**
       * This property can help a person know which element has the keyboard focus.
       * The class name will be applied when the element gain the focus through a keyboard interaction.
       * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
       * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).
       * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
       * if needed.
       */
      focusVisibleClassName: propTypes.string,
  
      /**
       * @ignore
       */
      onBlur: propTypes.func,
  
      /**
       * @ignore
       */
      onClick: propTypes.func,
  
      /**
       * @ignore
       */
      onDragEnd: propTypes.func,
  
      /**
       * @ignore
       */
      onFocus: propTypes.func,
  
      /**
       * Callback fired when the component is focused with a keyboard.
       * We trigger a `onFocus` callback too.
       */
      onFocusVisible: propTypes.func,
  
      /**
       * @ignore
       */
      onKeyDown: propTypes.func,
  
      /**
       * @ignore
       */
      onKeyUp: propTypes.func,
  
      /**
       * @ignore
       */
      onMouseDown: propTypes.func,
  
      /**
       * @ignore
       */
      onMouseLeave: propTypes.func,
  
      /**
       * @ignore
       */
      onMouseUp: propTypes.func,
  
      /**
       * @ignore
       */
      onTouchEnd: propTypes.func,
  
      /**
       * @ignore
       */
      onTouchMove: propTypes.func,
  
      /**
       * @ignore
       */
      onTouchStart: propTypes.func,
  
      /**
       * @ignore
       */
      role: propTypes.string,
  
      /**
       * @ignore
       */
      tabIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),
  
      /**
       * Properties applied to the `TouchRipple` element.
       */
      TouchRippleProps: propTypes.object,
  
      /**
       * Used to control the button's purpose.
       * This property passes the value to the `type` attribute of the native button component.
       */
      type: propTypes.oneOf(['submit', 'reset', 'button'])
    };
    var ButtonBase$1 = withStyles$1(styles$8, {
      name: 'MuiButtonBase'
    })(ButtonBase);
  
    function unsupportedProp(props, propName, componentName, location, propFullName) {
  
      var propFullNameSafe = propFullName || propName;
  
      if (typeof props[propName] !== 'undefined') {
        return new Error("The property `".concat(propFullNameSafe, "` is not supported. Please remove it."));
      }
  
      return null;
    }
  
    var styles$9 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          transition: theme.transitions.create(['color', 'padding-top'], {
            duration: theme.transitions.duration.short
          }),
          padding: '6px 12px 8px',
          minWidth: 80,
          maxWidth: 168,
          color: theme.palette.text.secondary,
          flex: '1',
          '&$iconOnly': {
            paddingTop: 16
          },
          '&$selected': {
            paddingTop: 6,
            color: theme.palette.primary.main
          }
        },
  
        /* Pseudo-class applied to the root element if selected. */
        selected: {},
  
        /* Pseudo-class applied to the root element if `showLabel={false}` and not selected. */
        iconOnly: {},
  
        /* Styles applied to the span element that wraps the icon and label. */
        wrapper: {
          display: 'inline-flex',
          alignItems: 'center',
          justifyContent: 'center',
          width: '100%',
          flexDirection: 'column'
        },
  
        /* Styles applied to the label's span element. */
        label: {
          fontFamily: theme.typography.fontFamily,
          fontSize: theme.typography.pxToRem(12),
          opacity: 1,
          transition: 'font-size 0.2s, opacity 0.2s',
          transitionDelay: '0.1s',
          '&$iconOnly': {
            opacity: 0,
            transitionDelay: '0s'
          },
          '&$selected': {
            fontSize: theme.typography.pxToRem(14)
          }
        }
      };
    };
    var BottomNavigationAction = React__default.forwardRef(function BottomNavigationAction(props, ref) {
      var classes = props.classes,
          className = props.className,
          icon = props.icon,
          label = props.label,
          onChange = props.onChange,
          onClick = props.onClick,
          selected = props.selected,
          showLabel = props.showLabel,
          value = props.value,
          other = objectWithoutProperties(props, ["classes", "className", "icon", "label", "onChange", "onClick", "selected", "showLabel", "value"]);
  
      var handleChange = function handleChange(event) {
        if (onChange) {
          onChange(event, value);
        }
  
        if (onClick) {
          onClick(event);
        }
      };
  
      return React__default.createElement(ButtonBase$1, _extends_1({
        ref: ref,
        className: clsx(classes.root, className, selected ? classes.selected : !showLabel && classes.iconOnly),
        focusRipple: true,
        onClick: handleChange
      }, other), React__default.createElement("span", {
        className: classes.wrapper
      }, icon, React__default.createElement("span", {
        className: clsx(classes.label, selected ? classes.selected : !showLabel && classes.iconOnly)
      }, label)));
    });
    BottomNavigationAction.propTypes = {
      /**
       * This property isn't supported.
       * Use the `component` property if you need to change the children structure.
       */
      children: unsupportedProp,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The icon element.
       */
      icon: propTypes.node,
  
      /**
       * The label element.
       */
      label: propTypes.node,
  
      /**
       * @ignore
       */
      onChange: propTypes.func,
  
      /**
       * @ignore
       */
      onClick: propTypes.func,
  
      /**
       * @ignore
       */
      selected: propTypes.bool,
  
      /**
       * If `true`, the `BottomNavigationAction` will show its label.
       * By default, only the selected `BottomNavigationAction`
       * inside `BottomNavigation` will show its label.
       */
      showLabel: propTypes.bool,
  
      /**
       * You can provide your own value. Otherwise, we fallback to the child position index.
       */
      value: propTypes.any
    };
    var BottomNavigationAction$1 = withStyles$1(styles$9, {
      name: 'MuiBottomNavigationAction'
    })(BottomNavigationAction);
  
    var responsivePropType = propTypes.oneOfType([propTypes.number, propTypes.string, propTypes.object, propTypes.array]);
  
    function merge(acc, item) {
      if (!item) {
        return acc;
      }
  
      return umd(acc, item, {
        clone: false // No need to clone deep, it's way faster.
  
      });
    }
  
    // For instance with the first breakpoint xs: [xs, sm[.
  
    var values$1 = {
      xs: 0,
      sm: 600,
      md: 960,
      lg: 1280,
      xl: 1920
    };
    var defaultBreakpoints = {
      // Sorted ASC by size. That's important.
      // It can't be configured as it's used statically for propTypes.
      keys: ['xs', 'sm', 'md', 'lg', 'xl'],
      up: function up(key) {
        return "@media (min-width:".concat(values$1[key], "px)");
      }
    };
    function handleBreakpoints(props, propValue, styleFromPropValue) {
      warning_1(props.theme, '@material-ui/system: you are calling a style function without a theme value.');
  
      if (Array.isArray(propValue)) {
        var themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;
        return propValue.reduce(function (acc, item, index) {
          acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
          return acc;
        }, {});
      }
  
      if (_typeof_1(propValue) === 'object') {
        var _themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;
  
        return Object.keys(propValue).reduce(function (acc, breakpoint) {
          acc[_themeBreakpoints.up(breakpoint)] = styleFromPropValue(propValue[breakpoint]);
          return acc;
        }, {});
      }
  
      var output = styleFromPropValue(propValue);
      return output;
    }
  
    function getPath(obj, path) {
      if (!path || typeof path !== 'string') {
        return null;
      }
  
      return path.split('.').reduce(function (acc, item) {
        return acc && acc[item] ? acc[item] : null;
      }, obj);
    }
  
    function style$1(options) {
      var prop = options.prop,
          _options$cssProperty = options.cssProperty,
          cssProperty = _options$cssProperty === void 0 ? options.prop : _options$cssProperty,
          themeKey = options.themeKey,
          transform = options.transform;
  
      var fn = function fn(props) {
        if (props[prop] == null) {
          return null;
        }
  
        var propValue = props[prop];
        var theme = props.theme;
        var themeMapping = getPath(theme, themeKey) || {};
  
        var styleFromPropValue = function styleFromPropValue(propValueFinal) {
          var value;
  
          if (typeof themeMapping === 'function') {
            value = themeMapping(propValueFinal);
          } else if (Array.isArray(themeMapping)) {
            value = themeMapping[propValueFinal];
          } else {
            value = getPath(themeMapping, propValueFinal) || propValueFinal;
  
            if (transform) {
              value = transform(value);
            }
          }
  
          if (cssProperty === false) {
            return value;
          }
  
          return defineProperty({}, cssProperty, value);
        };
  
        return handleBreakpoints(props, propValue, styleFromPropValue);
      };
  
      fn.propTypes = defineProperty({}, prop, responsivePropType);
      fn.filterProps = [prop];
      return fn;
    }
  
    function compose() {
      for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {
        styles[_key] = arguments[_key];
      }
  
      var fn = function fn(props) {
        return styles.reduce(function (acc, style) {
          var output = style(props);
  
          if (output) {
            return merge(acc, output);
          }
  
          return acc;
        }, {});
      }; // Alternative approach that doesn't yield any performance gain.
      // const handlers = styles.reduce((acc, style) => {
      //   style.filterProps.forEach(prop => {
      //     acc[prop] = style;
      //   });
      //   return acc;
      // }, {});
      // const fn = props => {
      //   return Object.keys(props).reduce((acc, prop) => {
      //     if (handlers[prop]) {
      //       return merge(acc, handlers[prop](props));
      //     }
      //     return acc;
      //   }, {});
      // };
  
  
      fn.propTypes = styles.reduce(function (acc, style) {
        return _extends_1(acc, style.propTypes);
      }, {});
      fn.filterProps = styles.reduce(function (acc, style) {
        return acc.concat(style.filterProps);
      }, []);
      return fn;
    }
  
    function getBorder(value) {
      if (typeof value !== 'number') {
        return value;
      }
  
      return "".concat(value, "px solid").concat(value === 0 ? ' !important' : '');
    }
  
    var border = style$1({
      prop: 'border',
      themeKey: 'borders',
      transform: getBorder
    });
    var borderTop = style$1({
      prop: 'borderTop',
      themeKey: 'borders',
      transform: getBorder
    });
    var borderRight = style$1({
      prop: 'borderRight',
      themeKey: 'borders',
      transform: getBorder
    });
    var borderBottom = style$1({
      prop: 'borderBottom',
      themeKey: 'borders',
      transform: getBorder
    });
    var borderLeft = style$1({
      prop: 'borderLeft',
      themeKey: 'borders',
      transform: getBorder
    });
    var borderColor = style$1({
      prop: 'borderColor',
      themeKey: 'palette',
      transform: function transform(value) {
        return "".concat(value, " !important");
      }
    });
    var borderRadius = style$1({
      prop: 'borderRadius',
      themeKey: 'shape'
    });
    var borders = compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderRadius);
  
    function omit$1(input, fields) {
      var output = {};
      Object.keys(input).forEach(function (prop) {
        if (fields.indexOf(prop) === -1) {
          output[prop] = input[prop];
        }
      });
      return output;
    }
  
    function css$1(styleFunction) {
      var newStyleFunction = function newStyleFunction(props) {
        var output = styleFunction(props);
  
        if (props.css) {
          return _extends_1({}, merge(output, styleFunction(_extends_1({
            theme: props.theme
          }, props.css))), omit$1(props.css, [styleFunction.filterProps]));
        }
  
        return output;
      };
  
      newStyleFunction.propTypes = _extends_1({}, styleFunction.propTypes, {
        css: propTypes.object
      });
      newStyleFunction.filterProps = ['css'].concat(toConsumableArray(styleFunction.filterProps));
      return newStyleFunction;
    }
  
    var displayRaw = style$1({
      prop: 'display'
    });
    var displayPrint = style$1({
      prop: 'displayPrint',
      cssProperty: false,
      transform: function transform(value) {
        return {
          '@media print': {
            display: value
          }
        };
      }
    });
    var overflow = style$1({
      prop: 'overflow'
    });
    var textOverflow = style$1({
      prop: 'textOverflow'
    });
    var whiteSpace = style$1({
      prop: 'whiteSpace'
    });
    var display = compose(displayRaw, displayPrint, overflow, textOverflow, whiteSpace);
  
    var flexBasis = style$1({
      prop: 'flexBasis'
    });
    var flexDirection = style$1({
      prop: 'flexDirection'
    });
    var flexWrap = style$1({
      prop: 'flexWrap'
    });
    var justifyContent = style$1({
      prop: 'justifyContent'
    });
    var alignItems = style$1({
      prop: 'alignItems'
    });
    var alignContent = style$1({
      prop: 'alignContent'
    });
    var order = style$1({
      prop: 'order'
    });
    var flex = style$1({
      prop: 'flex'
    });
    var flexGrow = style$1({
      prop: 'flexGrow'
    });
    var flexShrink = style$1({
      prop: 'flexShrink'
    });
    var alignSelf = style$1({
      prop: 'alignSelf'
    });
    var justifyItems = style$1({
      prop: 'justifyItems'
    });
    var justifySelf = style$1({
      prop: 'justifySelf'
    });
    var flexbox = compose(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
  
    var color = style$1({
      prop: 'color',
      themeKey: 'palette'
    });
    var bgcolor = style$1({
      prop: 'bgcolor',
      cssProperty: 'backgroundColor',
      themeKey: 'palette'
    });
    var palette = compose(color, bgcolor);
  
    var position = style$1({
      prop: 'position'
    });
    var zIndex$1 = style$1({
      prop: 'zIndex',
      themeKey: 'zIndex'
    });
    var top = style$1({
      prop: 'top'
    });
    var right = style$1({
      prop: 'right'
    });
    var bottom = style$1({
      prop: 'bottom'
    });
    var left = style$1({
      prop: 'left'
    });
    var positions = compose(position, zIndex$1, top, right, bottom, left);
  
    var boxShadow = style$1({
      prop: 'boxShadow',
      themeKey: 'shadows'
    });
  
    function transform$1(value) {
      return value <= 1 ? "".concat(value * 100, "%") : value;
    }
  
    var width = style$1({
      prop: 'width',
      transform: transform$1
    });
    var maxWidth = style$1({
      prop: 'maxWidth',
      transform: transform$1
    });
    var minWidth = style$1({
      prop: 'minWidth',
      transform: transform$1
    });
    var height = style$1({
      prop: 'height',
      transform: transform$1
    });
    var maxHeight = style$1({
      prop: 'maxHeight',
      transform: transform$1
    });
    var minHeight = style$1({
      prop: 'minHeight',
      transform: transform$1
    });
    var sizeWidth = style$1({
      prop: 'size',
      cssProperty: 'width',
      transform: transform$1
    });
    var sizeHeight = style$1({
      prop: 'size',
      cssProperty: 'height',
      transform: transform$1
    });
    var sizing = compose(width, maxWidth, minWidth, height, maxHeight, minHeight);
  
    function memoize$1(fn) {
      var cache = {};
      return function (arg) {
        if (cache[arg] === undefined) {
          cache[arg] = fn(arg);
        }
  
        return cache[arg];
      };
    }
  
    var properties = {
      m: 'margin',
      p: 'padding'
    };
    var directions = {
      t: 'Top',
      r: 'Right',
      b: 'Bottom',
      l: 'Left',
      x: ['Left', 'Right'],
      y: ['Top', 'Bottom']
    }; // memoize() impact:
    // From 300,000 ops/sec
    // To 350,000 ops/sec
  
    var getCssProperties = memoize$1(function (prop) {
      // It's not a shorthand notation.
      if (prop.length > 3) {
        return [prop];
      }
  
      var _prop$split = prop.split(''),
          _prop$split2 = slicedToArray(_prop$split, 2),
          a = _prop$split2[0],
          b = _prop$split2[1];
  
      var property = properties[a];
      var direction = directions[b] || '';
      return Array.isArray(direction) ? direction.map(function (dir) {
        return property + dir;
      }) : [property + direction];
    });
    var spacingKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'margin', 'marginLeft', 'marginTop', 'marginRight', 'marginBottom', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'];
  
    function getTransformer(theme) {
      var themeSpacing = theme.spacing || 8;
  
      if (typeof themeSpacing === 'number') {
        return function (abs) {
          return themeSpacing * abs;
        };
      }
  
      if (Array.isArray(themeSpacing)) {
        return function (abs) {
          warning_1(abs <= themeSpacing.length - 1, ["@material-ui/system: the value provided (".concat(abs, ") overflows."), "The supported values are: ".concat(JSON.stringify(themeSpacing), "."), "".concat(abs, " > ").concat(themeSpacing.length - 1, ", you need to add the missing values.")].join('\n'));
          return themeSpacing[abs];
        };
      }
  
      if (typeof themeSpacing === 'function') {
        return themeSpacing;
      }
  
      warning_1(false, ["@material-ui/system: the `theme.spacing` value (".concat(themeSpacing, ") is invalid."), 'It should be a number, an array or a function.'].join('\n'));
      return function () {
        return undefined;
      };
    }
  
    function getValue(transformer, propValue) {
      if (typeof propValue === 'string') {
        return propValue;
      }
  
      var abs = Math.abs(propValue);
      var transformed = transformer(abs);
  
      if (propValue >= 0) {
        return transformed;
      }
  
      if (typeof transformed === 'number') {
        return -transformed;
      }
  
      return "-".concat(transformed);
    }
  
    function getStyleFromPropValue(cssProperties, transformer) {
      return function (propValue) {
        return cssProperties.reduce(function (acc, cssProperty) {
          acc[cssProperty] = getValue(transformer, propValue);
          return acc;
        }, {});
      };
    }
  
    function spacing(props) {
      var theme = props.theme;
      var transformer = getTransformer(theme);
      return Object.keys(props).map(function (prop) {
        // Using a hash computation over an array iteration could be faster, but with only 14 items,
        // it's doesn't worth the bundle size.
        if (spacingKeys.indexOf(prop) === -1) {
          return null;
        }
  
        var cssProperties = getCssProperties(prop);
        var styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
        var propValue = props[prop];
        return handleBreakpoints(props, propValue, styleFromPropValue);
      }).reduce(merge, {});
    }
  
    spacing.propTypes = spacingKeys.reduce(function (obj, key) {
      obj[key] = responsivePropType;
      return obj;
    }, {});
    spacing.filterProps = spacingKeys;
  
    var fontFamily = style$1({
      prop: 'fontFamily',
      themeKey: 'typography'
    });
    var fontSize = style$1({
      prop: 'fontSize',
      themeKey: 'typography'
    });
    var fontStyle = style$1({
      prop: 'fontStyle',
      themeKey: 'typography'
    });
    var fontWeight = style$1({
      prop: 'fontWeight',
      themeKey: 'typography'
    });
    var letterSpacing = style$1({
      prop: 'letterSpacing'
    });
    var lineHeight = style$1({
      prop: 'lineHeight'
    });
    var textAlign = style$1({
      prop: 'textAlign'
    });
    var typography = compose(fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign);
  
    var styleFunction = css$1(compose(borders, display, flexbox, positions, palette, boxShadow, sizing, spacing, typography));
    /**
     * @ignore - do not document.
     */
  
    var Box = styled$1('div')(styleFunction, {
      name: 'MuiBox'
    });
  
    var styles$a = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          margin: 0
        },
  
        /* Styles applied to the root element if `variant="body2"`. */
        body2: theme.typography.body2,
  
        /* Styles applied to the root element if `variant="body1"`. */
        body1: theme.typography.body1,
  
        /* Styles applied to the root element if `variant="caption"`. */
        caption: theme.typography.caption,
  
        /* Styles applied to the root element if `variant="button"`. */
        button: theme.typography.button,
  
        /* Styles applied to the root element if `variant="h1"`. */
        h1: theme.typography.h1,
  
        /* Styles applied to the root element if `variant="h2"`. */
        h2: theme.typography.h2,
  
        /* Styles applied to the root element if `variant="h3"`. */
        h3: theme.typography.h3,
  
        /* Styles applied to the root element if `variant="h4"`. */
        h4: theme.typography.h4,
  
        /* Styles applied to the root element if `variant="h5"`. */
        h5: theme.typography.h5,
  
        /* Styles applied to the root element if `variant="h6"`. */
        h6: theme.typography.h6,
  
        /* Styles applied to the root element if `variant="subtitle1"`. */
        subtitle1: theme.typography.subtitle1,
  
        /* Styles applied to the root element if `variant="subtitle2"`. */
        subtitle2: theme.typography.subtitle2,
  
        /* Styles applied to the root element if `variant="overline"`. */
        overline: theme.typography.overline,
  
        /* Styles applied to the root element if `variant="srOnly"`. Only accessible to screen readers. */
        srOnly: {
          position: 'absolute',
          height: 1,
          width: 1,
          overflow: 'hidden'
        },
  
        /* Styles applied to the root element if `align="left"`. */
        alignLeft: {
          textAlign: 'left'
        },
  
        /* Styles applied to the root element if `align="center"`. */
        alignCenter: {
          textAlign: 'center'
        },
  
        /* Styles applied to the root element if `align="right"`. */
        alignRight: {
          textAlign: 'right'
        },
  
        /* Styles applied to the root element if `align="justify"`. */
        alignJustify: {
          textAlign: 'justify'
        },
  
        /* Styles applied to the root element if `align="nowrap"`. */
        noWrap: {
          overflow: 'hidden',
          textOverflow: 'ellipsis',
          whiteSpace: 'nowrap'
        },
  
        /* Styles applied to the root element if `gutterBottom={true}`. */
        gutterBottom: {
          marginBottom: '0.35em'
        },
  
        /* Styles applied to the root element if `paragraph={true}`. */
        paragraph: {
          marginBottom: 16
        },
  
        /* Styles applied to the root element if `color="inherit"`. */
        colorInherit: {
          color: 'inherit'
        },
  
        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          color: theme.palette.primary.main
        },
  
        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          color: theme.palette.secondary.main
        },
  
        /* Styles applied to the root element if `color="textPrimary"`. */
        colorTextPrimary: {
          color: theme.palette.text.primary
        },
  
        /* Styles applied to the root element if `color="textSecondary"`. */
        colorTextSecondary: {
          color: theme.palette.text.secondary
        },
  
        /* Styles applied to the root element if `color="error"`. */
        colorError: {
          color: theme.palette.error.main
        },
  
        /* Styles applied to the root element if `display="inline"`. */
        displayInline: {
          display: 'inline'
        },
  
        /* Styles applied to the root element if `display="block"`. */
        displayBlock: {
          display: 'block'
        }
      };
    };
    var defaultVariantMapping = {
      h1: 'h1',
      h2: 'h2',
      h3: 'h3',
      h4: 'h4',
      h5: 'h5',
      h6: 'h6',
      subtitle1: 'h6',
      subtitle2: 'h6',
      body1: 'p',
      body2: 'p'
    };
    var Typography = React__default.forwardRef(function Typography(props, ref) {
      var _props$align = props.align,
          align = _props$align === void 0 ? 'inherit' : _props$align,
          classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'initial' : _props$color,
          component = props.component,
          _props$display = props.display,
          display = _props$display === void 0 ? 'initial' : _props$display,
          _props$gutterBottom = props.gutterBottom,
          gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom,
          _props$noWrap = props.noWrap,
          noWrap = _props$noWrap === void 0 ? false : _props$noWrap,
          _props$paragraph = props.paragraph,
          paragraph = _props$paragraph === void 0 ? false : _props$paragraph,
          theme = props.theme,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'body1' : _props$variant,
          _props$variantMapping = props.variantMapping,
          variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping,
          other = objectWithoutProperties(props, ["align", "classes", "className", "color", "component", "display", "gutterBottom", "noWrap", "paragraph", "theme", "variant", "variantMapping"]);
  
      var Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';
      return React__default.createElement(Component, _extends_1({
        className: clsx(classes.root, className, variant !== 'inherit' && classes[variant], color !== 'initial' && classes["color".concat(capitalize(color))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== 'inherit' && classes["align".concat(capitalize(align))], display !== 'initial' && classes["display".concat(capitalize(display))]),
        ref: ref
      }, other));
    });
    Typography.propTypes = {
      /**
       * Set the text-align on the component.
       */
      align: propTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),
  
      /**
       * The content of the component.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       * By default, it maps the variant to a good default headline component.
       */
      component: propTypes.elementType,
  
      /**
       * Controls the display type
       */
      display: propTypes.oneOf(['initial', 'block', 'inline']),
  
      /**
       * If `true`, the text will have a bottom margin.
       */
      gutterBottom: propTypes.bool,
  
      /**
       * If `true`, the text will not wrap, but instead will truncate with an ellipsis.
       */
      noWrap: propTypes.bool,
  
      /**
       * If `true`, the text will have a bottom margin.
       */
      paragraph: propTypes.bool,
  
      /**
       * @ignore
       */
      theme: propTypes.object.isRequired,
  
      /**
       * Applies the theme typography styles.
       */
      variant: propTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline', 'srOnly', 'inherit']),
  
      /**
       * We are empirically mapping the variant property to a range of different DOM element types.
       * For instance, subtitle1 to `<h6>`.
       * If you wish to change that mapping, you can provide your own.
       * Alternatively, you can use the `component` property.
       */
      variantMapping: propTypes.object
    };
    var Typography$1 = withStyles$1(styles$a, {
      name: 'MuiTypography',
      withTheme: true
    })(Typography);
  
    var styles$b = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          userSelect: 'none',
          width: '1em',
          height: '1em',
          display: 'inline-block',
          fill: 'currentColor',
          flexShrink: 0,
          fontSize: theme.typography.pxToRem(24),
          transition: theme.transitions.create('fill', {
            duration: theme.transitions.duration.shorter
          })
        },
  
        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          color: theme.palette.primary.main
        },
  
        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          color: theme.palette.secondary.main
        },
  
        /* Styles applied to the root element if `color="action"`. */
        colorAction: {
          color: theme.palette.action.active
        },
  
        /* Styles applied to the root element if `color="error"`. */
        colorError: {
          color: theme.palette.error.main
        },
  
        /* Styles applied to the root element if `color="disabled"`. */
        colorDisabled: {
          color: theme.palette.action.disabled
        },
  
        /* Styles applied to the root element if `fontSize="inherit"`. */
        fontSizeInherit: {
          fontSize: 'inherit'
        },
  
        /* Styles applied to the root element if `fontSize="small"`. */
        fontSizeSmall: {
          fontSize: theme.typography.pxToRem(20)
        },
  
        /* Styles applied to the root element if `fontSize="large"`. */
        fontSizeLarge: {
          fontSize: theme.typography.pxToRem(35)
        }
      };
    };
    var SvgIcon = React__default.forwardRef(function SvgIcon(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'inherit' : _props$color,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'svg' : _props$component,
          _props$fontSize = props.fontSize,
          fontSize = _props$fontSize === void 0 ? 'default' : _props$fontSize,
          htmlColor = props.htmlColor,
          titleAccess = props.titleAccess,
          _props$viewBox = props.viewBox,
          viewBox = _props$viewBox === void 0 ? '0 0 24 24' : _props$viewBox,
          other = objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "fontSize", "htmlColor", "titleAccess", "viewBox"]);
  
      return React__default.createElement(Component, _extends_1({
        className: clsx(classes.root, className, color !== 'inherit' && classes["color".concat(capitalize(color))], fontSize !== 'default' && classes["fontSize".concat(capitalize(fontSize))]),
        focusable: "false",
        viewBox: viewBox,
        color: htmlColor,
        "aria-hidden": titleAccess ? 'false' : 'true',
        role: titleAccess ? 'img' : 'presentation',
        ref: ref
      }, other), children, titleAccess ? React__default.createElement("title", null, titleAccess) : null);
    });
    SvgIcon.propTypes = {
      /**
       * Node passed into the SVG element.
       */
      children: propTypes.node.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       * You can use the `htmlColor` property to apply a color attribute to the SVG element.
       */
      color: propTypes.oneOf(['inherit', 'primary', 'secondary', 'action', 'error', 'disabled']),
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
       */
      fontSize: propTypes.oneOf(['inherit', 'default', 'small', 'large']),
  
      /**
       * Applies a color attribute to the SVG element.
       */
      htmlColor: propTypes.string,
  
      /**
       * The shape-rendering attribute. The behavior of the different options is described on the
       * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
       * If you are having issues with blurry icons you should investigate this property.
       */
      shapeRendering: propTypes.string,
  
      /**
       * Provides a human-readable title for the element that contains it.
       * https://www.w3.org/TR/SVG-access/#Equivalent
       */
      titleAccess: propTypes.string,
  
      /**
       * Allows you to redefine what the coordinates without units mean inside an SVG element.
       * For example, if the SVG element is 500 (width) by 200 (height),
       * and you pass viewBox="0 0 50 20",
       * this means that the coordinates inside the SVG will go from the top left corner (0,0)
       * to bottom right (50,20) and each unit will be worth 10px.
       */
      viewBox: propTypes.string
    };
    SvgIcon.muiName = 'SvgIcon';
    var SvgIcon$1 = withStyles$1(styles$b, {
      name: 'MuiSvgIcon'
    })(SvgIcon);
  
    function createSvgIcon(path, displayName) {
      var Component = React__default.memo(React__default.forwardRef(function (props, ref) {
        return React__default.createElement(SvgIcon$1, _extends_1({}, props, {
          ref: ref
        }), path);
      }));
  
      {
        Component.displayName = "".concat(displayName, "Icon");
      }
  
      Component.muiName = SvgIcon$1.muiName;
      return Component;
    }
  
    /**
     * @ignore - internal component.
     */
  
    var MoreHorizIcon = createSvgIcon(React__default.createElement("path", {
      d: "M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
    }), 'MoreHoriz');
  
    var styles$c = function styles(theme) {
      return {
        root: {
          display: 'flex'
        },
        icon: {
          width: 24,
          height: 16,
          backgroundColor: theme.palette.grey[100],
          color: theme.palette.grey[700],
          borderRadius: 2,
          marginLeft: theme.spacing(0.5),
          marginRight: theme.spacing(0.5),
          cursor: 'pointer',
          '&:hover, &:focus': {
            backgroundColor: theme.palette.grey[200]
          },
          '&:active': {
            boxShadow: theme.shadows[0],
            backgroundColor: emphasize(theme.palette.grey[200], 0.12)
          }
        }
      };
    };
    /**
     * @ignore - internal component.
     */
  
  
    function BreadcrumbCollapsed(props) {
      var classes = props.classes,
          other = objectWithoutProperties(props, ["classes"]);
  
      return React__default.createElement("li", _extends_1({
        className: classes.root
      }, other), React__default.createElement(MoreHorizIcon, {
        className: classes.icon
      }));
    }
  
    BreadcrumbCollapsed.propTypes = {
      /**
       * @ignore
       */
      classes: propTypes.object.isRequired
    };
    var BreadcrumbCollapsed$1 = withStyles$1(styles$c, {
      name: 'PrivateBreadcrumbCollapsed'
    })(BreadcrumbCollapsed);
  
    var styles$d = {
      root: {
        display: 'flex',
        userSelect: 'none',
        marginLeft: 8,
        marginRight: 8
      }
    };
    /**
     * @ignore - internal component.
     */
  
    function BreadcrumbSeparator(props) {
      var classes = props.classes,
          className = props.className,
          other = objectWithoutProperties(props, ["classes", "className"]);
  
      return React__default.createElement("li", _extends_1({
        "aria-hidden": true,
        className: clsx(classes.root, className)
      }, other));
    }
  
    BreadcrumbSeparator.propTypes = {
      children: propTypes.node.isRequired,
      classes: propTypes.object.isRequired,
      className: propTypes.string
    };
    var BreadcrumbSeparator$1 = withStyles$1(styles$d, {
      name: 'PrivateBreadcrumbSeparator'
    })(BreadcrumbSeparator);
  
    var styles$e = {
      /* Styles applied to the root element. */
      root: {},
  
      /* Styles applied to the ol element. */
      ol: {
        display: 'flex',
        flexWrap: 'wrap',
        alignItems: 'center',
        padding: 0,
        // Reset
        margin: 0 // Reset
  
      },
  
      /* Styles applied to the li element. */
      li: {
        listStyle: 'none'
      },
  
      /* Styles applied to the separator element. */
      separator: {}
    };
  
    function insertSeparators(items, className, separator) {
      return items.reduce(function (acc, current, index) {
        if (index < items.length - 1) {
          acc = acc.concat(current, React__default.createElement(BreadcrumbSeparator$1, {
            key: "separator-".concat(index),
            className: className
          }, separator));
        } else {
          acc.push(current);
        }
  
        return acc;
      }, []);
    }
  
    var Breadcrumbs = React__default.forwardRef(function Breadcrumbs(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'nav' : _props$component,
          _props$itemsAfterColl = props.itemsAfterCollapse,
          itemsAfterCollapse = _props$itemsAfterColl === void 0 ? 1 : _props$itemsAfterColl,
          _props$itemsBeforeCol = props.itemsBeforeCollapse,
          itemsBeforeCollapse = _props$itemsBeforeCol === void 0 ? 1 : _props$itemsBeforeCol,
          _props$maxItems = props.maxItems,
          maxItems = _props$maxItems === void 0 ? 8 : _props$maxItems,
          _props$separator = props.separator,
          separator = _props$separator === void 0 ? '/' : _props$separator,
          other = objectWithoutProperties(props, ["children", "classes", "className", "component", "itemsAfterCollapse", "itemsBeforeCollapse", "maxItems", "separator"]);
  
      var _React$useState = React__default.useState(false),
          _React$useState2 = slicedToArray(_React$useState, 2),
          expanded = _React$useState2[0],
          setExpanded = _React$useState2[1];
  
      var renderItemsBeforeAndAfter = function renderItemsBeforeAndAfter(allItems) {
        var handleClickExpand = function handleClickExpand() {
          setExpanded(true);
        }; // This defends against someone passing weird input, to ensure that if all
        // items would be shown anyway, we just show all items without the EllipsisItem
  
  
        if (itemsBeforeCollapse + itemsAfterCollapse >= allItems.length) {
          warning_1(false, ['Material-UI: you have provided an invalid combination of properties to the Breadcrumbs.', "itemsAfterCollapse={".concat(itemsAfterCollapse, "} +itemsBeforeCollapse={").concat(itemsBeforeCollapse, "} >= maxItems={").concat(maxItems, "}")].join('\n'));
          return allItems;
        }
  
        return [].concat(toConsumableArray(allItems.slice(0, itemsBeforeCollapse)), [React__default.createElement(BreadcrumbCollapsed$1, {
          key: "ellipsis",
          onClick: handleClickExpand
        })], toConsumableArray(allItems.slice(allItems.length - itemsAfterCollapse, allItems.length)));
      };
  
      var allItems = React__default.Children.toArray(children).filter(function (child) {
        return React__default.isValidElement(child);
      }).map(function (child, index) {
        return React__default.createElement("li", {
          className: classes.li,
          key: "child-".concat(index)
        }, child);
      });
      return React__default.createElement(Typography$1, _extends_1({
        ref: ref,
        component: Component,
        color: "textSecondary",
        className: clsx(classes.root, className)
      }, other), React__default.createElement("ol", {
        className: classes.ol
      }, insertSeparators(expanded || maxItems && allItems.length <= maxItems ? allItems : renderItemsBeforeAndAfter(allItems), classes.separator, separator)));
    });
    Breadcrumbs.propTypes = {
      /**
       * The breadcrumb children.
       */
      children: propTypes.node.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       * By default, it maps the variant to a good default headline component.
       */
      component: propTypes.elementType,
  
      /**
       * If max items is exceeded, the number of items to show after the ellipsis.
       */
      itemsAfterCollapse: propTypes.number,
  
      /**
       * If max items is exceeded, the number of items to show before the ellipsis.
       */
      itemsBeforeCollapse: propTypes.number,
  
      /**
       * Specifies the maximum number of breadcrumbs to display. When there are more
       * than the maximum number, only the first and last will be shown, with an
       * ellipsis in between.
       */
      maxItems: propTypes.number,
  
      /**
       * Custom separator node.
       */
      separator: propTypes.node
    };
    var Breadcrumbs$1 = withStyles$1(styles$e, {
      name: 'MuiBreadcrumbs'
    })(Breadcrumbs);
  
    var styles$f = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: _extends_1({
          lineHeight: 1.75
        }, theme.typography.button, {
          boxSizing: 'border-box',
          minWidth: 64,
          padding: '6px 16px',
          borderRadius: theme.shape.borderRadius,
          color: theme.palette.text.primary,
          transition: theme.transitions.create(['background-color', 'box-shadow', 'border'], {
            duration: theme.transitions.duration.short
          }),
          '&:hover': {
            textDecoration: 'none',
            backgroundColor: fade(theme.palette.text.primary, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            },
            '&$disabled': {
              backgroundColor: 'transparent'
            }
          },
          '&$disabled': {
            color: theme.palette.action.disabled
          }
        }),
  
        /* Styles applied to the span element that wraps the children. */
        label: {
          width: '100%',
          // Ensure the correct width for iOS Safari
          display: 'inherit',
          alignItems: 'inherit',
          justifyContent: 'inherit'
        },
  
        /* Styles applied to the root element if `variant="text"`. */
        text: {
          padding: '6px 8px'
        },
  
        /* Styles applied to the root element if `variant="text"` and `color="primary"`. */
        textPrimary: {
          color: theme.palette.primary.main,
          '&:hover': {
            backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        },
  
        /* Styles applied to the root element if `variant="text"` and `color="secondary"`. */
        textSecondary: {
          color: theme.palette.secondary.main,
          '&:hover': {
            backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        },
  
        /* Styles applied to the root element if `variant="outlined"`. */
        outlined: {
          padding: '5px 16px',
          border: "1px solid ".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'),
          '&$disabled': {
            border: "1px solid ".concat(theme.palette.action.disabled)
          }
        },
  
        /* Styles applied to the root element if `variant="outlined"` and `color="primary"`. */
        outlinedPrimary: {
          color: theme.palette.primary.main,
          border: "1px solid ".concat(fade(theme.palette.primary.main, 0.5)),
          '&:hover': {
            border: "1px solid ".concat(theme.palette.primary.main),
            backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        },
  
        /* Styles applied to the root element if `variant="outlined"` and `color="secondary"`. */
        outlinedSecondary: {
          color: theme.palette.secondary.main,
          border: "1px solid ".concat(fade(theme.palette.secondary.main, 0.5)),
          '&:hover': {
            border: "1px solid ".concat(theme.palette.secondary.main),
            backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          },
          '&$disabled': {
            border: "1px solid ".concat(theme.palette.action.disabled)
          }
        },
  
        /* Styles applied to the root element if `variant="contained"`. */
        contained: {
          color: theme.palette.getContrastText(theme.palette.grey[300]),
          backgroundColor: theme.palette.grey[300],
          boxShadow: theme.shadows[2],
          '&$focusVisible': {
            boxShadow: theme.shadows[6]
          },
          '&:active': {
            boxShadow: theme.shadows[8]
          },
          '&$disabled': {
            color: theme.palette.action.disabled,
            boxShadow: theme.shadows[0],
            backgroundColor: theme.palette.action.disabledBackground
          },
          '&:hover': {
            backgroundColor: theme.palette.grey.A100,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: theme.palette.grey[300]
            },
            '&$disabled': {
              backgroundColor: theme.palette.action.disabledBackground
            }
          }
        },
  
        /* Styles applied to the root element if `variant="contained"` and `color="primary"`. */
        containedPrimary: {
          color: theme.palette.primary.contrastText,
          backgroundColor: theme.palette.primary.main,
          '&:hover': {
            backgroundColor: theme.palette.primary.dark,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: theme.palette.primary.main
            }
          }
        },
  
        /* Styles applied to the root element if `variant="contained"` and `color="secondary"`. */
        containedSecondary: {
          color: theme.palette.secondary.contrastText,
          backgroundColor: theme.palette.secondary.main,
          '&:hover': {
            backgroundColor: theme.palette.secondary.dark,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: theme.palette.secondary.main
            }
          }
        },
  
        /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */
        focusVisible: {},
  
        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},
  
        /* Styles applied to the root element if `color="inherit"`. */
        colorInherit: {
          color: 'inherit',
          borderColor: 'currentColor'
        },
  
        /* Styles applied to the root element if `size="small"`. */
        sizeSmall: {
          padding: '4px 8px',
          fontSize: theme.typography.pxToRem(13)
        },
  
        /* Styles applied to the root element if `size="large"`. */
        sizeLarge: {
          padding: '8px 24px',
          fontSize: theme.typography.pxToRem(15)
        },
  
        /* Styles applied to the root element if `fullWidth={true}`. */
        fullWidth: {
          width: '100%'
        }
      };
    };
    var Button = React__default.forwardRef(function Button(props, ref) {
      var children = props.children,
          classes = props.classes,
          classNameProp = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'default' : _props$color,
          _props$component = props.component,
          component = _props$component === void 0 ? 'button' : _props$component,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$disableFocusRi = props.disableFocusRipple,
          disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,
          focusVisibleClassName = props.focusVisibleClassName,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          _props$type = props.type,
          type = _props$type === void 0 ? 'button' : _props$type,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'text' : _props$variant,
          other = objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "disableFocusRipple", "focusVisibleClassName", "fullWidth", "size", "type", "variant"]);
  
      var text = variant === 'text';
      var outlined = variant === 'outlined';
      var contained = variant === 'contained';
      var primary = color === 'primary';
      var secondary = color === 'secondary';
      var className = clsx(classes.root, classNameProp, text && [classes.text, primary && classes.textPrimary, secondary && classes.textSecondary], outlined && [classes.outlined, primary && classes.outlinedPrimary, secondary && classes.outlinedSecondary], contained && [classes.contained, primary && classes.containedPrimary, secondary && classes.containedSecondary], size !== 'medium' && classes["size".concat(capitalize(size))], disabled && classes.disabled, fullWidth && classes.fullWidth, color === 'inherit' && classes.colorInherit);
      return React__default.createElement(ButtonBase$1, _extends_1({
        className: className,
        component: component,
        disabled: disabled,
        focusRipple: !disableFocusRipple,
        focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
        ref: ref,
        type: type
      }, other), React__default.createElement("span", {
        className: classes.label
      }, children));
    });
    Button.propTypes = {
      /**
       * The content of the button.
       */
      children: propTypes.node.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * If `true`, the button will be disabled.
       */
      disabled: propTypes.bool,
  
      /**
       * If `true`, the  keyboard focus ripple will be disabled.
       * `disableRipple` must also be true.
       */
      disableFocusRipple: propTypes.bool,
  
      /**
       * If `true`, the ripple effect will be disabled.
       *
       * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
       * to highlight the element by applying separate styles with the `focusVisibleClassName`.
       */
      disableRipple: propTypes.bool,
  
      /**
       * @ignore
       */
      focusVisibleClassName: propTypes.string,
  
      /**
       * If `true`, the button will take up the full width of its container.
       */
      fullWidth: propTypes.bool,
  
      /**
       * The URL to link to when the button is clicked.
       * If defined, an `a` element will be used as the root node.
       */
      href: propTypes.string,
  
      /**
       * The size of the button.
       * `small` is equivalent to the dense button styling.
       */
      size: propTypes.oneOf(['small', 'medium', 'large']),
  
      /**
       * @ignore
       */
      type: propTypes.string,
  
      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['text', 'outlined', 'contained'])
    };
    var Button$1 = withStyles$1(styles$f, {
      name: 'MuiButton'
    })(Button);
  
    var styles$g = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'inline-flex',
          borderRadius: theme.shape.borderRadius
        },
  
        /* Styles applied to the root element if variant="contained". */
        contained: {
          boxShadow: theme.shadows[2]
        },
  
        /* Styles applied to the root element if fullWidth={true}. */
        fullWidth: {
          width: '100%'
        },
  
        /* Styles applied to the children. */
        grouped: {
          minWidth: 40,
          '&:not(:first-child)': {
            borderTopLeftRadius: 0,
            borderBottomLeftRadius: 0
          },
          '&:not(:last-child)': {
            borderTopRightRadius: 0,
            borderBottomRightRadius: 0
          }
        },
  
        /* Styles applied to the children if variant="outlined". */
        groupedOutlined: {
          '&:not(:first-child)': {
            borderLeftColor: 'transparent',
            marginLeft: -1
          }
        },
  
        /* Styles applied to the children if variant="outlined" & color="primary". */
        groupedOutlinedPrimary: {
          '&:hover': {
            borderColor: theme.palette.primary.main
          }
        },
  
        /* Styles applied to the children if variant="outlined" & color="secondary". */
        groupedOutlinedSecondary: {
          '&:hover': {
            borderColor: theme.palette.secondary.main
          }
        },
  
        /* Styles applied to the children if variant="contained". */
        groupedContained: {
          boxShadow: 'none',
          '&:not(:last-child)': {
            borderRight: "1px solid ".concat(theme.palette.grey[400])
          }
        },
  
        /* Styles applied to the children if variant="contained" & color="primary". */
        groupedContainedPrimary: {
          '&:not(:last-child)': {
            borderRight: "1px solid ".concat(theme.palette.primary.dark)
          }
        },
  
        /* Styles applied to the children if variant="contained" & color="secondary". */
        groupedContainedSecondary: {
          '&:not(:last-child)': {
            borderRight: "1px solid ".concat(theme.palette.secondary.dark)
          }
        }
      };
    };
    var ButtonGroup = React__default.forwardRef(function ButtonGroup(props, ref) {
      var children = props.children,
          classes = props.classes,
          classNameProp = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'default' : _props$color,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$disableFocusRi = props.disableFocusRipple,
          disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,
          _props$disableRipple = props.disableRipple,
          disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'outlined' : _props$variant,
          other = objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "disableFocusRipple", "disableRipple", "fullWidth", "size", "variant"]);
  
      var outlined = variant === 'outlined';
      var contained = variant !== "outlined";
      var primary = color === 'primary';
      var secondary = color === 'secondary';
      var buttonClassName = clsx(classes.grouped, outlined && [classes.groupedOutlined, primary && classes.groupedOutlinedPrimary, secondary && classes.groupedOutlinedSecondary], contained && [classes.groupedContained, primary && classes.groupedContainedPrimary, secondary && classes.groupedContainedSecondary]);
      return React__default.createElement(Component, _extends_1({
        role: "group",
        className: clsx(classes.root, classNameProp, contained && classes.contained, fullWidth && classes.fullWidth),
        ref: ref
      }, other), React__default.Children.map(children, function (child) {
        if (!React__default.isValidElement(child)) {
          return null;
        }
  
        warning_1(child.type !== React__default.Fragment, ["Material-UI: the ButtonGroup component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
        return React__default.cloneElement(child, {
          className: clsx(buttonClassName, child.props.className),
          disabled: child.props.disabled || disabled,
          color: color,
          disableFocusRipple: disableFocusRipple,
          disableRipple: disableRipple,
          fullWidth: fullWidth,
          size: child.props.size || size,
          variant: variant
        });
      }));
    });
    ButtonGroup.propTypes = {
      /**
       * The content of the button group.
       */
      children: propTypes.node.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * If `true`, the buttons will be disabled.
       */
      disabled: propTypes.bool,
  
      /**
       * If `true`, the button keyboard focus ripple will be disabled.
       * `disableRipple` must also be true.
       */
      disableFocusRipple: propTypes.bool,
  
      /**
       * If `true`, the button ripple effect will be disabled.
       */
      disableRipple: propTypes.bool,
  
      /**
       * If `true`, the buttons will take up the full width of its container.
       */
      fullWidth: propTypes.bool,
  
      /**
       * The size of the button.
       * `small` is equivalent to the dense button styling.
       */
      size: propTypes.oneOf(['small', 'medium', 'large']),
  
      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['outlined', 'contained'])
    };
    var ButtonGroup$1 = withStyles$1(styles$g, {
      name: 'MuiButtonGroup'
    })(ButtonGroup);
  
    var styles$h = {
      /* Styles applied to the root element. */
      root: {
        overflow: 'hidden'
      }
    };
    var Card = React__default.forwardRef(function Card(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$raised = props.raised,
          raised = _props$raised === void 0 ? false : _props$raised,
          other = objectWithoutProperties(props, ["classes", "className", "raised"]);
  
      return React__default.createElement(Paper$1, _extends_1({
        className: clsx(classes.root, className),
        elevation: raised ? 8 : 1,
        ref: ref
      }, other));
    });
    Card.propTypes = {
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * If `true`, the card will use raised styling.
       */
      raised: propTypes.bool
    };
    var Card$1 = withStyles$1(styles$h, {
      name: 'MuiCard'
    })(Card);
  
    var styles$i = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'block',
          textAlign: 'inherit',
          width: '100%',
          '&:hover $focusHighlight': {
            opacity: theme.palette.action.hoverOpacity
          },
          '&$focusVisible $focusHighlight': {
            opacity: 0.12
          }
        },
  
        /* Pseudo-class applied to the ButtonBase root element if the action area is keyboard focused. */
        focusVisible: {},
  
        /* Styles applied to the overlay that covers the action area when it is keyboard focused. */
        focusHighlight: {
          pointerEvents: 'none',
          position: 'absolute',
          backgroundColor: 'currentcolor',
          top: 0,
          right: 0,
          bottom: 0,
          left: 0,
          opacity: 0,
          transition: theme.transitions.create('opacity', {
            duration: theme.transitions.duration.short
          })
        }
      };
    };
    var CardActionArea = React__default.forwardRef(function CardActionArea(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          focusVisibleClassName = props.focusVisibleClassName,
          other = objectWithoutProperties(props, ["children", "classes", "className", "focusVisibleClassName"]);
  
      return React__default.createElement(ButtonBase$1, _extends_1({
        className: clsx(classes.root, className),
        focusVisibleClassName: clsx(focusVisibleClassName, classes.focusVisible),
        ref: ref
      }, other), children, React__default.createElement("span", {
        className: classes.focusHighlight
      }));
    });
    CardActionArea.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * @ignore
       */
      focusVisibleClassName: propTypes.string
    };
    var CardActionArea$1 = withStyles$1(styles$i, {
      name: 'MuiCardActionArea'
    })(CardActionArea);
  
    var styles$j = {
      /* Styles applied to the root element. */
      root: {
        display: 'flex',
        alignItems: 'center',
        padding: 8
      },
  
      /* Styles applied to the root element if `disableSpacing={false}`. */
      spacing: {
        '& > * + *': {
          marginLeft: 8
        }
      }
    };
    var CardActions = React__default.forwardRef(function CardActions(props, ref) {
      var _props$disableSpacing = props.disableSpacing,
          disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,
          classes = props.classes,
          className = props.className,
          other = objectWithoutProperties(props, ["disableSpacing", "classes", "className"]);
  
      return React__default.createElement("div", _extends_1({
        className: clsx(classes.root, className, !disableSpacing && classes.spacing),
        ref: ref
      }, other));
    });
    CardActions.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * If `true`, the actions do not have additional margin.
       */
      disableSpacing: propTypes.bool
    };
    var CardActions$1 = withStyles$1(styles$j, {
      name: 'MuiCardActions'
    })(CardActions);
  
    var styles$k = {
      /* Styles applied to the root element. */
      root: {
        padding: 16,
        '&:last-child': {
          paddingBottom: 24
        }
      }
    };
    var CardContent = React__default.forwardRef(function CardContent(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          other = objectWithoutProperties(props, ["classes", "className", "component"]);
  
      return React__default.createElement(Component, _extends_1({
        className: clsx(classes.root, className),
        ref: ref
      }, other));
    });
    CardContent.propTypes = {
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType
    };
    var CardContent$1 = withStyles$1(styles$k, {
      name: 'MuiCardContent'
    })(CardContent);
  
    var styles$l = {
      /* Styles applied to the root element. */
      root: {
        display: 'flex',
        alignItems: 'center',
        padding: 16
      },
  
      /* Styles applied to the avatar element. */
      avatar: {
        flex: '0 0 auto',
        marginRight: 16
      },
  
      /* Styles applied to the action element. */
      action: {
        flex: '0 0 auto',
        alignSelf: 'flex-start',
        marginTop: -8,
        marginRight: -8
      },
  
      /* Styles applied to the content wrapper element. */
      content: {
        flex: '1 1 auto'
      },
  
      /* Styles applied to the title Typography element. */
      title: {},
  
      /* Styles applied to the subheader Typography element. */
      subheader: {}
    };
    var CardHeader = React__default.forwardRef(function CardHeader(props, ref) {
      var action = props.action,
          avatar = props.avatar,
          classes = props.classes,
          classNameProp = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _props$disableTypogra = props.disableTypography,
          disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,
          subheaderProp = props.subheader,
          subheaderTypographyProps = props.subheaderTypographyProps,
          titleProp = props.title,
          titleTypographyProps = props.titleTypographyProps,
          other = objectWithoutProperties(props, ["action", "avatar", "classes", "className", "component", "disableTypography", "subheader", "subheaderTypographyProps", "title", "titleTypographyProps"]);
  
      var title = titleProp;
  
      if (title != null && title.type !== Typography$1 && !disableTypography) {
        title = React__default.createElement(Typography$1, _extends_1({
          variant: avatar ? 'body2' : 'h5',
          className: classes.title,
          component: "span",
          display: "block"
        }, titleTypographyProps), title);
      }
  
      var subheader = subheaderProp;
  
      if (subheader != null && subheader.type !== Typography$1 && !disableTypography) {
        subheader = React__default.createElement(Typography$1, _extends_1({
          variant: avatar ? 'body2' : 'body1',
          className: classes.subheader,
          color: "textSecondary",
          component: "span",
          display: "block"
        }, subheaderTypographyProps), subheader);
      }
  
      return React__default.createElement(Component, _extends_1({
        className: clsx(classes.root, classNameProp),
        ref: ref
      }, other), avatar && React__default.createElement("div", {
        className: classes.avatar
      }, avatar), React__default.createElement("div", {
        className: classes.content
      }, title, subheader), action && React__default.createElement("div", {
        className: classes.action
      }, action));
    });
    CardHeader.propTypes = {
      /**
       * The action to display in the card header.
       */
      action: propTypes.node,
  
      /**
       * The Avatar for the Card Header.
       */
      avatar: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * If `true`, the children won't be wrapped by a Typography component.
       * This can be useful to render an alternative Typography variant by wrapping
       * the `title` text, and optional `subheader` text
       * with the Typography component.
       */
      disableTypography: propTypes.bool,
  
      /**
       * The content of the component.
       */
      subheader: propTypes.node,
  
      /**
       * These props will be forwarded to the subheader
       * (as long as disableTypography is not `true`).
       */
      subheaderTypographyProps: propTypes.object,
  
      /**
       * The content of the Card Title.
       */
      title: propTypes.node,
  
      /**
       * These props will be forwarded to the title
       * (as long as disableTypography is not `true`).
       */
      titleTypographyProps: propTypes.object
    };
    var CardHeader$1 = withStyles$1(styles$l, {
      name: 'MuiCardHeader'
    })(CardHeader);
  
    var styles$m = {
      /* Styles applied to the root element. */
      root: {
        display: 'block',
        backgroundSize: 'cover',
        backgroundRepeat: 'no-repeat',
        backgroundPosition: 'center'
      },
  
      /* Styles applied to the root element if `component="video, audio, picture, iframe, or img"`. */
      media: {
        width: '100%',
        // ⚠️ object-fit is not supported by IE 11.
        objectFit: 'cover'
      }
    };
    var MEDIA_COMPONENTS = ['video', 'audio', 'picture', 'iframe', 'img'];
    var CardMedia = React__default.forwardRef(function CardMedia(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          image = props.image,
          src = props.src,
          style = props.style,
          other = objectWithoutProperties(props, ["classes", "className", "component", "image", "src", "style"]);
  
      warning_1(Boolean(image || src), 'Material-UI: either `image` or `src` property must be specified.');
      var isMediaComponent = MEDIA_COMPONENTS.indexOf(Component) !== -1;
      var composedStyle = !isMediaComponent && image ? _extends_1({
        backgroundImage: "url(\"".concat(image, "\")")
      }, style) : style;
      return React__default.createElement(Component, _extends_1({
        className: clsx(classes.root, className, isMediaComponent && classes.media),
        ref: ref,
        style: composedStyle,
        src: isMediaComponent ? image || src : undefined
      }, other));
    });
    CardMedia.propTypes = {
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * Component for rendering image.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * Image to be displayed as a background image.
       * Either `image` or `src` prop must be specified.
       * Note that caller must specify height otherwise the image will not be visible.
       */
      image: propTypes.string,
  
      /**
       * An alias for `image` property.
       * Available only with media components.
       * Media components: `video`, `audio`, `picture`, `iframe`, `img`.
       */
      src: propTypes.string,
  
      /**
       * @ignore
       */
      style: propTypes.object
    };
    var CardMedia$1 = withStyles$1(styles$m, {
      name: 'MuiCardMedia'
    })(CardMedia);
  
    /**
     * @ignore - internal component.
     */
  
    var FormControlContext = React__default.createContext();
  
    function withFormControlContext(Component) {
      var EnhancedComponent = React__default.forwardRef(function (props, ref) {
        return React__default.createElement(FormControlContext.Consumer, null, function (context) {
          return React__default.createElement(Component, _extends_1({
            muiFormControl: context,
            ref: ref
          }, props));
        });
      });
  
      {
        EnhancedComponent.displayName = "WithFormControlContext(".concat(getDisplayName(Component), ")");
      }
  
      hoistNonReactStatics_cjs(EnhancedComponent, Component);
      return EnhancedComponent;
    }
  
    var styles$n = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          textAlign: 'center',
          flex: '0 0 auto',
          fontSize: theme.typography.pxToRem(24),
          padding: 12,
          borderRadius: '50%',
          overflow: 'visible',
          // Explicitly set the default value to solve a bug on IE 11.
          color: theme.palette.action.active,
          transition: theme.transitions.create('background-color', {
            duration: theme.transitions.duration.shortest
          }),
          '&:hover': {
            backgroundColor: fade(theme.palette.action.active, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          },
          '&$disabled': {
            backgroundColor: 'transparent',
            color: theme.palette.action.disabled
          }
        },
  
        /* Styles applied to the root element if `edge="start"`. */
        edgeStart: {
          marginLeft: -12,
          '$sizeSmall&': {
            marginLeft: -3
          }
        },
  
        /* Styles applied to the root element if `edge="end"`. */
        edgeEnd: {
          marginRight: -12,
          '$sizeSmall&': {
            marginRight: -3
          }
        },
  
        /* Styles applied to the root element if `color="inherit"`. */
        colorInherit: {
          color: 'inherit'
        },
  
        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          color: theme.palette.primary.main,
          '&:hover': {
            backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        },
  
        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          color: theme.palette.secondary.main,
          '&:hover': {
            backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        },
  
        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},
  
        /* Styles applied to the root element if `size="small"`. */
        sizeSmall: {
          padding: 3,
          fontSize: theme.typography.pxToRem(18)
        },
  
        /* Styles applied to the children container element. */
        label: {
          width: '100%',
          display: 'flex',
          alignItems: 'inherit',
          justifyContent: 'inherit'
        }
      };
    };
    /**
     * Refer to the [Icons](/components/icons/) section of the documentation
     * regarding the available icon options.
     */
  
    var IconButton = React__default.forwardRef(function IconButton(props, ref) {
      var _props$edge = props.edge,
          edge = _props$edge === void 0 ? false : _props$edge,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'default' : _props$color,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$disableFocusRi = props.disableFocusRipple,
          disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          other = objectWithoutProperties(props, ["edge", "children", "classes", "className", "color", "disabled", "disableFocusRipple", "size"]);
  
      return React__default.createElement(ButtonBase$1, _extends_1({
        className: clsx(classes.root, className, color !== 'default' && classes["color".concat(capitalize(color))], disabled && classes.disabled, size === "small" && classes["size".concat(capitalize(size))], edge === 'start' && classes.edgeStart, edge === 'end' && classes.edgeEnd),
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled: disabled,
        ref: ref
      }, other), React__default.createElement("span", {
        className: classes.label
      }, children));
    });
    IconButton.propTypes = {
      /**
       * The icon element.
       */
      children: chainPropTypes(propTypes.node, function (props) {
        var found = React__default.Children.toArray(props.children).some(function (child) {
          return React__default.isValidElement(child) && child.props.onClick;
        });
  
        if (found) {
          return new Error(['Material-UI: you are providing an onClick event listener ' + 'to a child of a button element.', 'Firefox will never trigger the event.', 'You should move the onClick listener to the parent button element.', 'https://github.com/mui-org/material-ui/issues/13957'].join('\n'));
        }
  
        return null;
      }),
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),
  
      /**
       * If `true`, the button will be disabled.
       */
      disabled: propTypes.bool,
  
      /**
       * If `true`, the  keyboard focus ripple will be disabled.
       * `disableRipple` must also be true.
       */
      disableFocusRipple: propTypes.bool,
  
      /**
       * If `true`, the ripple effect will be disabled.
       */
      disableRipple: propTypes.bool,
  
      /**
       * If given, uses a negative margin to counteract the padding on one
       * side (this is often helpful for aligning the left or right
       * side of the icon with content above or below, without ruining the border
       * size and shape).
       */
      edge: propTypes.oneOf(['start', 'end', false]),
  
      /**
       * The size of the button.
       * `small` is equivalent to the dense button styling.
       */
      size: propTypes.oneOf(['small', 'medium'])
    };
    var IconButton$1 = withStyles$1(styles$n, {
      name: 'MuiIconButton'
    })(IconButton);
  
    var styles$o = {
      root: {
        padding: 9
      },
      checked: {},
      disabled: {},
      input: {
        cursor: 'inherit',
        position: 'absolute',
        opacity: 0,
        width: '100%',
        height: '100%',
        top: 0,
        left: 0,
        margin: 0,
        padding: 0
      }
    };
    /**
     * @ignore - internal component.
     */
  
    var SwitchBase = React__default.forwardRef(function SwitchBase(props, ref) {
      var autoFocus = props.autoFocus,
          checkedProp = props.checked,
          checkedIcon = props.checkedIcon,
          classes = props.classes,
          classNameProp = props.className,
          defaultChecked = props.defaultChecked,
          disabledProp = props.disabled,
          icon = props.icon,
          id = props.id,
          inputProps = props.inputProps,
          inputRef = props.inputRef,
          muiFormControl = props.muiFormControl,
          name = props.name,
          onBlur = props.onBlur,
          onChange = props.onChange,
          onFocus = props.onFocus,
          readOnly = props.readOnly,
          required = props.required,
          tabIndex = props.tabIndex,
          type = props.type,
          value = props.value,
          other = objectWithoutProperties(props, ["autoFocus", "checked", "checkedIcon", "classes", "className", "defaultChecked", "disabled", "icon", "id", "inputProps", "inputRef", "muiFormControl", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"]);
  
      var _React$useRef = React__default.useRef(checkedProp != null),
          isControlled = _React$useRef.current;
  
      var _React$useState = React__default.useState(Boolean(defaultChecked)),
          _React$useState2 = slicedToArray(_React$useState, 2),
          checkedState = _React$useState2[0],
          setCheckedState = _React$useState2[1];
  
      var handleFocus = function handleFocus(event) {
        if (onFocus) {
          onFocus(event);
        }
  
        if (muiFormControl && muiFormControl.onFocus) {
          muiFormControl.onFocus(event);
        }
      };
  
      var handleBlur = function handleBlur(event) {
        if (onBlur) {
          onBlur(event);
        }
  
        if (muiFormControl && muiFormControl.onBlur) {
          muiFormControl.onBlur(event);
        }
      };
  
      var handleInputChange = function handleInputChange(event) {
        var checked = event.target.checked;
  
        if (!isControlled) {
          setCheckedState(checked);
        }
  
        if (onChange) {
          onChange(event, checked);
        }
      };
  
      var disabled = disabledProp;
  
      if (muiFormControl) {
        if (typeof disabled === 'undefined') {
          disabled = muiFormControl.disabled;
        }
      }
  
      var checked = isControlled ? checkedProp : checkedState;
      var hasLabelFor = type === 'checkbox' || type === 'radio';
      return React__default.createElement(IconButton$1, _extends_1({
        component: "span",
        className: clsx(classes.root, classNameProp, checked && classes.checked, disabled && classes.disabled),
        disabled: disabled,
        tabIndex: null,
        role: undefined,
        onFocus: handleFocus,
        onBlur: handleBlur,
        ref: ref
      }, other), checked ? checkedIcon : icon, React__default.createElement("input", _extends_1({
        autoFocus: autoFocus,
        checked: checkedProp,
        defaultChecked: defaultChecked,
        className: classes.input,
        disabled: disabled,
        id: hasLabelFor && id,
        name: name,
        onChange: handleInputChange,
        readOnly: readOnly,
        ref: inputRef,
        required: required,
        tabIndex: tabIndex,
        type: type,
        value: value
      }, inputProps)));
    }); // NB: If changed, please update Checkbox, Switch and Radio
    // so that the API documentation is updated.
  
    SwitchBase.propTypes = {
      /**
       * If `true`, the `input` element will be focused during the first mount.
       */
      autoFocus: propTypes.bool,
  
      /**
       * If `true`, the component is checked.
       */
      checked: propTypes.bool,
  
      /**
       * The icon to display when the component is checked.
       */
      checkedIcon: propTypes.node.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * @ignore
       */
      defaultChecked: propTypes.bool,
  
      /**
       * If `true`, the switch will be disabled.
       */
      disabled: propTypes.bool,
  
      /**
       * The icon to display when the component is unchecked.
       */
      icon: propTypes.node.isRequired,
  
      /**
       * The id of the `input` element.
       */
      id: propTypes.string,
  
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: propTypes.object,
  
      /**
       * This property can be used to pass a ref callback to the `input` element.
       */
      inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  
      /**
       * @ignore
       */
      muiFormControl: propTypes.object,
  
      /*
       * @ignore
       */
      name: propTypes.string,
  
      /**
       * @ignore
       */
      onBlur: propTypes.func,
  
      /**
       * Callback fired when the state is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.checked`.
       * @param {boolean} checked The `checked` value of the switch
       */
      onChange: propTypes.func,
  
      /**
       * @ignore
       */
      onFocus: propTypes.func,
  
      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: propTypes.bool,
  
      /**
       * If `true`, the `input` element will be required.
       */
      required: propTypes.bool,
  
      /**
       * @ignore
       */
      tabIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),
  
      /**
       * The input component property `type`.
       */
      type: propTypes.string.isRequired,
  
      /**
       * The value of the component.
       */
      value: propTypes.any
    };
    var SwitchBase$1 = withStyles$1(styles$o, {
      name: 'PrivateSwitchBase'
    })(withFormControlContext(SwitchBase));
  
    /**
     * @ignore - internal component.
     */
  
    var CheckBoxOutlineBlankIcon = createSvgIcon(React__default.createElement("path", {
      d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
    }), 'CheckBoxOutlineBlank');
  
    /**
     * @ignore - internal component.
     */
  
    var CheckBoxIcon = createSvgIcon(React__default.createElement("path", {
      d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
    }), 'CheckBox');
  
    /**
     * @ignore - internal component.
     */
  
    var IndeterminateCheckBoxIcon = createSvgIcon(React__default.createElement("path", {
      d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
    }), 'IndeterminateCheckBox');
  
    var styles$p = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          color: theme.palette.text.secondary
        },
  
        /* Pseudo-class applied to the root element if `checked={true}`. */
        checked: {},
  
        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},
  
        /* Pseudo-class applied to the root element if `indeterminate={true}`. */
        indeterminate: {},
  
        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          '&$checked': {
            color: theme.palette.primary.main,
            '&:hover': {
              backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
              // Reset on touch devices, it doesn't add specificity
              '@media (hover: none)': {
                backgroundColor: 'transparent'
              }
            }
          },
          '&$disabled': {
            color: theme.palette.action.disabled
          }
        },
  
        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          '&$checked': {
            color: theme.palette.secondary.main,
            '&:hover': {
              backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
              // Reset on touch devices, it doesn't add specificity
              '@media (hover: none)': {
                backgroundColor: 'transparent'
              }
            }
          },
          '&$disabled': {
            color: theme.palette.action.disabled
          }
        }
      };
    };
    var defaultCheckedIcon = React__default.createElement(CheckBoxIcon, null);
    var defaultIcon = React__default.createElement(CheckBoxOutlineBlankIcon, null);
    var defaultIndeterminateIcon = React__default.createElement(IndeterminateCheckBoxIcon, null);
    var Checkbox = React__default.forwardRef(function Checkbox(props, ref) {
      var _props$checkedIcon = props.checkedIcon,
          checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon : _props$checkedIcon,
          classes = props.classes,
          _props$color = props.color,
          color = _props$color === void 0 ? 'secondary' : _props$color,
          _props$icon = props.icon,
          icon = _props$icon === void 0 ? defaultIcon : _props$icon,
          _props$indeterminate = props.indeterminate,
          indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,
          _props$indeterminateI = props.indeterminateIcon,
          indeterminateIcon = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI,
          inputProps = props.inputProps,
          other = objectWithoutProperties(props, ["checkedIcon", "classes", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps"]);
  
      return React__default.createElement(SwitchBase$1, _extends_1({
        type: "checkbox",
        checkedIcon: indeterminate ? indeterminateIcon : checkedIcon,
        classes: {
          root: clsx(classes.root, classes["color".concat(capitalize(color))], indeterminate && classes.indeterminate),
          checked: classes.checked,
          disabled: classes.disabled
        },
        color: color,
        inputProps: _extends_1({
          'data-indeterminate': indeterminate
        }, inputProps),
        icon: indeterminate ? indeterminateIcon : icon,
        ref: ref
      }, other));
    });
    Checkbox.propTypes = {
      /**
       * If `true`, the component is checked.
       */
      checked: propTypes.bool,
  
      /**
       * The icon to display when the component is checked.
       */
      checkedIcon: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['primary', 'secondary', 'default']),
  
      /**
       * If `true`, the switch will be disabled.
       */
      disabled: propTypes.bool,
  
      /**
       * If `true`, the ripple effect will be disabled.
       */
      disableRipple: propTypes.bool,
  
      /**
       * The icon to display when the component is unchecked.
       */
      icon: propTypes.node,
  
      /**
       * The id of the `input` element.
       */
      id: propTypes.string,
  
      /**
       * If `true`, the component appears indeterminate.
       * This does not set the native input element to indeterminate due
       * to inconsistent behavior across browsers.
       * However, we set a `data-indeterminate` attribute on the input.
       */
      indeterminate: propTypes.bool,
  
      /**
       * The icon to display when the component is indeterminate.
       */
      indeterminateIcon: propTypes.node,
  
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: propTypes.object,
  
      /**
       * This property can be used to pass a ref callback to the `input` element.
       */
      inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  
      /**
       * Callback fired when the state is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.checked`.
       * @param {boolean} checked The `checked` value of the switch
       */
      onChange: propTypes.func,
  
      /**
       * The input component property `type`.
       */
      type: propTypes.string,
  
      /**
       * The value of the component. The DOM API casts this to a string.
       */
      value: propTypes.any
    };
    var Checkbox$1 = withStyles$1(styles$p, {
      name: 'MuiCheckbox'
    })(Checkbox);
  
    /**
     * @ignore - internal component.
     */
  
    var CancelIcon = createSvgIcon(React__default.createElement("path", {
      d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
    }), 'Cancel');
  
    var styles$q = function styles(theme) {
      var height = 32;
      var smallHeight = 24;
      var backgroundColor = theme.palette.type === 'light' ? theme.palette.grey[300] : theme.palette.grey[700];
      var deleteIconColor = fade(theme.palette.text.primary, 0.26);
      return {
        /* Styles applied to the root element. */
        root: {
          fontFamily: theme.typography.fontFamily,
          fontSize: theme.typography.pxToRem(13),
          display: 'inline-flex',
          alignItems: 'center',
          justifyContent: 'center',
          height: height,
          color: theme.palette.getContrastText(backgroundColor),
          backgroundColor: backgroundColor,
          borderRadius: height / 2,
          whiteSpace: 'nowrap',
          transition: theme.transitions.create(['background-color', 'box-shadow']),
          // label will inherit this from root, then `clickable` class overrides this for both
          cursor: 'default',
          // We disable the focus ring for mouse, touch and keyboard users.
          outline: 'none',
          textDecoration: 'none',
          border: 'none',
          // Remove `button` border
          padding: 0,
          // Remove `button` padding
          verticalAlign: 'middle',
          boxSizing: 'border-box'
        },
  
        /* Styles applied to the root element if `size="small"`. */
        sizeSmall: {
          height: smallHeight
        },
  
        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          backgroundColor: theme.palette.primary.main,
          color: theme.palette.primary.contrastText
        },
  
        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          backgroundColor: theme.palette.secondary.main,
          color: theme.palette.secondary.contrastText
        },
  
        /* Styles applied to the root element if `onClick` is defined or `clickable={true}`. */
        clickable: {
          WebkitTapHighlightColor: 'transparent',
          // Remove grey highlight
          cursor: 'pointer',
          '&:hover, &:focus': {
            backgroundColor: emphasize(backgroundColor, 0.08)
          },
          '&:active': {
            boxShadow: theme.shadows[1],
            backgroundColor: emphasize(backgroundColor, 0.12)
          }
        },
  
        /* Styles applied to the root element if `onClick` and `color="primary"` is defined or `clickable={true}`. */
        clickableColorPrimary: {
          '&:hover, &:focus': {
            backgroundColor: emphasize(theme.palette.primary.main, 0.08)
          },
          '&:active': {
            backgroundColor: emphasize(theme.palette.primary.main, 0.12)
          }
        },
  
        /* Styles applied to the root element if `onClick` and `color="secondary"` is defined or `clickable={true}`. */
        clickableColorSecondary: {
          '&:hover, &:focus': {
            backgroundColor: emphasize(theme.palette.secondary.main, 0.08)
          },
          '&:active': {
            backgroundColor: emphasize(theme.palette.secondary.main, 0.12)
          }
        },
  
        /* Styles applied to the root element if `onDelete` is defined. */
        deletable: {
          '&:focus': {
            backgroundColor: emphasize(backgroundColor, 0.08)
          }
        },
  
        /* Styles applied to the root element if `onDelete` and `color="primary"` is defined. */
        deletableColorPrimary: {
          '&:focus': {
            backgroundColor: emphasize(theme.palette.primary.main, 0.2)
          }
        },
  
        /* Styles applied to the root element if `onDelete` and `color="secondary"` is defined. */
        deletableColorSecondary: {
          '&:focus': {
            backgroundColor: emphasize(theme.palette.secondary.main, 0.2)
          }
        },
  
        /* Styles applied to the root element if `variant="outlined"`. */
        outlined: {
          backgroundColor: 'transparent',
          border: "1px solid ".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'),
          '$clickable&:hover, $clickable&:focus, $deletable&:focus': {
            backgroundColor: fade(theme.palette.text.primary, theme.palette.action.hoverOpacity)
          },
          '& $avatar': {
            marginLeft: -1
          }
        },
  
        /* Styles applied to the root element if `variant="outlined"` and `color="primary"`. */
        outlinedPrimary: {
          color: theme.palette.primary.main,
          border: "1px solid ".concat(theme.palette.primary.main),
          '$clickable&:hover, $clickable&:focus, $deletable&:focus': {
            backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity)
          }
        },
  
        /* Styles applied to the root element if `variant="outlined"` and `color="secondary"`. */
        outlinedSecondary: {
          color: theme.palette.secondary.main,
          border: "1px solid ".concat(theme.palette.secondary.main),
          '$clickable&:hover, $clickable&:focus, $deletable&:focus': {
            backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity)
          }
        },
  
        /* Styles applied to the `avatar` element. */
        avatar: {
          marginRight: -4,
          width: height,
          height: height,
          color: theme.palette.type === 'light' ? theme.palette.grey[700] : theme.palette.grey[300],
          fontSize: theme.typography.pxToRem(16)
        },
        avatarSmall: {
          width: smallHeight,
          height: smallHeight,
          fontSize: theme.typography.pxToRem(12)
        },
  
        /* Styles applied to the `avatar` element if `color="primary"`. */
        avatarColorPrimary: {
          color: theme.palette.primary.contrastText,
          backgroundColor: theme.palette.primary.dark
        },
  
        /* Styles applied to the `avatar` element if `color="secondary"`. */
        avatarColorSecondary: {
          color: theme.palette.secondary.contrastText,
          backgroundColor: theme.palette.secondary.dark
        },
  
        /* Styles applied to the `avatar` elements children. */
        avatarChildren: {
          height: 18
        },
  
        /* Styles applied to the `icon` element. */
        icon: {
          color: theme.palette.type === 'light' ? theme.palette.grey[700] : theme.palette.grey[300],
          marginLeft: 5,
          marginRight: -8
        },
        iconSmall: {
          width: 16,
          marginRight: -5
        },
  
        /* Styles applied to the `icon` element if `color="primary"`. */
        iconColorPrimary: {
          color: 'inherit'
        },
  
        /* Styles applied to the `icon` element if `color="secondary"`. */
        iconColorSecondary: {
          color: 'inherit'
        },
  
        /* Styles applied to the label `span` element`. */
        label: {
          display: 'flex',
          alignItems: 'center',
          paddingLeft: 12,
          paddingRight: 12,
          userSelect: 'none',
          whiteSpace: 'nowrap',
          cursor: 'inherit'
        },
        labelSmall: {
          paddingLeft: 8,
          paddingRight: 8
        },
  
        /* Styles applied to the `deleteIcon` element. */
        deleteIcon: {
          // Remove grey highlight
          WebkitTapHighlightColor: 'transparent',
          color: deleteIconColor,
          cursor: 'pointer',
          height: 'auto',
          margin: '0 5px 0 -8px',
          '&:hover': {
            color: fade(deleteIconColor, 0.4)
          }
        },
        deleteIconSmall: {
          height: 16,
          margin: '0 1px 0 -9px'
        },
  
        /* Styles applied to the deleteIcon element if `color="primary"` and `variant="default"`. */
        deleteIconColorPrimary: {
          color: fade(theme.palette.primary.contrastText, 0.7),
          '&:hover, &:active': {
            color: theme.palette.primary.contrastText
          }
        },
  
        /* Styles applied to the deleteIcon element if `color="secondary"` and `variant="default"`. */
        deleteIconColorSecondary: {
          color: fade(theme.palette.secondary.contrastText, 0.7),
          '&:hover, &:active': {
            color: theme.palette.secondary.contrastText
          }
        },
  
        /* Styles applied to the deleteIcon element if `color="primary"` and `variant="outlined"`. */
        deleteIconOutlinedColorPrimary: {
          color: fade(theme.palette.primary.main, 0.7),
          '&:hover, &:active': {
            color: theme.palette.primary.main
          }
        },
  
        /* Styles applied to the deleteIcon element if `color="secondary"` and `variant="outlined"`. */
        deleteIconOutlinedColorSecondary: {
          color: fade(theme.palette.secondary.main, 0.7),
          '&:hover, &:active': {
            color: theme.palette.secondary.main
          }
        }
      };
    };
    /**
     * Chips represent complex entities in small blocks, such as a contact.
     */
  
    var Chip = React__default.forwardRef(function Chip(props, ref) {
      var avatarProp = props.avatar,
          classes = props.classes,
          classNameProp = props.className,
          clickableProp = props.clickable,
          _props$color = props.color,
          color = _props$color === void 0 ? 'default' : _props$color,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          deleteIconProp = props.deleteIcon,
          iconProp = props.icon,
          label = props.label,
          onClick = props.onClick,
          onDelete = props.onDelete,
          onKeyDown = props.onKeyDown,
          onKeyUp = props.onKeyUp,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'default' : _props$variant,
          other = objectWithoutProperties(props, ["avatar", "classes", "className", "clickable", "color", "component", "deleteIcon", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant"]);
  
      var chipRef = React__default.useRef(null);
  
      var handleDeleteIconClick = function handleDeleteIconClick(event) {
        // Stop the event from bubbling up to the `Chip`
        event.stopPropagation();
  
        if (onDelete) {
          onDelete(event);
        }
      };
  
      var handleKeyDown = function handleKeyDown(event) {
        if (onKeyDown) {
          onKeyDown(event);
        } // Ignore events from children of `Chip`.
  
  
        if (event.currentTarget !== event.target) {
          return;
        }
  
        var key = event.key;
  
        if (key === ' ' || key === 'Enter' || key === 'Backspace' || key === 'Delete' || key === 'Escape') {
          event.preventDefault();
        }
      };
  
      var handleKeyUp = function handleKeyUp(event) {
        if (onKeyUp) {
          onKeyUp(event);
        } // Ignore events from children of `Chip`.
  
  
        if (event.currentTarget !== event.target) {
          return;
        }
  
        var key = event.key;
  
        if (onClick && (key === ' ' || key === 'Enter')) {
          onClick(event);
        } else if (onDelete && (key === 'Backspace' || key === 'Delete')) {
          onDelete(event);
        } else if (key === 'Escape' && chipRef.current) {
          chipRef.current.blur();
        }
      };
  
      var clickable = clickableProp !== false && onClick ? true : clickableProp;
      var small = size === 'small';
      var className = clsx(classes.root, classNameProp, color !== 'default' && [classes["color".concat(capitalize(color))], clickable && classes["clickableColor".concat(capitalize(color))], onDelete && classes["deletableColor".concat(capitalize(color))]], variant !== "default" && [classes.outlined, color === 'primary' && classes.outlinedPrimary, color === 'secondary' && classes.outlinedSecondary], small && classes.sizeSmall, clickable && classes.clickable, onDelete && classes.deletable);
      var deleteIcon = null;
  
      if (onDelete) {
        var customClasses = clsx(color !== 'default' && (variant === "default" ? classes["deleteIconColor".concat(capitalize(color))] : classes["deleteIconOutlinedColor".concat(capitalize(color))]), small && classes.deleteIconSmall);
        deleteIcon = deleteIconProp && React__default.isValidElement(deleteIconProp) ? React__default.cloneElement(deleteIconProp, {
          className: clsx(deleteIconProp.props.className, classes.deleteIcon, customClasses),
          onClick: handleDeleteIconClick
        }) : React__default.createElement(CancelIcon, {
          className: clsx(classes.deleteIcon, customClasses),
          onClick: handleDeleteIconClick
        });
      }
  
      var avatar = null;
  
      if (avatarProp && React__default.isValidElement(avatarProp)) {
        avatar = React__default.cloneElement(avatarProp, {
          className: clsx(classes.avatar, avatarProp.props.className, small && classes.avatarSmall, color !== 'default' && classes["avatarColor".concat(capitalize(color))]),
          childrenClassName: clsx(classes.avatarChildren, avatarProp.props.childrenClassName)
        });
      }
  
      var icon = null;
  
      if (iconProp && React__default.isValidElement(iconProp)) {
        icon = React__default.cloneElement(iconProp, {
          className: clsx(classes.icon, iconProp.props.className, small && classes.iconSmall, color !== 'default' && classes["iconColor".concat(capitalize(color))])
        });
      }
  
      warning_1(!avatar || !icon, 'Material-UI: the Chip component can not handle the avatar ' + 'and the icon property at the same time. Pick one.');
      var handleRef = useForkRef(chipRef, ref);
      return React__default.createElement(Component, _extends_1({
        role: clickable || onDelete ? 'button' : undefined,
        className: className,
        tabIndex: clickable || onDelete ? 0 : undefined,
        onClick: onClick,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp,
        ref: handleRef
      }, other), avatar || icon, React__default.createElement("span", {
        className: clsx(classes.label, small && classes.labelSmall)
      }, label), deleteIcon);
    });
    Chip.propTypes = {
      /**
       * Avatar element.
       */
      avatar: propTypes.element,
  
      /**
       * This property isn't supported.
       * Use the `component` property if you need to change the children structure.
       */
      children: unsupportedProp,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * If true, the chip will appear clickable, and will raise when pressed,
       * even if the onClick property is not defined.
       * If false, the chip will not be clickable, even if onClick property is defined.
       * This can be used, for example,
       * along with the component property to indicate an anchor Chip is clickable.
       */
      clickable: propTypes.bool,
  
      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['default', 'primary', 'secondary']),
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * Override the default delete icon element. Shown only if `onDelete` is set.
       */
      deleteIcon: propTypes.element,
  
      /**
       * Icon element.
       */
      icon: propTypes.element,
  
      /**
       * The content of the label.
       */
      label: propTypes.node,
  
      /**
       * @ignore
       */
      onClick: propTypes.func,
  
      /**
       * Callback function fired when the delete icon is clicked.
       * If set, the delete icon will be shown.
       */
      onDelete: propTypes.func,
  
      /**
       * @ignore
       */
      onKeyDown: propTypes.func,
  
      /**
       * @ignore
       */
      onKeyUp: propTypes.func,
  
      /**
       * The size of the chip.
       */
      size: propTypes.oneOf(['small', 'medium']),
  
      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['default', 'outlined'])
    };
    var Chip$1 = withStyles$1(styles$q, {
      name: 'MuiChip'
    })(Chip);
  
    var SIZE = 44;
  
    function getRelativeValue(value, min, max) {
      var clampedValue = Math.min(Math.max(min, value), max);
      return (clampedValue - min) / (max - min);
    }
  
    function easeOut(t) {
      t = getRelativeValue(t, 0, 1); // https://gist.github.com/gre/1650294
  
      t = (t -= 1) * t * t + 1;
      return t;
    }
  
    function easeIn(t) {
      return t * t;
    }
  
    var styles$r = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'inline-block',
          lineHeight: 1 // Keep the progress centered
  
        },
  
        /* Styles applied to the root element if `variant="static"`. */
        static: {
          transition: theme.transitions.create('transform')
        },
  
        /* Styles applied to the root element if `variant="indeterminate"`. */
        indeterminate: {
          animation: 'mui-progress-circular-rotate 1.4s linear infinite',
          // Backward compatible logic between JSS v9 and v10.
          // To remove with the release of Material-UI v4
          animationName: '$mui-progress-circular-rotate'
        },
  
        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          color: theme.palette.primary.main
        },
  
        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          color: theme.palette.secondary.main
        },
  
        /* Styles applied to the `svg` element. */
        svg: {},
  
        /* Styles applied to the `circle` svg path. */
        circle: {
          stroke: 'currentColor' // Use butt to follow the specification, by chance, it's already the default CSS value.
          // strokeLinecap: 'butt',
  
        },
  
        /* Styles applied to the `circle` svg path if `variant="static"`. */
        circleStatic: {
          transition: theme.transitions.create('stroke-dashoffset')
        },
  
        /* Styles applied to the `circle` svg path if `variant="indeterminate"`. */
        circleIndeterminate: {
          animation: 'mui-progress-circular-dash 1.4s ease-in-out infinite',
          // Backward compatible logic between JSS v9 and v10.
          // To remove with the release of Material-UI v4
          animationName: '$mui-progress-circular-dash',
          // Some default value that looks fine waiting for the animation to kicks in.
          strokeDasharray: '80px, 200px',
          strokeDashoffset: '0px' // Add the unit to fix a Edge 16 and below bug.
  
        },
        '@keyframes mui-progress-circular-rotate': {
          '100%': {
            transform: 'rotate(360deg)'
          }
        },
        '@keyframes mui-progress-circular-dash': {
          '0%': {
            strokeDasharray: '1px, 200px',
            strokeDashoffset: '0px'
          },
          '50%': {
            strokeDasharray: '100px, 200px',
            strokeDashoffset: '-15px'
          },
          '100%': {
            strokeDasharray: '100px, 200px',
            strokeDashoffset: '-125px'
          }
        },
  
        /* Styles applied to the `circle` svg path if `disableShrink={true}`. */
        circleDisableShrink: {
          animation: 'none'
        }
      };
    };
    /**
     * ## ARIA
     *
     * If the progress bar is describing the loading progress of a particular region of a page,
     * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`
     * attribute to `true` on that region until it has finished loading.
     */
  
    var CircularProgress = React__default.forwardRef(function CircularProgress(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'primary' : _props$color,
          _props$disableShrink = props.disableShrink,
          disableShrink = _props$disableShrink === void 0 ? false : _props$disableShrink,
          _props$size = props.size,
          size = _props$size === void 0 ? 40 : _props$size,
          style = props.style,
          _props$thickness = props.thickness,
          thickness = _props$thickness === void 0 ? 3.6 : _props$thickness,
          _props$value = props.value,
          value = _props$value === void 0 ? 0 : _props$value,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'indeterminate' : _props$variant,
          other = objectWithoutProperties(props, ["classes", "className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"]);
  
      var circleStyle = {};
      var rootStyle = {};
      var rootProps = {};
  
      if (variant === 'determinate' || variant === 'static') {
        var circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
        circleStyle.strokeDasharray = circumference.toFixed(3);
        rootProps['aria-valuenow'] = Math.round(value);
  
        if (variant === 'static') {
          circleStyle.strokeDashoffset = "".concat(((100 - value) / 100 * circumference).toFixed(3), "px");
          rootStyle.transform = 'rotate(-90deg)';
        } else {
          circleStyle.strokeDashoffset = "".concat((easeIn((100 - value) / 100) * circumference).toFixed(3), "px");
          rootStyle.transform = "rotate(".concat((easeOut(value / 70) * 270).toFixed(3), "deg)");
        }
      }
  
      return React__default.createElement("div", _extends_1({
        className: clsx(classes.root, className, color !== 'inherit' && classes["color".concat(capitalize(color))], variant === 'indeterminate' && classes.indeterminate, variant === 'static' && classes.static),
        style: _extends_1({
          width: size,
          height: size
        }, rootStyle, style),
        ref: ref,
        role: "progressbar"
      }, rootProps, other), React__default.createElement("svg", {
        className: classes.svg,
        viewBox: "".concat(SIZE / 2, " ").concat(SIZE / 2, " ").concat(SIZE, " ").concat(SIZE)
      }, React__default.createElement("circle", {
        className: clsx(classes.circle, variant === 'indeterminate' && classes.circleIndeterminate, variant === 'static' && classes.circleStatic, disableShrink && classes.circleDisableShrink),
        style: circleStyle,
        cx: SIZE,
        cy: SIZE,
        r: (SIZE - thickness) / 2,
        fill: "none",
        strokeWidth: thickness
      })));
    });
    CircularProgress.propTypes = {
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['primary', 'secondary', 'inherit']),
  
      /**
       * If `true`, the shrink animation is disabled.
       * This only works if variant is `indeterminate`.
       */
      disableShrink: chainPropTypes(propTypes.bool, function (props) {
        if (props.disableShrink && props.variant && props.variant !== 'indeterminate') {
          return new Error('Material-UI: you have provided the `disableShrink` property ' + 'with a variant other than `indeterminate`. This will have no effect.');
        }
  
        return null;
      }),
  
      /**
       * The size of the circle.
       */
      size: propTypes.oneOfType([propTypes.number, propTypes.string]),
  
      /**
       * @ignore
       */
      style: propTypes.object,
  
      /**
       * The thickness of the circle.
       */
      thickness: propTypes.number,
  
      /**
       * The value of the progress indicator for the determinate and static variants.
       * Value between 0 and 100.
       */
      value: propTypes.number,
  
      /**
       * The variant to use.
       * Use indeterminate when there is no progress value.
       */
      variant: propTypes.oneOf(['determinate', 'indeterminate', 'static'])
    };
    var CircularProgress$1 = withStyles$1(styles$r, {
      name: 'MuiCircularProgress',
      flip: false
    })(CircularProgress);
  
    function ownerDocument(node) {
      return node && node.ownerDocument || document;
    }
  
    function useMountedRef() {
      var mountedRef = React__default.useRef(false);
      React__default.useEffect(function () {
        mountedRef.current = true;
        return function () {
          mountedRef.current = false;
        };
      }, []);
      return mountedRef;
    }
  
    function mapEventPropToEvent(eventProp) {
      return eventProp.substring(2).toLowerCase();
    }
    /**
     * Listen for click events that occur somewhere in the document, outside of the element itself.
     * For instance, if you need to hide a menu when people click anywhere else on your page.
     */
  
  
    function ClickAwayListener(props) {
      var children = props.children,
          _props$mouseEvent = props.mouseEvent,
          mouseEvent = _props$mouseEvent === void 0 ? 'onClick' : _props$mouseEvent,
          _props$touchEvent = props.touchEvent,
          touchEvent = _props$touchEvent === void 0 ? 'onTouchEnd' : _props$touchEvent,
          onClickAway = props.onClickAway;
      var mountedRef = useMountedRef();
      var movedRef = React__default.useRef(false);
      var nodeRef = React__default.useRef(null); // can be removed once we drop support for non ref forwarding class components
  
      var handleOwnRef = React__default.useCallback(function (instance) {
        // #StrictMode ready
        nodeRef.current = ReactDOM__default.findDOMNode(instance);
      }, []);
      var handleRef = useForkRef(children.ref, handleOwnRef);
      var handleClickAway = React__default.useCallback(function (event) {
        // Ignore events that have been `event.preventDefault()` marked.
        if (event.defaultPrevented) {
          return;
        } // IE 11 support, which trigger the handleClickAway even after the unbind
  
  
        if (!mountedRef.current) {
          return;
        } // Do not act if user performed touchmove
  
  
        if (movedRef.current) {
          movedRef.current = false;
          return;
        }
  
        var node = nodeRef.current; // The child might render null.
  
        if (!node) {
          return;
        }
  
        var doc = ownerDocument(node);
  
        if (doc.documentElement && doc.documentElement.contains(event.target) && !node.contains(event.target)) {
          onClickAway(event);
        }
      }, [mountedRef, onClickAway]);
      var handleTouchMove = React__default.useCallback(function () {
        movedRef.current = true;
      }, []);
      React__default.useEffect(function () {
        if (touchEvent !== false) {
          var mappedTouchEvent = mapEventPropToEvent(touchEvent);
          document.addEventListener(mappedTouchEvent, handleClickAway);
          document.addEventListener('touchmove', handleTouchMove);
          return function () {
            document.removeEventListener(mappedTouchEvent, handleClickAway);
            document.removeEventListener('touchmove', handleTouchMove);
          };
        }
  
        return undefined;
      }, [handleClickAway, handleTouchMove, touchEvent]);
      React__default.useEffect(function () {
        if (mouseEvent !== false) {
          var mappedMouseEvent = mapEventPropToEvent(mouseEvent);
          document.addEventListener(mappedMouseEvent, handleClickAway);
          return function () {
            document.removeEventListener(mappedMouseEvent, handleClickAway);
          };
        }
  
        return undefined;
      }, [handleClickAway, mouseEvent]);
      return React__default.createElement(React__default.Fragment, null, React__default.cloneElement(children, {
        ref: handleRef
      }));
    }
  
    ClickAwayListener.propTypes = {
      /**
       * The wrapped element.
       */
      children: elementAcceptingRef.isRequired,
  
      /**
       * The mouse event to listen to. You can disable the listener by providing `false`.
       */
      mouseEvent: propTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),
  
      /**
       * Callback fired when a "click away" event is detected.
       */
      onClickAway: propTypes.func.isRequired,
  
      /**
       * The touch event to listen to. You can disable the listener by providing `false`.
       */
      touchEvent: propTypes.oneOf(['onTouchStart', 'onTouchEnd', false])
    };
  
    {
      // eslint-disable-next-line
      ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);
    }
  
    var styles$s = function styles(theme) {
      return {
        /* Styles applied to the container element. */
        container: {
          height: 0,
          overflow: 'hidden',
          transition: theme.transitions.create('height')
        },
  
        /* Styles applied to the container element when the transition has entered. */
        entered: {
          height: 'auto',
          overflow: 'visible'
        },
  
        /* Styles applied to the container element when the transition has exited and `collapsedHeight` != 0px. */
        hidden: {
          visibility: 'hidden'
        },
  
        /* Styles applied to the outer wrapper element. */
        wrapper: {
          // Hack to get children with a negative margin to not falsify the height computation.
          display: 'flex'
        },
  
        /* Styles applied to the inner wrapper element. */
        wrapperInner: {
          width: '100%'
        }
      };
    };
    /**
     * The Collapse transition is used by the
     * [Vertical Stepper](/components/steppers/#vertical-stepper) StepContent component.
     * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
     */
  
    var Collapse = React__default.forwardRef(function Collapse(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$collapsedHeigh = props.collapsedHeight,
          collapsedHeight = _props$collapsedHeigh === void 0 ? '0px' : _props$collapsedHeigh,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          inProp = props.in,
          onEnter = props.onEnter,
          onEntered = props.onEntered,
          onEntering = props.onEntering,
          onExit = props.onExit,
          onExiting = props.onExiting,
          style = props.style,
          theme = props.theme,
          _props$timeout = props.timeout,
          timeout = _props$timeout === void 0 ? duration.standard : _props$timeout,
          other = objectWithoutProperties(props, ["children", "classes", "className", "collapsedHeight", "component", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExiting", "style", "theme", "timeout"]);
  
      var timer = React__default.useRef();
      var wrapperRef = React__default.useRef(null);
      var autoTransitionDuration = React__default.useRef();
      React__default.useEffect(function () {
        return function () {
          clearTimeout(timer.current);
        };
      }, []);
  
      var handleEnter = function handleEnter(node) {
        node.style.height = collapsedHeight;
  
        if (onEnter) {
          onEnter(node);
        }
      };
  
      var handleEntering = function handleEntering(node) {
        var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;
  
        var _getTransitionProps = getTransitionProps({
          style: style,
          timeout: timeout
        }, {
          mode: 'enter'
        }),
            transitionDuration = _getTransitionProps.duration;
  
        if (timeout === 'auto') {
          var duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);
          node.style.transitionDuration = "".concat(duration2, "ms");
          autoTransitionDuration.current = duration2;
        } else {
          node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : "".concat(transitionDuration, "ms");
        }
  
        node.style.height = "".concat(wrapperHeight, "px");
  
        if (onEntering) {
          onEntering(node);
        }
      };
  
      var handleEntered = function handleEntered(node) {
        node.style.height = 'auto';
  
        if (onEntered) {
          onEntered(node);
        }
      };
  
      var handleExit = function handleExit(node) {
        var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;
        node.style.height = "".concat(wrapperHeight, "px");
  
        if (onExit) {
          onExit(node);
        }
      };
  
      var handleExiting = function handleExiting(node) {
        var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;
  
        var _getTransitionProps2 = getTransitionProps({
          style: style,
          timeout: timeout
        }, {
          mode: 'exit'
        }),
            transitionDuration = _getTransitionProps2.duration;
  
        if (timeout === 'auto') {
          var duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);
          node.style.transitionDuration = "".concat(duration2, "ms");
          autoTransitionDuration.current = duration2;
        } else {
          node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : "".concat(transitionDuration, "ms");
        }
  
        node.style.height = collapsedHeight;
  
        if (onExiting) {
          onExiting(node);
        }
      };
  
      var addEndListener = function addEndListener(_, next) {
        if (timeout === 'auto') {
          timer.current = setTimeout(next, autoTransitionDuration.current || 0);
        }
      };
  
      return React__default.createElement(Transition, _extends_1({
        in: inProp,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExiting: handleExiting,
        addEndListener: addEndListener,
        timeout: timeout === 'auto' ? null : timeout
      }, other), function (state, childProps) {
        return React__default.createElement(Component, _extends_1({
          className: clsx(classes.container, className, state === 'entered' && classes.entered, state === 'exited' && !inProp && collapsedHeight === '0px' && classes.hidden),
          style: _extends_1({
            minHeight: collapsedHeight
          }, style),
          ref: ref
        }, childProps), React__default.createElement("div", {
          className: classes.wrapper,
          ref: wrapperRef
        }, React__default.createElement("div", {
          className: classes.wrapperInner
        }, children)));
      });
    });
    Collapse.propTypes = {
      /**
       * The content node to be collapsed.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The height of the container when collapsed.
       */
      collapsedHeight: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * If `true`, the component will transition in.
       */
      in: propTypes.bool,
  
      /**
       * @ignore
       */
      onEnter: propTypes.func,
  
      /**
       * @ignore
       */
      onEntered: propTypes.func,
  
      /**
       * @ignore
       */
      onEntering: propTypes.func,
  
      /**
       * @ignore
       */
      onExit: propTypes.func,
  
      /**
       * @ignore
       */
      onExiting: propTypes.func,
  
      /**
       * @ignore
       */
      style: propTypes.object,
  
      /**
       * @ignore
       */
      theme: propTypes.object.isRequired,
  
      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       *
       * Set to 'auto' to automatically calculate transition time based on height.
       */
      timeout: propTypes.oneOfType([propTypes.number, propTypes.shape({
        enter: propTypes.number,
        exit: propTypes.number
      }), propTypes.oneOf(['auto'])])
    };
    Collapse.muiSupportAuto = true;
    var Collapse$1 = withStyles$1(styles$s, {
      withTheme: true,
      name: 'MuiCollapse'
    })(Collapse);
  
    function ownerWindow(node) {
      var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;
      var doc = ownerDocument(node);
      return doc.defaultView || doc.parentView || fallback;
    }
  
    function requirePropFactory(componentNameInError) {
  
      var requireProp = function requireProp(requiredProp) {
        return function (props, propName, componentName, location, propFullName) {
          var propFullNameSafe = propFullName || propName;
  
          if (typeof props[propName] !== 'undefined' && !props[requiredProp]) {
            return new Error("The property `".concat(propFullNameSafe, "` of ") + "`".concat(componentNameInError, "` must be used on `").concat(requiredProp, "`."));
          }
  
          return null;
        };
      };
  
      return requireProp;
    }
  
    /**
     * Enables ref forwarding on a given component that uses `innerRef` to forward refs
     * This is useful for component implementations that predate `forwardRef` and
     * used other props to forward refs.
     *
     * Instead of `<Component innerRef={ref} />` you can write
     * `<withForwardRef(Component) ref={ref} />`.
     *
     * This HOC does not handle prop collision. In
     * `<withForwardRef(Component) ref={ref} innerRef={innerRef} />` `innerRef` will be dropped
     *
     * Only copies statics from material-ui over.
     *
     * @param {React.ComponentType} Component
     * @returns {React.ForwardRefComponent}
     */
  
    function withForwardedRef(Component) {
      var ForwardRefComponent = React__default.forwardRef(function (props, ref) {
        return (// We expect this component to be wrapped in `withStyles` in which `innerRef`
          // is already intercepted and therefore won't appear in `props` here.
          React__default.createElement(Component, _extends_1({}, props, {
            innerRef: ref
          }))
        );
      });
  
      {
        ForwardRefComponent.displayName = "ForwardRef(".concat(getDisplayName(Component), ")");
      }
  
      return hoistNonReactStatics_cjs(ForwardRefComponent, Component);
    }
  
    var styles$t = function styles(theme) {
      var _root;
  
      return {
        /* Styles applied to the root element. */
        root: (_root = {
          width: '100%',
          marginLeft: 'auto',
          boxSizing: 'border-box',
          marginRight: 'auto',
          paddingLeft: theme.spacing(2),
          paddingRight: theme.spacing(2)
        }, defineProperty(_root, theme.breakpoints.up('sm'), {
          paddingLeft: theme.spacing(3),
          paddingRight: theme.spacing(3)
        }), defineProperty(_root, theme.breakpoints.up('md'), {
          paddingLeft: theme.spacing(4),
          paddingRight: theme.spacing(4)
        }), _root),
  
        /* Styles applied to the root element if `fixed={true}`. */
        fixed: Object.keys(theme.breakpoints.values).reduce(function (acc, breakpoint) {
          var value = theme.breakpoints.values[breakpoint];
  
          if (value !== 0) {
            acc[theme.breakpoints.up(breakpoint)] = {
              maxWidth: value
            };
          }
  
          return acc;
        }, {}),
  
        /* Styles applied to the root element if `maxWidth="xs"`. */
        maxWidthXs: defineProperty({}, theme.breakpoints.up('xs'), {
          maxWidth: Math.max(theme.breakpoints.values.xs, 444)
        }),
  
        /* Styles applied to the root element if `maxWidth="sm"`. */
        maxWidthSm: defineProperty({}, theme.breakpoints.up('sm'), {
          maxWidth: theme.breakpoints.values.sm
        }),
  
        /* Styles applied to the root element if `maxWidth="md"`. */
        maxWidthMd: defineProperty({}, theme.breakpoints.up('md'), {
          maxWidth: theme.breakpoints.values.md
        }),
  
        /* Styles applied to the root element if `maxWidth="lg"`. */
        maxWidthLg: defineProperty({}, theme.breakpoints.up('lg'), {
          maxWidth: theme.breakpoints.values.lg
        }),
  
        /* Styles applied to the root element if `maxWidth="xl"`. */
        maxWidthXl: defineProperty({}, theme.breakpoints.up('xl'), {
          maxWidth: theme.breakpoints.values.xl
        })
      };
    };
    var Container = React__default.forwardRef(function Container(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _props$fixed = props.fixed,
          fixed = _props$fixed === void 0 ? false : _props$fixed,
          _props$maxWidth = props.maxWidth,
          maxWidth = _props$maxWidth === void 0 ? 'lg' : _props$maxWidth,
          other = objectWithoutProperties(props, ["classes", "className", "component", "fixed", "maxWidth"]);
  
      return React__default.createElement(Component, _extends_1({
        className: clsx(classes.root, className, fixed && classes.fixed, maxWidth !== false && classes["maxWidth".concat(capitalize(String(maxWidth)))]),
        ref: ref
      }, other));
    });
    Container.propTypes = {
      children: propTypes.node.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * Set the max-width to match the min-width of the current breakpoint.
       * This is useful if you'd prefer to design for a fixed set of sizes
       * instead of trying to accommodate a fully fluid viewport.
       * It's fluid by default.
       */
      fixed: propTypes.bool,
  
      /**
       * Determine the max-width of the container.
       * The container width grows with the size of the screen.
       * Set to `false` to disable `maxWidth`.
       */
      maxWidth: propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false])
    };
    var Container$1 = withStyles$1(styles$t, {
      name: 'MuiContainer'
    })(Container);
  
    var useStyles = makeStyles$1(function (theme) {
      return {
        '@global': {
          html: {
            WebkitFontSmoothing: 'antialiased',
            // Antialiasing.
            MozOsxFontSmoothing: 'grayscale',
            // Antialiasing.
            // Change from `box-sizing: content-box` so that `width`
            // is not affected by `padding` or `border`.
            boxSizing: 'border-box'
          },
          '*, *::before, *::after': {
            boxSizing: 'inherit'
          },
          'strong, b': {
            fontWeight: 'bolder'
          },
          body: _extends_1({
            margin: 0,
            // Remove the margin in all browsers.
            color: theme.palette.text.primary
          }, theme.typography.body2, {
            backgroundColor: theme.palette.background.default,
            '@media print': {
              // Save printer ink.
              backgroundColor: theme.palette.common.white
            }
          })
        }
      };
    }, {
      name: 'MuiCssBaseline'
    });
    /**
     * Kickstart an elegant, consistent, and simple baseline to build upon.
     */
  
    function CssBaseline(props) {
      var _props$children = props.children,
          children = _props$children === void 0 ? null : _props$children;
      useStyles();
      return React__default.createElement(React__default.Fragment, null, children);
    }
  
    CssBaseline.propTypes = {
      /**
       * You can wrap a node.
       */
      children: propTypes.node
    };
  
    {
      // eslint-disable-next-line
      CssBaseline['propTypes' + ''] = exactProp(CssBaseline.propTypes);
    }
  
    function getContainer(container) {
      container = typeof container === 'function' ? container() : container; // #StrictMode ready
  
      return ReactDOM__default.findDOMNode(container);
    }
  
    var useEnhancedEffect$2 = typeof window !== 'undefined' ? React__default.useLayoutEffect : React__default.useEffect;
    /**
     * Portals provide a first-class way to render children into a DOM node
     * that exists outside the DOM hierarchy of the parent component.
     */
  
    var Portal = React__default.forwardRef(function Portal(props, ref) {
      var children = props.children,
          container = props.container,
          disablePortal = props.disablePortal,
          onRendered = props.onRendered;
  
      var _React$useState = React__default.useState(null),
          _React$useState2 = slicedToArray(_React$useState, 2),
          mountNode = _React$useState2[0],
          setMountNode = _React$useState2[1];
  
      var childRef = React__default.useRef(null);
      var handleRef = useForkRef(children.ref, childRef);
      useEnhancedEffect$2(function () {
        if (!disablePortal) {
          setMountNode(getContainer(container) || document.body);
        }
      }, [container, disablePortal]);
      useEnhancedEffect$2(function () {
        if (onRendered && mountNode) {
          onRendered();
        }
      }, [mountNode, onRendered]);
      React__default.useImperativeHandle(ref, function () {
        return mountNode || childRef.current;
      }, [mountNode]);
  
      if (disablePortal) {
        React__default.Children.only(children);
        return React__default.cloneElement(children, {
          ref: handleRef
        });
      }
  
      return mountNode ? ReactDOM__default.createPortal(children, mountNode) : mountNode;
    });
    Portal.propTypes = {
      /**
       * The children to render into the `container`.
       */
      children: propTypes.node.isRequired,
  
      /**
       * A node, component instance, or function that returns either.
       * The `container` will have the portal children appended to it.
       * By default, it uses the body of the top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: propTypes.oneOfType([propTypes.object, propTypes.func]),
  
      /**
       * Disable the portal behavior.
       * The children stay within it's parent DOM hierarchy.
       */
      disablePortal: propTypes.bool,
  
      /**
       * Callback fired once the children has been mounted into the `container`.
       */
      onRendered: propTypes.func
    };
    Portal.defaultProps = {
      disablePortal: false
    };
  
    {
      // eslint-disable-next-line
      Portal['propTypes' + ''] = exactProp(Portal.propTypes);
    }
  
    // A change of the browser zoom change the scrollbar size.
    // Credit https://github.com/twbs/bootstrap/blob/3ffe3a5d82f6f561b82ff78d82b32a7d14aed558/js/src/modal.js#L512-L519
    function getScrollbarSize() {
      var scrollDiv = document.createElement('div');
      scrollDiv.style.width = '99px';
      scrollDiv.style.height = '99px';
      scrollDiv.style.position = 'absolute';
      scrollDiv.style.top = '-9999px';
      scrollDiv.style.overflow = 'scroll';
      document.body.appendChild(scrollDiv);
      var scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
      return scrollbarSize;
    }
  
    function isOverflowing(container) {
      var doc = ownerDocument(container);
      var win = ownerWindow(doc);
  
      if (doc.body === container) {
        return win.innerWidth > doc.documentElement.clientWidth;
      }
  
      return container.scrollHeight > container.clientHeight;
    }
  
    var BLACKLIST = ['template', 'script', 'style'];
  
    function isHideable(node) {
      return node.nodeType === 1 && BLACKLIST.indexOf(node.tagName.toLowerCase()) === -1;
    }
  
    function siblings(container, mount, currentNode, callback) {
      var blacklist = [mount, currentNode];
      [].forEach.call(container.children, function (node) {
        if (blacklist.indexOf(node) === -1 && isHideable(node)) {
          callback(node);
        }
      });
    }
  
    function ariaHidden(node, show) {
      if (show) {
        node.setAttribute('aria-hidden', 'true');
      } else {
        node.removeAttribute('aria-hidden');
      }
    }
    function ariaHiddenSiblings(container, mountNode, currentNode, show) {
      siblings(container, mountNode, currentNode, function (node) {
        return ariaHidden(node, show);
      });
    }
  
    function findIndexOf(data, callback) {
      var idx = -1;
      data.some(function (item, index) {
        if (callback(item)) {
          idx = index;
          return true;
        }
  
        return false;
      });
      return idx;
    }
  
    function getPaddingRight(node) {
      return parseInt(window.getComputedStyle(node)['padding-right'], 10) || 0;
    }
  
    function setContainerStyle(data) {
      // We are only interested in the actual `style` here because we will override it.
      data.style = {
        overflow: data.container.style.overflow,
        paddingRight: data.container.style.paddingRight
      };
      var style = {
        overflow: 'hidden'
      };
  
      if (data.overflowing) {
        var scrollbarSize = getScrollbarSize(); // Use computed style, here to get the real padding to add our scrollbar width.
  
        style.paddingRight = "".concat(getPaddingRight(data.container) + scrollbarSize, "px"); // .mui-fixed is a global helper.
  
        var fixedNodes = ownerDocument(data.container).querySelectorAll('.mui-fixed');
  
        for (var i = 0; i < fixedNodes.length; i += 1) {
          var paddingRight = getPaddingRight(fixedNodes[i]);
          data.prevPaddings.push(paddingRight);
          fixedNodes[i].style.paddingRight = "".concat(paddingRight + scrollbarSize, "px");
        }
      }
  
      Object.keys(style).forEach(function (key) {
        data.container.style[key] = style[key];
      });
    }
  
    function removeContainerStyle(data) {
      // The modal might be closed before it had the chance to be mounted in the DOM.
      if (data.style) {
        Object.keys(data.style).forEach(function (key) {
          data.container.style[key] = data.style[key];
        });
      }
  
      var fixedNodes = ownerDocument(data.container).querySelectorAll('.mui-fixed');
  
      for (var i = 0; i < fixedNodes.length; i += 1) {
        fixedNodes[i].style.paddingRight = "".concat(data.prevPaddings[i], "px");
      }
    }
    /**
     * @ignore - do not document.
     *
     * Proper state management for containers and the modals in those containers.
     * Simplified, but inspired by react-overlay's ModalManager class.
     * Used by the Modal to ensure proper styling of containers.
     */
  
  
    var ModalManager =
    /*#__PURE__*/
    function () {
      function ModalManager() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  
        classCallCheck(this, ModalManager);
  
        var _options$hideSiblingN = options.hideSiblingNodes,
            hideSiblingNodes = _options$hideSiblingN === void 0 ? true : _options$hideSiblingN,
            _options$handleContai = options.handleContainerOverflow,
            handleContainerOverflow = _options$handleContai === void 0 ? true : _options$handleContai;
        this.hideSiblingNodes = hideSiblingNodes;
        this.handleContainerOverflow = handleContainerOverflow; // this.modals[modalIdx] = modal
  
        this.modals = []; // this.data[containerIdx] = {
        //   modals: [],
        //   container,
        //   overflowing,
        //   prevPaddings,
        // }
  
        this.data = [];
      }
  
      createClass(ModalManager, [{
        key: "add",
        value: function add(modal, container) {
          var modalIdx = this.modals.indexOf(modal);
  
          if (modalIdx !== -1) {
            return modalIdx;
          }
  
          modalIdx = this.modals.length;
          this.modals.push(modal); // If the modal we are adding is already in the DOM.
  
          if (modal.modalRef) {
            ariaHidden(modal.modalRef, false);
          }
  
          if (this.hideSiblingNodes) {
            ariaHiddenSiblings(container, modal.mountNode, modal.modalRef, true);
          }
  
          var containerIdx = findIndexOf(this.data, function (item) {
            return item.container === container;
          });
  
          if (containerIdx !== -1) {
            this.data[containerIdx].modals.push(modal);
            return modalIdx;
          }
  
          var data = {
            modals: [modal],
            container: container,
            overflowing: isOverflowing(container),
            prevPaddings: []
          };
          this.data.push(data);
          return modalIdx;
        }
      }, {
        key: "mount",
        value: function mount(modal) {
          var containerIdx = findIndexOf(this.data, function (item) {
            return item.modals.indexOf(modal) !== -1;
          });
          var data = this.data[containerIdx];
  
          if (!data.style && this.handleContainerOverflow) {
            setContainerStyle(data);
          }
        }
      }, {
        key: "remove",
        value: function remove(modal) {
          var modalIdx = this.modals.indexOf(modal);
  
          if (modalIdx === -1) {
            return modalIdx;
          }
  
          var containerIdx = findIndexOf(this.data, function (item) {
            return item.modals.indexOf(modal) !== -1;
          });
          var data = this.data[containerIdx];
          data.modals.splice(data.modals.indexOf(modal), 1);
          this.modals.splice(modalIdx, 1); // If that was the last modal in a container, clean up the container.
  
          if (data.modals.length === 0) {
            if (this.handleContainerOverflow) {
              removeContainerStyle(data);
            } // In case the modal wasn't in the DOM yet.
  
  
            if (modal.modalRef) {
              ariaHidden(modal.modalRef, true);
            }
  
            if (this.hideSiblingNodes) {
              ariaHiddenSiblings(data.container, modal.mountNode, modal.modalRef, false);
            }
  
            this.data.splice(containerIdx, 1);
          } else if (this.hideSiblingNodes) {
            // Otherwise make sure the next top modal is visible to a screen reader.
            var nextTop = data.modals[data.modals.length - 1]; // as soon as a modal is adding its modalRef is undefined. it can't set
            // aria-hidden because the dom element doesn't exist either
            // when modal was unmounted before modalRef gets null
  
            if (nextTop.modalRef) {
              ariaHidden(nextTop.modalRef, false);
            }
          }
  
          return modalIdx;
        }
      }, {
        key: "isTopModal",
        value: function isTopModal(modal) {
          return !!this.modals.length && this.modals[this.modals.length - 1] === modal;
        }
      }]);
  
      return ModalManager;
    }();
  
    function TrapFocus(props) {
      var children = props.children,
          _props$disableAutoFoc = props.disableAutoFocus,
          disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,
          _props$disableEnforce = props.disableEnforceFocus,
          disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce,
          _props$disableRestore = props.disableRestoreFocus,
          disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore,
          getDoc = props.getDoc,
          isEnabled = props.isEnabled,
          open = props.open;
      var ignoreNextEnforceFocus = React__default.useRef();
      var sentinelStart = React__default.useRef(null);
      var sentinelEnd = React__default.useRef(null);
      var lastFocus = React__default.useRef();
      var rootRef = React__default.useRef(null); // can be removed once we drop support for non ref forwarding class components
  
      var handleOwnRef = React__default.useCallback(function (instance) {
        // #StrictMode ready
        rootRef.current = ReactDOM__default.findDOMNode(instance);
      }, []);
      var handleRef = useForkRef(children.ref, handleOwnRef); // ⚠️ You may rely on React.useMemo as a performance optimization, not as a semantic guarantee.
      // https://reactjs.org/docs/hooks-reference.html#usememo
  
      React__default.useMemo(function () {
        if (!open) {
          return;
        }
  
        lastFocus.current = getDoc().activeElement;
      }, [open]); // eslint-disable-line react-hooks/exhaustive-deps
  
      React__default.useEffect(function () {
        if (!open) {
          return;
        }
  
        var doc = ownerDocument(rootRef.current); // We might render an empty child.
  
        if (!disableAutoFocus && rootRef.current && !rootRef.current.contains(doc.activeElement)) {
          if (!rootRef.current.hasAttribute('tabIndex')) {
            warning_1(false, ['Material-UI: the modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to "-1".'].join('\n'));
            rootRef.current.setAttribute('tabIndex', -1);
          }
  
          rootRef.current.focus();
        }
  
        var enforceFocus = function enforceFocus() {
          if (disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
            ignoreNextEnforceFocus.current = false;
            return;
          }
  
          if (rootRef.current && !rootRef.current.contains(doc.activeElement)) {
            rootRef.current.focus();
          }
        };
  
        var loopFocus = function loopFocus(event) {
          // 9 = Tab
          if (disableEnforceFocus || !isEnabled() || event.keyCode !== 9) {
            return;
          } // Make sure the next tab starts from the right place.
  
  
          if (doc.activeElement === rootRef.current) {
            // We need to ignore the next enforceFocus as
            // it will try to move the focus back to the rootRef element.
            ignoreNextEnforceFocus.current = true;
  
            if (event.shiftKey) {
              sentinelEnd.current.focus();
            } else {
              sentinelStart.current.focus();
            }
          }
        };
  
        doc.addEventListener('focus', enforceFocus, true);
        doc.addEventListener('keydown', loopFocus, true);
        return function () {
          doc.removeEventListener('focus', enforceFocus, true);
          doc.removeEventListener('keydown', loopFocus, true); // restoreLastFocus()
  
          if (!disableRestoreFocus) {
            // In IE 11 it is possible for document.activeElement to be null resulting
            // in lastFocus.current being null.
            // Not all elements in IE 11 have a focus method.
            // Once IE 11 support is dropped the focus() call can be unconditional.
            if (lastFocus.current && lastFocus.current.focus) {
              lastFocus.current.focus();
            }
  
            lastFocus.current = null;
          }
        };
      }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open]);
      return React__default.createElement(React__default.Fragment, null, React__default.createElement("div", {
        tabIndex: 0,
        ref: sentinelStart,
        "data-test": "sentinelStart"
      }), React__default.cloneElement(children, {
        ref: handleRef
      }), React__default.createElement("div", {
        tabIndex: 0,
        ref: sentinelEnd,
        "data-test": "sentinelEnd"
      }));
    }
    /**
     * @ignore - internal component.
     */
  
  
    TrapFocus.propTypes = {
      /**
       * A single child content element.
       */
      children: propTypes.element.isRequired,
  
      /**
       * If `true`, the modal will not automatically shift focus to itself when it opens, and
       * replace it to the last focused element when it closes.
       * This also works correctly with any modal children that have the `disableAutoFocus` prop.
       *
       * Generally this should never be set to `true` as it makes the modal less
       * accessible to assistive technologies, like screen readers.
       */
      disableAutoFocus: propTypes.bool,
  
      /**
       * If `true`, the modal will not prevent focus from leaving the modal while open.
       *
       * Generally this should never be set to `true` as it makes the modal less
       * accessible to assistive technologies, like screen readers.
       */
      disableEnforceFocus: propTypes.bool,
  
      /**
       * If `true`, the modal will not restore focus to previously focused element once
       * modal is hidden.
       */
      disableRestoreFocus: propTypes.bool,
  
      /**
       * Return the document to consider.
       * We use it to implement the restore focus between different browser documents.
       */
      getDoc: propTypes.func.isRequired,
  
      /**
       * Do we still want to enforce the focus?
       * This property helps nesting TrapFocus elements.
       */
      isEnabled: propTypes.func.isRequired,
  
      /**
       * If `true`, the modal is open.
       */
      open: propTypes.bool.isRequired
    };
  
    var styles$u = {
      /* Styles applied to the root element. */
      root: {
        zIndex: -1,
        position: 'fixed',
        right: 0,
        bottom: 0,
        top: 0,
        left: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        // Remove grey highlight
        WebkitTapHighlightColor: 'transparent',
        // Disable scroll capabilities.
        touchAction: 'none'
      },
  
      /* Styles applied to the root element if `invisible={true}`. */
      invisible: {
        backgroundColor: 'transparent'
      }
    };
    /**
     * @ignore - internal component.
     */
  
    var SimpleBackdrop = React__default.forwardRef(function SimpleBackdrop(props, ref) {
      var invisible = props.invisible,
          open = props.open,
          other = objectWithoutProperties(props, ["invisible", "open"]);
  
      return open ? React__default.createElement("div", _extends_1({
        "aria-hidden": true,
        ref: ref
      }, other, {
        style: _extends_1({}, styles$u.root, invisible ? styles$u.invisible : {}, other.style)
      })) : null;
    });
    SimpleBackdrop.propTypes = {
      /**
       * If `true`, the backdrop is invisible.
       * It can be used when rendering a popover or a custom select component.
       */
      invisible: propTypes.bool,
  
      /**
       * If `true`, the backdrop is open.
       */
      open: propTypes.bool.isRequired
    };
    SimpleBackdrop.defaultProps = {
      invisible: false
    };
  
    function getContainer$1(container) {
      container = typeof container === 'function' ? container() : container;
      return ReactDOM__default.findDOMNode(container);
    }
  
    function getHasTransition(props) {
      return props.children ? props.children.props.hasOwnProperty('in') : false;
    }
  
    var styles$v = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'fixed',
          zIndex: theme.zIndex.modal,
          right: 0,
          bottom: 0,
          top: 0,
          left: 0
        },
  
        /* Styles applied to the root element if the `Modal` has exited. */
        hidden: {
          visibility: 'hidden'
        }
      };
    };
    /**
     * Modal is a lower-level construct that is leveraged by the following components:
     *
     * - [Dialog](/api/dialog/)
     * - [Drawer](/api/drawer/)
     * - [Menu](/api/menu/)
     * - [Popover](/api/popover/)
     *
     * If you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component
     * rather than directly using Modal.
     *
     * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
     */
  
    var Modal =
    /*#__PURE__*/
    function (_React$Component) {
      inherits(Modal, _React$Component);
  
      function Modal(props) {
        var _this;
  
        classCallCheck(this, Modal);
  
        _this = possibleConstructorReturn(this, getPrototypeOf$1(Modal).call(this));
  
        _this.handleOpen = function () {
          var container = getContainer$1(_this.props.container) || _this.getDoc().body;
  
          _this.props.manager.add(assertThisInitialized(_this), container);
  
          if (_this.modalRef) {
            _this.handleOpened();
          }
        };
  
        _this.handleRendered = function () {
          if (_this.props.onRendered) {
            _this.props.onRendered();
          }
  
          if (_this.props.open) {
            _this.handleOpened();
          } else {
            ariaHidden(_this.modalRef, true);
          }
        };
  
        _this.handleOpened = function () {
          _this.props.manager.mount(assertThisInitialized(_this)); // Fix a bug on Chrome where the scroll isn't initially 0.
  
  
          _this.modalRef.scrollTop = 0;
        };
  
        _this.handleClose = function (reason) {
          var hasTransition = getHasTransition(_this.props);
          /* If the component does not have a transition or is unmounting remove the Modal
          otherwise let the transition handle removing the style, this prevents elements
          moving around when the Modal is closed. */
  
          if (!(hasTransition && _this.props.closeAfterTransition) || reason === 'unmount') {
            _this.props.manager.remove(assertThisInitialized(_this));
          }
        };
  
        _this.handleEnter = function () {
          _this.setState({
            exited: false
          });
        };
  
        _this.handleExited = function () {
          if (_this.props.closeAfterTransition) {
            _this.props.manager.remove(assertThisInitialized(_this));
          }
  
          _this.setState({
            exited: true
          });
        };
  
        _this.handleBackdropClick = function (event) {
          if (event.target !== event.currentTarget) {
            return;
          }
  
          if (_this.props.onBackdropClick) {
            _this.props.onBackdropClick(event);
          }
  
          if (!_this.props.disableBackdropClick && _this.props.onClose) {
            _this.props.onClose(event, 'backdropClick');
          }
        };
  
        _this.handleKeyDown = function (event) {
          // We don't take event.defaultPrevented into account:
          //
          // event.preventDefault() is meant to stop default behaviours like
          // clicking a checkbox to check it, hitting a button to submit a form,
          // and hitting left arrow to move the cursor in a text input etc.
          // Only special HTML elements have these default behaviors.
          if (event.key !== 'Escape' || !_this.isTopModal()) {
            return;
          } // Swallow the event, in case someone is listening for the escape key on the body.
  
  
          event.stopPropagation();
  
          if (_this.props.onEscapeKeyDown) {
            _this.props.onEscapeKeyDown(event);
          }
  
          if (!_this.props.disableEscapeKeyDown && _this.props.onClose) {
            _this.props.onClose(event, 'escapeKeyDown');
          }
        };
  
        _this.handlePortalRef = function (ref) {
          _this.mountNode = ref;
        };
  
        _this.handleModalRef = function (ref) {
          _this.modalRef = ref;
          setRef(_this.props.innerRef, ref);
        };
  
        _this.isTopModal = function () {
          return _this.props.manager.isTopModal(assertThisInitialized(_this));
        };
  
        _this.getDoc = function () {
          return ownerDocument(_this.mountNode);
        };
  
        _this.state = {
          exited: !props.open
        };
        return _this;
      }
  
      createClass(Modal, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          if (this.props.open) {
            this.handleOpen();
          }
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (prevProps.open && !this.props.open) {
            this.handleClose();
          } else if (!prevProps.open && this.props.open) {
            this.handleOpen();
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (this.props.open || getHasTransition(this.props) && !this.state.exited) {
            this.handleClose('unmount');
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props,
              BackdropComponent = _this$props.BackdropComponent,
              BackdropProps = _this$props.BackdropProps,
              children = _this$props.children,
              closeAfterTransition = _this$props.closeAfterTransition,
              container = _this$props.container,
              disableAutoFocus = _this$props.disableAutoFocus,
              disableBackdropClick = _this$props.disableBackdropClick,
              disableEnforceFocus = _this$props.disableEnforceFocus,
              disableEscapeKeyDown = _this$props.disableEscapeKeyDown,
              disablePortal = _this$props.disablePortal,
              disableRestoreFocus = _this$props.disableRestoreFocus,
              hideBackdrop = _this$props.hideBackdrop,
              innerRef = _this$props.innerRef,
              keepMounted = _this$props.keepMounted,
              manager = _this$props.manager,
              onBackdropClick = _this$props.onBackdropClick,
              onClose = _this$props.onClose,
              onEscapeKeyDown = _this$props.onEscapeKeyDown,
              onRendered = _this$props.onRendered,
              open = _this$props.open,
              theme = _this$props.theme,
              other = objectWithoutProperties(_this$props, ["BackdropComponent", "BackdropProps", "children", "closeAfterTransition", "container", "disableAutoFocus", "disableBackdropClick", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "hideBackdrop", "innerRef", "keepMounted", "manager", "onBackdropClick", "onClose", "onEscapeKeyDown", "onRendered", "open", "theme"]);
  
          var exited = this.state.exited;
          var hasTransition = getHasTransition(this.props);
  
          if (!keepMounted && !open && (!hasTransition || exited)) {
            return null;
          }
  
          var childProps = {}; // It's a Transition like component
  
          if (hasTransition) {
            childProps.onEnter = createChainedFunction(this.handleEnter, children.props.onEnter);
            childProps.onExited = createChainedFunction(this.handleExited, children.props.onExited);
          }
  
          if (children.props.role === undefined) {
            childProps.role = children.props.role || 'document';
          }
  
          if (children.props.tabIndex === undefined) {
            childProps.tabIndex = children.props.tabIndex || '-1';
          }
  
          var stylesRender = styles$v(theme || {
            zIndex: zIndex
          });
          return React__default.createElement(Portal, {
            ref: this.handlePortalRef,
            container: container,
            disablePortal: disablePortal,
            onRendered: this.handleRendered
          }, React__default.createElement("div", _extends_1({
            ref: this.handleModalRef,
            onKeyDown: this.handleKeyDown,
            role: "presentation"
          }, other, {
            style: _extends_1({}, stylesRender.root, !open && exited ? stylesRender.hidden : {}, other.style)
          }), hideBackdrop ? null : React__default.createElement(BackdropComponent, _extends_1({
            open: open,
            onClick: this.handleBackdropClick
          }, BackdropProps)), React__default.createElement(TrapFocus, {
            disableEnforceFocus: disableEnforceFocus,
            disableAutoFocus: disableAutoFocus,
            disableRestoreFocus: disableRestoreFocus,
            getDoc: this.getDoc,
            isEnabled: this.isTopModal,
            open: open
          }, React__default.cloneElement(children, childProps))));
        }
      }]);
  
      return Modal;
    }(React__default.Component);
  
    Modal.propTypes = {
      /**
       * A backdrop component. This property enables custom backdrop rendering.
       */
      BackdropComponent: propTypes.elementType,
  
      /**
       * Properties applied to the [`Backdrop`](/api/backdrop/) element.
       */
      BackdropProps: propTypes.object,
  
      /**
       * A single child content element.
       */
      children: elementAcceptingRef.isRequired,
  
      /**
       * When set to true the Modal waits until a nested Transition is completed before closing.
       */
      closeAfterTransition: propTypes.bool,
  
      /**
       * A node, component instance, or function that returns either.
       * The `container` will have the portal children appended to it.
       */
      container: propTypes.oneOfType([propTypes.object, propTypes.func]),
  
      /**
       * If `true`, the modal will not automatically shift focus to itself when it opens, and
       * replace it to the last focused element when it closes.
       * This also works correctly with any modal children that have the `disableAutoFocus` prop.
       *
       * Generally this should never be set to `true` as it makes the modal less
       * accessible to assistive technologies, like screen readers.
       */
      disableAutoFocus: propTypes.bool,
  
      /**
       * If `true`, clicking the backdrop will not fire any callback.
       */
      disableBackdropClick: propTypes.bool,
  
      /**
       * If `true`, the modal will not prevent focus from leaving the modal while open.
       *
       * Generally this should never be set to `true` as it makes the modal less
       * accessible to assistive technologies, like screen readers.
       */
      disableEnforceFocus: propTypes.bool,
  
      /**
       * If `true`, hitting escape will not fire any callback.
       */
      disableEscapeKeyDown: propTypes.bool,
  
      /**
       * Disable the portal behavior.
       * The children stay within it's parent DOM hierarchy.
       */
      disablePortal: propTypes.bool,
  
      /**
       * If `true`, the modal will not restore focus to previously focused element once
       * modal is hidden.
       */
      disableRestoreFocus: propTypes.bool,
  
      /**
       * If `true`, the backdrop is not rendered.
       */
      hideBackdrop: propTypes.bool,
  
      /**
       * @ignore
       * from `withForwardRef`
       */
      innerRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  
      /**
       * Always keep the children in the DOM.
       * This property can be useful in SEO situation or
       * when you want to maximize the responsiveness of the Modal.
       */
      keepMounted: propTypes.bool,
  
      /**
       * @ignore
       *
       * A modal manager used to track and manage the state of open
       * Modals. This enables customizing how modals interact within a container.
       */
      manager: propTypes.object,
  
      /**
       * Callback fired when the backdrop is clicked.
       */
      onBackdropClick: propTypes.func,
  
      /**
       * Callback fired when the component requests to be closed.
       * The `reason` parameter can optionally be used to control the response to `onClose`.
       *
       * @param {object} event The event source of the callback
       * @param {string} reason Can be:`"escapeKeyDown"`, `"backdropClick"`
       */
      onClose: propTypes.func,
  
      /**
       * Callback fired when the escape key is pressed,
       * `disableEscapeKeyDown` is false and the modal is in focus.
       */
      onEscapeKeyDown: propTypes.func,
  
      /**
       * Callback fired once the children has been mounted into the `container`.
       * It signals that the `open={true}` property took effect.
       */
      onRendered: propTypes.func,
  
      /**
       * If `true`, the modal is open.
       */
      open: propTypes.bool.isRequired,
  
      /**
       * @ignore
       */
      theme: propTypes.object
    };
    Modal.defaultProps = {
      BackdropComponent: SimpleBackdrop,
      closeAfterTransition: false,
      disableAutoFocus: false,
      disableBackdropClick: false,
      disableEnforceFocus: false,
      disableEscapeKeyDown: false,
      disablePortal: false,
      disableRestoreFocus: false,
      hideBackdrop: false,
      keepMounted: false,
      // Modals don't open on the server so this won't conflict with concurrent requests.
      manager: new ModalManager()
    };
    var Modal$1 = withTheme(withForwardedRef(Modal));
  
    var styles$w = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          '@media print': {
            // Use !important to override the Modal inline-style.
            position: 'absolute !important'
          }
        },
  
        /* Styles applied to the root element if `scroll="paper"`. */
        scrollPaper: {
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center'
        },
  
        /* Styles applied to the root element if `scroll="body"`. */
        scrollBody: {
          overflowY: 'auto',
          overflowX: 'hidden',
          textAlign: 'center',
          '&:after': {
            content: '""',
            display: 'inline-block',
            verticalAlign: 'middle',
            height: '100%',
            width: '0'
          }
        },
  
        /* Styles applied to the container element. */
        container: {
          height: '100%',
          '@media print': {
            height: 'auto'
          },
          // We disable the focus ring for mouse, touch and keyboard users.
          outline: 'none'
        },
  
        /* Styles applied to the `Paper` component. */
        paper: {
          margin: 48,
          position: 'relative',
          overflowY: 'auto',
          // Fix IE 11 issue, to remove at some point.
          '@media print': {
            overflowY: 'visible',
            boxShadow: 'none'
          }
        },
  
        /* Styles applied to the `Paper` component if `scroll="paper"`. */
        paperScrollPaper: {
          display: 'flex',
          flexDirection: 'column',
          maxHeight: 'calc(100% - 96px)'
        },
  
        /* Styles applied to the `Paper` component if `scroll="body"`. */
        paperScrollBody: {
          display: 'inline-block',
          verticalAlign: 'middle',
          textAlign: 'left' // 'initial' doesn't work on IE 11
  
        },
  
        /* Styles applied to the `Paper` component if `maxWidth=false`. */
        paperWidthFalse: {
          maxWidth: 'calc(100% - 96px)'
        },
  
        /* Styles applied to the `Paper` component if `maxWidth="xs"`. */
        paperWidthXs: {
          maxWidth: Math.max(theme.breakpoints.values.xs, 444),
          '&$paperScrollBody': defineProperty({}, theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 48 * 2), {
            maxWidth: 'calc(100% - 96px)'
          })
        },
  
        /* Styles applied to the `Paper` component if `maxWidth="sm"`. */
        paperWidthSm: {
          maxWidth: theme.breakpoints.values.sm,
          '&$paperScrollBody': defineProperty({}, theme.breakpoints.down(theme.breakpoints.values.sm + 48 * 2), {
            maxWidth: 'calc(100% - 96px)'
          })
        },
  
        /* Styles applied to the `Paper` component if `maxWidth="md"`. */
        paperWidthMd: {
          maxWidth: theme.breakpoints.values.md,
          '&$paperScrollBody': defineProperty({}, theme.breakpoints.down(theme.breakpoints.values.md + 48 * 2), {
            maxWidth: 'calc(100% - 96px)'
          })
        },
  
        /* Styles applied to the `Paper` component if `maxWidth="lg"`. */
        paperWidthLg: {
          maxWidth: theme.breakpoints.values.lg,
          '&$paperScrollBody': defineProperty({}, theme.breakpoints.down(theme.breakpoints.values.lg + 48 * 2), {
            maxWidth: 'calc(100% - 96px)'
          })
        },
  
        /* Styles applied to the `Paper` component if `maxWidth="xl"`. */
        paperWidthXl: {
          maxWidth: theme.breakpoints.values.xl,
          '&$paperScrollBody': defineProperty({}, theme.breakpoints.down(theme.breakpoints.values.xl + 48 * 2), {
            maxWidth: 'calc(100% - 96px)'
          })
        },
  
        /* Styles applied to the `Paper` component if `fullWidth={true}`. */
        paperFullWidth: {
          width: 'calc(100% - 96px)'
        },
  
        /* Styles applied to the `Paper` component if `fullScreen={true}`. */
        paperFullScreen: {
          margin: 0,
          width: '100%',
          maxWidth: '100%',
          height: '100%',
          maxHeight: 'none',
          borderRadius: 0,
          '&$paperScrollBody': {
            margin: 0,
            maxWidth: '100%'
          }
        }
      };
    };
    var defaultTransitionDuration = {
      enter: duration.enteringScreen,
      exit: duration.leavingScreen
    };
    /**
     * Dialogs are overlaid modal paper based components with a backdrop.
     */
  
    var Dialog = React__default.forwardRef(function Dialog(props, ref) {
      var BackdropProps = props.BackdropProps,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$disableBackdro = props.disableBackdropClick,
          disableBackdropClick = _props$disableBackdro === void 0 ? false : _props$disableBackdro,
          _props$disableEscapeK = props.disableEscapeKeyDown,
          disableEscapeKeyDown = _props$disableEscapeK === void 0 ? false : _props$disableEscapeK,
          _props$fullScreen = props.fullScreen,
          fullScreen = _props$fullScreen === void 0 ? false : _props$fullScreen,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          _props$maxWidth = props.maxWidth,
          maxWidth = _props$maxWidth === void 0 ? 'sm' : _props$maxWidth,
          onBackdropClick = props.onBackdropClick,
          onClose = props.onClose,
          onEnter = props.onEnter,
          onEntered = props.onEntered,
          onEntering = props.onEntering,
          onEscapeKeyDown = props.onEscapeKeyDown,
          onExit = props.onExit,
          onExited = props.onExited,
          onExiting = props.onExiting,
          open = props.open,
          _props$PaperComponent = props.PaperComponent,
          PaperComponent = _props$PaperComponent === void 0 ? Paper$1 : _props$PaperComponent,
          _props$PaperProps = props.PaperProps,
          PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,
          _props$scroll = props.scroll,
          scroll = _props$scroll === void 0 ? 'paper' : _props$scroll,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Fade$1 : _props$TransitionComp,
          _props$transitionDura = props.transitionDuration,
          transitionDuration = _props$transitionDura === void 0 ? defaultTransitionDuration : _props$transitionDura,
          TransitionProps = props.TransitionProps,
          other = objectWithoutProperties(props, ["BackdropProps", "children", "classes", "className", "disableBackdropClick", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "onEnter", "onEntered", "onEntering", "onEscapeKeyDown", "onExit", "onExited", "onExiting", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps"]);
  
      var mouseDownTarget = React__default.useRef();
  
      var handleMouseDown = function handleMouseDown(event) {
        mouseDownTarget.current = event.target;
      };
  
      var handleBackdropClick = function handleBackdropClick(event) {
        // Ignore the events not coming from the "backdrop"
        // We don't want to close the dialog when clicking the dialog content.
        if (event.target !== event.currentTarget) {
          return;
        } // Make sure the event starts and ends on the same DOM element.
  
  
        if (event.target !== mouseDownTarget.current) {
          return;
        }
  
        mouseDownTarget.current = null;
  
        if (onBackdropClick) {
          onBackdropClick(event);
        }
  
        if (!disableBackdropClick && onClose) {
          onClose(event, 'backdropClick');
        }
      };
  
      return React__default.createElement(Modal$1, _extends_1({
        className: clsx(classes.root, className),
        BackdropComponent: Backdrop$1,
        BackdropProps: _extends_1({
          transitionDuration: transitionDuration
        }, BackdropProps),
        closeAfterTransition: true,
        disableBackdropClick: disableBackdropClick,
        disableEscapeKeyDown: disableEscapeKeyDown,
        onEscapeKeyDown: onEscapeKeyDown,
        onClose: onClose,
        open: open,
        ref: ref,
        role: "dialog"
      }, other), React__default.createElement(TransitionComponent, _extends_1({
        appear: true,
        in: open,
        timeout: transitionDuration,
        onEnter: onEnter,
        onEntering: onEntering,
        onEntered: onEntered,
        onExit: onExit,
        onExiting: onExiting,
        onExited: onExited
      }, TransitionProps), React__default.createElement("div", {
        className: clsx(classes.container, classes["scroll".concat(capitalize(scroll))]),
        onClick: handleBackdropClick,
        onMouseDown: handleMouseDown,
        role: "document"
      }, React__default.createElement(PaperComponent, _extends_1({
        elevation: 24
      }, PaperProps, {
        className: clsx(classes.paper, classes["paperScroll".concat(capitalize(scroll))], classes["paperWidth".concat(capitalize(String(maxWidth)))], PaperProps.className, fullScreen && classes.paperFullScreen, fullWidth && classes.paperFullWidth)
      }), children))));
    });
    Dialog.propTypes = {
      /**
       * @ignore
       */
      BackdropProps: propTypes.object,
  
      /**
       * Dialog children, usually the included sub-components.
       */
      children: propTypes.node.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * If `true`, clicking the backdrop will not fire the `onClose` callback.
       */
      disableBackdropClick: propTypes.bool,
  
      /**
       * If `true`, hitting escape will not fire the `onClose` callback.
       */
      disableEscapeKeyDown: propTypes.bool,
  
      /**
       * If `true`, the dialog will be full-screen
       */
      fullScreen: propTypes.bool,
  
      /**
       * If `true`, the dialog stretches to `maxWidth`.
       */
      fullWidth: propTypes.bool,
  
      /**
       * Determine the max-width of the dialog.
       * The dialog width grows with the size of the screen.
       * Set to `false` to disable `maxWidth`.
       */
      maxWidth: propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]),
  
      /**
       * Callback fired when the backdrop is clicked.
       */
      onBackdropClick: propTypes.func,
  
      /**
       * Callback fired when the component requests to be closed.
       *
       * @param {object} event The event source of the callback
       * @param {string} reason Can be:`"escapeKeyDown"`, `"backdropClick"`
       */
      onClose: propTypes.func,
  
      /**
       * Callback fired before the dialog enters.
       */
      onEnter: propTypes.func,
  
      /**
       * Callback fired when the dialog has entered.
       */
      onEntered: propTypes.func,
  
      /**
       * Callback fired when the dialog is entering.
       */
      onEntering: propTypes.func,
  
      /**
       * Callback fired when the escape key is pressed,
       * `disableKeyboard` is false and the modal is in focus.
       */
      onEscapeKeyDown: propTypes.func,
  
      /**
       * Callback fired before the dialog exits.
       */
      onExit: propTypes.func,
  
      /**
       * Callback fired when the dialog has exited.
       */
      onExited: propTypes.func,
  
      /**
       * Callback fired when the dialog is exiting.
       */
      onExiting: propTypes.func,
  
      /**
       * If `true`, the Dialog is open.
       */
      open: propTypes.bool.isRequired,
  
      /**
       * The component used to render the body of the dialog.
       */
      PaperComponent: propTypes.elementType,
  
      /**
       * Properties applied to the [`Paper`](/api/paper/) element.
       */
      PaperProps: propTypes.object,
  
      /**
       * Determine the container for scrolling the dialog.
       */
      scroll: propTypes.oneOf(['body', 'paper']),
  
      /**
       * The component used for the transition.
       */
      TransitionComponent: propTypes.elementType,
  
      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      transitionDuration: propTypes.oneOfType([propTypes.number, propTypes.shape({
        enter: propTypes.number,
        exit: propTypes.number
      })]),
  
      /**
       * Properties applied to the `Transition` element.
       */
      TransitionProps: propTypes.object
    };
    var Dialog$1 = withStyles$1(styles$w, {
      name: 'MuiDialog'
    })(Dialog);
  
    var styles$x = {
      /* Styles applied to the root element. */
      root: {
        display: 'flex',
        alignItems: 'center',
        padding: 8,
        justifyContent: 'flex-end',
        flex: '0 0 auto'
      },
  
      /* Styles applied to the root element if `disableSpacing={false}`. */
      spacing: {
        '& > * + *': {
          marginLeft: 8
        }
      }
    };
    var DialogActions = React__default.forwardRef(function DialogActions(props, ref) {
      var _props$disableSpacing = props.disableSpacing,
          disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,
          classes = props.classes,
          className = props.className,
          other = objectWithoutProperties(props, ["disableSpacing", "classes", "className"]);
  
      return React__default.createElement("div", _extends_1({
        className: clsx(classes.root, className, !disableSpacing && classes.spacing),
        ref: ref
      }, other));
    });
    DialogActions.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * If `true`, the actions do not have additional margin.
       */
      disableSpacing: propTypes.bool
    };
    var DialogActions$1 = withStyles$1(styles$x, {
      name: 'MuiDialogActions'
    })(DialogActions);
  
    var styles$y = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          flex: '1 1 auto',
          padding: '8px 24px',
          WebkitOverflowScrolling: 'touch',
          // Add iOS momentum scrolling.
          overflowY: 'auto'
        },
  
        /* Styles applied to the root element if `dividers={true}`. */
        dividers: {
          borderTop: "1px solid ".concat(theme.palette.divider),
          borderBottom: "1px solid ".concat(theme.palette.divider)
        }
      };
    };
    var DialogContent = React__default.forwardRef(function DialogContent(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$dividers = props.dividers,
          dividers = _props$dividers === void 0 ? false : _props$dividers,
          other = objectWithoutProperties(props, ["classes", "className", "dividers"]);
  
      return React__default.createElement("div", _extends_1({
        className: clsx(classes.root, className, dividers && classes.dividers),
        ref: ref
      }, other));
    });
    DialogContent.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * Display the top and bottom dividers.
       */
      dividers: propTypes.bool
    };
    var DialogContent$1 = withStyles$1(styles$y, {
      name: 'MuiDialogContent'
    })(DialogContent);
  
    var styles$z = {
      /* Styles applied to the root element. */
      root: {
        marginBottom: 16
      }
    };
    var DialogContentText = React__default.forwardRef(function DialogContentText(props, ref) {
      return React__default.createElement(Typography$1, _extends_1({
        component: "p",
        variant: "body1",
        color: "textSecondary",
        ref: ref
      }, props));
    });
    DialogContentText.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired
    };
    var DialogContentText$1 = withStyles$1(styles$z, {
      name: 'MuiDialogContentText'
    })(DialogContentText);
  
    var styles$A = {
      /* Styles applied to the root element. */
      root: {
        margin: 0,
        padding: '16px 24px',
        flex: '0 0 auto'
      }
    };
    var DialogTitle = React__default.forwardRef(function DialogTitle(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$disableTypogra = props.disableTypography,
          disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,
          other = objectWithoutProperties(props, ["children", "classes", "className", "disableTypography"]);
  
      return React__default.createElement("div", _extends_1({
        className: clsx(classes.root, className),
        ref: ref
      }, other), disableTypography ? children : React__default.createElement(Typography$1, {
        variant: "h6"
      }, children));
    });
    DialogTitle.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * If `true`, the children won't be wrapped by a typography component.
       * For instance, this can be useful to render an h4 instead of the default h2.
       */
      disableTypography: propTypes.bool
    };
    var DialogTitle$1 = withStyles$1(styles$A, {
      name: 'MuiDialogTitle'
    })(DialogTitle);
  
    var styles$B = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          height: 1,
          margin: 0,
          // Reset browser default style.
          border: 'none',
          flexShrink: 0,
          backgroundColor: theme.palette.divider
        },
  
        /* Styles applied to the root element if `absolute={true}`. */
        absolute: {
          position: 'absolute',
          bottom: 0,
          left: 0,
          width: '100%'
        },
  
        /* Styles applied to the root element if `variant="inset"`. */
        inset: {
          marginLeft: 72
        },
  
        /* Styles applied to the root element if `light={true}`. */
        light: {
          backgroundColor: fade(theme.palette.divider, 0.08)
        },
  
        /* Styles applied to the root element if `variant="middle"`. */
        middle: {
          marginLeft: theme.spacing(2),
          marginRight: theme.spacing(2)
        }
      };
    };
    var Divider = React__default.forwardRef(function Divider(props, ref) {
      var _props$absolute = props.absolute,
          absolute = _props$absolute === void 0 ? false : _props$absolute,
          classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'hr' : _props$component,
          _props$light = props.light,
          light = _props$light === void 0 ? false : _props$light,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'fullWidth' : _props$variant,
          other = objectWithoutProperties(props, ["absolute", "classes", "className", "component", "light", "variant"]);
  
      if (Component === 'li' && !other.role) {
        other.role = 'separator';
      }
  
      return React__default.createElement(Component, _extends_1({
        className: clsx(classes.root, className, variant === 'inset' && classes.inset, variant === 'middle' && classes.middle, absolute && classes.absolute, light && classes.light),
        ref: ref
      }, other));
    });
    Divider.propTypes = {
      /**
       * Absolutely position the element.
       */
      absolute: propTypes.bool,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * If `true`, the divider will have a lighter color.
       */
      light: propTypes.bool,
  
      /**
       *  The variant to use.
       */
      variant: propTypes.oneOf(['fullWidth', 'inset', 'middle'])
    };
    var Divider$1 = withStyles$1(styles$B, {
      name: 'MuiDivider'
    })(Divider);
  
    /**
     * Returns a function, that, as long as it continues to be invoked, will not
     * be triggered. The function will be called after it stops being called for
     * N milliseconds. If `immediate` is passed, trigger the function on the
     * leading edge, instead of the trailing. The function also has a property 'clear' 
     * that is a function which will clear the timer to prevent previously scheduled executions. 
     *
     * @source underscore.js
     * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/
     * @param {Function} function to wrap
     * @param {Number} timeout in ms (`100`)
     * @param {Boolean} whether to execute at the beginning (`false`)
     * @api public
     */
    function debounce(func, wait, immediate){
      var timeout, args, context, timestamp, result;
      if (null == wait) wait = 100;
  
      function later() {
        var last = Date.now() - timestamp;
  
        if (last < wait && last >= 0) {
          timeout = setTimeout(later, wait - last);
        } else {
          timeout = null;
          if (!immediate) {
            result = func.apply(context, args);
            context = args = null;
          }
        }
      }
      var debounced = function(){
        context = this;
        args = arguments;
        timestamp = Date.now();
        var callNow = immediate && !timeout;
        if (!timeout) timeout = setTimeout(later, wait);
        if (callNow) {
          result = func.apply(context, args);
          context = args = null;
        }
  
        return result;
      };
  
      debounced.clear = function() {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
      };
      
      debounced.flush = function() {
        if (timeout) {
          result = func.apply(context, args);
          context = args = null;
          
          clearTimeout(timeout);
          timeout = null;
        }
      };
  
      return debounced;
    }
    // Adds compatibility for ES modules
    debounce.debounce = debounce;
  
    var debounce_1 = debounce;
  
    var GUTTER = 24; // Translate the node so he can't be seen on the screen.
    // Later, we gonna translate back the node to his original location
    // with `translate3d(0, 0, 0)`.`
  
    function getTranslateValue(direction, node) {
      var rect = node.getBoundingClientRect();
      var transform;
  
      if (node.fakeTransform) {
        transform = node.fakeTransform;
      } else {
        var computedStyle = window.getComputedStyle(node);
        transform = computedStyle.getPropertyValue('-webkit-transform') || computedStyle.getPropertyValue('transform');
      }
  
      var offsetX = 0;
      var offsetY = 0;
  
      if (transform && transform !== 'none' && typeof transform === 'string') {
        var transformValues = transform.split('(')[1].split(')')[0].split(',');
        offsetX = parseInt(transformValues[4], 10);
        offsetY = parseInt(transformValues[5], 10);
      }
  
      if (direction === 'left') {
        return "translateX(100vw) translateX(-".concat(rect.left - offsetX, "px)");
      }
  
      if (direction === 'right') {
        return "translateX(-".concat(rect.left + rect.width + GUTTER - offsetX, "px)");
      }
  
      if (direction === 'up') {
        return "translateY(100vh) translateY(-".concat(rect.top - offsetY, "px)");
      } // direction === 'down'
  
  
      return "translateY(-".concat(rect.top + rect.height + GUTTER - offsetY, "px)");
    }
  
    function setTranslateValue(direction, node) {
      var transform = getTranslateValue(direction, node);
  
      if (transform) {
        node.style.webkitTransform = transform;
        node.style.transform = transform;
      }
    }
    var defaultTimeout$1 = {
      enter: duration.enteringScreen,
      exit: duration.leavingScreen
    };
    /**
     * The Slide transition is used by the [Drawer](/components/drawers/) component.
     * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
     */
  
    var Slide = React__default.forwardRef(function Slide(props, ref) {
      var children = props.children,
          _props$direction = props.direction,
          direction = _props$direction === void 0 ? 'down' : _props$direction,
          inProp = props.in,
          onEnter = props.onEnter,
          onEntering = props.onEntering,
          onExit = props.onExit,
          onExited = props.onExited,
          style = props.style,
          theme = props.theme,
          _props$timeout = props.timeout,
          timeout = _props$timeout === void 0 ? defaultTimeout$1 : _props$timeout,
          other = objectWithoutProperties(props, ["children", "direction", "in", "onEnter", "onEntering", "onExit", "onExited", "style", "theme", "timeout"]);
  
      var childrenRef = React__default.useRef(null);
      /**
       * used in cloneElement(children, { ref: handleRef })
       */
  
      var handleOwnRef = React__default.useCallback(function (instance) {
        // #StrictMode ready
        childrenRef.current = ReactDOM__default.findDOMNode(instance);
      }, []);
      var handleRefIntermediary = useForkRef(children.ref, handleOwnRef);
      var handleRef = useForkRef(handleRefIntermediary, ref);
  
      var handleEnter = function handleEnter() {
        var node = childrenRef.current;
        setTranslateValue(direction, node);
        reflow(node);
  
        if (onEnter) {
          onEnter(node);
        }
      };
  
      var handleEntering = function handleEntering() {
        var node = childrenRef.current;
        var transitionProps = getTransitionProps({
          timeout: timeout,
          style: style
        }, {
          mode: 'enter'
        });
        node.style.webkitTransition = theme.transitions.create('-webkit-transform', _extends_1({}, transitionProps, {
          easing: theme.transitions.easing.easeOut
        }));
        node.style.transition = theme.transitions.create('transform', _extends_1({}, transitionProps, {
          easing: theme.transitions.easing.easeOut
        }));
        node.style.webkitTransform = 'translate(0, 0)';
        node.style.transform = 'translate(0, 0)';
  
        if (onEntering) {
          onEntering(node);
        }
      };
  
      var handleExit = function handleExit() {
        var node = childrenRef.current;
        var transitionProps = getTransitionProps({
          timeout: timeout,
          style: style
        }, {
          mode: 'exit'
        });
        node.style.webkitTransition = theme.transitions.create('-webkit-transform', _extends_1({}, transitionProps, {
          easing: theme.transitions.easing.sharp
        }));
        node.style.transition = theme.transitions.create('transform', _extends_1({}, transitionProps, {
          easing: theme.transitions.easing.sharp
        }));
        setTranslateValue(direction, node);
  
        if (onExit) {
          onExit(node);
        }
      };
  
      var handleExited = function handleExited() {
        var node = childrenRef.current; // No need for transitions when the component is hidden
  
        node.style.webkitTransition = '';
        node.style.transition = '';
  
        if (onExited) {
          onExited(node);
        }
      };
  
      var updatePosition = React__default.useCallback(function () {
        if (childrenRef.current) {
          setTranslateValue(direction, childrenRef.current);
        }
      }, [direction]);
      React__default.useEffect(function () {
        // Skip configuration where the position is screen size invariant.
        if (!inProp && direction !== 'down' && direction !== 'right') {
          var handleResize = debounce_1(function () {
            if (childrenRef.current) {
              setTranslateValue(direction, childrenRef.current);
            }
          }, 166); // Corresponds to 10 frames at 60 Hz.
  
          window.addEventListener('resize', handleResize);
          return function () {
            handleResize.clear();
            window.removeEventListener('resize', handleResize);
          };
        }
  
        return undefined;
      }, [direction, inProp]);
      React__default.useEffect(function () {
        if (!inProp) {
          // We need to update the position of the drawer when the direction change and
          // when it's hidden.
          updatePosition();
        }
      }, [inProp, updatePosition]);
      return React__default.createElement(Transition, _extends_1({
        onEnter: handleEnter,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        appear: true,
        in: inProp,
        timeout: timeout
      }, other), function (state, childProps) {
        return React__default.cloneElement(children, _extends_1({
          ref: handleRef,
          style: _extends_1({
            visibility: state === 'exited' && !inProp ? 'hidden' : undefined
          }, style, children.props.style)
        }, childProps));
      });
    });
    Slide.propTypes = {
      /**
       * A single child content element.
       */
      children: elementAcceptingRef,
  
      /**
       * Direction the child node will enter from.
       */
      direction: propTypes.oneOf(['left', 'right', 'up', 'down']),
  
      /**
       * If `true`, show the component; triggers the enter or exit animation.
       */
      in: propTypes.bool,
  
      /**
       * @ignore
       */
      onEnter: propTypes.func,
  
      /**
       * @ignore
       */
      onEntering: propTypes.func,
  
      /**
       * @ignore
       */
      onExit: propTypes.func,
  
      /**
       * @ignore
       */
      onExited: propTypes.func,
  
      /**
       * @ignore
       */
      style: propTypes.object,
  
      /**
       * @ignore
       */
      theme: propTypes.object.isRequired,
  
      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      timeout: propTypes.oneOfType([propTypes.number, propTypes.shape({
        enter: propTypes.number,
        exit: propTypes.number
      })])
    };
    var Slide$1 = withTheme$1(Slide);
  
    var styles$C = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {},
  
        /* Styles applied to the root element if `variant="permanent or persistent"`. */
        docked: {
          flex: '0 0 auto'
        },
  
        /* Styles applied to the `Paper` component. */
        paper: {
          overflowY: 'auto',
          display: 'flex',
          flexDirection: 'column',
          height: '100%',
          flex: '1 0 auto',
          zIndex: theme.zIndex.drawer,
          WebkitOverflowScrolling: 'touch',
          // Add iOS momentum scrolling.
          // temporary style
          position: 'fixed',
          top: 0,
          // We disable the focus ring for mouse, touch and keyboard users.
          // At some point, it would be better to keep it for keyboard users.
          // :focus-ring CSS pseudo-class will help.
          outline: 'none'
        },
  
        /* Styles applied to the `Paper` component if `anchor="left"`. */
        paperAnchorLeft: {
          left: 0,
          right: 'auto'
        },
  
        /* Styles applied to the `Paper` component if `anchor="right"`. */
        paperAnchorRight: {
          left: 'auto',
          right: 0
        },
  
        /* Styles applied to the `Paper` component if `anchor="top"`. */
        paperAnchorTop: {
          top: 0,
          left: 0,
          bottom: 'auto',
          right: 0,
          height: 'auto',
          maxHeight: '100%'
        },
  
        /* Styles applied to the `Paper` component if `anchor="bottom"`. */
        paperAnchorBottom: {
          top: 'auto',
          left: 0,
          bottom: 0,
          right: 0,
          height: 'auto',
          maxHeight: '100%'
        },
  
        /* Styles applied to the `Paper` component if `anchor="left"` & `variant` is not "temporary". */
        paperAnchorDockedLeft: {
          borderRight: "1px solid ".concat(theme.palette.divider)
        },
  
        /* Styles applied to the `Paper` component if `anchor="top"` & `variant` is not "temporary". */
        paperAnchorDockedTop: {
          borderBottom: "1px solid ".concat(theme.palette.divider)
        },
  
        /* Styles applied to the `Paper` component if `anchor="right"` & `variant` is not "temporary". */
        paperAnchorDockedRight: {
          borderLeft: "1px solid ".concat(theme.palette.divider)
        },
  
        /* Styles applied to the `Paper` component if `anchor="bottom"` & `variant` is not "temporary". */
        paperAnchorDockedBottom: {
          borderTop: "1px solid ".concat(theme.palette.divider)
        },
  
        /* Styles applied to the `Modal` component. */
        modal: {}
      };
    };
    var oppositeDirection = {
      left: 'right',
      right: 'left',
      top: 'down',
      bottom: 'up'
    };
    function isHorizontal(anchor) {
      return ['left', 'right'].indexOf(anchor) !== -1;
    }
    function getAnchor(theme, anchor) {
      return theme.direction === 'rtl' && isHorizontal(anchor) ? oppositeDirection[anchor] : anchor;
    }
    var defaultTransitionDuration$1 = {
      enter: duration.enteringScreen,
      exit: duration.leavingScreen
    };
    /**
     * The properties of the [Modal](/api/modal/) component are available
     * when `variant="temporary"` is set.
     */
  
    var Drawer = React__default.forwardRef(function Drawer(props, ref) {
      var _props$anchor = props.anchor,
          anchorProp = _props$anchor === void 0 ? 'left' : _props$anchor,
          BackdropProps = props.BackdropProps,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$elevation = props.elevation,
          elevation = _props$elevation === void 0 ? 16 : _props$elevation,
          _props$ModalProps = props.ModalProps;
      _props$ModalProps = _props$ModalProps === void 0 ? {} : _props$ModalProps;
  
      var BackdropPropsProp = _props$ModalProps.BackdropProps,
          ModalProps = objectWithoutProperties(_props$ModalProps, ["BackdropProps"]),
          onClose = props.onClose,
          _props$open = props.open,
          open = _props$open === void 0 ? false : _props$open,
          PaperProps = props.PaperProps,
          SlideProps = props.SlideProps,
          theme = props.theme,
          _props$transitionDura = props.transitionDuration,
          transitionDuration = _props$transitionDura === void 0 ? defaultTransitionDuration$1 : _props$transitionDura,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'temporary' : _props$variant,
          other = objectWithoutProperties(props, ["anchor", "BackdropProps", "children", "classes", "className", "elevation", "ModalProps", "onClose", "open", "PaperProps", "SlideProps", "theme", "transitionDuration", "variant"]); // Let's assume that the Drawer will always be rendered on user space.
      // We use this state is order to skip the appear transition during the
      // initial mount of the component.
  
  
      var mounted = React__default.useRef(false);
      React__default.useEffect(function () {
        mounted.current = true;
      }, []);
      var anchor = getAnchor(theme, anchorProp);
      var drawer = React__default.createElement(Paper$1, _extends_1({
        elevation: variant === 'temporary' ? elevation : 0,
        square: true,
        className: clsx(classes.paper, classes["paperAnchor".concat(capitalize(anchor))], variant !== 'temporary' && classes["paperAnchorDocked".concat(capitalize(anchor))])
      }, PaperProps), children);
  
      if (variant === 'permanent') {
        return React__default.createElement("div", _extends_1({
          className: clsx(classes.root, classes.docked, className),
          ref: ref
        }, other), drawer);
      }
  
      var slidingDrawer = React__default.createElement(Slide$1, _extends_1({
        in: open,
        direction: oppositeDirection[anchor],
        timeout: transitionDuration,
        appear: mounted.current
      }, SlideProps), drawer);
  
      if (variant === 'persistent') {
        return React__default.createElement("div", _extends_1({
          className: clsx(classes.root, classes.docked, className)
        }, other), slidingDrawer);
      } // variant === temporary
  
  
      return React__default.createElement(Modal$1, _extends_1({
        BackdropProps: _extends_1({}, BackdropProps, BackdropPropsProp, {
          transitionDuration: transitionDuration
        }),
        BackdropComponent: Backdrop$1,
        className: clsx(classes.root, classes.modal, className),
        open: open,
        onClose: onClose,
        ref: ref
      }, other, ModalProps), slidingDrawer);
    });
    Drawer.propTypes = {
      /**
       * Side from which the drawer will appear.
       */
      anchor: propTypes.oneOf(['left', 'top', 'right', 'bottom']),
  
      /**
       * @ignore
       */
      BackdropProps: propTypes.object,
  
      /**
       * The contents of the drawer.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The elevation of the drawer.
       */
      elevation: propTypes.number,
  
      /**
       * Properties applied to the [`Modal`](/api/modal/) element.
       */
      ModalProps: propTypes.object,
  
      /**
       * Callback fired when the component requests to be closed.
       *
       * @param {object} event The event source of the callback
       */
      onClose: propTypes.func,
  
      /**
       * If `true`, the drawer is open.
       */
      open: propTypes.bool,
  
      /**
       * Properties applied to the [`Paper`](/api/paper/) element.
       */
      PaperProps: propTypes.object,
  
      /**
       * Properties applied to the [`Slide`](/api/slide/) element.
       */
      SlideProps: propTypes.object,
  
      /**
       * @ignore
       */
      theme: propTypes.object.isRequired,
  
      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      transitionDuration: propTypes.oneOfType([propTypes.number, propTypes.shape({
        enter: propTypes.number,
        exit: propTypes.number
      })]),
  
      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['permanent', 'persistent', 'temporary'])
    };
    var Drawer$1 = withStyles$1(styles$C, {
      name: 'MuiDrawer',
      flip: false,
      withTheme: true
    })(Drawer);
  
    function _toArray(arr) {
      return arrayWithHoles(arr) || iterableToArray(arr) || nonIterableRest();
    }
  
    var toArray = _toArray;
  
    var styles$D = function styles(theme) {
      var transition = {
        duration: theme.transitions.duration.shortest
      };
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'relative',
          transition: theme.transitions.create(['margin'], transition),
          '&:before': {
            position: 'absolute',
            left: 0,
            top: -1,
            right: 0,
            height: 1,
            content: '""',
            opacity: 1,
            backgroundColor: theme.palette.divider,
            transition: theme.transitions.create(['opacity', 'background-color'], transition)
          },
          '&:first-child': {
            '&:before': {
              display: 'none'
            }
          },
          '&$expanded': {
            margin: '16px 0',
            '&:first-child': {
              marginTop: 0
            },
            '&:last-child': {
              marginBottom: 0
            },
            '&:before': {
              opacity: 0
            }
          },
          '&$expanded + &': {
            '&:before': {
              display: 'none'
            }
          },
          '&$disabled': {
            backgroundColor: theme.palette.action.disabledBackground
          }
        },
  
        /* Styles applied to the root element if `square={false}`. */
        rounded: {
          borderRadius: 0,
          '&:first-child': {
            borderTopLeftRadius: theme.shape.borderRadius,
            borderTopRightRadius: theme.shape.borderRadius
          },
          '&:last-child': {
            borderBottomLeftRadius: theme.shape.borderRadius,
            borderBottomRightRadius: theme.shape.borderRadius,
            // Fix a rendering issue on Edge
            '@supports (-ms-ime-align: auto)': {
              borderBottomLeftRadius: 0,
              borderBottomRightRadius: 0
            }
          }
        },
  
        /* Styles applied to the root element if `expanded={true}`. */
        expanded: {},
  
        /* Styles applied to the root element if `disabled={true}`. */
        disabled: {}
      };
    };
    var ExpansionPanel = React__default.forwardRef(function ExpansionPanel(props, ref) {
      var childrenProp = props.children,
          classes = props.classes,
          className = props.className,
          _props$defaultExpande = props.defaultExpanded,
          defaultExpanded = _props$defaultExpande === void 0 ? false : _props$defaultExpande,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          expandedProp = props.expanded,
          onChange = props.onChange,
          _props$square = props.square,
          square = _props$square === void 0 ? false : _props$square,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Collapse$1 : _props$TransitionComp,
          TransitionProps = props.TransitionProps,
          other = objectWithoutProperties(props, ["children", "classes", "className", "defaultExpanded", "disabled", "expanded", "onChange", "square", "TransitionComponent", "TransitionProps"]);
  
      var _React$useRef = React__default.useRef(expandedProp != null),
          isControlled = _React$useRef.current;
  
      var _React$useState = React__default.useState(defaultExpanded),
          _React$useState2 = slicedToArray(_React$useState, 2),
          expandedState = _React$useState2[0],
          setExpandedState = _React$useState2[1];
  
      var expanded = isControlled ? expandedProp : expandedState;
  
      var handleChange = function handleChange(event) {
        if (!isControlled) {
          setExpandedState(!expanded);
        }
  
        if (onChange) {
          onChange(event, !expanded);
        }
      };
  
      var _React$Children$toArr = React__default.Children.toArray(childrenProp),
          _React$Children$toArr2 = toArray(_React$Children$toArr),
          summary = _React$Children$toArr2[0],
          children = _React$Children$toArr2.slice(1);
  
      return React__default.createElement(Paper$1, _extends_1({
        className: clsx(classes.root, className, expanded && classes.expanded, disabled && classes.disabled, !square && classes.rounded),
        ref: ref,
        square: square
      }, other), React__default.cloneElement(summary, {
        disabled: disabled,
        expanded: expanded,
        onChange: handleChange
      }), React__default.createElement(TransitionComponent, _extends_1({
        in: expanded,
        timeout: "auto"
      }, TransitionProps), React__default.createElement("div", {
        "aria-labelledby": summary.props.id,
        id: summary.props['aria-controls'],
        role: "region"
      }, children)));
    });
    ExpansionPanel.propTypes = {
      /**
       * The content of the expansion panel.
       */
      children: chainPropTypes(propTypes.node.isRequired, function (props) {
        var summary = React__default.Children.toArray(props.children)[0];
  
        if (summary.type === React__default.Fragment) {
          return new Error("Material-UI: the ExpansionPanel doesn't accept a Fragment as a child. " + 'Consider providing an array instead.');
        }
  
        if (!React__default.isValidElement(summary)) {
          return new Error('Material-UI: expected the first child of ExpansionPanel to be a valid element.');
        }
  
        return null;
      }),
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * If `true`, expands the panel by default.
       */
      defaultExpanded: propTypes.bool,
  
      /**
       * If `true`, the panel will be displayed in a disabled state.
       */
      disabled: propTypes.bool,
  
      /**
       * If `true`, expands the panel, otherwise collapse it.
       * Setting this prop enables control over the panel.
       */
      expanded: propTypes.bool,
  
      /**
       * Callback fired when the expand/collapse state is changed.
       *
       * @param {object} event The event source of the callback
       * @param {boolean} expanded The `expanded` state of the panel
       */
      onChange: propTypes.func,
  
      /**
       * @ignore
       */
      square: propTypes.bool,
  
      /**
       * The component used for the collapse effect.
       */
      TransitionComponent: propTypes.elementType,
  
      /**
       * Properties applied to the `Transition` element.
       */
      TransitionProps: propTypes.object
    };
    var ExpansionPanel$1 = withStyles$1(styles$D, {
      name: 'MuiExpansionPanel'
    })(ExpansionPanel);
  
    var styles$E = {
      /* Styles applied to the root element. */
      root: {
        display: 'flex',
        alignItems: 'center',
        padding: 8,
        justifyContent: 'flex-end'
      },
  
      /* Styles applied to the root element if `disableSpacing={false}`. */
      spacing: {
        '& > * + *': {
          marginLeft: 8
        }
      }
    };
    var ExpansionPanelActions = React__default.forwardRef(function ExpansionPanelActions(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$disableSpacing = props.disableSpacing,
          disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,
          other = objectWithoutProperties(props, ["classes", "className", "disableSpacing"]);
  
      return React__default.createElement("div", _extends_1({
        className: clsx(classes.root, className, !disableSpacing && classes.spacing),
        ref: ref
      }, other));
    });
    ExpansionPanelActions.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * If `true`, the actions do not have additional margin.
       */
      disableSpacing: propTypes.bool
    };
    var ExpansionPanelActions$1 = withStyles$1(styles$E, {
      name: 'MuiExpansionPanelActions'
    })(ExpansionPanelActions);
  
    var styles$F = {
      /* Styles applied to the root element. */
      root: {
        display: 'flex',
        padding: '8px 24px 24px'
      }
    };
    var ExpansionPanelDetails = React__default.forwardRef(function ExpansionPanelDetails(props, ref) {
      var classes = props.classes,
          className = props.className,
          other = objectWithoutProperties(props, ["classes", "className"]);
  
      return React__default.createElement("div", _extends_1({
        className: clsx(classes.root, className),
        ref: ref
      }, other));
    });
    ExpansionPanelDetails.propTypes = {
      /**
       * The content of the expansion panel details.
       */
      children: propTypes.node.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string
    };
    var ExpansionPanelDetails$1 = withStyles$1(styles$F, {
      name: 'MuiExpansionPanelDetails'
    })(ExpansionPanelDetails);
  
    var styles$G = function styles(theme) {
      var transition = {
        duration: theme.transitions.duration.shortest
      };
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'flex',
          minHeight: 8 * 6,
          transition: theme.transitions.create(['min-height', 'background-color'], transition),
          padding: '0 24px 0 24px',
          '&:hover:not($disabled)': {
            cursor: 'pointer'
          },
          '&$expanded': {
            minHeight: 64
          },
          '&$focused': {
            backgroundColor: theme.palette.grey[300]
          },
          '&$disabled': {
            opacity: 0.38
          }
        },
  
        /* Styles applied to the root element, children wrapper element and `IconButton` component if `expanded={true}`. */
        expanded: {},
  
        /* Styles applied to the root and children wrapper elements when focused. */
        focused: {},
  
        /* Styles applied to the root element if `disabled={true}`. */
        disabled: {},
  
        /* Styles applied to the children wrapper element. */
        content: {
          display: 'flex',
          flexGrow: 1,
          transition: theme.transitions.create(['margin'], transition),
          margin: '12px 0',
          '&$expanded': {
            margin: '20px 0'
          }
        },
  
        /* Styles applied to the `IconButton` component when `expandIcon` is supplied. */
        expandIcon: {
          transform: 'rotate(0deg)',
          transition: theme.transitions.create('transform', transition),
          '&:hover': {
            // Disable the hover effect for the IconButton,
            // because a hover effect should apply to the entire Expand button and
            // not only to the IconButton.
            backgroundColor: 'transparent'
          },
          '&$expanded': {
            transform: 'rotate(180deg)'
          }
        }
      };
    };
    var ExpansionPanelSummary = React__default.forwardRef(function ExpansionPanelSummary(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          expanded = props.expanded,
          expandIcon = props.expandIcon,
          IconButtonProps = props.IconButtonProps,
          onBlur = props.onBlur,
          onChange = props.onChange,
          onClick = props.onClick,
          onFocusVisible = props.onFocusVisible,
          other = objectWithoutProperties(props, ["children", "classes", "className", "disabled", "expanded", "expandIcon", "IconButtonProps", "onBlur", "onChange", "onClick", "onFocusVisible"]);
  
      var _React$useState = React__default.useState(false),
          _React$useState2 = slicedToArray(_React$useState, 2),
          focusedState = _React$useState2[0],
          setFocusedState = _React$useState2[1];
  
      var handleFocusVisible = function handleFocusVisible(event) {
        setFocusedState(true);
  
        if (onFocusVisible) {
          onFocusVisible(event);
        }
      };
  
      var handleBlur = function handleBlur(event) {
        setFocusedState(false);
  
        if (onBlur) {
          onBlur(event);
        }
      };
  
      var handleChange = function handleChange(event) {
        if (onChange) {
          onChange(event);
        }
  
        if (onClick) {
          onClick(event);
        }
      };
  
      return React__default.createElement(ButtonBase$1, _extends_1({
        focusRipple: false,
        disableRipple: true,
        disabled: disabled,
        component: "div",
        "aria-expanded": expanded,
        className: clsx(classes.root, className, disabled && classes.disabled, expanded && classes.expanded, focusedState && classes.focused),
        onFocusVisible: handleFocusVisible,
        onBlur: handleBlur,
        onClick: handleChange,
        ref: ref
      }, other), React__default.createElement("div", {
        className: clsx(classes.content, expanded && classes.expanded)
      }, children), expandIcon && React__default.createElement(IconButton$1, _extends_1({
        disabled: disabled,
        className: clsx(classes.expandIcon, expanded && classes.expanded),
        edge: "end",
        component: "div",
        tabIndex: -1,
        "aria-hidden": true
      }, IconButtonProps), expandIcon));
    });
    ExpansionPanelSummary.propTypes = {
      /**
       * The content of the expansion panel summary.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * @ignore
       * If `true`, the summary will be displayed in a disabled state.
       */
      disabled: propTypes.bool,
  
      /**
       * @ignore
       * If `true`, expands the summary, otherwise collapse it.
       */
      expanded: propTypes.bool,
  
      /**
       * The icon to display as the expand indicator.
       */
      expandIcon: propTypes.node,
  
      /**
       * Properties applied to the `IconButton` element wrapping the expand icon.
       */
      IconButtonProps: propTypes.object,
  
      /**
       * @ignore
       */
      onBlur: propTypes.func,
  
      /**
       * @ignore
       */
      onChange: propTypes.func,
  
      /**
       * @ignore
       */
      onClick: propTypes.func,
  
      /**
       * @ignore
       */
      onFocusVisible: propTypes.func
    };
    var ExpansionPanelSummary$1 = withStyles$1(styles$G, {
      name: 'MuiExpansionPanelSummary'
    })(ExpansionPanelSummary);
  
    var styles$H = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: _extends_1({}, theme.typography.button, {
          boxSizing: 'border-box',
          minHeight: 36,
          transition: theme.transitions.create(['background-color', 'box-shadow', 'border'], {
            duration: theme.transitions.duration.short
          }),
          borderRadius: '50%',
          padding: 0,
          minWidth: 0,
          width: 56,
          height: 56,
          boxShadow: theme.shadows[6],
          '&:active': {
            boxShadow: theme.shadows[12]
          },
          color: theme.palette.getContrastText(theme.palette.grey[300]),
          backgroundColor: theme.palette.grey[300],
          '&$focusVisible': {
            boxShadow: theme.shadows[6]
          },
          '&:hover': {
            backgroundColor: theme.palette.grey.A100,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: theme.palette.grey[300]
            },
            '&$disabled': {
              backgroundColor: theme.palette.action.disabledBackground
            },
            textDecoration: 'none'
          },
          '&$disabled': {
            color: theme.palette.action.disabled,
            boxShadow: theme.shadows[0],
            backgroundColor: theme.palette.action.disabledBackground
          }
        }),
  
        /* Styles applied to the span element that wraps the children. */
        label: {
          width: '100%',
          // assure the correct width for iOS Safari
          display: 'inherit',
          alignItems: 'inherit',
          justifyContent: 'inherit'
        },
  
        /* Styles applied to the root element if `color="primary"`. */
        primary: {
          color: theme.palette.primary.contrastText,
          backgroundColor: theme.palette.primary.main,
          '&:hover': {
            backgroundColor: theme.palette.primary.dark,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: theme.palette.primary.main
            }
          }
        },
  
        /* Styles applied to the root element if `color="secondary"`. */
        secondary: {
          color: theme.palette.secondary.contrastText,
          backgroundColor: theme.palette.secondary.main,
          '&:hover': {
            backgroundColor: theme.palette.secondary.dark,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: theme.palette.secondary.main
            }
          }
        },
  
        /* Styles applied to the root element if `variant="extended"`. */
        extended: {
          borderRadius: 48 / 2,
          padding: '0 16px',
          width: 'auto',
          minHeight: 'auto',
          minWidth: 48,
          height: 48,
          '&$sizeSmall': {
            width: 'auto',
            padding: '0 8px',
            borderRadius: 34 / 2,
            minWidth: 34,
            height: 34
          },
          '&$sizeMedium': {
            width: 'auto',
            padding: '0 16px',
            borderRadius: 40 / 2,
            minWidth: 40,
            height: 40
          }
        },
  
        /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */
        focusVisible: {},
  
        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},
  
        /* Styles applied to the root element if `color="inherit"`. */
        colorInherit: {
          color: 'inherit'
        },
  
        /* Styles applied to the root element if `size="small"``. */
        sizeSmall: {
          width: 40,
          height: 40
        },
  
        /* Styles applied to the root element if `size="medium"``. */
        sizeMedium: {
          width: 48,
          height: 48
        }
      };
    };
    var Fab = React__default.forwardRef(function Fab(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'default' : _props$color,
          _props$component = props.component,
          component = _props$component === void 0 ? 'button' : _props$component,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$disableFocusRi = props.disableFocusRipple,
          disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,
          focusVisibleClassName = props.focusVisibleClassName,
          _props$size = props.size,
          size = _props$size === void 0 ? 'large' : _props$size,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'round' : _props$variant,
          other = objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "disableFocusRipple", "focusVisibleClassName", "size", "variant"]);
  
      return React__default.createElement(ButtonBase$1, _extends_1({
        className: clsx(classes.root, className, variant !== "round" && classes.extended, color === 'primary' && classes.primary, color === 'secondary' && classes.secondary, size !== 'large' && classes["size".concat(capitalize(size))], disabled && classes.disabled, color === 'inherit' && classes.colorInherit),
        component: component,
        disabled: disabled,
        focusRipple: !disableFocusRipple,
        focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
        ref: ref
      }, other), React__default.createElement("span", {
        className: classes.label
      }, children));
    });
    Fab.propTypes = {
      /**
       * The content of the button.
       */
      children: propTypes.node.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * If `true`, the button will be disabled.
       */
      disabled: propTypes.bool,
  
      /**
       * If `true`, the  keyboard focus ripple will be disabled.
       * `disableRipple` must also be true.
       */
      disableFocusRipple: propTypes.bool,
  
      /**
       * If `true`, the ripple effect will be disabled.
       */
      disableRipple: propTypes.bool,
  
      /**
       * @ignore
       */
      focusVisibleClassName: propTypes.string,
  
      /**
       * The URL to link to when the button is clicked.
       * If defined, an `a` element will be used as the root node.
       */
      href: propTypes.string,
  
      /**
       * The size of the button.
       * `small` is equivalent to the dense button styling.
       */
      size: propTypes.oneOf(['small', 'medium', 'large']),
  
      /**
       * @ignore
       */
      type: propTypes.string,
  
      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['round', 'extended'])
    };
    var Fab$1 = withStyles$1(styles$H, {
      name: 'MuiFab'
    })(Fab);
  
    function formControlState(_ref) {
      var props = _ref.props,
          states = _ref.states,
          muiFormControl = _ref.muiFormControl;
      return states.reduce(function (acc, state) {
        acc[state] = props[state];
  
        if (muiFormControl) {
          if (typeof props[state] === 'undefined') {
            acc[state] = muiFormControl[state];
          }
        }
  
        return acc;
      }, {});
    }
  
    function getStyleValue(computedStyle, property) {
      return parseInt(computedStyle[property], 10) || 0;
    }
  
    var useEnhancedEffect$3 = typeof window !== 'undefined' ? React__default.useLayoutEffect : React__default.useEffect;
    var styles$I = {
      /* Styles applied to the shadow textarea element. */
      shadow: {
        // Visibility needed to hide the extra text area on iPads
        visibility: 'hidden',
        // Remove from the content flow
        position: 'absolute',
        // Ignore the scrollbar width
        overflow: 'hidden',
        height: '0'
      }
    };
    /**
     * @ignore - internal component.
     *
     * To make public in v4+.
     */
  
    var Textarea = React__default.forwardRef(function Textarea(props, ref) {
      var onChange = props.onChange,
          rows = props.rows,
          rowsMax = props.rowsMax,
          style = props.style,
          value = props.value,
          other = objectWithoutProperties(props, ["onChange", "rows", "rowsMax", "style", "value"]);
  
      var _React$useRef = React__default.useRef(value != null),
          isControlled = _React$useRef.current;
  
      var inputRef = React__default.useRef(null);
  
      var _React$useState = React__default.useState({}),
          _React$useState2 = slicedToArray(_React$useState, 2),
          state = _React$useState2[0],
          setState = _React$useState2[1];
  
      var shadowRef = React__default.useRef(null);
      var handleRef = useForkRef(ref, inputRef);
      var syncHeight = React__default.useCallback(function () {
        var input = inputRef.current;
        var inputShallow = shadowRef.current;
        var computedStyle = window.getComputedStyle(input);
        inputShallow.style.width = computedStyle.width;
        inputShallow.value = input.value || props.placeholder || 'x'; // The height of the inner content
  
        var innerHeight = inputShallow.scrollHeight;
        var boxSizing = computedStyle['box-sizing']; // Measure height of a textarea with a single row
  
        inputShallow.value = 'x';
        var singleRowHeight = inputShallow.scrollHeight; // The height of the outer content
  
        var outerHeight = innerHeight;
  
        if (rows != null) {
          outerHeight = Math.max(Number(rows) * singleRowHeight, outerHeight);
        }
  
        if (rowsMax != null) {
          outerHeight = Math.min(Number(rowsMax) * singleRowHeight, outerHeight);
        }
  
        outerHeight = Math.max(outerHeight, singleRowHeight);
  
        if (boxSizing === 'content-box') {
          outerHeight -= getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');
        } else if (boxSizing === 'border-box') {
          outerHeight += getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width');
        }
  
        setState(function (prevState) {
          // Need a large enough different to update the height.
          // This prevents infinite rendering loop.
          if (innerHeight > 0 && Math.abs((prevState.innerHeight || 0) - innerHeight) > 1) {
            return {
              innerHeight: innerHeight,
              outerHeight: outerHeight
            };
          }
  
          return prevState;
        });
      }, [setState, rows, rowsMax, props.placeholder]);
      React__default.useEffect(function () {
        var handleResize = debounce_1(function () {
          syncHeight();
        }, 166); // Corresponds to 10 frames at 60 Hz.
  
        window.addEventListener('resize', handleResize);
        return function () {
          handleResize.clear();
          window.removeEventListener('resize', handleResize);
        };
      }, [syncHeight]);
      useEnhancedEffect$3(function () {
        syncHeight();
      });
  
      var handleChange = function handleChange(event) {
        if (!isControlled) {
          syncHeight();
        }
  
        if (onChange) {
          onChange(event);
        }
      };
  
      return React__default.createElement(React__default.Fragment, null, React__default.createElement("textarea", _extends_1({
        value: value,
        onChange: handleChange,
        ref: handleRef,
        style: _extends_1({
          height: state.outerHeight,
          overflow: state.outerHeight === state.innerHeight ? 'hidden' : null
        }, style)
      }, other)), React__default.createElement("textarea", {
        "aria-hidden": true,
        className: props.className,
        readOnly: true,
        ref: shadowRef,
        tabIndex: -1,
        style: _extends_1({}, styles$I.shadow, style)
      }));
    });
    Textarea.propTypes = {
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * @ignore
       */
      onChange: propTypes.func,
  
      /**
       * @ignore
       */
      placeholder: propTypes.string,
  
      /**
       * Minimum umber of rows to display.
       */
      rows: propTypes.oneOfType([propTypes.string, propTypes.number]),
  
      /**
       * Maximum number of rows to display.
       */
      rowsMax: propTypes.oneOfType([propTypes.string, propTypes.number]),
  
      /**
       * @ignore
       */
      style: propTypes.object,
  
      /**
       * @ignore
       */
      value: propTypes.any
    };
  
    // Supports determination of isControlled().
    // Controlled input accepts its current value as a prop.
    //
    // @see https://facebook.github.io/react/docs/forms.html#controlled-components
    // @param value
    // @returns {boolean} true if string (including '') or number (including zero)
    function hasValue(value) {
      return value != null && !(Array.isArray(value) && value.length === 0);
    } // Determine if field is empty or filled.
    // Response determines if label is presented above field or as placeholder.
    //
    // @param obj
    // @param SSR
    // @returns {boolean} False when not present or empty string.
    //                    True when any number or string with length.
  
    function isFilled(obj) {
      var SSR = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');
    } // Determine if an Input is adorned on start.
    // It's corresponding to the left with LTR.
    //
    // @param obj
    // @returns {boolean} False when no adornments.
    //                    True when adorned at the start.
  
    function isAdornedStart(obj) {
      return obj.startAdornment;
    }
  
    var styles$J = function styles(theme) {
      var light = theme.palette.type === 'light';
      var placeholder = {
        color: 'currentColor',
        opacity: light ? 0.42 : 0.5,
        transition: theme.transitions.create('opacity', {
          duration: theme.transitions.duration.shorter
        })
      };
      var placeholderHidden = {
        opacity: '0 !important'
      };
      var placeholderVisible = {
        opacity: light ? 0.42 : 0.5
      };
      return {
        /* Styles applied to the root element. */
        root: {
          // Mimics the default input display property used by browsers for an input.
          fontFamily: theme.typography.fontFamily,
          color: theme.palette.text.primary,
          fontSize: theme.typography.pxToRem(16),
          lineHeight: '1.1875em',
          // Reset (19px), match the native input line-height
          boxSizing: 'border-box',
          // Prevent padding issue with fullWidth.
          cursor: 'text',
          display: 'inline-flex',
          alignItems: 'center',
          '&$disabled': {
            color: theme.palette.text.disabled,
            cursor: 'default'
          }
        },
  
        /* Styles applied to the root element if the component is a descendant of `FormControl`. */
        formControl: {},
  
        /* Styles applied to the root element if the component is focused. */
        focused: {},
  
        /* Styles applied to the root element if `disabled={true}`. */
        disabled: {},
  
        /* Styles applied to the root element if `startAdornment` is provided. */
        adornedStart: {},
  
        /* Styles applied to the root element if `endAdornment` is provided. */
        adornedEnd: {},
  
        /* Styles applied to the root element if `error={true}`. */
        error: {},
  
        /* Styles applied to the `input` element if `margin="dense"`. */
        marginDense: {},
  
        /* Styles applied to the root element if `multiline={true}`. */
        multiline: {
          padding: "".concat(8 - 2, "px 0 ").concat(8 - 1, "px"),
          '&$marginDense': {
            paddingTop: 4 - 1
          }
        },
  
        /* Styles applied to the root element if `fullWidth={true}`. */
        fullWidth: {
          width: '100%'
        },
  
        /* Styles applied to the `input` element. */
        input: {
          font: 'inherit',
          color: 'currentColor',
          padding: "".concat(8 - 2, "px 0 ").concat(8 - 1, "px"),
          border: 0,
          boxSizing: 'content-box',
          background: 'none',
          height: '1.1875em',
          // Reset (19px), match the native input line-height
          margin: 0,
          // Reset for Safari
          // Remove grey highlight
          WebkitTapHighlightColor: 'transparent',
          display: 'block',
          // Make the flex item shrink with Firefox
          minWidth: 0,
          width: '100%',
          // Fix IE 11 width issue
          '&::-webkit-input-placeholder': placeholder,
          '&::-moz-placeholder': placeholder,
          // Firefox 19+
          '&:-ms-input-placeholder': placeholder,
          // IE 11
          '&::-ms-input-placeholder': placeholder,
          // Edge
          '&:focus': {
            outline: 0
          },
          // Reset Firefox invalid required input style
          '&:invalid': {
            boxShadow: 'none'
          },
          '&::-webkit-search-decoration': {
            // Remove the padding when type=search.
            '-webkit-appearance': 'none'
          },
          // Show and hide the placeholder logic
          'label[data-shrink=false] + $formControl &': {
            '&::-webkit-input-placeholder': placeholderHidden,
            '&::-moz-placeholder': placeholderHidden,
            // Firefox 19+
            '&:-ms-input-placeholder': placeholderHidden,
            // IE 11
            '&::-ms-input-placeholder': placeholderHidden,
            // Edge
            '&:focus::-webkit-input-placeholder': placeholderVisible,
            '&:focus::-moz-placeholder': placeholderVisible,
            // Firefox 19+
            '&:focus:-ms-input-placeholder': placeholderVisible,
            // IE 11
            '&:focus::-ms-input-placeholder': placeholderVisible // Edge
  
          },
          '&$disabled': {
            opacity: 1 // Reset iOS opacity
  
          }
        },
  
        /* Styles applied to the `input` element if `margin="dense"`. */
        inputMarginDense: {
          paddingTop: 4 - 1
        },
  
        /* Styles applied to the `input` element if `multiline={true}`. */
        inputMultiline: {
          height: 'auto',
          resize: 'none',
          padding: 0
        },
  
        /* Styles applied to the `input` element if `type="search"`. */
        inputTypeSearch: {
          // Improve type search style.
          '-moz-appearance': 'textfield',
          '-webkit-appearance': 'textfield'
        },
  
        /* Styles applied to the `input` element if `startAdornment` is provided. */
        inputAdornedStart: {},
  
        /* Styles applied to the `input` element if `endAdornment` is provided. */
        inputAdornedEnd: {}
      };
    };
    /**
     * `InputBase` contains as few styles as possible.
     * It aims to be a simple building block for creating an input.
     * It contains a load of style reset and some state logic.
     */
  
    var InputBase = React__default.forwardRef(function InputBase(props, ref) {
      var ariaDescribedby = props['aria-describedby'],
          autoComplete = props.autoComplete,
          autoFocus = props.autoFocus,
          classes = props.classes,
          classNameProp = props.className,
          defaultValue = props.defaultValue,
          disabled = props.disabled,
          endAdornment = props.endAdornment,
          error = props.error,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          id = props.id,
          _props$inputComponent = props.inputComponent,
          inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,
          _props$inputProps = props.inputProps;
      _props$inputProps = _props$inputProps === void 0 ? {} : _props$inputProps;
  
      var inputPropsClassName = _props$inputProps.className,
          inputPropsProp = objectWithoutProperties(_props$inputProps, ["className"]),
          inputRefProp = props.inputRef,
          margin = props.margin,
          _props$multiline = props.multiline,
          multiline = _props$multiline === void 0 ? false : _props$multiline,
          name = props.name,
          onBlur = props.onBlur,
          onChange = props.onChange,
          onClick = props.onClick,
          onEmpty = props.onEmpty,
          onFilled = props.onFilled,
          onFocus = props.onFocus,
          onKeyDown = props.onKeyDown,
          onKeyUp = props.onKeyUp,
          placeholder = props.placeholder,
          readOnly = props.readOnly,
          renderPrefix = props.renderPrefix,
          rows = props.rows,
          rowsMax = props.rowsMax,
          startAdornment = props.startAdornment,
          _props$type = props.type,
          type = _props$type === void 0 ? 'text' : _props$type,
          value = props.value,
          other = objectWithoutProperties(props, ["aria-describedby", "autoComplete", "autoFocus", "classes", "className", "defaultValue", "disabled", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "multiline", "name", "onBlur", "onChange", "onClick", "onEmpty", "onFilled", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderPrefix", "rows", "rowsMax", "startAdornment", "type", "value"]);
  
      var _React$useRef = React__default.useRef(value != null),
          isControlled = _React$useRef.current;
  
      var inputRef = React__default.useRef();
      var handleInputRefWarning = React__default.useCallback(function (instance) {
        warning_1(!instance || instance instanceof HTMLInputElement || instance.focus, ['Material-UI: you have provided a `inputComponent` to the input component', 'that does not correctly handle the `inputRef` property.', 'Make sure the `inputRef` property is called with a HTMLInputElement.'].join('\n'));
      }, []);
      var handleInputPropsRefProp = useForkRef(inputPropsProp.ref, handleInputRefWarning);
      var handleInputRefProp = useForkRef(inputRefProp, handleInputPropsRefProp);
      var handleInputRef = useForkRef(inputRef, handleInputRefProp);
  
      var _React$useState = React__default.useState(false),
          _React$useState2 = slicedToArray(_React$useState, 2),
          focused = _React$useState2[0],
          setFocused = _React$useState2[1];
  
      var muiFormControl = React__default.useContext(FormControlContext);
      var fcs = formControlState({
        props: props,
        muiFormControl: muiFormControl,
        states: ['disabled', 'error', 'margin', 'required', 'filled']
      });
      fcs.focused = muiFormControl ? muiFormControl.focused : focused; // The blur won't fire when the disabled state is set on a focused input.
      // We need to book keep the focused state manually.
  
      React__default.useEffect(function () {
        if (!muiFormControl && disabled && focused) {
          setFocused(false);
  
          if (onBlur) {
            onBlur();
          }
        }
      }, [muiFormControl, disabled, focused, onBlur]);
      var checkDirty = React__default.useCallback(function (obj) {
        if (isFilled(obj)) {
          if (muiFormControl && muiFormControl.onFilled) {
            muiFormControl.onFilled();
          }
  
          if (onFilled) {
            onFilled();
          }
  
          return;
        }
  
        if (muiFormControl && muiFormControl.onEmpty) {
          muiFormControl.onEmpty();
        }
  
        if (onEmpty) {
          onEmpty();
        }
      }, [muiFormControl, onEmpty, onFilled]);
      React__default.useEffect(function () {
        if (isControlled) {
          checkDirty({
            value: value
          });
        }
      }, [value, checkDirty, isControlled]);
      React__default.useEffect(function () {
        if (!isControlled) {
          checkDirty(inputRef.current);
        }
      }, [checkDirty, isControlled]);
  
      var handleFocus = function handleFocus(event) {
        // Fix a bug with IE 11 where the focus/blur events are triggered
        // while the input is disabled.
        if (fcs.disabled) {
          event.stopPropagation();
          return;
        }
  
        if (onFocus) {
          onFocus(event);
        }
  
        if (muiFormControl && muiFormControl.onFocus) {
          muiFormControl.onFocus(event);
        } else {
          setFocused(true);
        }
      };
  
      var handleBlur = function handleBlur(event) {
        if (onBlur) {
          onBlur(event);
        }
  
        if (muiFormControl && muiFormControl.onBlur) {
          muiFormControl.onBlur(event);
        } else {
          setFocused(false);
        }
      };
  
      var handleChange = function handleChange(event) {
        if (!isControlled) {
          checkDirty({
            value: (event.target || inputRef.current).value
          });
        } // Perform in the willUpdate
  
  
        if (onChange) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
  
          onChange.apply(void 0, [event].concat(args));
        }
      };
  
      var handleClick = function handleClick(event) {
        if (inputRef.current && event.currentTarget === event.target) {
          inputRef.current.focus();
        }
  
        if (onClick) {
          onClick(event);
        }
      };
  
      var InputComponent = inputComponent;
  
      var inputProps = _extends_1({}, inputPropsProp, {
        ref: handleInputRef
      });
  
      if (typeof InputComponent !== 'string') {
        inputProps = _extends_1({
          // Rename ref to inputRef as we don't know the
          // provided `inputComponent` structure.
          inputRef: handleInputRef,
          type: type
        }, inputProps, {
          ref: null
        });
      } else if (multiline) {
        if (rows && !rowsMax) {
          InputComponent = 'textarea';
        } else {
          inputProps = _extends_1({
            rows: rows,
            rowsMax: rowsMax
          }, inputProps);
          InputComponent = Textarea;
        }
      } else {
        inputProps = _extends_1({
          type: type
        }, inputProps);
      }
  
      return React__default.createElement("div", _extends_1({
        className: clsx(classes.root, classNameProp, fcs.disabled && classes.disabled, fcs.error && classes.error, fullWidth && classes.fullWidth, fcs.focused && classes.focused, muiFormControl && classes.formControl, fcs.margin === 'dense' && classes.marginDense, multiline && classes.multiline, startAdornment && classes.adornedStart, endAdornment && classes.adornedEnd),
        onClick: handleClick,
        ref: ref
      }, other), renderPrefix ? renderPrefix(_extends_1({}, fcs, {
        startAdornment: startAdornment
      })) : null, startAdornment, React__default.createElement(FormControlContext.Provider, {
        value: null
      }, React__default.createElement(InputComponent, _extends_1({
        "aria-invalid": fcs.error,
        "aria-describedby": ariaDescribedby,
        autoComplete: autoComplete,
        autoFocus: autoFocus,
        className: clsx(classes.input, inputPropsClassName, fcs.disabled && classes.disabled, type === 'search' && classes.inputTypeSearch, multiline && classes.inputMultiline, fcs.margin === 'dense' && classes.inputMarginDense, startAdornment && classes.inputAdornedStart, endAdornment && classes.inputAdornedEnd),
        defaultValue: defaultValue,
        disabled: fcs.disabled,
        id: id,
        name: name,
        onBlur: handleBlur,
        onChange: handleChange,
        onFocus: handleFocus,
        onKeyDown: onKeyDown,
        onKeyUp: onKeyUp,
        placeholder: placeholder,
        readOnly: readOnly,
        required: fcs.required,
        rows: rows,
        value: value
      }, inputProps))), endAdornment);
    });
    InputBase.propTypes = {
      /**
       * @ignore
       */
      'aria-describedby': propTypes.string,
  
      /**
       * This property helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: propTypes.string,
  
      /**
       * If `true`, the `input` element will be focused during the first mount.
       */
      autoFocus: propTypes.bool,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * The CSS class name of the wrapper element.
       */
      className: propTypes.string,
  
      /**
       * The default `input` element value. Use when the component is not controlled.
       */
      defaultValue: propTypes.any,
  
      /**
       * If `true`, the `input` element will be disabled.
       */
      disabled: propTypes.bool,
  
      /**
       * End `InputAdornment` for this component.
       */
      endAdornment: propTypes.node,
  
      /**
       * If `true`, the input will indicate an error. This is normally obtained via context from
       * FormControl.
       */
      error: propTypes.bool,
  
      /**
       * If `true`, the input will take up the full width of its container.
       */
      fullWidth: propTypes.bool,
  
      /**
       * The id of the `input` element.
       */
      id: propTypes.string,
  
      /**
       * The component used for the `input` element.
       * Either a string to use a DOM element or a component.
       */
      inputComponent: propTypes.elementType,
  
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: propTypes.object,
  
      /**
       * This property can be used to pass a ref callback to the `input` element.
       */
      inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  
      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: propTypes.oneOf(['dense', 'none']),
  
      /**
       * If `true`, a textarea element will be rendered.
       */
      multiline: propTypes.bool,
  
      /**
       * Name attribute of the `input` element.
       */
      name: propTypes.string,
  
      /**
       * @ignore
       */
      onBlur: propTypes.func,
  
      /**
       * Callback fired when the value is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value`.
       */
      onChange: propTypes.func,
  
      /**
       * @ignore
       */
      onClick: propTypes.func,
  
      /**
       * @ignore
       */
      onEmpty: propTypes.func,
  
      /**
       * @ignore
       */
      onFilled: propTypes.func,
  
      /**
       * @ignore
       */
      onFocus: propTypes.func,
  
      /**
       * @ignore
       */
      onKeyDown: propTypes.func,
  
      /**
       * @ignore
       */
      onKeyUp: propTypes.func,
  
      /**
       * The short hint displayed in the input before the user enters a value.
       */
      placeholder: propTypes.string,
  
      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: propTypes.bool,
  
      /**
       * @ignore
       */
      renderPrefix: propTypes.func,
  
      /**
       * If `true`, the `input` element will be required.
       */
      required: propTypes.bool,
  
      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: propTypes.oneOfType([propTypes.string, propTypes.number]),
  
      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      rowsMax: propTypes.oneOfType([propTypes.string, propTypes.number]),
  
      /**
       * Start `InputAdornment` for this component.
       */
      startAdornment: propTypes.node,
  
      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       */
      type: propTypes.string,
  
      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: propTypes.any
    };
    var InputBase$1 = withStyles$1(styles$J, {
      name: 'MuiInputBase'
    })(InputBase);
  
    var styles$K = function styles(theme) {
      var light = theme.palette.type === 'light';
      var bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
      var backgroundColor = light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.09)';
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'relative',
          backgroundColor: backgroundColor,
          borderTopLeftRadius: theme.shape.borderRadius,
          borderTopRightRadius: theme.shape.borderRadius,
          transition: theme.transitions.create('background-color', {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut
          }),
          '&:hover': {
            backgroundColor: light ? 'rgba(0, 0, 0, 0.13)' : 'rgba(255, 255, 255, 0.13)',
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: backgroundColor
            }
          },
          '&$focused': {
            backgroundColor: light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.09)'
          },
          '&$disabled': {
            backgroundColor: light ? 'rgba(0, 0, 0, 0.12)' : 'rgba(255, 255, 255, 0.12)'
          }
        },
  
        /* Styles applied to the root element if `disableUnderline={false}`. */
        underline: {
          '&:after': {
            borderBottom: "2px solid ".concat(theme.palette.primary[light ? 'dark' : 'light']),
            left: 0,
            bottom: 0,
            // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
            content: '""',
            position: 'absolute',
            right: 0,
            transform: 'scaleX(0)',
            transition: theme.transitions.create('transform', {
              duration: theme.transitions.duration.shorter,
              easing: theme.transitions.easing.easeOut
            }),
            pointerEvents: 'none' // Transparent to the hover style.
  
          },
          '&$focused:after': {
            transform: 'scaleX(1)'
          },
          '&$error:after': {
            borderBottomColor: theme.palette.error.main,
            transform: 'scaleX(1)' // error is always underlined in red
  
          },
          '&:before': {
            borderBottom: "1px solid ".concat(bottomLineColor),
            left: 0,
            bottom: 0,
            // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
            content: '"\\00a0"',
            position: 'absolute',
            right: 0,
            transition: theme.transitions.create('border-bottom-color', {
              duration: theme.transitions.duration.shorter
            }),
            pointerEvents: 'none' // Transparent to the hover style.
  
          },
          '&:hover:before': {
            borderBottom: "1px solid ".concat(theme.palette.text.primary)
          },
          '&$disabled:before': {
            borderBottomStyle: 'dotted'
          }
        },
  
        /* Styles applied to the root element if the component is focused. */
        focused: {},
  
        /* Styles applied to the root element if `disabled={true}`. */
        disabled: {},
  
        /* Styles applied to the root element if `startAdornment` is provided. */
        adornedStart: {
          paddingLeft: 12
        },
  
        /* Styles applied to the root element if `endAdornment` is provided. */
        adornedEnd: {
          paddingRight: 12
        },
  
        /* Styles applied to the root element if `error={true}`. */
        error: {},
  
        /* Styles applied to the `input` element if `margin="dense"`. */
        marginDense: {},
  
        /* Styles applied to the root element if `multiline={true}`. */
        multiline: {
          padding: '27px 12px 10px',
          '&$marginDense': {
            paddingTop: 23,
            paddingBottom: 6
          }
        },
  
        /* Styles applied to the `input` element. */
        input: {
          padding: '27px 12px 10px'
        },
  
        /* Styles applied to the `input` element if `margin="dense"`. */
        inputMarginDense: {
          paddingTop: 23,
          paddingBottom: 6
        },
  
        /* Styles applied to the `input` element if `multiline={true}`. */
        inputMultiline: {
          padding: 0
        },
  
        /* Styles applied to the `input` element if `startAdornment` is provided. */
        inputAdornedStart: {
          paddingLeft: 0
        },
  
        /* Styles applied to the `input` element if `endAdornment` is provided. */
        inputAdornedEnd: {
          paddingRight: 0
        }
      };
    };
    var FilledInput = React__default.forwardRef(function FilledInput(props, ref) {
      var disableUnderline = props.disableUnderline,
          classes = props.classes,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          _props$inputComponent = props.inputComponent,
          inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,
          _props$multiline = props.multiline,
          multiline = _props$multiline === void 0 ? false : _props$multiline,
          _props$type = props.type,
          type = _props$type === void 0 ? 'text' : _props$type,
          other = objectWithoutProperties(props, ["disableUnderline", "classes", "fullWidth", "inputComponent", "multiline", "type"]);
  
      return React__default.createElement(InputBase$1, _extends_1({
        classes: _extends_1({}, classes, {
          root: clsx(classes.root, !disableUnderline && classes.underline),
          underline: null
        }),
        fullWidth: fullWidth,
        inputComponent: inputComponent,
        multiline: multiline,
        ref: ref,
        type: type
      }, other));
    });
    FilledInput.propTypes = {
      /**
       * This property helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: propTypes.string,
  
      /**
       * If `true`, the `input` element will be focused during the first mount.
       */
      autoFocus: propTypes.bool,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * The CSS class name of the wrapper element.
       */
      className: propTypes.string,
  
      /**
       * The default `input` element value. Use when the component is not controlled.
       */
      defaultValue: propTypes.any,
  
      /**
       * If `true`, the `input` element will be disabled.
       */
      disabled: propTypes.bool,
  
      /**
       * If `true`, the input will not have an underline.
       */
      disableUnderline: propTypes.bool,
  
      /**
       * End `InputAdornment` for this component.
       */
      endAdornment: propTypes.node,
  
      /**
       * If `true`, the input will indicate an error. This is normally obtained via context from
       * FormControl.
       */
      error: propTypes.bool,
  
      /**
       * If `true`, the input will take up the full width of its container.
       */
      fullWidth: propTypes.bool,
  
      /**
       * The id of the `input` element.
       */
      id: propTypes.string,
  
      /**
       * The component used for the native input.
       * Either a string to use a DOM element or a component.
       */
      inputComponent: propTypes.elementType,
  
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: propTypes.object,
  
      /**
       * This property can be used to pass a ref callback to the `input` element.
       */
      inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  
      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: propTypes.oneOf(['dense', 'none']),
  
      /**
       * If `true`, a textarea element will be rendered.
       */
      multiline: propTypes.bool,
  
      /**
       * Name attribute of the `input` element.
       */
      name: propTypes.string,
  
      /**
       * Callback fired when the value is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value`.
       */
      onChange: propTypes.func,
  
      /**
       * The short hint displayed in the input before the user enters a value.
       */
      placeholder: propTypes.string,
  
      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: propTypes.bool,
  
      /**
       * If `true`, the `input` element will be required.
       */
      required: propTypes.bool,
  
      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: propTypes.oneOfType([propTypes.string, propTypes.number]),
  
      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      rowsMax: propTypes.oneOfType([propTypes.string, propTypes.number]),
  
      /**
       * Start `InputAdornment` for this component.
       */
      startAdornment: propTypes.node,
  
      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       */
      type: propTypes.string,
  
      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: propTypes.any
    };
    FilledInput.muiName = 'Input';
    var FilledInput$1 = withStyles$1(styles$K, {
      name: 'MuiFilledInput'
    })(FilledInput);
  
    var styles$L = {
      /* Styles applied to the root element. */
      root: {
        display: 'inline-flex',
        flexDirection: 'column',
        position: 'relative',
        // Reset fieldset default style.
        minWidth: 0,
        padding: 0,
        margin: 0,
        border: 0,
        verticalAlign: 'top' // Fix alignment issue on Safari.
  
      },
  
      /* Styles applied to the root element if `margin="normal"`. */
      marginNormal: {
        marginTop: 16,
        marginBottom: 8
      },
  
      /* Styles applied to the root element if `margin="dense"`. */
      marginDense: {
        marginTop: 8,
        marginBottom: 4
      },
  
      /* Styles applied to the root element if `fullWidth={true}`. */
      fullWidth: {
        width: '100%'
      }
    };
    /**
     * Provides context such as filled/focused/error/required for form inputs.
     * Relying on the context provides high flexibility and ensures that the state always stays
     * consistent across the children of the `FormControl`.
     * This context is used by the following components:
     *
     *  - FormLabel
     *  - FormHelperText
     *  - Input
     *  - InputLabel
     *
     * You can find one composition example below and more going to [the demos](/components/text-fields/#components).
     *
     * ```jsx
     * <FormControl>
     *   <InputLabel htmlFor="my-input">Email address</InputLabel>
     *   <Input id="my-input" aria-describedby="my-helper-text" />
     *   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
     * </FormControl>
     * ```
     *
     * ⚠️Only one input can be used within a FormControl.
     */
  
    var FormControl = React__default.forwardRef(function FormControl(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$error = props.error,
          error = _props$error === void 0 ? false : _props$error,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          _props$margin = props.margin,
          margin = _props$margin === void 0 ? 'none' : _props$margin,
          _props$required = props.required,
          required = _props$required === void 0 ? false : _props$required,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'standard' : _props$variant,
          other = objectWithoutProperties(props, ["children", "classes", "className", "component", "disabled", "error", "fullWidth", "margin", "required", "variant"]);
  
      var _React$useState = React__default.useState(function () {
        // We need to iterate through the children and find the Input in order
        // to fully support server-side rendering.
        var initialAdornedStart = false;
  
        if (children) {
          React__default.Children.forEach(children, function (child) {
            if (!isMuiElement(child, ['Input', 'Select'])) {
              return;
            }
  
            var input = isMuiElement(child, ['Select']) ? child.props.input : child;
  
            if (input && isAdornedStart(input.props)) {
              initialAdornedStart = true;
            }
          });
        }
  
        return initialAdornedStart;
      }),
          _React$useState2 = slicedToArray(_React$useState, 1),
          adornedStart = _React$useState2[0];
  
      var _React$useState3 = React__default.useState(function () {
        // We need to iterate through the children and find the Input in order
        // to fully support server-side rendering.
        var initialFilled = false;
  
        if (children) {
          React__default.Children.forEach(children, function (child) {
            if (!isMuiElement(child, ['Input', 'Select'])) {
              return;
            }
  
            if (isFilled(child.props, true)) {
              initialFilled = true;
            }
          });
        }
  
        return initialFilled;
      }),
          _React$useState4 = slicedToArray(_React$useState3, 2),
          filled = _React$useState4[0],
          setFilled = _React$useState4[1];
  
      var _React$useState5 = React__default.useState(false),
          _React$useState6 = slicedToArray(_React$useState5, 2),
          focused = _React$useState6[0],
          setFocused = _React$useState6[1];
  
      if (disabled && focused) {
        setFocused(false);
      }
  
      var handleFocus = function handleFocus() {
        setFocused(true);
      };
  
      var handleBlur = function handleBlur() {
        setFocused(false);
      };
  
      var handleDirty = function handleDirty() {
        if (!filled) {
          setFilled(true);
        }
      };
  
      var handleClean = function handleClean() {
        if (filled) {
          setFilled(false);
        }
      };
  
      var childContext = {
        adornedStart: adornedStart,
        disabled: disabled,
        error: error,
        filled: filled,
        focused: focused,
        margin: margin,
        onBlur: handleBlur,
        onEmpty: handleClean,
        onFilled: handleDirty,
        onFocus: handleFocus,
        required: required,
        variant: variant
      };
      return React__default.createElement(FormControlContext.Provider, {
        value: childContext
      }, React__default.createElement(Component, _extends_1({
        className: clsx(classes.root, className, margin !== 'none' && classes["margin".concat(capitalize(margin))], fullWidth && classes.fullWidth),
        ref: ref
      }, other), children));
    });
    FormControl.propTypes = {
      /**
       * The contents of the form control.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * If `true`, the label, input and helper text should be displayed in a disabled state.
       */
      disabled: propTypes.bool,
  
      /**
       * If `true`, the label should be displayed in an error state.
       */
      error: propTypes.bool,
  
      /**
       * If `true`, the component will take up the full width of its container.
       */
      fullWidth: propTypes.bool,
  
      /**
       * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
       */
      margin: propTypes.oneOf(['none', 'dense', 'normal']),
  
      /**
       * If `true`, the label will indicate that the input is required.
       */
      required: propTypes.bool,
  
      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['standard', 'outlined', 'filled'])
    };
    var FormControl$1 = withStyles$1(styles$L, {
      name: 'MuiFormControl'
    })(FormControl);
  
    var styles$M = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'inline-flex',
          alignItems: 'center',
          cursor: 'pointer',
          // For correct alignment with the text.
          verticalAlign: 'middle',
          // Remove grey highlight
          WebkitTapHighlightColor: 'transparent',
          marginLeft: -11,
          marginRight: 16,
          // used for row presentation of radio/checkbox
          '&$disabled': {
            cursor: 'default'
          }
        },
  
        /* Styles applied to the root element if `labelPlacement="start"`. */
        labelPlacementStart: {
          flexDirection: 'row-reverse',
          marginLeft: 16,
          // used for row presentation of radio/checkbox
          marginRight: -11
        },
  
        /* Styles applied to the root element if `labelPlacement="top"`. */
        labelPlacementTop: {
          flexDirection: 'column-reverse',
          marginLeft: 16
        },
  
        /* Styles applied to the root element if `labelPlacement="bottom"`. */
        labelPlacementBottom: {
          flexDirection: 'column',
          marginLeft: 16
        },
  
        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},
  
        /* Styles applied to the label's Typography component. */
        label: {
          '&$disabled': {
            color: theme.palette.text.disabled
          }
        }
      };
    };
    /**
     * Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.
     * Use this component if you want to display an extra label.
     */
  
    var FormControlLabel = React__default.forwardRef(function FormControlLabel(props, ref) {
      var checked = props.checked,
          classes = props.classes,
          classNameProp = props.className,
          control = props.control,
          disabledProp = props.disabled,
          inputRef = props.inputRef,
          label = props.label,
          _props$labelPlacement = props.labelPlacement,
          labelPlacement = _props$labelPlacement === void 0 ? 'end' : _props$labelPlacement,
          muiFormControl = props.muiFormControl,
          name = props.name,
          onChange = props.onChange,
          value = props.value,
          other = objectWithoutProperties(props, ["checked", "classes", "className", "control", "disabled", "inputRef", "label", "labelPlacement", "muiFormControl", "name", "onChange", "value"]);
  
      var disabled = disabledProp;
  
      if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {
        disabled = control.props.disabled;
      }
  
      if (typeof disabled === 'undefined' && muiFormControl) {
        disabled = muiFormControl.disabled;
      }
  
      var controlProps = {
        disabled: disabled
      };
      ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(function (key) {
        if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {
          controlProps[key] = props[key];
        }
      });
      return React__default.createElement("label", _extends_1({
        className: clsx(classes.root, classNameProp, labelPlacement !== 'end' && classes["labelPlacement".concat(capitalize(labelPlacement))], disabled && classes.disabled),
        ref: ref
      }, other), React__default.cloneElement(control, controlProps), React__default.createElement(Typography$1, {
        component: "span",
        className: clsx(classes.label, disabled && classes.disabled)
      }, label));
    });
    FormControlLabel.propTypes = {
      /**
       * If `true`, the component appears selected.
       */
      checked: propTypes.bool,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`.
       */
      control: propTypes.element,
  
      /**
       * If `true`, the control will be disabled.
       */
      disabled: propTypes.bool,
  
      /**
       * This property can be used to pass a ref callback to the `input` element.
       */
      inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  
      /**
       * The text to be used in an enclosing label element.
       */
      label: propTypes.node,
  
      /**
       * The position of the label.
       */
      labelPlacement: propTypes.oneOf(['end', 'start', 'top', 'bottom']),
  
      /**
       * @ignore
       */
      muiFormControl: propTypes.object,
  
      /*
       * @ignore
       */
      name: propTypes.string,
  
      /**
       * Callback fired when the state is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.checked`.
       * @param {boolean} checked The `checked` value of the switch
       */
      onChange: propTypes.func,
  
      /**
       * The value of the component.
       */
      value: propTypes.any
    };
    var FormControlLabel$1 = withStyles$1(styles$M, {
      name: 'MuiFormControlLabel'
    })(withFormControlContext(FormControlLabel));
  
    var styles$N = {
      /* Styles applied to the root element. */
      root: {
        display: 'flex',
        flexDirection: 'column',
        flexWrap: 'wrap'
      },
  
      /* Styles applied to the root element if `row={true}`. */
      row: {
        flexDirection: 'row'
      }
    };
    /**
     * `FormGroup` wraps controls such as `Checkbox` and `Switch`.
     * It provides compact row layout.
     * For the `Radio`, you should be using the `RadioGroup` component instead of this one.
     */
  
    var FormGroup = React__default.forwardRef(function FormGroup(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$row = props.row,
          row = _props$row === void 0 ? false : _props$row,
          other = objectWithoutProperties(props, ["classes", "className", "row"]);
  
      return React__default.createElement("div", _extends_1({
        className: clsx(classes.root, className, row && classes.row),
        ref: ref
      }, other));
    });
    FormGroup.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * Display group of elements in a compact row.
       */
      row: propTypes.bool
    };
    var FormGroup$1 = withStyles$1(styles$N, {
      name: 'MuiFormGroup'
    })(FormGroup);
  
    var styles$O = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: _extends_1({
          color: theme.palette.text.secondary
        }, theme.typography.caption, {
          textAlign: 'left',
          marginTop: 8,
          lineHeight: '1em',
          minHeight: '1em',
          margin: 0,
          '&$disabled': {
            color: theme.palette.text.disabled
          },
          '&$error': {
            color: theme.palette.error.main
          }
        }),
  
        /* Pseudo-class applied to the root element if `error={true}`. */
        error: {},
  
        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},
  
        /* Styles applied to the root element if `margin="dense"`. */
        marginDense: {
          marginTop: 4
        },
  
        /* Styles applied to the root element if `variant="filled"` or `variant="outlined"`. */
        contained: {
          margin: '8px 12px 0'
        },
  
        /* Pseudo-class applied to the root element if `focused={true}`. */
        focused: {},
  
        /* Pseudo-class applied to the root element if `filled={true}`. */
        filled: {},
  
        /* Pseudo-class applied to the root element if `required={true}`. */
        required: {}
      };
    };
    var FormHelperText = React__default.forwardRef(function FormHelperText(props, ref) {
      var classes = props.classes,
          classNameProp = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'p' : _props$component,
          disabled = props.disabled,
          error = props.error,
          filled = props.filled,
          focused = props.focused,
          margin = props.margin,
          muiFormControl = props.muiFormControl,
          required = props.required,
          variant = props.variant,
          other = objectWithoutProperties(props, ["classes", "className", "component", "disabled", "error", "filled", "focused", "margin", "muiFormControl", "required", "variant"]);
  
      var fcs = formControlState({
        props: props,
        muiFormControl: muiFormControl,
        states: ['variant', 'margin', 'disabled', 'error', 'filled', 'focused', 'required']
      });
      return React__default.createElement(Component, _extends_1({
        className: clsx(classes.root, (fcs.variant === 'filled' || fcs.variant === 'outlined') && classes.contained, classNameProp, fcs.margin === 'dense' && classes.marginDense, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required),
        ref: ref
      }, other));
    });
    FormHelperText.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * If `true`, the helper text should be displayed in a disabled state.
       */
      disabled: propTypes.bool,
  
      /**
       * If `true`, helper text should be displayed in an error state.
       */
      error: propTypes.bool,
  
      /**
       * If `true`, the helper text should use filled classes key.
       */
      filled: propTypes.bool,
  
      /**
       * If `true`, the helper text should use focused classes key.
       */
      focused: propTypes.bool,
  
      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: propTypes.oneOf(['dense']),
  
      /**
       * @ignore
       */
      muiFormControl: propTypes.object,
  
      /**
       * If `true`, the helper text should use required classes key.
       */
      required: propTypes.bool,
  
      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['standard', 'outlined', 'filled'])
    };
    var FormHelperText$1 = withStyles$1(styles$O, {
      name: 'MuiFormHelperText'
    })(withFormControlContext(FormHelperText));
  
    var styles$P = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: _extends_1({
          color: theme.palette.text.secondary
        }, theme.typography.body1, {
          lineHeight: 1,
          padding: 0,
          '&$focused': {
            color: theme.palette.primary[theme.palette.type === 'light' ? 'dark' : 'light']
          },
          '&$disabled': {
            color: theme.palette.text.disabled
          },
          '&$error': {
            color: theme.palette.error.main
          }
        }),
  
        /* Pseudo-class applied to the root element if `focused={true}`. */
        focused: {},
  
        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},
  
        /* Pseudo-class applied to the root element if `error={true}`. */
        error: {},
  
        /* Pseudo-class applied to the root element if `filled={true}`. */
        filled: {},
  
        /* Pseudo-class applied to the root element if `required={true}`. */
        required: {},
  
        /* Styles applied to the asterisk element. */
        asterisk: {
          '&$error': {
            color: theme.palette.error.main
          }
        }
      };
    };
    var FormLabel = React__default.forwardRef(function FormLabel(props, ref) {
      var children = props.children,
          classes = props.classes,
          classNameProp = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'label' : _props$component,
          disabled = props.disabled,
          error = props.error,
          filled = props.filled,
          focused = props.focused,
          muiFormControl = props.muiFormControl,
          required = props.required,
          other = objectWithoutProperties(props, ["children", "classes", "className", "component", "disabled", "error", "filled", "focused", "muiFormControl", "required"]);
  
      var fcs = formControlState({
        props: props,
        muiFormControl: muiFormControl,
        states: ['required', 'focused', 'disabled', 'error', 'filled']
      });
      return React__default.createElement(Component, _extends_1({
        className: clsx(classes.root, classNameProp, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required),
        ref: ref
      }, other), children, fcs.required && React__default.createElement("span", {
        className: clsx(classes.asterisk, fcs.error && classes.error)
      }, "\u2009", '*'));
    });
    FormLabel.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * If `true`, the label should be displayed in a disabled state.
       */
      disabled: propTypes.bool,
  
      /**
       * If `true`, the label should be displayed in an error state.
       */
      error: propTypes.bool,
  
      /**
       * If `true`, the label should use filled classes key.
       */
      filled: propTypes.bool,
  
      /**
       * If `true`, the input of this label is focused (used by `FormGroup` components).
       */
      focused: propTypes.bool,
  
      /**
       * @ignore
       */
      muiFormControl: propTypes.object,
  
      /**
       * If `true`, the label will indicate that the input is required.
       */
      required: propTypes.bool
    };
    var FormLabel$1 = withStyles$1(styles$P, {
      name: 'MuiFormLabel'
    })(withFormControlContext(FormLabel));
  
    var SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    var GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  
    function generateGrid(globalStyles, theme, breakpoint) {
      var styles = {};
      GRID_SIZES.forEach(function (size) {
        var key = "grid-".concat(breakpoint, "-").concat(size);
  
        if (size === true) {
          // For the auto layouting
          styles[key] = {
            flexBasis: 0,
            flexGrow: 1,
            maxWidth: '100%'
          };
          return;
        }
  
        if (size === 'auto') {
          styles[key] = {
            flexBasis: 'auto',
            flexGrow: 0,
            maxWidth: 'none'
          };
          return;
        } // Keep 7 significant numbers.
  
  
        var width = "".concat(Math.round(size / 12 * 10e7) / 10e5, "%"); // Close to the bootstrap implementation:
        // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41
  
        styles[key] = {
          flexBasis: width,
          flexGrow: 0,
          maxWidth: width
        };
      }); // No need for a media query for the first size.
  
      if (breakpoint === 'xs') {
        _extends_1(globalStyles, styles);
      } else {
        globalStyles[theme.breakpoints.up(breakpoint)] = styles;
      }
    }
  
    function generateGutter(theme, breakpoint) {
      var styles = {};
      SPACINGS.forEach(function (spacing) {
        var themeSpacing = theme.spacing(spacing);
  
        if (themeSpacing === 0) {
          return;
        }
  
        styles["spacing-".concat(breakpoint, "-").concat(spacing)] = {
          margin: -themeSpacing / 2,
          width: "calc(100% + ".concat(themeSpacing, "px)"),
          '& > $item': {
            padding: themeSpacing / 2
          }
        };
      });
      return styles;
    } // Default CSS values
    // flex: '0 1 auto',
    // flexDirection: 'row',
    // alignItems: 'flex-start',
    // flexWrap: 'nowrap',
    // justifyContent: 'flex-start',
  
  
    var styles$Q = function styles(theme) {
      return _extends_1({
        /* Styles applied to the root element */
        root: {},
  
        /* Styles applied to the root element if `container={true}`. */
        container: {
          boxSizing: 'border-box',
          display: 'flex',
          flexWrap: 'wrap',
          width: '100%'
        },
  
        /* Styles applied to the root element if `item={true}`. */
        item: {
          boxSizing: 'border-box',
          margin: '0' // For instance, it's useful when used with a `figure` element.
  
        },
  
        /* Styles applied to the root element if `zeroMinWidth={true}`. */
        zeroMinWidth: {
          minWidth: 0
        },
  
        /* Styles applied to the root element if `direction="column"`. */
        'direction-xs-column': {
          flexDirection: 'column'
        },
  
        /* Styles applied to the root element if `direction="column-reverse"`. */
        'direction-xs-column-reverse': {
          flexDirection: 'column-reverse'
        },
  
        /* Styles applied to the root element if `direction="rwo-reverse"`. */
        'direction-xs-row-reverse': {
          flexDirection: 'row-reverse'
        },
  
        /* Styles applied to the root element if `wrap="nowrap"`. */
        'wrap-xs-nowrap': {
          flexWrap: 'nowrap'
        },
  
        /* Styles applied to the root element if `wrap="reverse"`. */
        'wrap-xs-wrap-reverse': {
          flexWrap: 'wrap-reverse'
        },
  
        /* Styles applied to the root element if `alignItems="center"`. */
        'align-items-xs-center': {
          alignItems: 'center'
        },
  
        /* Styles applied to the root element if `alignItems="flex-start"`. */
        'align-items-xs-flex-start': {
          alignItems: 'flex-start'
        },
  
        /* Styles applied to the root element if `alignItems="flex-end"`. */
        'align-items-xs-flex-end': {
          alignItems: 'flex-end'
        },
  
        /* Styles applied to the root element if `alignItems="baseline"`. */
        'align-items-xs-baseline': {
          alignItems: 'baseline'
        },
  
        /* Styles applied to the root element if `alignContent="center"`. */
        'align-content-xs-center': {
          alignContent: 'center'
        },
  
        /* Styles applied to the root element if `alignContent="flex-start"`. */
        'align-content-xs-flex-start': {
          alignContent: 'flex-start'
        },
  
        /* Styles applied to the root element if `alignContent="flex-end"`. */
        'align-content-xs-flex-end': {
          alignContent: 'flex-end'
        },
  
        /* Styles applied to the root element if `alignContent="space-between"`. */
        'align-content-xs-space-between': {
          alignContent: 'space-between'
        },
  
        /* Styles applied to the root element if `alignContent="space-around"`. */
        'align-content-xs-space-around': {
          alignContent: 'space-around'
        },
  
        /* Styles applied to the root element if `justify="center"`. */
        'justify-xs-center': {
          justifyContent: 'center'
        },
  
        /* Styles applied to the root element if `justify="flex-end"`. */
        'justify-xs-flex-end': {
          justifyContent: 'flex-end'
        },
  
        /* Styles applied to the root element if `justify="space-between"`. */
        'justify-xs-space-between': {
          justifyContent: 'space-between'
        },
  
        /* Styles applied to the root element if `justify="space-around"`. */
        'justify-xs-space-around': {
          justifyContent: 'space-around'
        },
  
        /* Styles applied to the root element if `justify="space-evenly"`. */
        'justify-xs-space-evenly': {
          justifyContent: 'space-evenly'
        }
      }, generateGutter(theme, 'xs'), keys.reduce(function (accumulator, key) {
        // Use side effect over immutability for better performance.
        generateGrid(accumulator, theme, key);
        return accumulator;
      }, {}));
    };
    var Grid = React__default.forwardRef(function (props, ref) {
      var _props$alignContent = props.alignContent,
          alignContent = _props$alignContent === void 0 ? 'stretch' : _props$alignContent,
          _props$alignItems = props.alignItems,
          alignItems = _props$alignItems === void 0 ? 'stretch' : _props$alignItems,
          classes = props.classes,
          classNameProp = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _props$container = props.container,
          container = _props$container === void 0 ? false : _props$container,
          _props$direction = props.direction,
          direction = _props$direction === void 0 ? 'row' : _props$direction,
          _props$item = props.item,
          item = _props$item === void 0 ? false : _props$item,
          _props$justify = props.justify,
          justify = _props$justify === void 0 ? 'flex-start' : _props$justify,
          _props$lg = props.lg,
          lg = _props$lg === void 0 ? false : _props$lg,
          _props$md = props.md,
          md = _props$md === void 0 ? false : _props$md,
          _props$sm = props.sm,
          sm = _props$sm === void 0 ? false : _props$sm,
          _props$spacing = props.spacing,
          spacing = _props$spacing === void 0 ? 0 : _props$spacing,
          _props$wrap = props.wrap,
          wrap = _props$wrap === void 0 ? 'wrap' : _props$wrap,
          _props$xl = props.xl,
          xl = _props$xl === void 0 ? false : _props$xl,
          _props$xs = props.xs,
          xs = _props$xs === void 0 ? false : _props$xs,
          _props$zeroMinWidth = props.zeroMinWidth,
          zeroMinWidth = _props$zeroMinWidth === void 0 ? false : _props$zeroMinWidth,
          other = objectWithoutProperties(props, ["alignContent", "alignItems", "classes", "className", "component", "container", "direction", "item", "justify", "lg", "md", "sm", "spacing", "wrap", "xl", "xs", "zeroMinWidth"]);
  
      var className = clsx(classes.root, classNameProp, container && [classes.container, spacing !== 0 && classes["spacing-xs-".concat(String(spacing))]], item && classes.item, zeroMinWidth && classes.zeroMinWidth, direction !== 'row' && classes["direction-xs-".concat(String(direction))], wrap !== 'wrap' && classes["wrap-xs-".concat(String(wrap))], alignItems !== 'stretch' && classes["align-items-xs-".concat(String(alignItems))], alignContent !== 'stretch' && classes["align-content-xs-".concat(String(alignContent))], justify !== 'flex-start' && classes["justify-xs-".concat(String(justify))], xs !== false && classes["grid-xs-".concat(String(xs))], sm !== false && classes["grid-sm-".concat(String(sm))], md !== false && classes["grid-md-".concat(String(md))], lg !== false && classes["grid-lg-".concat(String(lg))], xl !== false && classes["grid-xl-".concat(String(xl))]);
      return React__default.createElement(Component, _extends_1({
        className: className,
        ref: ref
      }, other));
    });
  
    {
      // can't use named function expression since the function body references `Grid`
      // which would point to the render function instead of the actual component
      Grid.displayName = 'ForwardRef(Grid)';
    }
  
    Grid.propTypes = {
      /**
       * Defines the `align-content` style property.
       * It's applied for all screen sizes.
       */
      alignContent: propTypes.oneOf(['stretch', 'center', 'flex-start', 'flex-end', 'space-between', 'space-around']),
  
      /**
       * Defines the `align-items` style property.
       * It's applied for all screen sizes.
       */
      alignItems: propTypes.oneOf(['flex-start', 'center', 'flex-end', 'stretch', 'baseline']),
  
      /**
       * The content of the component.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * If `true`, the component will have the flex *container* behavior.
       * You should be wrapping *items* with a *container*.
       */
      container: propTypes.bool,
  
      /**
       * Defines the `flex-direction` style property.
       * It is applied for all screen sizes.
       */
      direction: propTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),
  
      /**
       * If `true`, the component will have the flex *item* behavior.
       * You should be wrapping *items* with a *container*.
       */
      item: propTypes.bool,
  
      /**
       * Defines the `justify-content` style property.
       * It is applied for all screen sizes.
       */
      justify: propTypes.oneOf(['flex-start', 'center', 'flex-end', 'space-between', 'space-around', 'space-evenly']),
  
      /**
       * Defines the number of grids the component is going to use.
       * It's applied for the `lg` breakpoint and wider screens if not overridden.
       */
      lg: propTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
  
      /**
       * Defines the number of grids the component is going to use.
       * It's applied for the `md` breakpoint and wider screens if not overridden.
       */
      md: propTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
  
      /**
       * Defines the number of grids the component is going to use.
       * It's applied for the `sm` breakpoint and wider screens if not overridden.
       */
      sm: propTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
  
      /**
       * Defines the space between the type `item` component.
       * It can only be used on a type `container` component.
       */
      spacing: propTypes.oneOf(SPACINGS),
  
      /**
       * Defines the `flex-wrap` style property.
       * It's applied for all screen sizes.
       */
      wrap: propTypes.oneOf(['nowrap', 'wrap', 'wrap-reverse']),
  
      /**
       * Defines the number of grids the component is going to use.
       * It's applied for the `xl` breakpoint and wider screens.
       */
      xl: propTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
  
      /**
       * Defines the number of grids the component is going to use.
       * It's applied for all the screen sizes with the lowest priority.
       */
      xs: propTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
  
      /**
       * If `true`, it sets `min-width: 0` on the item.
       * Refer to the limitations section of the documentation to better understand the use case.
       */
      zeroMinWidth: propTypes.bool
    };
    var StyledGrid = withStyles$1(styles$Q, {
      name: 'MuiGrid'
    })(Grid);
  
    {
      var requireProp = requirePropFactory('Grid');
      StyledGrid.propTypes = _extends_1({}, StyledGrid.propTypes, {
        alignContent: requireProp('container'),
        alignItems: requireProp('container'),
        direction: requireProp('container'),
        justify: requireProp('container'),
        lg: requireProp('item'),
        md: requireProp('item'),
        sm: requireProp('item'),
        spacing: requireProp('container'),
        wrap: requireProp('container'),
        xs: requireProp('item'),
        zeroMinWidth: requireProp('item')
      });
    }
  
    var styles$R = {
      /* Styles applied to the root element. */
      root: {
        display: 'flex',
        flexWrap: 'wrap',
        overflowY: 'auto',
        listStyle: 'none',
        padding: 0,
        WebkitOverflowScrolling: 'touch' // Add iOS momentum scrolling.
  
      }
    };
    var GridList = React__default.forwardRef(function GridList(props, ref) {
      var _props$cellHeight = props.cellHeight,
          cellHeight = _props$cellHeight === void 0 ? 180 : _props$cellHeight,
          children = props.children,
          classes = props.classes,
          classNameProp = props.className,
          _props$cols = props.cols,
          cols = _props$cols === void 0 ? 2 : _props$cols,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'ul' : _props$component,
          _props$spacing = props.spacing,
          spacing = _props$spacing === void 0 ? 4 : _props$spacing,
          style = props.style,
          other = objectWithoutProperties(props, ["cellHeight", "children", "classes", "className", "cols", "component", "spacing", "style"]);
  
      return React__default.createElement(Component, _extends_1({
        className: clsx(classes.root, classNameProp),
        ref: ref,
        style: _extends_1({
          margin: -spacing / 2
        }, style)
      }, other), React__default.Children.map(children, function (child) {
        if (!React__default.isValidElement(child)) {
          return null;
        }
  
        warning_1(child.type !== React__default.Fragment, ["Material-UI: the GridList component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
        var childCols = child.props.cols || 1;
        var childRows = child.props.rows || 1;
        return React__default.cloneElement(child, {
          style: _extends_1({
            width: "".concat(100 / cols * childCols, "%"),
            height: cellHeight === 'auto' ? 'auto' : cellHeight * childRows + spacing,
            padding: spacing / 2
          }, child.props.style)
        });
      }));
    });
    GridList.propTypes = {
      /**
       * Number of px for one cell height.
       * You can set `'auto'` if you want to let the children determine the height.
       */
      cellHeight: propTypes.oneOfType([propTypes.number, propTypes.oneOf(['auto'])]),
  
      /**
       * Grid Tiles that will be in Grid List.
       */
      children: propTypes.node.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * Number of columns.
       */
      cols: propTypes.number,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * Number of px for the spacing between tiles.
       */
      spacing: propTypes.number,
  
      /**
       * @ignore
       */
      style: propTypes.object
    };
    var GridList$1 = withStyles$1(styles$R, {
      name: 'MuiGridList'
    })(GridList);
  
    var styles$S = {
      /* Styles applied to the root element. */
      root: {
        boxSizing: 'border-box',
        flexShrink: 0
      },
  
      /* Styles applied to the `div` element that wraps the children. */
      tile: {
        position: 'relative',
        display: 'block',
        // In case it's not rendered with a div.
        height: '100%',
        overflow: 'hidden'
      },
  
      /* Styles applied to an `img` element child, if needed to ensure it covers the tile. */
      imgFullHeight: {
        height: '100%',
        transform: 'translateX(-50%)',
        position: 'relative',
        left: '50%'
      },
  
      /* Styles applied to an `img` element child, if needed to ensure it covers the tile. */
      imgFullWidth: {
        width: '100%',
        position: 'relative',
        transform: 'translateY(-50%)',
        top: '50%'
      }
    };
  
    var fit = function fit(imgEl, classes) {
      if (!imgEl || !imgEl.complete) {
        return;
      }
  
      if (imgEl.width / imgEl.height > imgEl.parentNode.offsetWidth / imgEl.parentNode.offsetHeight) {
        var _imgEl$classList, _imgEl$classList2;
  
        (_imgEl$classList = imgEl.classList).remove.apply(_imgEl$classList, toConsumableArray(classes.imgFullWidth.split(' ')));
  
        (_imgEl$classList2 = imgEl.classList).add.apply(_imgEl$classList2, toConsumableArray(classes.imgFullHeight.split(' ')));
      } else {
        var _imgEl$classList3, _imgEl$classList4;
  
        (_imgEl$classList3 = imgEl.classList).remove.apply(_imgEl$classList3, toConsumableArray(classes.imgFullHeight.split(' ')));
  
        (_imgEl$classList4 = imgEl.classList).add.apply(_imgEl$classList4, toConsumableArray(classes.imgFullWidth.split(' ')));
      }
    };
  
    function ensureImageCover(imgEl, classes) {
      if (!imgEl) {
        return;
      }
  
      if (imgEl.complete) {
        fit(imgEl, classes);
      } else {
        imgEl.addEventListener('load', function () {
          fit(imgEl, classes);
        });
      }
    }
  
    var GridListTile = React__default.forwardRef(function GridListTile(props, ref) {
      // cols rows default values are for docs only
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$cols = props.cols,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'li' : _props$component,
          _props$rows = props.rows,
          other = objectWithoutProperties(props, ["children", "classes", "className", "cols", "component", "rows"]);
  
      var imgRef = React__default.useRef(null);
      React__default.useEffect(function () {
        ensureImageCover(imgRef.current, classes);
      });
      React__default.useEffect(function () {
        var handleResize = debounce_1(function () {
          fit(imgRef.current, classes);
        }, 166); // Corresponds to 10 frames at 60 Hz.
  
        window.addEventListener('resize', handleResize);
        return function () {
          handleResize.clear();
          window.removeEventListener('resize', handleResize);
        };
      }, [classes]);
      return React__default.createElement(Component, _extends_1({
        className: clsx(classes.root, className),
        ref: ref
      }, other), React__default.createElement("div", {
        className: classes.tile
      }, React__default.Children.map(children, function (child) {
        if (!React__default.isValidElement(child)) {
          return null;
        }
  
        if (child.type === 'img' || isMuiElement(child, ['Image'])) {
          return React__default.cloneElement(child, {
            ref: imgRef
          });
        }
  
        return child;
      })));
    });
    GridListTile.propTypes = {
      /**
       * Theoretically you can pass any node as children, but the main use case is to pass an img,
       * in which case GridListTile takes care of making the image "cover" available space
       * (similar to `background-size: cover` or to `object-fit: cover`).
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * Width of the tile in number of grid cells.
       */
      cols: propTypes.number,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * Height of the tile in number of grid cells.
       */
      rows: propTypes.number
    };
    var GridListTile$1 = withStyles$1(styles$S, {
      name: 'MuiGridListTile'
    })(GridListTile);
  
    var styles$T = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'absolute',
          left: 0,
          right: 0,
          height: 48,
          background: 'rgba(0, 0, 0, 0.5)',
          display: 'flex',
          alignItems: 'center',
          fontFamily: theme.typography.fontFamily
        },
  
        /* Styles applied to the root element if `titlePosition="bottom"`. */
        titlePositionBottom: {
          bottom: 0
        },
  
        /* Styles applied to the root element if `titlePosition="top"`. */
        titlePositionTop: {
          top: 0
        },
  
        /* Styles applied to the root element if a `subtitle` is provided. */
        rootSubtitle: {
          height: 68
        },
  
        /* Styles applied to the title and subtitle container element. */
        titleWrap: {
          flexGrow: 1,
          marginLeft: 16,
          marginRight: 16,
          color: theme.palette.common.white,
          overflow: 'hidden'
        },
  
        /* Styles applied to the container element if `actionPosition="left"`. */
        titleWrapActionPosLeft: {
          marginLeft: 0
        },
  
        /* Styles applied to the container element if `actionPosition="right"`. */
        titleWrapActionPosRight: {
          marginRight: 0
        },
  
        /* Styles applied to the title container element. */
        title: {
          fontSize: theme.typography.pxToRem(16),
          lineHeight: '24px',
          textOverflow: 'ellipsis',
          overflow: 'hidden',
          whiteSpace: 'nowrap'
        },
  
        /* Styles applied to the subtitle container element. */
        subtitle: {
          fontSize: theme.typography.pxToRem(12),
          lineHeight: 1,
          textOverflow: 'ellipsis',
          overflow: 'hidden',
          whiteSpace: 'nowrap'
        },
  
        /* Styles applied to the actionIcon if supplied. */
        actionIcon: {},
  
        /* Styles applied to the actionIcon if `actionPosition="left"`. */
        actionIconActionPosLeft: {
          order: -1
        }
      };
    };
    var GridListTileBar = React__default.forwardRef(function GridListTileBar(props, ref) {
      var actionIcon = props.actionIcon,
          _props$actionPosition = props.actionPosition,
          actionPosition = _props$actionPosition === void 0 ? 'right' : _props$actionPosition,
          classes = props.classes,
          classNameProp = props.className,
          subtitle = props.subtitle,
          title = props.title,
          _props$titlePosition = props.titlePosition,
          titlePosition = _props$titlePosition === void 0 ? 'bottom' : _props$titlePosition,
          other = objectWithoutProperties(props, ["actionIcon", "actionPosition", "classes", "className", "subtitle", "title", "titlePosition"]);
  
      var actionPos = actionIcon && actionPosition;
      var className = clsx(classes.root, classNameProp, titlePosition === 'top' ? classes.titlePositionTop : classes.titlePositionBottom, subtitle && classes.rootSubtitle); // Remove the margin between the title / subtitle wrapper, and the Action Icon
  
      var titleWrapClassName = clsx(classes.titleWrap, actionPos === 'left' && classes.titleWrapActionPosLeft, actionPos === 'right' && classes.titleWrapActionPosRight);
      return React__default.createElement("div", _extends_1({
        className: className,
        ref: ref
      }, other), React__default.createElement("div", {
        className: titleWrapClassName
      }, React__default.createElement("div", {
        className: classes.title
      }, title), subtitle ? React__default.createElement("div", {
        className: classes.subtitle
      }, subtitle) : null), actionIcon ? React__default.createElement("div", {
        className: clsx(classes.actionIcon, actionPos === 'left' && classes.actionIconActionPosLeft)
      }, actionIcon) : null);
    });
    GridListTileBar.propTypes = {
      /**
       * An IconButton element to be used as secondary action target
       * (primary action target is the tile itself).
       */
      actionIcon: propTypes.node,
  
      /**
       * Position of secondary action IconButton.
       */
      actionPosition: propTypes.oneOf(['left', 'right']),
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * String or element serving as subtitle (support text).
       */
      subtitle: propTypes.node,
  
      /**
       * Title to be displayed on tile.
       */
      title: propTypes.node,
  
      /**
       * Position of the title bar.
       */
      titlePosition: propTypes.oneOf(['top', 'bottom'])
    };
    var GridListTileBar$1 = withStyles$1(styles$T, {
      name: 'MuiGridListTileBar'
    })(GridListTileBar);
  
    function getScale(value) {
      return "scale(".concat(value, ", ").concat(Math.pow(value, 2), ")");
    }
  
    var styles$U = {
      entering: {
        opacity: 1,
        transform: getScale(1)
      },
      entered: {
        opacity: 1,
        // Use translateZ to scrolling issue on Chrome.
        transform: "".concat(getScale(1), " translateZ(0)")
      }
    };
    /**
     * The Grow transition is used by the [Tooltip](/components/tooltips/) and
     * [Popover](/components/popover/) components.
     * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
     */
  
    var Grow = React__default.forwardRef(function Grow(props, ref) {
      var children = props.children,
          inProp = props.in,
          onEnter = props.onEnter,
          onExit = props.onExit,
          style = props.style,
          theme = props.theme,
          _props$timeout = props.timeout,
          timeout = _props$timeout === void 0 ? 'auto' : _props$timeout,
          other = objectWithoutProperties(props, ["children", "in", "onEnter", "onExit", "style", "theme", "timeout"]);
  
      var timer = React__default.useRef();
      var autoTimeout = React__default.useRef();
      var handleRef = useForkRef(children.ref, ref);
  
      var handleEnter = function handleEnter(node) {
        reflow(node); // So the animation always start from the start.
  
        var _getTransitionProps = getTransitionProps({
          style: style,
          timeout: timeout
        }, {
          mode: 'enter'
        }),
            transitionDuration = _getTransitionProps.duration,
            delay = _getTransitionProps.delay;
  
        var duration = 0;
  
        if (timeout === 'auto') {
          duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
          autoTimeout.current = duration;
        } else {
          duration = transitionDuration;
        }
  
        node.style.transition = [theme.transitions.create('opacity', {
          duration: duration,
          delay: delay
        }), theme.transitions.create('transform', {
          duration: duration * 0.666,
          delay: delay
        })].join(',');
  
        if (onEnter) {
          onEnter(node);
        }
      };
  
      var handleExit = function handleExit(node) {
        var duration = 0;
  
        var _getTransitionProps2 = getTransitionProps({
          style: style,
          timeout: timeout
        }, {
          mode: 'exit'
        }),
            transitionDuration = _getTransitionProps2.duration,
            delay = _getTransitionProps2.delay;
  
        if (timeout === 'auto') {
          duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
          autoTimeout.current = duration;
        } else {
          duration = transitionDuration;
        }
  
        node.style.transition = [theme.transitions.create('opacity', {
          duration: duration,
          delay: delay
        }), theme.transitions.create('transform', {
          duration: duration * 0.666,
          delay: delay || duration * 0.333
        })].join(',');
        node.style.opacity = '0';
        node.style.transform = getScale(0.75);
  
        if (onExit) {
          onExit(node);
        }
      };
  
      var addEndListener = function addEndListener(_, next) {
        if (timeout === 'auto') {
          timer.current = setTimeout(next, autoTimeout.current || 0);
        }
      };
  
      React__default.useEffect(function () {
        return function () {
          clearTimeout(timer.current);
        };
      }, []);
      return React__default.createElement(Transition, _extends_1({
        appear: true,
        in: inProp,
        onEnter: handleEnter,
        onExit: handleExit,
        addEndListener: addEndListener,
        timeout: timeout === 'auto' ? null : timeout
      }, other), function (state, childProps) {
        return React__default.cloneElement(children, _extends_1({
          style: _extends_1({
            opacity: 0,
            transform: getScale(0.75),
            visibility: state === 'exited' && !inProp ? 'hidden' : undefined
          }, styles$U[state], style, children.props.style),
          ref: handleRef
        }, childProps));
      });
    });
    Grow.propTypes = {
      /**
       * A single child content element.
       */
      children: propTypes.element,
  
      /**
       * If `true`, show the component; triggers the enter or exit animation.
       */
      in: propTypes.bool,
  
      /**
       * @ignore
       */
      onEnter: propTypes.func,
  
      /**
       * @ignore
       */
      onExit: propTypes.func,
  
      /**
       * @ignore
       */
      style: propTypes.object,
  
      /**
       * @ignore
       */
      theme: propTypes.object.isRequired,
  
      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       *
       * Set to 'auto' to automatically calculate transition time based on height.
       */
      timeout: propTypes.oneOfType([propTypes.number, propTypes.shape({
        enter: propTypes.number,
        exit: propTypes.number
      }), propTypes.oneOf(['auto'])])
    };
    Grow.muiSupportAuto = true;
    var Grow$1 = withTheme$1(Grow);
  
    var hydrationCompleted = false;
  
    function deepEqual(a, b) {
      return a.length === b.length && a.every(function (item, index) {
        return item === b[index];
      });
    }
  
    function useMediaQuery(queryInput) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var multiple = Array.isArray(queryInput);
      var queries = multiple ? queryInput : [queryInput];
      queries = queries.map(function (query) {
        return query.replace('@media ', '');
      }); // Wait for JSDOM to support the match media feature.
      // All the browsers Material-UI support have this built-in.
      // This defensive check is here for simplicity.
      // Most of the time, the match media logic isn't central to people tests.
  
      var supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';
      var _options$defaultMatch = options.defaultMatches,
          defaultMatches = _options$defaultMatch === void 0 ? false : _options$defaultMatch,
          _options$noSsr = options.noSsr,
          noSsr = _options$noSsr === void 0 ? false : _options$noSsr,
          _options$ssrMatchMedi = options.ssrMatchMedia,
          ssrMatchMedia = _options$ssrMatchMedi === void 0 ? null : _options$ssrMatchMedi;
  
      var _React$useState = React__default.useState(function () {
        if ((hydrationCompleted || noSsr) && supportMatchMedia) {
          return queries.map(function (query) {
            return window.matchMedia(query).matches;
          });
        }
  
        if (ssrMatchMedia) {
          return queries.map(function (query) {
            return ssrMatchMedia(query).matches;
          });
        } // Once the component is mounted, we rely on the
        // event listeners to return the correct matches value.
  
  
        return queries.map(function () {
          return defaultMatches;
        });
      }),
          _React$useState2 = slicedToArray(_React$useState, 2),
          matches = _React$useState2[0],
          setMatches = _React$useState2[1];
  
      React__default.useEffect(function () {
        hydrationCompleted = true;
  
        if (!supportMatchMedia) {
          return undefined;
        }
  
        var queryLists = queries.map(function (query) {
          return window.matchMedia(query);
        });
        setMatches(function (prev) {
          var next = queryLists.map(function (queryList) {
            return queryList.matches;
          });
          return deepEqual(prev, next) ? prev : next;
        });
  
        function handleMatchesChange() {
          setMatches(queryLists.map(function (queryList) {
            return queryList.matches;
          }));
        }
  
        queryLists.forEach(function (queryList) {
          queryList.addListener(handleMatchesChange);
        });
        return function () {
          queryLists.forEach(function (queryList) {
            queryList.removeListener(handleMatchesChange);
          });
        };
      }, queries); // eslint-disable-line react-hooks/exhaustive-deps
  
      return multiple ? matches : matches[0];
    }
  
    var isWidthUp = function isWidthUp(breakpoint, width) {
      var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  
      if (inclusive) {
        return keys.indexOf(breakpoint) <= keys.indexOf(width);
      }
  
      return keys.indexOf(breakpoint) < keys.indexOf(width);
    }; // By default, returns true if screen width is the same or less than the given breakpoint.
  
    var isWidthDown = function isWidthDown(breakpoint, width) {
      var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  
      if (inclusive) {
        return keys.indexOf(width) <= keys.indexOf(breakpoint);
      }
  
      return keys.indexOf(width) < keys.indexOf(breakpoint);
    };
    var useEnhancedEffect$4 = typeof window === 'undefined' ? React__default.useEffect : React__default.useLayoutEffect;
  
    var withWidth = function withWidth() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return function (Component) {
        var _options$withTheme = options.withTheme,
            withThemeOption = _options$withTheme === void 0 ? false : _options$withTheme,
            _options$noSSR = options.noSSR,
            noSSR = _options$noSSR === void 0 ? false : _options$noSSR,
            initialWidthOption = options.initialWidth;
  
        function WithWidth(props) {
          var contextTheme = useTheme$1();
          var theme = props.theme || contextTheme;
  
          var _getThemeProps = getThemeProps({
            theme: theme,
            name: 'MuiWithWidth',
            props: _extends_1({}, props)
          }),
              initialWidth = _getThemeProps.initialWidth,
              width = _getThemeProps.width,
              other = objectWithoutProperties(_getThemeProps, ["initialWidth", "width"]);
  
          var _React$useState = React__default.useState(false),
              _React$useState2 = slicedToArray(_React$useState, 2),
              mountedState = _React$useState2[0],
              setMountedState = _React$useState2[1];
  
          useEnhancedEffect$4(function () {
            setMountedState(true);
          }, []);
          /**
           * innerWidth |xs      sm      md      lg      xl
           *            |-------|-------|-------|-------|------>
           * width      |  xs   |  sm   |  md   |  lg   |  xl
           */
  
          var keys = toConsumableArray(theme.breakpoints.keys).reverse();
  
          var queries = useMediaQuery(keys.map(function (key) {
            return theme.breakpoints.only(key);
          }));
          var widthComputed = queries.reduce(function (output, matches, index) {
            return !output && matches ? keys[index] : output;
          }, null);
  
          var more = _extends_1({
            width: width || (mountedState || noSSR ? widthComputed : undefined) || initialWidth || initialWidthOption
          }, withThemeOption ? {
            theme: theme
          } : {}, other); // When rendering the component on the server,
          // we have no idea about the client browser screen width.
          // In order to prevent blinks and help the reconciliation of the React tree
          // we are not rendering the child component.
          //
          // An alternative is to use the `initialWidth` property.
  
  
          if (more.width === undefined) {
            return null;
          }
  
          return React__default.createElement(Component, more);
        }
  
        WithWidth.propTypes = {
          /**
           * As `window.innerWidth` is unavailable on the server,
           * we default to rendering an empty component during the first mount.
           * You might want to use an heuristic to approximate
           * the screen width of the client browser screen width.
           *
           * For instance, you could be using the user-agent or the client-hints.
           * https://caniuse.com/#search=client%20hint
           */
          initialWidth: propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
  
          /**
           * @ignore
           */
          theme: propTypes.object,
  
          /**
           * Bypass the width calculation logic.
           */
          width: propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])
        };
  
        {
          WithWidth.displayName = "WithWidth(".concat(getDisplayName(Component), ")");
        }
  
        hoistNonReactStatics_cjs(WithWidth, Component);
        return WithWidth;
      };
    };
  
    /**
     * @ignore - internal component.
     */
  
    function HiddenJs(props) {
      var children = props.children,
          only = props.only,
          width = props.width;
      var visible = true; // `only` check is faster to get out sooner if used.
  
      if (only) {
        if (Array.isArray(only)) {
          for (var i = 0; i < only.length; i += 1) {
            var breakpoint = only[i];
  
            if (width === breakpoint) {
              visible = false;
              break;
            }
          }
        } else if (only && width === only) {
          visible = false;
        }
      } // Allow `only` to be combined with other props. If already hidden, no need to check others.
  
  
      if (visible) {
        // determine visibility based on the smallest size up
        for (var _i = 0; _i < keys.length; _i += 1) {
          var _breakpoint = keys[_i];
          var breakpointUp = props["".concat(_breakpoint, "Up")];
          var breakpointDown = props["".concat(_breakpoint, "Down")];
  
          if (breakpointUp && isWidthUp(_breakpoint, width) || breakpointDown && isWidthDown(_breakpoint, width)) {
            visible = false;
            break;
          }
        }
      }
  
      if (!visible) {
        return null;
      }
  
      return children;
    }
  
    HiddenJs.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * Specify which implementation to use.  'js' is the default, 'css' works better for
       * server-side rendering.
       */
      implementation: propTypes.oneOf(['js', 'css']),
  
      /**
       * You can use this property when choosing the `js` implementation with server-side rendering.
       *
       * As `window.innerWidth` is unavailable on the server,
       * we default to rendering an empty component during the first mount.
       * You might want to use an heuristic to approximate
       * the screen width of the client browser screen width.
       *
       * For instance, you could be using the user-agent or the client-hints.
       * https://caniuse.com/#search=client%20hint
       */
      initialWidth: propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
  
      /**
       * If true, screens this size and down will be hidden.
       */
      lgDown: propTypes.bool,
  
      /**
       * If true, screens this size and up will be hidden.
       */
      lgUp: propTypes.bool,
  
      /**
       * If true, screens this size and down will be hidden.
       */
      mdDown: propTypes.bool,
  
      /**
       * If true, screens this size and up will be hidden.
       */
      mdUp: propTypes.bool,
  
      /**
       * Hide the given breakpoint(s).
       */
      only: propTypes.oneOfType([propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), propTypes.arrayOf(propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),
  
      /**
       * If true, screens this size and down will be hidden.
       */
      smDown: propTypes.bool,
  
      /**
       * If true, screens this size and up will be hidden.
       */
      smUp: propTypes.bool,
  
      /**
       * @ignore
       * width prop provided by withWidth decorator.
       */
      width: propTypes.string.isRequired,
  
      /**
       * If true, screens this size and down will be hidden.
       */
      xlDown: propTypes.bool,
  
      /**
       * If true, screens this size and up will be hidden.
       */
      xlUp: propTypes.bool,
  
      /**
       * If true, screens this size and down will be hidden.
       */
      xsDown: propTypes.bool,
  
      /**
       * If true, screens this size and up will be hidden.
       */
      xsUp: propTypes.bool
    };
  
    {
      HiddenJs.propTypes = exactProp(HiddenJs.propTypes);
    }
  
    var HiddenJs$1 = withWidth()(HiddenJs);
  
    var styles$V = function styles(theme) {
      var hidden = {
        display: 'none'
      };
      return keys.reduce(function (acc, key) {
        acc["only".concat(capitalize(key))] = defineProperty({}, theme.breakpoints.only(key), hidden);
        acc["".concat(key, "Up")] = defineProperty({}, theme.breakpoints.up(key), hidden);
        acc["".concat(key, "Down")] = defineProperty({}, theme.breakpoints.down(key), hidden);
        return acc;
      }, {});
    };
    /**
     * @ignore - internal component.
     */
  
  
    function HiddenCss(props) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          lgDown = props.lgDown,
          lgUp = props.lgUp,
          mdDown = props.mdDown,
          mdUp = props.mdUp,
          only = props.only,
          smDown = props.smDown,
          smUp = props.smUp,
          xlDown = props.xlDown,
          xlUp = props.xlUp,
          xsDown = props.xsDown,
          xsUp = props.xsUp,
          other = objectWithoutProperties(props, ["children", "classes", "className", "lgDown", "lgUp", "mdDown", "mdUp", "only", "smDown", "smUp", "xlDown", "xlUp", "xsDown", "xsUp"]);
  
      warning_1(Object.keys(other).length === 0 || Object.keys(other).length === 1 && other.hasOwnProperty('ref'), "Material-UI: unsupported properties received ".concat(Object.keys(other).join(', '), " by `<Hidden />`."));
      var clsx = [];
  
      if (className) {
        clsx.push(className);
      }
  
      for (var i = 0; i < keys.length; i += 1) {
        var breakpoint = keys[i];
        var breakpointUp = props["".concat(breakpoint, "Up")];
        var breakpointDown = props["".concat(breakpoint, "Down")];
  
        if (breakpointUp) {
          clsx.push(classes["".concat(breakpoint, "Up")]);
        }
  
        if (breakpointDown) {
          clsx.push(classes["".concat(breakpoint, "Down")]);
        }
      }
  
      if (only) {
        var onlyBreakpoints = Array.isArray(only) ? only : [only];
        onlyBreakpoints.forEach(function (breakpoint) {
          clsx.push(classes["only".concat(capitalize(breakpoint))]);
        });
      }
  
      return React__default.createElement("div", {
        className: clsx.join(' ')
      }, children);
    }
  
    HiddenCss.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * Specify which implementation to use.  'js' is the default, 'css' works better for
       * server-side rendering.
       */
      implementation: propTypes.oneOf(['js', 'css']),
  
      /**
       * If true, screens this size and down will be hidden.
       */
      lgDown: propTypes.bool,
  
      /**
       * If true, screens this size and up will be hidden.
       */
      lgUp: propTypes.bool,
  
      /**
       * If true, screens this size and down will be hidden.
       */
      mdDown: propTypes.bool,
  
      /**
       * If true, screens this size and up will be hidden.
       */
      mdUp: propTypes.bool,
  
      /**
       * Hide the given breakpoint(s).
       */
      only: propTypes.oneOfType([propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), propTypes.arrayOf(propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),
  
      /**
       * If true, screens this size and down will be hidden.
       */
      smDown: propTypes.bool,
  
      /**
       * If true, screens this size and up will be hidden.
       */
      smUp: propTypes.bool,
  
      /**
       * If true, screens this size and down will be hidden.
       */
      xlDown: propTypes.bool,
  
      /**
       * If true, screens this size and up will be hidden.
       */
      xlUp: propTypes.bool,
  
      /**
       * If true, screens this size and down will be hidden.
       */
      xsDown: propTypes.bool,
  
      /**
       * If true, screens this size and up will be hidden.
       */
      xsUp: propTypes.bool
    };
    var HiddenCss$1 = withStyles$1(styles$V, {
      name: 'PrivateHiddenCss'
    })(HiddenCss);
  
    /**
     * Responsively hides children based on the selected implementation.
     */
  
    function Hidden(props) {
      var implementation = props.implementation,
          other = objectWithoutProperties(props, ["implementation"]);
  
      if (implementation === 'js') {
        return React__default.createElement(HiddenJs$1, other);
      }
  
      return React__default.createElement(HiddenCss$1, other);
    }
  
    Hidden.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * Specify which implementation to use.  'js' is the default, 'css' works better for
       * server-side rendering.
       */
      implementation: propTypes.oneOf(['js', 'css']),
  
      /**
       * You can use this property when choosing the `js` implementation with server-side rendering.
       *
       * As `window.innerWidth` is unavailable on the server,
       * we default to rendering an empty component during the first mount.
       * You might want to use an heuristic to approximate
       * the screen width of the client browser screen width.
       *
       * For instance, you could be using the user-agent or the client-hints.
       * https://caniuse.com/#search=client%20hint
       */
      initialWidth: propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
  
      /**
       * If true, screens this size and down will be hidden.
       */
      lgDown: propTypes.bool,
  
      /**
       * If true, screens this size and up will be hidden.
       */
      lgUp: propTypes.bool,
  
      /**
       * If true, screens this size and down will be hidden.
       */
      mdDown: propTypes.bool,
  
      /**
       * If true, screens this size and up will be hidden.
       */
      mdUp: propTypes.bool,
  
      /**
       * Hide the given breakpoint(s).
       */
      only: propTypes.oneOfType([propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), propTypes.arrayOf(propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),
  
      /**
       * If true, screens this size and down will be hidden.
       */
      smDown: propTypes.bool,
  
      /**
       * If true, screens this size and up will be hidden.
       */
      smUp: propTypes.bool,
  
      /**
       * If true, screens this size and down will be hidden.
       */
      xlDown: propTypes.bool,
  
      /**
       * If true, screens this size and up will be hidden.
       */
      xlUp: propTypes.bool,
  
      /**
       * If true, screens this size and down will be hidden.
       */
      xsDown: propTypes.bool,
  
      /**
       * If true, screens this size and up will be hidden.
       */
      xsUp: propTypes.bool
    };
    Hidden.defaultProps = {
      implementation: 'js',
      lgDown: false,
      lgUp: false,
      mdDown: false,
      mdUp: false,
      smDown: false,
      smUp: false,
      xlDown: false,
      xlUp: false,
      xsDown: false,
      xsUp: false
    };
  
    var styles$W = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          userSelect: 'none',
          fontSize: theme.typography.pxToRem(24),
          width: '1em',
          height: '1em',
          // Chrome fix for https://bugs.chromium.org/p/chromium/issues/detail?id=820541
          // To remove at some point.
          overflow: 'hidden',
          flexShrink: 0
        },
  
        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          color: theme.palette.primary.main
        },
  
        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          color: theme.palette.secondary.main
        },
  
        /* Styles applied to the root element if `color="action"`. */
        colorAction: {
          color: theme.palette.action.active
        },
  
        /* Styles applied to the root element if `color="error"`. */
        colorError: {
          color: theme.palette.error.main
        },
  
        /* Styles applied to the root element if `color="disabled"`. */
        colorDisabled: {
          color: theme.palette.action.disabled
        },
        fontSizeInherit: {
          fontSize: 'inherit'
        },
  
        /* Styles applied to the root element if `fontSize="small"`. */
        fontSizeSmall: {
          fontSize: theme.typography.pxToRem(20)
        },
  
        /* Styles applied to the root element if `fontSize="large"`. */
        fontSizeLarge: {
          fontSize: theme.typography.pxToRem(36)
        }
      };
    };
    var Icon = React__default.forwardRef(function Icon(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'inherit' : _props$color,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'span' : _props$component,
          _props$fontSize = props.fontSize,
          fontSize = _props$fontSize === void 0 ? 'default' : _props$fontSize,
          other = objectWithoutProperties(props, ["classes", "className", "color", "component", "fontSize"]);
  
      return React__default.createElement(Component, _extends_1({
        className: clsx('material-icons', classes.root, className, color !== 'inherit' && classes["color".concat(capitalize(color))], fontSize !== 'default' && classes["fontSize".concat(capitalize(fontSize))]),
        "aria-hidden": true,
        ref: ref
      }, other));
    });
    Icon.propTypes = {
      /**
       * The name of the icon font ligature.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['inherit', 'primary', 'secondary', 'action', 'error', 'disabled']),
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
       */
      fontSize: propTypes.oneOf(['inherit', 'default', 'small', 'large'])
    };
    Icon.muiName = 'Icon';
    var Icon$1 = withStyles$1(styles$W, {
      name: 'MuiIcon'
    })(Icon);
  
    var styles$X = function styles(theme) {
      var light = theme.palette.type === 'light';
      var bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'relative'
        },
  
        /* Styles applied to the root element if the component is a descendant of `FormControl`. */
        formControl: {
          'label + &': {
            marginTop: 16
          }
        },
  
        /* Styles applied to the root element if the component is focused. */
        focused: {},
  
        /* Styles applied to the root element if `disabled={true}`. */
        disabled: {},
  
        /* Styles applied to the root element if `disableUnderline={false}`. */
        underline: {
          '&:after': {
            borderBottom: "2px solid ".concat(theme.palette.primary[light ? 'dark' : 'light']),
            left: 0,
            bottom: 0,
            // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
            content: '""',
            position: 'absolute',
            right: 0,
            transform: 'scaleX(0)',
            transition: theme.transitions.create('transform', {
              duration: theme.transitions.duration.shorter,
              easing: theme.transitions.easing.easeOut
            }),
            pointerEvents: 'none' // Transparent to the hover style.
  
          },
          '&$focused:after': {
            transform: 'scaleX(1)'
          },
          '&$error:after': {
            borderBottomColor: theme.palette.error.main,
            transform: 'scaleX(1)' // error is always underlined in red
  
          },
          '&:before': {
            borderBottom: "1px solid ".concat(bottomLineColor),
            left: 0,
            bottom: 0,
            // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
            content: '"\\00a0"',
            position: 'absolute',
            right: 0,
            transition: theme.transitions.create('border-bottom-color', {
              duration: theme.transitions.duration.shorter
            }),
            pointerEvents: 'none' // Transparent to the hover style.
  
          },
          '&:hover:not($disabled):before': {
            borderBottom: "2px solid ".concat(theme.palette.text.primary),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              borderBottom: "1px solid ".concat(bottomLineColor)
            }
          },
          '&$disabled:before': {
            borderBottomStyle: 'dotted'
          }
        },
  
        /* Styles applied to the root element if `error={true}`. */
        error: {},
  
        /* Styles applied to the root element if `multiline={true}`. */
        multiline: {},
  
        /* Styles applied to the root element if `fullWidth={true}`. */
        fullWidth: {},
  
        /* Styles applied to the `input` element. */
        input: {},
  
        /* Styles applied to the `input` element if `margin="dense"`. */
        inputMarginDense: {},
  
        /* Styles applied to the `input` element if `multiline={true}`. */
        inputMultiline: {},
  
        /* Styles applied to the `input` element if `type="search"`. */
        inputTypeSearch: {}
      };
    };
    var Input = React__default.forwardRef(function Input(props, ref) {
      var disableUnderline = props.disableUnderline,
          classes = props.classes,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          _props$inputComponent = props.inputComponent,
          inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,
          _props$multiline = props.multiline,
          multiline = _props$multiline === void 0 ? false : _props$multiline,
          _props$type = props.type,
          type = _props$type === void 0 ? 'text' : _props$type,
          other = objectWithoutProperties(props, ["disableUnderline", "classes", "fullWidth", "inputComponent", "multiline", "type"]);
  
      return React__default.createElement(InputBase$1, _extends_1({
        classes: _extends_1({}, classes, {
          root: clsx(classes.root, !disableUnderline && classes.underline),
          underline: null
        }),
        fullWidth: fullWidth,
        inputComponent: inputComponent,
        multiline: multiline,
        ref: ref,
        type: type
      }, other));
    });
    Input.propTypes = {
      /**
       * This property helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: propTypes.string,
  
      /**
       * If `true`, the `input` element will be focused during the first mount.
       */
      autoFocus: propTypes.bool,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * The CSS class name of the wrapper element.
       */
      className: propTypes.string,
  
      /**
       * The default `input` element value. Use when the component is not controlled.
       */
      defaultValue: propTypes.any,
  
      /**
       * If `true`, the `input` element will be disabled.
       */
      disabled: propTypes.bool,
  
      /**
       * If `true`, the input will not have an underline.
       */
      disableUnderline: propTypes.bool,
  
      /**
       * End `InputAdornment` for this component.
       */
      endAdornment: propTypes.node,
  
      /**
       * If `true`, the input will indicate an error. This is normally obtained via context from
       * FormControl.
       */
      error: propTypes.bool,
  
      /**
       * If `true`, the input will take up the full width of its container.
       */
      fullWidth: propTypes.bool,
  
      /**
       * The id of the `input` element.
       */
      id: propTypes.string,
  
      /**
       * The component used for the native input.
       * Either a string to use a DOM element or a component.
       */
      inputComponent: propTypes.elementType,
  
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: propTypes.object,
  
      /**
       * This property can be used to pass a ref callback to the `input` element.
       */
      inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  
      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: propTypes.oneOf(['dense', 'none']),
  
      /**
       * If `true`, a textarea element will be rendered.
       */
      multiline: propTypes.bool,
  
      /**
       * Name attribute of the `input` element.
       */
      name: propTypes.string,
  
      /**
       * Callback fired when the value is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value`.
       */
      onChange: propTypes.func,
  
      /**
       * The short hint displayed in the input before the user enters a value.
       */
      placeholder: propTypes.string,
  
      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: propTypes.bool,
  
      /**
       * If `true`, the `input` element will be required.
       */
      required: propTypes.bool,
  
      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: propTypes.oneOfType([propTypes.string, propTypes.number]),
  
      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      rowsMax: propTypes.oneOfType([propTypes.string, propTypes.number]),
  
      /**
       * Start `InputAdornment` for this component.
       */
      startAdornment: propTypes.node,
  
      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       */
      type: propTypes.string,
  
      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: propTypes.any
    };
    Input.muiName = 'Input';
    var Input$1 = withStyles$1(styles$X, {
      name: 'MuiInput'
    })(Input);
  
    var styles$Y = {
      /* Styles applied to the root element. */
      root: {
        display: 'flex',
        height: '0.01em',
        // Fix IE 11 flexbox alignment. To remove at some point.
        maxHeight: '2em',
        alignItems: 'center'
      },
  
      /* Styles applied to the root element if `variant="filled"`. */
      filled: {
        '&$positionStart': {
          marginTop: 16
        }
      },
  
      /* Styles applied to the root element if `position="start"`. */
      positionStart: {
        marginRight: 8
      },
  
      /* Styles applied to the root element if `position="end"`. */
      positionEnd: {
        marginLeft: 8
      },
  
      /* Styles applied to the root element if `disablePointerEvents=true`. */
      disablePointerEvents: {
        pointerEvents: 'none'
      }
    };
    var InputAdornment = React__default.forwardRef(function InputAdornment(props, ref) {
      var children = props.children,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          classes = props.classes,
          className = props.className,
          _props$disablePointer = props.disablePointerEvents,
          disablePointerEvents = _props$disablePointer === void 0 ? false : _props$disablePointer,
          _props$disableTypogra = props.disableTypography,
          disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,
          muiFormControl = props.muiFormControl,
          position = props.position,
          variantProp = props.variant,
          other = objectWithoutProperties(props, ["children", "component", "classes", "className", "disablePointerEvents", "disableTypography", "muiFormControl", "position", "variant"]);
  
      var variant = variantProp;
  
      if (variantProp && muiFormControl) {
        warning_1(variantProp !== muiFormControl.variant, 'Material-UI: The `InputAdornment` variant infers the variant property ' + 'you do not have to provide one.');
      }
  
      if (muiFormControl && !variant) {
        variant = muiFormControl.variant;
      }
  
      return React__default.createElement(FormControlContext.Provider, {
        value: null
      }, React__default.createElement(Component, _extends_1({
        className: clsx(classes.root, className, variant === 'filled' && classes.filled, position === 'start' && classes.positionStart, position === 'end' && classes.positionEnd, disablePointerEvents && classes.disablePointerEvents),
        ref: ref
      }, other), typeof children === 'string' && !disableTypography ? React__default.createElement(Typography$1, {
        color: "textSecondary"
      }, children) : children));
    });
    InputAdornment.propTypes = {
      /**
       * The content of the component, normally an `IconButton` or string.
       */
      children: propTypes.node.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * Disable pointer events on the root.
       * This allows for the content of the adornment to focus the input on click.
       */
      disablePointerEvents: propTypes.bool,
  
      /**
       * If children is a string then disable wrapping in a Typography component.
       */
      disableTypography: propTypes.bool,
  
      /**
       * @ignore
       */
      muiFormControl: propTypes.object,
  
      /**
       * The position this adornment should appear relative to the `Input`.
       */
      position: propTypes.oneOf(['start', 'end']),
  
      /**
       * The variant to use.
       * Note: If you are using the `TextField` component or the `FormControl` component
       * you do not have to set this manually.
       */
      variant: propTypes.oneOf(['standard', 'outlined', 'filled'])
    };
    var InputAdornment$1 = withStyles$1(styles$Y, {
      name: 'MuiInputAdornment'
    })(withFormControlContext(InputAdornment));
  
    var styles$Z = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'block',
          transformOrigin: 'top left'
        },
  
        /* Pseudo-class applied to the root element if `focused={true}`. */
        focused: {},
  
        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},
  
        /* Pseudo-class applied to the root element if `error={true}`. */
        error: {},
  
        /* Pseudo-class applied to the root element if `required={true}`. */
        required: {},
  
        /* Pseudo-class applied to the asterisk element. */
        asterisk: {},
  
        /* Styles applied to the root element if the component is a descendant of `FormControl`. */
        formControl: {
          position: 'absolute',
          left: 0,
          top: 0,
          // slight alteration to spec spacing to match visual spec result
          transform: 'translate(0, 24px) scale(1)'
        },
  
        /* Styles applied to the root element if `margin="dense"`. */
        marginDense: {
          // Compensation for the `Input.inputDense` style.
          transform: 'translate(0, 21px) scale(1)'
        },
  
        /* Styles applied to the `input` element if `shrink={true}`. */
        shrink: {
          transform: 'translate(0, 1.5px) scale(0.75)',
          transformOrigin: 'top left'
        },
  
        /* Styles applied to the `input` element if `disableAnimation={false}`. */
        animated: {
          transition: theme.transitions.create(['color', 'transform'], {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut
          })
        },
  
        /* Styles applied to the root element if `variant="filled"`. */
        filled: {
          // Chrome's autofill feature gives the input field a yellow background.
          // Since the input field is behind the label in the HTML tree,
          // the input field is drawn last and hides the label with an opaque background color.
          // zIndex: 1 will raise the label above opaque background-colors of input.
          zIndex: 1,
          pointerEvents: 'none',
          transform: 'translate(12px, 20px) scale(1)',
          '&$marginDense': {
            transform: 'translate(12px, 17px) scale(1)'
          },
          '&$shrink': {
            transform: 'translate(12px, 10px) scale(0.75)',
            '&$marginDense': {
              transform: 'translate(12px, 7px) scale(0.75)'
            }
          }
        },
  
        /* Styles applied to the root element if `variant="outlined"`. */
        outlined: {
          // see comment above on filled.zIndex
          zIndex: 1,
          pointerEvents: 'none',
          transform: 'translate(14px, 20px) scale(1)',
          '&$marginDense': {
            transform: 'translate(14px, 12px) scale(1)'
          },
          '&$shrink': {
            transform: 'translate(14px, -6px) scale(0.75)'
          }
        }
      };
    };
    var InputLabel = React__default.forwardRef(function InputLabel(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$disableAnimati = props.disableAnimation,
          disableAnimation = _props$disableAnimati === void 0 ? false : _props$disableAnimati,
          margin = props.margin,
          muiFormControl = props.muiFormControl,
          shrinkProp = props.shrink,
          variant = props.variant,
          other = objectWithoutProperties(props, ["classes", "className", "disableAnimation", "margin", "muiFormControl", "shrink", "variant"]);
  
      var shrink = shrinkProp;
  
      if (typeof shrink === 'undefined' && muiFormControl) {
        shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
      }
  
      var fcs = formControlState({
        props: props,
        muiFormControl: muiFormControl,
        states: ['margin', 'variant']
      });
      return React__default.createElement(FormLabel$1, _extends_1({
        "data-shrink": shrink,
        className: clsx(classes.root, className, muiFormControl && classes.formControl, !disableAnimation && classes.animated, shrink && classes.shrink, fcs.margin === 'dense' && classes.marginDense, fcs.variant === 'filled' && classes.filled, fcs.variant === 'outlined' && classes.outlined),
        classes: {
          focused: classes.focused,
          disabled: classes.disabled,
          error: classes.error,
          required: classes.required,
          asterisk: classes.asterisk
        },
        ref: ref
      }, other));
    });
    InputLabel.propTypes = {
      /**
       * The contents of the `InputLabel`.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * If `true`, the transition animation is disabled.
       */
      disableAnimation: propTypes.bool,
  
      /**
       * If `true`, apply disabled class.
       */
      disabled: propTypes.bool,
  
      /**
       * If `true`, the label will be displayed in an error state.
       */
      error: propTypes.bool,
  
      /**
       * If `true`, the input of this label is focused.
       */
      focused: propTypes.bool,
  
      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: propTypes.oneOf(['dense']),
  
      /**
       * @ignore
       */
      muiFormControl: propTypes.object,
  
      /**
       * if `true`, the label will indicate that the input is required.
       */
      required: propTypes.bool,
  
      /**
       * If `true`, the label is shrunk.
       */
      shrink: propTypes.bool,
  
      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['standard', 'outlined', 'filled'])
    };
    var InputLabel$1 = withStyles$1(styles$Z, {
      name: 'MuiInputLabel'
    })(withFormControlContext(InputLabel));
  
    var TRANSITION_DURATION = 4; // seconds
  
    var styles$_ = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'relative',
          overflow: 'hidden',
          height: 4
        },
  
        /* Styles applied to the root & bar2 element if `color="primary"`; bar2 if `variant-"buffer"`. */
        colorPrimary: {
          backgroundColor: lighten(theme.palette.primary.light, 0.6)
        },
  
        /* Styles applied to the root & bar2 elements if `color="secondary"`; bar2 if `variant="buffer"`. */
        colorSecondary: {
          backgroundColor: lighten(theme.palette.secondary.light, 0.4)
        },
  
        /* Styles applied to the root element if `variant="determinate"`. */
        determinate: {},
  
        /* Styles applied to the root element if `variant="indeterminate"`. */
        indeterminate: {},
  
        /* Styles applied to the root element if `variant="buffer"`. */
        buffer: {
          backgroundColor: 'transparent'
        },
  
        /* Styles applied to the root element if `variant="query"`. */
        query: {
          transform: 'rotate(180deg)'
        },
  
        /* Styles applied to the additional bar element if `variant="buffer"`. */
        dashed: {
          position: 'absolute',
          marginTop: 0,
          height: '100%',
          width: '100%',
          animation: 'buffer 3s infinite linear',
          // Backward compatible logic between JSS v9 and v10.
          // To remove with the release of Material-UI v4
          animationName: '$buffer'
        },
  
        /* Styles applied to the additional bar element if `variant="buffer"` & `color="primary"`. */
        dashedColorPrimary: {
          backgroundImage: "radial-gradient(".concat(lighten(theme.palette.primary.light, 0.6), " 0%, ").concat(lighten(theme.palette.primary.light, 0.6), " 16%, transparent 42%)"),
          backgroundSize: '10px 10px',
          backgroundPosition: '0px -23px'
        },
  
        /* Styles applied to the additional bar element if `variant="buffer"` & `color="secondary"`. */
        dashedColorSecondary: {
          backgroundImage: "radial-gradient(".concat(lighten(theme.palette.secondary.light, 0.4), " 0%, ").concat(lighten(theme.palette.secondary.light, 0.6), " 16%, transparent 42%)"),
          backgroundSize: '10px 10px',
          backgroundPosition: '0px -23px'
        },
  
        /* Styles applied to the layered bar1 & bar2 elements. */
        bar: {
          width: '100%',
          position: 'absolute',
          left: 0,
          bottom: 0,
          top: 0,
          transition: 'transform 0.2s linear',
          transformOrigin: 'left'
        },
  
        /* Styles applied to the bar elements if `color="primary"`; bar2 if `variant` not "buffer". */
        barColorPrimary: {
          backgroundColor: theme.palette.primary.main
        },
  
        /* Styles applied to the bar elements if `color="secondary"`; bar2 if `variant` not "buffer". */
        barColorSecondary: {
          backgroundColor: theme.palette.secondary.main
        },
  
        /* Styles applied to the bar1 element if `variant="indeterminate or query"`. */
        bar1Indeterminate: {
          width: 'auto',
          animation: 'mui-indeterminate1 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite',
          // Backward compatible logic between JSS v9 and v10.
          // To remove with the release of Material-UI v4
          animationName: '$mui-indeterminate1'
        },
  
        /* Styles applied to the bar1 element if `variant="determinate"`. */
        bar1Determinate: {
          transition: "transform .".concat(TRANSITION_DURATION, "s linear")
        },
  
        /* Styles applied to the bar1 element if `variant="buffer"`. */
        bar1Buffer: {
          zIndex: 1,
          transition: "transform .".concat(TRANSITION_DURATION, "s linear")
        },
  
        /* Styles applied to the bar2 element if `variant="indeterminate or query"`. */
        bar2Indeterminate: {
          width: 'auto',
          animation: 'mui-indeterminate2 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite',
          // Backward compatible logic between JSS v9 and v10.
          // To remove with the release of Material-UI v4
          animationName: '$mui-indeterminate2',
          animationDelay: '1.15s'
        },
  
        /* Styles applied to the bar2 element if `variant="buffer"`. */
        bar2Buffer: {
          transition: "transform .".concat(TRANSITION_DURATION, "s linear")
        },
        // Legends:
        // || represents the viewport
        // -  represents a light background
        // x  represents a dark background
        '@keyframes mui-indeterminate1': {
          //  |-----|---x-||-----||-----|
          '0%': {
            left: '-35%',
            right: '100%'
          },
          //  |-----|-----||-----||xxxx-|
          '60%': {
            left: '100%',
            right: '-90%'
          },
          '100%': {
            left: '100%',
            right: '-90%'
          }
        },
        '@keyframes mui-indeterminate2': {
          //  |xxxxx|xxxxx||-----||-----|
          '0%': {
            left: '-200%',
            right: '100%'
          },
          //  |-----|-----||-----||-x----|
          '60%': {
            left: '107%',
            right: '-8%'
          },
          '100%': {
            left: '107%',
            right: '-8%'
          }
        },
        '@keyframes buffer': {
          '0%': {
            opacity: 1,
            backgroundPosition: '0px -23px'
          },
          '50%': {
            opacity: 0,
            backgroundPosition: '0px -23px'
          },
          '100%': {
            opacity: 1,
            backgroundPosition: '-200px -23px'
          }
        }
      };
    };
    /**
     * ## ARIA
     *
     * If the progress bar is describing the loading progress of a particular region of a page,
     * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`
     * attribute to `true` on that region until it has finished loading.
     */
  
    var LinearProgress = React__default.forwardRef(function LinearProgress(props, ref) {
      var classes = props.classes,
          classNameProp = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'primary' : _props$color,
          theme = props.theme,
          value = props.value,
          valueBuffer = props.valueBuffer,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'indeterminate' : _props$variant,
          other = objectWithoutProperties(props, ["classes", "className", "color", "theme", "value", "valueBuffer", "variant"]);
  
      var className = clsx(classes.root, classNameProp, color === 'primary' ? classes.colorPrimary : classes.colorSecondary, variant === 'determinate' && classes.determinate, variant === 'indeterminate' && classes.indeterminate, variant === 'buffer' && classes.buffer, variant === 'query' && classes.query);
      var dashedClass = clsx(classes.dashed, color === 'primary' ? classes.dashedColorPrimary : classes.dashedColorSecondary);
      var bar1ClassName = clsx(classes.bar, (variant === 'indeterminate' || variant === 'query') && classes.bar1Indeterminate, color === 'primary' ? classes.barColorPrimary : classes.barColorSecondary, variant === 'determinate' && classes.bar1Determinate, variant === 'buffer' && classes.bar1Buffer);
      var bar2ClassName = clsx(classes.bar, (variant === 'indeterminate' || variant === 'query') && classes.bar2Indeterminate, variant === 'buffer' ? [classes.bar2Buffer, color === 'primary' ? classes.colorPrimary : classes.colorSecondary] : color === 'primary' ? classes.barColorPrimary : classes.barColorSecondary);
      var rootProps = {};
      var inlineStyles = {
        bar1: {},
        bar2: {}
      };
  
      if (variant === 'determinate' || variant === 'buffer') {
        if (value !== undefined) {
          rootProps['aria-valuenow'] = Math.round(value);
          var transform = value - 100;
  
          if (theme.direction === 'rtl') {
            transform = -transform;
          }
  
          inlineStyles.bar1.transform = "translateX(".concat(transform, "%)");
        } else {
          warning_1(false, 'Material-UI: you need to provide a value property ' + 'when using the determinate or buffer variant of LinearProgress .');
        }
      }
  
      if (variant === 'buffer') {
        if (valueBuffer !== undefined) {
          var _transform = (valueBuffer || 0) - 100;
  
          if (theme.direction === 'rtl') {
            _transform = -_transform;
          }
  
          inlineStyles.bar2.transform = "translateX(".concat(_transform, "%)");
        } else {
          warning_1(false, 'Material-UI: you need to provide a valueBuffer property ' + 'when using the buffer variant of LinearProgress.');
        }
      }
  
      return React__default.createElement("div", _extends_1({
        className: className,
        role: "progressbar"
      }, rootProps, {
        ref: ref
      }, other), variant === 'buffer' ? React__default.createElement("div", {
        className: dashedClass
      }) : null, React__default.createElement("div", {
        className: bar1ClassName,
        style: inlineStyles.bar1
      }), variant === 'determinate' ? null : React__default.createElement("div", {
        className: bar2ClassName,
        style: inlineStyles.bar2
      }));
    });
    LinearProgress.propTypes = {
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['primary', 'secondary']),
  
      /**
       * @ignore
       */
      theme: propTypes.object,
  
      /**
       * The value of the progress indicator for the determinate and buffer variants.
       * Value between 0 and 100.
       */
      value: propTypes.number,
  
      /**
       * The value for the buffer variant.
       * Value between 0 and 100.
       */
      valueBuffer: propTypes.number,
  
      /**
       * The variant to use.
       * Use indeterminate or query when there is no progress value.
       */
      variant: propTypes.oneOf(['determinate', 'indeterminate', 'buffer', 'query'])
    };
    var LinearProgress$1 = withStyles$1(styles$_, {
      name: 'MuiLinearProgress',
      withTheme: true
    })(LinearProgress);
  
    var styles$$ = {
      /* Styles applied to the root element. */
      root: {},
  
      /* Styles applied to the root element if `underline="none"`. */
      underlineNone: {
        textDecoration: 'none'
      },
  
      /* Styles applied to the root element if `underline="hover"`. */
      underlineHover: {
        textDecoration: 'none',
        '&:hover': {
          textDecoration: 'underline'
        }
      },
  
      /* Styles applied to the root element if `underline="always"`. */
      underlineAlways: {
        textDecoration: 'underline'
      },
      // Same reset as ButtonBase.root
  
      /* Styles applied to the root element if `component="button"`. */
      button: {
        position: 'relative',
        // Remove grey highlight
        WebkitTapHighlightColor: 'transparent',
        backgroundColor: 'transparent',
        // Reset default value
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 'none',
        border: 0,
        margin: 0,
        // Remove the margin in Safari
        borderRadius: 0,
        padding: 0,
        // Remove the padding in Firefox
        cursor: 'pointer',
        userSelect: 'none',
        verticalAlign: 'middle',
        '-moz-appearance': 'none',
        // Reset
        '-webkit-appearance': 'none',
        // Reset
        '&::-moz-focus-inner': {
          borderStyle: 'none' // Remove Firefox dotted outline.
  
        },
        '&$focusVisible': {
          outline: 'auto'
        }
      },
  
      /* Pseudo-class applied to the root element if the link is keyboard focused. */
      focusVisible: {}
    };
    var Link = React__default.forwardRef(function Link(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'primary' : _props$color,
          _props$component = props.component,
          component = _props$component === void 0 ? 'a' : _props$component,
          onBlur = props.onBlur,
          onFocus = props.onFocus,
          TypographyClasses = props.TypographyClasses,
          _props$underline = props.underline,
          underline = _props$underline === void 0 ? 'hover' : _props$underline,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'inherit' : _props$variant,
          other = objectWithoutProperties(props, ["classes", "className", "color", "component", "onBlur", "onFocus", "TypographyClasses", "underline", "variant"]);
  
      var _useIsFocusVisible = useIsFocusVisible(),
          isFocusVisible = _useIsFocusVisible.isFocusVisible,
          onBlurVisible = _useIsFocusVisible.onBlurVisible,
          focusVisibleRef = _useIsFocusVisible.ref;
  
      var _React$useState = React__default.useState(false),
          _React$useState2 = slicedToArray(_React$useState, 2),
          focusVisible = _React$useState2[0],
          setFocusVisible = _React$useState2[1];
  
      var handlerRef = useForkRef(ref, focusVisibleRef);
  
      var handleBlur = function handleBlur(event) {
        if (focusVisible) {
          onBlurVisible();
          setFocusVisible(false);
        }
  
        if (onBlur) {
          onBlur(event);
        }
      };
  
      var handleFocus = function handleFocus(event) {
        if (isFocusVisible(event)) {
          setFocusVisible(true);
        }
  
        if (onFocus) {
          onFocus(event);
        }
      };
  
      return React__default.createElement(Typography$1, _extends_1({
        className: clsx(classes.root, classes["underline".concat(capitalize(underline))], className, component === 'button' && classes.button, focusVisible && classes.focusVisible),
        classes: TypographyClasses,
        color: color,
        component: component,
        onBlur: handleBlur,
        onFocus: handleFocus,
        ref: handlerRef,
        variant: variant
      }, other));
    });
    Link.propTypes = {
      /**
       * The content of the link.
       */
      children: propTypes.node.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The color of the link.
       */
      color: propTypes.oneOf(['default', 'error', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary']),
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * @ignore
       */
      onBlur: propTypes.func,
  
      /**
       * @ignore
       */
      onFocus: propTypes.func,
  
      /**
       * `classes` property applied to the [`Typography`](/api/typography/) element.
       */
      TypographyClasses: propTypes.object,
  
      /**
       *  Controls when the link should have an underline.
       */
      underline: propTypes.oneOf(['none', 'hover', 'always']),
  
      /**
       * Applies the theme typography styles.
       */
      variant: propTypes.string
    };
    var Link$1 = withStyles$1(styles$$, {
      name: 'MuiLink'
    })(Link);
  
    /**
     * @ignore - internal component.
     */
  
    var ListContext = React__default.createContext({});
  
    var styles$10 = {
      /* Styles applied to the root element. */
      root: {
        listStyle: 'none',
        margin: 0,
        padding: 0,
        position: 'relative'
      },
  
      /* Styles applied to the root element if `disablePadding={false}`. */
      padding: {
        paddingTop: 8,
        paddingBottom: 8
      },
  
      /* Styles applied to the root element if dense. */
      dense: {},
  
      /* Styles applied to the root element if a `subheader` is provided. */
      subheader: {
        paddingTop: 0
      }
    };
    var List = React__default.forwardRef(function List(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'ul' : _props$component,
          _props$dense = props.dense,
          dense = _props$dense === void 0 ? false : _props$dense,
          _props$disablePadding = props.disablePadding,
          disablePadding = _props$disablePadding === void 0 ? false : _props$disablePadding,
          subheader = props.subheader,
          other = objectWithoutProperties(props, ["children", "classes", "className", "component", "dense", "disablePadding", "subheader"]);
  
      var context = React__default.useMemo(function () {
        return {
          dense: dense
        };
      }, [dense]);
      return React__default.createElement(ListContext.Provider, {
        value: context
      }, React__default.createElement(Component, _extends_1({
        className: clsx(classes.root, className, dense && classes.dense, !disablePadding && classes.padding, subheader && classes.subheader),
        ref: ref
      }, other), subheader, children));
    });
    List.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * If `true`, compact vertical padding designed for keyboard and mouse input will be used for
       * the list and list items.
       * The property is available to descendant components as the `dense` context.
       */
      dense: propTypes.bool,
  
      /**
       * If `true`, vertical padding will be removed from the list.
       */
      disablePadding: propTypes.bool,
  
      /**
       * The content of the subheader, normally `ListSubheader`.
       */
      subheader: propTypes.node
    };
    var List$1 = withStyles$1(styles$10, {
      name: 'MuiList'
    })(List);
  
    var styles$11 = function styles(theme) {
      return {
        /* Styles applied to the (normally root) `component` element. May be wrapped by a `container`. */
        root: {
          display: 'flex',
          justifyContent: 'flex-start',
          alignItems: 'center',
          position: 'relative',
          textDecoration: 'none',
          width: '100%',
          boxSizing: 'border-box',
          textAlign: 'left',
          paddingTop: 8,
          paddingBottom: 8,
          '&$focusVisible': {
            backgroundColor: theme.palette.action.selected
          },
          '&$selected, &$selected:hover': {
            backgroundColor: theme.palette.action.selected
          },
          '&$disabled': {
            opacity: 0.5
          }
        },
  
        /* Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`. */
        container: {
          position: 'relative'
        },
  
        /* Pseudo-class applied to the `component`'s `focusVisibleClassName` property if `button={true}`. */
        focusVisible: {},
  
        /* Styles applied to the `component` element if dense. */
        dense: {
          paddingTop: 4,
          paddingBottom: 4
        },
  
        /* Styles applied to the `component` element if `alignItems="flex-start"`. */
        alignItemsFlexStart: {
          alignItems: 'flex-start'
        },
  
        /* Pseudo-class applied to the inner `component` element if `disabled={true}`. */
        disabled: {},
  
        /* Styles applied to the inner `component` element if `divider={true}`. */
        divider: {
          borderBottom: "1px solid ".concat(theme.palette.divider),
          backgroundClip: 'padding-box'
        },
  
        /* Styles applied to the inner `component` element if `disableGutters={false}`. */
        gutters: {
          paddingLeft: 16,
          paddingRight: 16
        },
  
        /* Styles applied to the inner `component` element if `button={true}`. */
        button: {
          transition: theme.transitions.create('background-color', {
            duration: theme.transitions.duration.shortest
          }),
          '&:hover': {
            textDecoration: 'none',
            backgroundColor: theme.palette.action.hover,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        },
  
        /* Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`. */
        secondaryAction: {
          // Add some space to avoid collision as `ListItemSecondaryAction`
          // is absolutely positioned.
          paddingRight: 48
        },
  
        /* Pseudo-class applied to the root element if `selected={true}`. */
        selected: {}
      };
    };
    var useEnhancedEffect$5 = typeof window === 'undefined' ? React__default.useEffect : React__default.useLayoutEffect;
    /**
     * Uses an additional container component if `ListItemSecondaryAction` is the last child.
     */
  
    var ListItem = React__default.forwardRef(function ListItem(props, ref) {
      var _props$alignItems = props.alignItems,
          alignItems = _props$alignItems === void 0 ? 'center' : _props$alignItems,
          autoFocus = props.autoFocus,
          _props$button = props.button,
          button = _props$button === void 0 ? false : _props$button,
          childrenProp = props.children,
          classes = props.classes,
          className = props.className,
          componentProp = props.component,
          _props$ContainerCompo = props.ContainerComponent,
          ContainerComponent = _props$ContainerCompo === void 0 ? 'li' : _props$ContainerCompo,
          _props$ContainerProps = props.ContainerProps;
      _props$ContainerProps = _props$ContainerProps === void 0 ? {} : _props$ContainerProps;
  
      var ContainerClassName = _props$ContainerProps.className,
          ContainerProps = objectWithoutProperties(_props$ContainerProps, ["className"]),
          dense = props.dense,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$disableGutters = props.disableGutters,
          disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,
          _props$divider = props.divider,
          divider = _props$divider === void 0 ? false : _props$divider,
          focusVisibleClassName = props.focusVisibleClassName,
          _props$selected = props.selected,
          selected = _props$selected === void 0 ? false : _props$selected,
          other = objectWithoutProperties(props, ["alignItems", "autoFocus", "button", "children", "classes", "className", "component", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "divider", "focusVisibleClassName", "selected"]);
  
      var context = React__default.useContext(ListContext);
      var childContext = {
        dense: dense || context.dense || false,
        alignItems: alignItems
      };
      var listItemRef = React__default.useRef(null);
      useEnhancedEffect$5(function () {
        if (autoFocus) {
          if (listItemRef.current) {
            listItemRef.current.focus();
          } else {
            warning_1(false, 'Material-UI: unable to set focus to a ListItem whose component has not been rendered.');
          }
        }
      }, [autoFocus]);
      var children = React__default.Children.toArray(childrenProp);
      var hasSecondaryAction = children.length && isMuiElement(children[children.length - 1], ['ListItemSecondaryAction']);
      var handleOwnRef = React__default.useCallback(function (instance) {
        // #StrictMode ready
        listItemRef.current = ReactDOM__default.findDOMNode(instance);
      }, []);
      var handleRef = useForkRef(handleOwnRef, ref);
  
      var componentProps = _extends_1({
        className: clsx(classes.root, className, childContext.dense && classes.dense, !disableGutters && classes.gutters, divider && classes.divider, disabled && classes.disabled, button && classes.button, alignItems !== "center" && classes.alignItemsFlexStart, hasSecondaryAction && classes.secondaryAction, selected && classes.selected),
        disabled: disabled
      }, other);
  
      var Component = componentProp || 'li';
  
      if (button) {
        componentProps.component = componentProp || 'div';
        componentProps.focusVisibleClassName = clsx(classes.focusVisible, focusVisibleClassName);
        Component = ButtonBase$1;
      }
  
      if (hasSecondaryAction) {
        // Use div by default.
        Component = !componentProps.component && !componentProp ? 'div' : Component; // Avoid nesting of li > li.
  
        if (ContainerComponent === 'li') {
          if (Component === 'li') {
            Component = 'div';
          } else if (componentProps.component === 'li') {
            componentProps.component = 'div';
          }
        }
  
        return React__default.createElement(ListContext.Provider, {
          value: childContext
        }, React__default.createElement(ContainerComponent, _extends_1({
          className: clsx(classes.container, ContainerClassName),
          ref: handleRef
        }, ContainerProps), React__default.createElement(Component, componentProps, children), children.pop()));
      }
  
      return React__default.createElement(ListContext.Provider, {
        value: childContext
      }, React__default.createElement(Component, _extends_1({
        ref: handleRef
      }, componentProps), children));
    });
    ListItem.propTypes = {
      /**
       * Defines the `align-items` style property.
       */
      alignItems: propTypes.oneOf(['flex-start', 'center']),
  
      /**
       * If `true`, the list item will be focused during the first mount.
       * Focus will also be triggered if the value changes from false to true.
       */
      autoFocus: propTypes.bool,
  
      /**
       * If `true`, the list item will be a button (using `ButtonBase`).
       */
      button: propTypes.bool,
  
      /**
       * The content of the component. If a `ListItemSecondaryAction` is used it must
       * be the last child.
       */
      children: chainPropTypes(propTypes.node, function (props) {
        var children = React__default.Children.toArray(props.children); // React.Children.toArray(props.children).findLastIndex(isListItemSecondaryAction)
  
        var secondaryActionIndex = -1;
  
        for (var i = children.length - 1; i >= 0; i -= 1) {
          var child = children[i];
  
          if (isMuiElement(child, ['ListItemSecondaryAction'])) {
            secondaryActionIndex = i;
            break;
          }
        } //  is ListItemSecondaryAction the last child of ListItem
  
  
        if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {
          return new Error('Material-UI: you used an element after ListItemSecondaryAction. ' + 'For ListItem to detect that it has a secondary action ' + 'you must pass it as the last child to ListItem.');
        }
  
        return null;
      }),
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       * By default, it's a `li` when `button` is `false` and a `div` when `button` is `true`.
       */
      component: propTypes.elementType,
  
      /**
       * The container component used when a `ListItemSecondaryAction` is the last child.
       */
      ContainerComponent: propTypes.elementType,
  
      /**
       * Properties applied to the container component if used.
       */
      ContainerProps: propTypes.object,
  
      /**
       * If `true`, compact vertical padding designed for keyboard and mouse input will be used.
       */
      dense: propTypes.bool,
  
      /**
       * If `true`, the list item will be disabled.
       */
      disabled: propTypes.bool,
  
      /**
       * If `true`, the left and right padding is removed.
       */
      disableGutters: propTypes.bool,
  
      /**
       * If `true`, a 1px light border is added to the bottom of the list item.
       */
      divider: propTypes.bool,
  
      /**
       * @ignore
       */
      focusVisibleClassName: propTypes.string,
  
      /**
       * Use to apply selected styling.
       */
      selected: propTypes.bool
    };
    var ListItem$1 = withStyles$1(styles$11, {
      name: 'MuiListItem'
    })(ListItem);
  
    var styles$12 = {
      /* Styles applied to the root element. */
      root: {
        minWidth: 56,
        flexShrink: 0
      },
  
      /* Styles applied to the root element when the parent `ListItem` uses `alignItems="flex-start"`. */
      alignItemsFlexStart: {
        marginTop: 8
      }
    };
    /**
     * A simple wrapper to apply `List` styles to an `Avatar`.
     */
  
    var ListItemAvatar = React__default.forwardRef(function ListItemAvatar(props, ref) {
      var classes = props.classes,
          className = props.className,
          other = objectWithoutProperties(props, ["classes", "className"]);
  
      var context = React__default.useContext(ListContext);
      return React__default.createElement("div", _extends_1({
        className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),
        ref: ref
      }, other));
    });
    ListItemAvatar.propTypes = {
      /**
       * The content of the component – normally `Avatar`.
       */
      children: propTypes.element.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string
    };
    var ListItemAvatar$1 = withStyles$1(styles$12, {
      name: 'MuiListItemAvatar'
    })(ListItemAvatar);
  
    var styles$13 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          minWidth: 56,
          color: theme.palette.action.active,
          flexShrink: 0,
          display: 'inline-flex'
        }
      };
    };
    /**
     * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.
     */
  
    var ListItemIcon = React__default.forwardRef(function ListItemIcon(props, ref) {
      var classes = props.classes,
          className = props.className,
          other = objectWithoutProperties(props, ["classes", "className"]);
  
      return React__default.createElement("div", _extends_1({
        className: clsx(classes.root, className),
        ref: ref
      }, other));
    });
    ListItemIcon.propTypes = {
      /**
       * The content of the component, normally `Icon`, `SvgIcon`,
       * or a `@material-ui/icons` SVG icon element.
       */
      children: propTypes.element.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string
    };
    var ListItemIcon$1 = withStyles$1(styles$13, {
      name: 'MuiListItemIcon'
    })(ListItemIcon);
  
    var styles$14 = {
      /* Styles applied to the root element. */
      root: {
        position: 'absolute',
        right: 16,
        top: '50%',
        transform: 'translateY(-50%)'
      }
    };
    /**
     * Must be used as the last child of ListItem to function properly.
     */
  
    var ListItemSecondaryAction = React__default.forwardRef(function ListItemSecondaryAction(props, ref) {
      var classes = props.classes,
          className = props.className,
          other = objectWithoutProperties(props, ["classes", "className"]);
  
      return React__default.createElement("div", _extends_1({
        className: clsx(classes.root, className),
        ref: ref
      }, other));
    });
    ListItemSecondaryAction.propTypes = {
      /**
       * The content of the component, normally an `IconButton` or selection control.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string
    };
    ListItemSecondaryAction.muiName = 'ListItemSecondaryAction';
    var ListItemSecondaryAction$1 = withStyles$1(styles$14, {
      name: 'MuiListItemSecondaryAction'
    })(ListItemSecondaryAction);
  
    var styles$15 = {
      /* Styles applied to the root element. */
      root: {
        flex: '1 1 auto',
        minWidth: 0,
        marginTop: 4,
        marginBottom: 4
      },
  
      /* Styles applied to the `Typography` components if primary and secondary are set. */
      multiline: {
        marginTop: 6,
        marginBottom: 6
      },
  
      /* Styles applied to the `Typography` components if dense. */
      dense: {},
  
      /* Styles applied to the root element if `inset={true}`. */
      inset: {
        paddingLeft: 56
      },
  
      /* Styles applied to the primary `Typography` component. */
      primary: {},
  
      /* Styles applied to the secondary `Typography` component. */
      secondary: {}
    };
    var ListItemText = React__default.forwardRef(function ListItemText(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$disableTypogra = props.disableTypography,
          disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,
          _props$inset = props.inset,
          inset = _props$inset === void 0 ? false : _props$inset,
          primaryProp = props.primary,
          primaryTypographyProps = props.primaryTypographyProps,
          secondaryProp = props.secondary,
          secondaryTypographyProps = props.secondaryTypographyProps,
          other = objectWithoutProperties(props, ["children", "classes", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"]);
  
      var _React$useContext = React__default.useContext(ListContext),
          dense = _React$useContext.dense;
  
      var primary = primaryProp != null ? primaryProp : children;
  
      if (primary != null && primary.type !== Typography$1 && !disableTypography) {
        primary = React__default.createElement(Typography$1, _extends_1({
          variant: dense ? 'body2' : 'body1',
          className: classes.primary,
          component: "span"
        }, primaryTypographyProps), primary);
      }
  
      var secondary = secondaryProp;
  
      if (secondary != null && secondary.type !== Typography$1 && !disableTypography) {
        secondary = React__default.createElement(Typography$1, _extends_1({
          variant: "body2",
          className: classes.secondary,
          color: "textSecondary"
        }, secondaryTypographyProps), secondary);
      }
  
      return React__default.createElement("div", _extends_1({
        className: clsx(classes.root, className, dense && classes.dense, inset && classes.inset, primary && secondary && classes.multiline),
        ref: ref
      }, other), primary, secondary);
    });
    ListItemText.propTypes = {
      /**
       * Alias for the `primary` property.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * If `true`, the children won't be wrapped by a Typography component.
       * This can be useful to render an alternative Typography variant by wrapping
       * the `children` (or `primary`) text, and optional `secondary` text
       * with the Typography component.
       */
      disableTypography: propTypes.bool,
  
      /**
       * If `true`, the children will be indented.
       * This should be used if there is no left avatar or left icon.
       */
      inset: propTypes.bool,
  
      /**
       * The main content element.
       */
      primary: propTypes.node,
  
      /**
       * These props will be forwarded to the primary typography component
       * (as long as disableTypography is not `true`).
       */
      primaryTypographyProps: propTypes.object,
  
      /**
       * The secondary content element.
       */
      secondary: propTypes.node,
  
      /**
       * These props will be forwarded to the secondary typography component
       * (as long as disableTypography is not `true`).
       */
      secondaryTypographyProps: propTypes.object
    };
    var ListItemText$1 = withStyles$1(styles$15, {
      name: 'MuiListItemText'
    })(ListItemText);
  
    var styles$16 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          boxSizing: 'border-box',
          lineHeight: '48px',
          listStyle: 'none',
          color: theme.palette.text.secondary,
          fontFamily: theme.typography.fontFamily,
          fontWeight: theme.typography.fontWeightMedium,
          fontSize: theme.typography.pxToRem(14)
        },
  
        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          color: theme.palette.primary.main
        },
  
        /* Styles applied to the root element if `color="inherit"`. */
        colorInherit: {
          color: 'inherit'
        },
  
        /* Styles applied to the inner `component` element if `disableGutters={false}`. */
        gutters: {
          paddingLeft: 16,
          paddingRight: 16
        },
  
        /* Styles applied to the root element if `inset={true}`. */
        inset: {
          paddingLeft: 72
        },
  
        /* Styles applied to the root element if `disableSticky={false}`. */
        sticky: {
          position: 'sticky',
          top: 0,
          zIndex: 1,
          backgroundColor: 'inherit'
        }
      };
    };
    var ListSubheader = React__default.forwardRef(function ListSubheader(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'default' : _props$color,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'li' : _props$component,
          _props$disableGutters = props.disableGutters,
          disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,
          _props$disableSticky = props.disableSticky,
          disableSticky = _props$disableSticky === void 0 ? false : _props$disableSticky,
          _props$inset = props.inset,
          inset = _props$inset === void 0 ? false : _props$inset,
          other = objectWithoutProperties(props, ["classes", "className", "color", "component", "disableGutters", "disableSticky", "inset"]);
  
      return React__default.createElement(Component, _extends_1({
        className: clsx(classes.root, className, color !== 'default' && classes["color".concat(capitalize(color))], inset && classes.inset, !disableSticky && classes.sticky, !disableGutters && classes.gutters),
        ref: ref
      }, other));
    });
    ListSubheader.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['default', 'primary', 'inherit']),
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * If `true`, the List Subheader will not have gutters.
       */
      disableGutters: propTypes.bool,
  
      /**
       * If `true`, the List Subheader will not stick to the top during scroll.
       */
      disableSticky: propTypes.bool,
  
      /**
       * If `true`, the List Subheader will be indented.
       */
      inset: propTypes.bool
    };
    var ListSubheader$1 = withStyles$1(styles$16, {
      name: 'MuiListSubheader'
    })(ListSubheader);
  
    function getOffsetTop(rect, vertical) {
      var offset = 0;
  
      if (typeof vertical === 'number') {
        offset = vertical;
      } else if (vertical === 'center') {
        offset = rect.height / 2;
      } else if (vertical === 'bottom') {
        offset = rect.height;
      }
  
      return offset;
    }
    function getOffsetLeft(rect, horizontal) {
      var offset = 0;
  
      if (typeof horizontal === 'number') {
        offset = horizontal;
      } else if (horizontal === 'center') {
        offset = rect.width / 2;
      } else if (horizontal === 'right') {
        offset = rect.width;
      }
  
      return offset;
    }
  
    function getTransformOriginValue(transformOrigin) {
      return [transformOrigin.horizontal, transformOrigin.vertical].map(function (n) {
        return typeof n === 'number' ? "".concat(n, "px") : n;
      }).join(' ');
    } // Sum the scrollTop between two elements.
  
  
    function getScrollParent(parent, child) {
      var element = child;
      var scrollTop = 0;
  
      while (element && element !== parent) {
        element = element.parentNode;
        scrollTop += element.scrollTop;
      }
  
      return scrollTop;
    }
  
    function getAnchorEl(anchorEl) {
      return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
    }
  
    var styles$17 = {
      /* Styles applied to the `Paper` component. */
      paper: {
        position: 'absolute',
        overflowY: 'auto',
        overflowX: 'hidden',
        // So we see the popover when it's empty.
        // It's most likely on issue on userland.
        minWidth: 16,
        minHeight: 16,
        maxWidth: 'calc(100% - 32px)',
        maxHeight: 'calc(100% - 32px)',
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 'none'
      }
    };
    var Popover = React__default.forwardRef(function Popover(props, ref) {
      var action = props.action,
          anchorEl = props.anchorEl,
          anchorOrigin = props.anchorOrigin,
          anchorPosition = props.anchorPosition,
          anchorReference = props.anchorReference,
          children = props.children,
          classes = props.classes,
          containerProp = props.container,
          elevation = props.elevation,
          getContentAnchorEl = props.getContentAnchorEl,
          marginThreshold = props.marginThreshold,
          ModalClasses = props.ModalClasses,
          onEnter = props.onEnter,
          onEntered = props.onEntered,
          onEntering = props.onEntering,
          onExit = props.onExit,
          onExited = props.onExited,
          onExiting = props.onExiting,
          open = props.open,
          _props$PaperProps = props.PaperProps,
          PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,
          transformOrigin = props.transformOrigin,
          TransitionComponent = props.TransitionComponent,
          transitionDurationProp = props.transitionDuration,
          _props$TransitionProp = props.TransitionProps,
          TransitionProps = _props$TransitionProp === void 0 ? {} : _props$TransitionProp,
          other = objectWithoutProperties(props, ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "classes", "container", "elevation", "getContentAnchorEl", "marginThreshold", "ModalClasses", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "open", "PaperProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"]);
  
      var paperRef = React__default.useRef();
      var handleResizeRef = React__default.useRef(function () {});
      React__default.useImperativeHandle(action, function () {
        return {
          updatePosition: handleResizeRef.current
        };
      }, []); // Returns the top/left offset of the position
      // to attach to on the anchor element (or body if none is provided)
  
      var getAnchorOffset = React__default.useCallback(function (contentAnchorOffset) {
        if (anchorReference === 'anchorPosition') {
          warning_1(anchorPosition, 'Material-UI: you need to provide a `anchorPosition` property when using ' + '<Popover anchorReference="anchorPosition" />.');
          return anchorPosition;
        }
  
        var resolvedAnchorEl = getAnchorEl(anchorEl); // If an anchor element wasn't provided, just use the parent body element of this Popover
  
        var anchorElement = resolvedAnchorEl instanceof Element ? resolvedAnchorEl : ownerDocument(paperRef.current).body;
        var anchorRect = anchorElement.getBoundingClientRect();
        var anchorVertical = contentAnchorOffset === 0 ? anchorOrigin.vertical : 'center';
        return {
          top: anchorRect.top + getOffsetTop(anchorRect, anchorVertical),
          left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
        };
      }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]); // Returns the vertical offset of inner content to anchor the transform on if provided
  
      var getContentAnchorOffset = React__default.useCallback(function (element) {
        var contentAnchorOffset = 0;
  
        if (getContentAnchorEl && anchorReference === 'anchorEl') {
          var contentAnchorEl = getContentAnchorEl(element);
  
          if (contentAnchorEl && element.contains(contentAnchorEl)) {
            var scrollTop = getScrollParent(element, contentAnchorEl);
            contentAnchorOffset = contentAnchorEl.offsetTop + contentAnchorEl.clientHeight / 2 - scrollTop || 0;
          } // != the default value
  
  
          warning_1(anchorOrigin.vertical === 'top', ['Material-UI: you can not change the default `anchorOrigin.vertical` value ', 'when also providing the `getContentAnchorEl` property to the popover component.', 'Only use one of the two properties.', 'Set `getContentAnchorEl` to `null | undefined`' + ' or leave `anchorOrigin.vertical` unchanged.'].join('\n'));
        }
  
        return contentAnchorOffset;
      }, [anchorOrigin.vertical, anchorReference, getContentAnchorEl]); // Return the base transform origin using the element
      // and taking the content anchor offset into account if in use
  
      var getTransformOrigin = React__default.useCallback(function (elemRect) {
        var contentAnchorOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return {
          vertical: getOffsetTop(elemRect, transformOrigin.vertical) + contentAnchorOffset,
          horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
        };
      }, [transformOrigin.horizontal, transformOrigin.vertical]);
      var getPositioningStyle = React__default.useCallback(function (element) {
        // Check if the parent has requested anchoring on an inner content node
        var contentAnchorOffset = getContentAnchorOffset(element);
        var elemRect = {
          width: element.offsetWidth,
          height: element.offsetHeight
        }; // Get the transform origin point on the element itself
  
        var elemTransformOrigin = getTransformOrigin(elemRect, contentAnchorOffset);
  
        if (anchorReference === 'none') {
          return {
            top: null,
            left: null,
            transformOrigin: getTransformOriginValue(elemTransformOrigin)
          };
        } // Get the offset of of the anchoring element
  
  
        var anchorOffset = getAnchorOffset(contentAnchorOffset); // Calculate element positioning
  
        var top = anchorOffset.top - elemTransformOrigin.vertical;
        var left = anchorOffset.left - elemTransformOrigin.horizontal;
        var bottom = top + elemRect.height;
        var right = left + elemRect.width; // Use the parent window of the anchorEl if provided
  
        var containerWindow = ownerWindow(getAnchorEl(anchorEl)); // Window thresholds taking required margin into account
  
        var heightThreshold = containerWindow.innerHeight - marginThreshold;
        var widthThreshold = containerWindow.innerWidth - marginThreshold; // Check if the vertical axis needs shifting
  
        if (top < marginThreshold) {
          var diff = top - marginThreshold;
          top -= diff;
          elemTransformOrigin.vertical += diff;
        } else if (bottom > heightThreshold) {
          var _diff = bottom - heightThreshold;
  
          top -= _diff;
          elemTransformOrigin.vertical += _diff;
        }
  
        warning_1(elemRect.height <= heightThreshold || !elemRect.height || !heightThreshold, ['Material-UI: the popover component is too tall.', "Some part of it can not be seen on the screen (".concat(elemRect.height - heightThreshold, "px)."), 'Please consider adding a `max-height` to improve the user-experience.'].join('\n')); // Check if the horizontal axis needs shifting
  
        if (left < marginThreshold) {
          var _diff2 = left - marginThreshold;
  
          left -= _diff2;
          elemTransformOrigin.horizontal += _diff2;
        } else if (right > widthThreshold) {
          var _diff3 = right - widthThreshold;
  
          left -= _diff3;
          elemTransformOrigin.horizontal += _diff3;
        }
  
        return {
          top: "".concat(top, "px"),
          left: "".concat(left, "px"),
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }, [anchorEl, anchorReference, getAnchorOffset, getContentAnchorOffset, getTransformOrigin, marginThreshold]);
      var setPositioningStyles = React__default.useCallback(function (element) {
        var positioning = getPositioningStyle(element);
  
        if (positioning.top !== null) {
          element.style.top = positioning.top;
        }
  
        if (positioning.left !== null) {
          element.style.left = positioning.left;
        }
  
        element.style.transformOrigin = positioning.transformOrigin;
      }, [getPositioningStyle]);
  
      var handleEntering = function handleEntering(element) {
        if (onEntering) {
          onEntering(element);
        }
  
        setPositioningStyles(element);
      };
  
      var handlePaperRef = React__default.useCallback(function (instance) {
        // #StrictMode ready
        paperRef.current = ReactDOM__default.findDOMNode(instance);
      }, []);
      React__default.useEffect(function () {
        handleResizeRef.current = debounce_1(function () {
          // Because we debounce the event, the open property might no longer be true
          // when the callback resolves.
          if (!open) {
            return;
          }
  
          setPositioningStyles(paperRef.current);
        }, 166); // Corresponds to 10 frames at 60 Hz.
  
        window.addEventListener('resize', handleResizeRef.current);
        return function () {
          handleResizeRef.current.clear();
          window.removeEventListener('resize', handleResizeRef.current);
        };
      }, [open, setPositioningStyles]);
      var transitionDuration = transitionDurationProp;
  
      if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {
        transitionDuration = undefined;
      } // If the container prop is provided, use that
      // If the anchorEl prop is provided, use its parent body element as the container
      // If neither are provided let the Modal take care of choosing the container
  
  
      var container = containerProp || (anchorEl ? ownerDocument(getAnchorEl(anchorEl)).body : undefined);
      return React__default.createElement(Modal$1, _extends_1({
        classes: ModalClasses,
        container: container,
        open: open,
        ref: ref,
        BackdropProps: {
          invisible: true
        }
      }, other), React__default.createElement(TransitionComponent, _extends_1({
        appear: true,
        in: open,
        onEnter: onEnter,
        onEntered: onEntered,
        onExit: onExit,
        onExited: onExited,
        onExiting: onExiting,
        timeout: transitionDuration
      }, TransitionProps, {
        onEntering: createChainedFunction(handleEntering, TransitionProps.onEntering)
      }), React__default.createElement(Paper$1, _extends_1({
        elevation: elevation,
        ref: handlePaperRef
      }, PaperProps, {
        className: clsx(classes.paper, PaperProps.className)
      }), children)));
    });
    Popover.propTypes = {
      /**
       * This is callback property. It's called by the component on mount.
       * This is useful when you want to trigger an action programmatically.
       * It currently only supports updatePosition() action.
       *
       * @param {object} actions This object contains all possible actions
       * that can be triggered programmatically.
       */
      action: propTypes.func,
  
      /**
       * This is the DOM element, or a function that returns the DOM element,
       * that may be used to set the position of the popover.
       */
      anchorEl: chainPropTypes(propTypes.oneOfType([propTypes.object, propTypes.func]), function (props) {
        if (props.open && props.anchorReference === 'anchorEl') {
          var resolvedAnchorEl = getAnchorEl(props.anchorEl);
  
          if (resolvedAnchorEl instanceof Element) {
            var box = resolvedAnchorEl.getBoundingClientRect();
  
            if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
              return new Error(['Material-UI: the `anchorEl` prop provided to the component is invalid.', 'The node element should be visible.'].join('\n'));
            }
          } else {
            return new Error(['Material-UI: the `anchorEl` prop provided to the component is invalid.', "It should be an Element instance but it's `".concat(resolvedAnchorEl, "` instead.")].join('\n'));
          }
        }
  
        return null;
      }),
  
      /**
       * This is the point on the anchor where the popover's
       * `anchorEl` will attach to. This is not used when the
       * anchorReference is 'anchorPosition'.
       *
       * Options:
       * vertical: [top, center, bottom];
       * horizontal: [left, center, right].
       */
      anchorOrigin: propTypes.shape({
        horizontal: propTypes.oneOfType([propTypes.number, propTypes.oneOf(['left', 'center', 'right'])]).isRequired,
        vertical: propTypes.oneOfType([propTypes.number, propTypes.oneOf(['top', 'center', 'bottom'])]).isRequired
      }),
  
      /**
       * This is the position that may be used
       * to set the position of the popover.
       * The coordinates are relative to
       * the application's client area.
       */
      anchorPosition: propTypes.shape({
        left: propTypes.number.isRequired,
        top: propTypes.number.isRequired
      }),
  
      /*
       * This determines which anchor prop to refer to to set
       * the position of the popover.
       */
      anchorReference: propTypes.oneOf(['anchorEl', 'anchorPosition', 'none']),
  
      /**
       * The content of the component.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * A node, component instance, or function that returns either.
       * The `container` will passed to the Modal component.
       * By default, it uses the body of the anchorEl's top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: propTypes.oneOfType([propTypes.object, propTypes.func]),
  
      /**
       * The elevation of the popover.
       */
      elevation: propTypes.number,
  
      /**
       * This function is called in order to retrieve the content anchor element.
       * It's the opposite of the `anchorEl` property.
       * The content anchor element should be an element inside the popover.
       * It's used to correctly scroll and set the position of the popover.
       * The positioning strategy tries to make the content anchor element just above the
       * anchor element.
       */
      getContentAnchorEl: propTypes.func,
  
      /**
       * Specifies how close to the edge of the window the popover can appear.
       */
      marginThreshold: propTypes.number,
  
      /**
       * `classes` property applied to the [`Modal`](/api/modal/) element.
       */
      ModalClasses: propTypes.object,
  
      /**
       * Callback fired when the component requests to be closed.
       *
       * @param {object} event The event source of the callback.
       * @param {string} reason Can be:`"escapeKeyDown"`, `"backdropClick"`
       */
      onClose: propTypes.func,
  
      /**
       * Callback fired before the component is entering.
       */
      onEnter: propTypes.func,
  
      /**
       * Callback fired when the component has entered.
       */
      onEntered: propTypes.func,
  
      /**
       * Callback fired when the component is entering.
       */
      onEntering: propTypes.func,
  
      /**
       * Callback fired before the component is exiting.
       */
      onExit: propTypes.func,
  
      /**
       * Callback fired when the component has exited.
       */
      onExited: propTypes.func,
  
      /**
       * Callback fired when the component is exiting.
       */
      onExiting: propTypes.func,
  
      /**
       * If `true`, the popover is visible.
       */
      open: propTypes.bool.isRequired,
  
      /**
       * Properties applied to the [`Paper`](/api/paper/) element.
       */
      PaperProps: propTypes.shape({
        component: elementTypeAcceptingRef$1
      }),
  
      /**
       * This is the point on the popover which
       * will attach to the anchor's origin.
       *
       * Options:
       * vertical: [top, center, bottom, x(px)];
       * horizontal: [left, center, right, x(px)].
       */
      transformOrigin: propTypes.shape({
        horizontal: propTypes.oneOfType([propTypes.number, propTypes.oneOf(['left', 'center', 'right'])]).isRequired,
        vertical: propTypes.oneOfType([propTypes.number, propTypes.oneOf(['top', 'center', 'bottom'])]).isRequired
      }),
  
      /**
       * The component used for the transition.
       */
      TransitionComponent: propTypes.elementType,
  
      /**
       * Set to 'auto' to automatically calculate transition time based on height.
       */
      transitionDuration: propTypes.oneOfType([propTypes.number, propTypes.shape({
        enter: propTypes.number,
        exit: propTypes.number
      }), propTypes.oneOf(['auto'])]),
  
      /**
       * Properties applied to the `Transition` element.
       */
      TransitionProps: propTypes.object
    };
    Popover.defaultProps = {
      anchorReference: 'anchorEl',
      anchorOrigin: {
        vertical: 'top',
        horizontal: 'left'
      },
      elevation: 8,
      marginThreshold: 16,
      transformOrigin: {
        vertical: 'top',
        horizontal: 'left'
      },
      TransitionComponent: Grow$1,
      transitionDuration: 'auto'
    };
    var Popover$1 = withStyles$1(styles$17, {
      name: 'MuiPopover'
    })(Popover);
  
    function nextItem(list, item, disableListWrap) {
      if (item && item.nextElementSibling) {
        return item.nextElementSibling;
      }
  
      return disableListWrap ? null : list.firstChild;
    }
  
    function previousItem(list, item, disableListWrap) {
      if (item && item.previousElementSibling) {
        return item.previousElementSibling;
      }
  
      return disableListWrap ? null : list.lastChild;
    }
  
    function textCriteriaMatches(nextFocus, textCriteria) {
      if (textCriteria === undefined) {
        return true;
      }
  
      var text = nextFocus.innerText;
  
      if (text === undefined) {
        // jsdom doesn't support innerText
        text = nextFocus.textContent;
      }
  
      if (text === undefined) {
        return false;
      }
  
      text = text.trim().toLowerCase();
  
      if (text.length === 0) {
        return false;
      }
  
      if (textCriteria.repeating) {
        return text[0] === textCriteria.keys[0];
      }
  
      return text.indexOf(textCriteria.keys.join('')) === 0;
    }
  
    function moveFocus(list, currentFocus, disableListWrap, traversalFunction, textCriteria) {
      var wrappedOnce = false;
      var nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
  
      while (nextFocus) {
        // Prevent infinite loop.
        if (nextFocus === list.firstChild) {
          if (wrappedOnce) {
            return false;
          }
  
          wrappedOnce = true;
        } // Move to the next element.
  
  
        if (!nextFocus.hasAttribute('tabindex') || nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true' || !textCriteriaMatches(nextFocus, textCriteria)) {
          nextFocus = traversalFunction(list, nextFocus, disableListWrap);
        } else {
          break;
        }
      }
  
      if (nextFocus) {
        nextFocus.focus();
        return true;
      }
  
      return false;
    }
  
    var useEnhancedEffect$6 = typeof window === 'undefined' ? React__default.useEffect : React__default.useLayoutEffect;
    var MenuList = React__default.forwardRef(function MenuList(props, ref) {
      var actions = props.actions,
          autoFocus = props.autoFocus,
          className = props.className,
          onKeyDown = props.onKeyDown,
          _props$disableListWra = props.disableListWrap,
          disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra,
          other = objectWithoutProperties(props, ["actions", "autoFocus", "className", "onKeyDown", "disableListWrap"]);
  
      var listRef = React__default.useRef(null);
      var textCriteriaRef = React__default.useRef({
        keys: [],
        repeating: true,
        previousKeyMatched: true,
        lastTime: null
      });
      useEnhancedEffect$6(function () {
        if (autoFocus) {
          listRef.current.focus();
        }
      }, [autoFocus]);
      React__default.useImperativeHandle(actions, function () {
        return {
          adjustStyleForScrollbar: function adjustStyleForScrollbar(containerElement, theme) {
            // Let's ignore that piece of logic if users are already overriding the width
            // of the menu.
            var noExplicitWidth = !listRef.current.style.width;
  
            if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
              var scrollbarSize = "".concat(getScrollbarSize(true), "px");
              listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;
              listRef.current.style.width = "calc(100% + ".concat(scrollbarSize, ")");
            }
  
            return listRef.current;
          }
        };
      }, []);
  
      var handleKeyDown = function handleKeyDown(event) {
        var list = listRef.current;
        var key = event.key;
        var currentFocus = ownerDocument(list).activeElement;
  
        if ((key === 'ArrowUp' || key === 'ArrowDown') && (!currentFocus || currentFocus && !list.contains(currentFocus))) {
          moveFocus(list, null, disableListWrap, nextItem);
        } else if (key === 'ArrowDown') {
          event.preventDefault();
          moveFocus(list, currentFocus, disableListWrap, nextItem);
        } else if (key === 'ArrowUp') {
          event.preventDefault();
          moveFocus(list, currentFocus, disableListWrap, previousItem);
        } else if (key === 'Home') {
          event.preventDefault();
          moveFocus(list, null, disableListWrap, nextItem);
        } else if (key === 'End') {
          event.preventDefault();
          moveFocus(list, null, disableListWrap, previousItem);
        } else if (key.length === 1) {
          var criteria = textCriteriaRef.current;
          var lowerKey = key.toLowerCase();
          var currTime = performance.now();
  
          if (criteria.keys.length > 0) {
            // Reset
            if (currTime - criteria.lastTime > 500) {
              criteria.keys = [];
              criteria.repeating = true;
              criteria.previousKeyMatched = true;
            } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
              criteria.repeating = false;
            }
          }
  
          criteria.lastTime = currTime;
          criteria.keys.push(lowerKey);
          var keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
  
          if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, nextItem, criteria))) {
            event.preventDefault();
          } else {
            criteria.previousKeyMatched = false;
          }
        }
  
        if (onKeyDown) {
          onKeyDown(event);
        }
      };
  
      var handleOwnRef = React__default.useCallback(function (instance) {
        // #StrictMode ready
        listRef.current = ReactDOM__default.findDOMNode(instance);
      }, []);
      var handleRef = useForkRef(handleOwnRef, ref);
      return React__default.createElement(List$1, _extends_1({
        role: "menu",
        ref: handleRef,
        className: className,
        onKeyDown: handleKeyDown,
        tabIndex: autoFocus ? 0 : -1
      }, other));
    });
    MenuList.propTypes = {
      /**
       * @ignore
       */
      actions: propTypes.shape({
        current: propTypes.object
      }),
  
      /**
       * If `true`, the list will be focused during the first mount.
       * Focus will also be triggered if the value changes from false to true.
       */
      autoFocus: propTypes.bool,
  
      /**
       * MenuList contents, normally `MenuItem`s.
       */
      children: propTypes.node,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * If `true`, the menu items will not wrap focus.
       */
      disableListWrap: propTypes.bool,
  
      /**
       * @ignore
       */
      onKeyDown: propTypes.func
    };
  
    var RTL_ORIGIN = {
      vertical: 'top',
      horizontal: 'right'
    };
    var LTR_ORIGIN = {
      vertical: 'top',
      horizontal: 'left'
    };
    var styles$18 = {
      /* Styles applied to the `Paper` component. */
      paper: {
        // specZ: The maximum height of a simple menu should be one or more rows less than the view
        // height. This ensures a tapable area outside of the simple menu with which to dismiss
        // the menu.
        maxHeight: 'calc(100% - 96px)',
        // Add iOS momentum scrolling.
        WebkitOverflowScrolling: 'touch'
      },
  
      /* Styles applied to the `List` component via `MenuList`. */
      list: {
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 'none'
      }
    };
    var Menu = React__default.forwardRef(function Menu(props, ref) {
      var autoFocusProp = props.autoFocus,
          children = props.children,
          classes = props.classes,
          _props$disableAutoFoc = props.disableAutoFocusItem,
          disableAutoFocusItem = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,
          _props$MenuListProps = props.MenuListProps,
          MenuListProps = _props$MenuListProps === void 0 ? {} : _props$MenuListProps,
          onClose = props.onClose,
          onEntering = props.onEntering,
          open = props.open,
          _props$PaperProps = props.PaperProps,
          PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,
          PopoverClasses = props.PopoverClasses,
          theme = props.theme,
          _props$transitionDura = props.transitionDuration,
          transitionDuration = _props$transitionDura === void 0 ? 'auto' : _props$transitionDura,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'selectedMenu' : _props$variant,
          other = objectWithoutProperties(props, ["autoFocus", "children", "classes", "disableAutoFocusItem", "MenuListProps", "onClose", "onEntering", "open", "PaperProps", "PopoverClasses", "theme", "transitionDuration", "variant"]);
  
      var autoFocus = autoFocusProp !== undefined ? autoFocusProp : !disableAutoFocusItem;
      var menuListActionsRef = React__default.useRef(null);
      var firstValidItemRef = React__default.useRef(null);
      var firstSelectedItemRef = React__default.useRef(null);
  
      var getContentAnchorEl = function getContentAnchorEl() {
        return firstSelectedItemRef.current || firstValidItemRef.current;
      };
  
      var handleEntering = function handleEntering(element) {
        if (menuListActionsRef.current) {
          menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
        }
  
        if (onEntering) {
          onEntering(element);
        }
      };
  
      var handleListKeyDown = function handleListKeyDown(event) {
        if (event.key === 'Tab') {
          event.preventDefault();
  
          if (onClose) {
            onClose(event, 'tabKeyDown');
          }
        }
      };
  
      var firstValidElementIndex = null;
      var firstSelectedIndex = null;
      var items = React__default.Children.map(children, function (child, index) {
        if (!React__default.isValidElement(child)) {
          return null;
        }
  
        warning_1(child.type !== React__default.Fragment, ["Material-UI: the Menu component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
  
        if (firstValidElementIndex === null) {
          firstValidElementIndex = index;
        }
  
        var newChildProps = null;
  
        if (variant !== "menu" && firstSelectedIndex === null && child.props.selected && !child.props.disabled) {
          firstSelectedIndex = index;
          newChildProps = {};
  
          if (autoFocus) {
            newChildProps.autoFocus = true;
          }
  
          if (child.props.tabIndex === undefined) {
            newChildProps.tabIndex = 0;
          }
  
          newChildProps.ref = function (instance) {
            // #StrictMode ready
            firstSelectedItemRef.current = ReactDOM__default.findDOMNode(instance);
            setRef(child.ref, instance);
          };
        } else if (index === firstValidElementIndex) {
          newChildProps = {
            ref: function ref(instance) {
              // #StrictMode ready
              firstValidItemRef.current = ReactDOM__default.findDOMNode(instance);
              setRef(child.ref, instance);
            }
          };
        }
  
        if (newChildProps !== null) {
          return React__default.cloneElement(child, newChildProps);
        }
  
        return child;
      });
      return React__default.createElement(Popover$1, _extends_1({
        getContentAnchorEl: getContentAnchorEl,
        classes: PopoverClasses,
        onClose: onClose,
        onEntering: handleEntering,
        anchorOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,
        transformOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,
        PaperProps: _extends_1({}, PaperProps, {
          classes: _extends_1({}, PaperProps.classes, {
            root: classes.paper
          })
        }),
        open: open,
        ref: ref,
        transitionDuration: transitionDuration
      }, other), React__default.createElement(MenuList, _extends_1({
        onKeyDown: handleListKeyDown,
        actions: menuListActionsRef,
        autoFocus: autoFocus && firstSelectedIndex === null
      }, MenuListProps, {
        className: clsx(classes.list, MenuListProps.className)
      }), items));
    });
    Menu.propTypes = {
      /**
       * The DOM element used to set the position of the menu.
       */
      anchorEl: propTypes.oneOfType([propTypes.object, propTypes.func]),
  
      /**
       * If `true` (default), the menu list (possibly a particular item depending on the menu variant) will receive focus on open.
       */
      autoFocus: propTypes.bool,
  
      /**
       * Menu contents, normally `MenuItem`s.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * Same as `autoFocus=false`.
       * @deprecated Use `autoFocus` instead
       */
      disableAutoFocusItem: propTypes.bool,
  
      /**
       * Properties applied to the [`MenuList`](/api/menu-list/) element.
       */
      MenuListProps: propTypes.object,
  
      /**
       * Callback fired when the component requests to be closed.
       *
       * @param {object} event The event source of the callback
       * @param {string} reason Can be:`"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`
       */
      onClose: propTypes.func,
  
      /**
       * Callback fired before the Menu enters.
       */
      onEnter: propTypes.func,
  
      /**
       * Callback fired when the Menu has entered.
       */
      onEntered: propTypes.func,
  
      /**
       * Callback fired when the Menu is entering.
       */
      onEntering: propTypes.func,
  
      /**
       * Callback fired before the Menu exits.
       */
      onExit: propTypes.func,
  
      /**
       * Callback fired when the Menu has exited.
       */
      onExited: propTypes.func,
  
      /**
       * Callback fired when the Menu is exiting.
       */
      onExiting: propTypes.func,
  
      /**
       * If `true`, the menu is visible.
       */
      open: propTypes.bool.isRequired,
  
      /**
       * @ignore
       */
      PaperProps: propTypes.object,
  
      /**
       * `classes` property applied to the [`Popover`](/api/popover/) element.
       */
      PopoverClasses: propTypes.object,
  
      /**
       * @ignore
       */
      theme: propTypes.object.isRequired,
  
      /**
       * The length of the transition in `ms`, or 'auto'
       */
      transitionDuration: propTypes.oneOfType([propTypes.number, propTypes.shape({
        enter: propTypes.number,
        exit: propTypes.number
      }), propTypes.oneOf(['auto'])]),
  
      /**
       * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
       * and the vertical alignment relative to the anchor element.
       */
      variant: propTypes.oneOf(['menu', 'selectedMenu'])
    };
    var Menu$1 = withStyles$1(styles$18, {
      name: 'MuiMenu',
      withTheme: true
    })(Menu);
  
    var styles$19 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: _extends_1({}, theme.typography.subtitle1, {
          minHeight: 48,
          paddingTop: 4,
          paddingBottom: 4,
          boxSizing: 'border-box',
          width: 'auto',
          overflow: 'hidden',
          whiteSpace: 'nowrap'
        }),
  
        /* Styles applied to the root element if `disableGutters={false}`. */
        gutters: {
          paddingLeft: 16,
          paddingRight: 16
        },
  
        /* Styles applied to the root element if `selected={true}`. */
        selected: {}
      };
    };
    var MenuItem = React__default.forwardRef(function MenuItem(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          component = _props$component === void 0 ? 'li' : _props$component,
          _props$disableGutters = props.disableGutters,
          disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,
          _props$role = props.role,
          role = _props$role === void 0 ? 'menuitem' : _props$role,
          selected = props.selected,
          tabIndexProp = props.tabIndex,
          other = objectWithoutProperties(props, ["classes", "className", "component", "disableGutters", "role", "selected", "tabIndex"]);
  
      var tabIndex;
  
      if (!props.disabled) {
        tabIndex = tabIndexProp !== undefined ? tabIndexProp : -1;
      }
  
      return React__default.createElement(ListItem$1, _extends_1({
        button: true,
        role: role,
        tabIndex: tabIndex,
        component: component,
        selected: selected,
        disableGutters: disableGutters,
        className: clsx(classes.root, className, selected && classes.selected, !disableGutters && classes.gutters),
        ref: ref
      }, other));
    });
    MenuItem.propTypes = {
      /**
       * Menu item contents.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * @ignore
       */
      disabled: propTypes.bool,
  
      /**
       * If `true`, the left and right padding is removed.
       */
      disableGutters: propTypes.bool,
  
      /**
       * @ignore
       */
      role: propTypes.string,
  
      /**
       * @ignore
       */
      selected: propTypes.bool,
  
      /**
       * @ignore
       */
      tabIndex: propTypes.number
    };
    var MenuItem$1 = withStyles$1(styles$19, {
      name: 'MuiMenuItem'
    })(MenuItem);
  
    var styles$1a = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'flex',
          flexDirection: 'row',
          justifyContent: 'space-between',
          alignItems: 'center',
          background: theme.palette.background.default,
          padding: 8
        },
  
        /* Styles applied to the root element if `position="bottom"`. */
        positionBottom: {
          position: 'fixed',
          bottom: 0,
          left: 0,
          right: 0,
          zIndex: theme.zIndex.mobileStepper
        },
  
        /* Styles applied to the root element if `position="top"`. */
        positionTop: {
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          zIndex: theme.zIndex.mobileStepper
        },
  
        /* Styles applied to the root element if `position="static"`. */
        positionStatic: {},
  
        /* Styles applied to the dots container if `variant="dots"`. */
        dots: {
          display: 'flex',
          flexDirection: 'row'
        },
  
        /* Styles applied to each dot if `variant="dots"`. */
        dot: {
          backgroundColor: theme.palette.action.disabled,
          borderRadius: '50%',
          width: 8,
          height: 8,
          margin: '0 2px'
        },
  
        /* Styles applied to a dot if `variant="dots"` and this is the active step. */
        dotActive: {
          backgroundColor: theme.palette.primary.main
        },
  
        /* Styles applied to the Linear Progress component if `variant="progress"`. */
        progress: {
          width: '50%'
        }
      };
    };
    var MobileStepper = React__default.forwardRef(function MobileStepper(props, ref) {
      var _props$activeStep = props.activeStep,
          activeStep = _props$activeStep === void 0 ? 0 : _props$activeStep,
          backButton = props.backButton,
          classes = props.classes,
          className = props.className,
          LinearProgressProps = props.LinearProgressProps,
          nextButton = props.nextButton,
          _props$position = props.position,
          position = _props$position === void 0 ? 'bottom' : _props$position,
          steps = props.steps,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'dots' : _props$variant,
          other = objectWithoutProperties(props, ["activeStep", "backButton", "classes", "className", "LinearProgressProps", "nextButton", "position", "steps", "variant"]);
  
      return React__default.createElement(Paper$1, _extends_1({
        square: true,
        elevation: 0,
        className: clsx(classes.root, classes["position".concat(capitalize(position))], className),
        ref: ref
      }, other), backButton, variant === 'text' && React__default.createElement(React__default.Fragment, null, activeStep + 1, " / ", steps), variant === 'dots' && React__default.createElement("div", {
        className: classes.dots
      }, toConsumableArray(new Array(steps)).map(function (_, index) {
        return React__default.createElement("div", {
          key: index,
          className: clsx(classes.dot, index === activeStep && classes.dotActive)
        });
      })), variant === 'progress' && React__default.createElement(LinearProgress$1, _extends_1({
        className: classes.progress,
        variant: "determinate",
        value: Math.ceil(activeStep / (steps - 1) * 100)
      }, LinearProgressProps)), nextButton);
    });
    MobileStepper.propTypes = {
      /**
       * Set the active step (zero based index).
       * Defines which dot is highlighted when the variant is 'dots'.
       */
      activeStep: propTypes.number,
  
      /**
       * A back button element. For instance, it can be a `Button` or an `IconButton`.
       */
      backButton: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * Properties applied to the `LinearProgress` element.
       */
      LinearProgressProps: propTypes.object,
  
      /**
       * A next button element. For instance, it can be a `Button` or an `IconButton`.
       */
      nextButton: propTypes.node,
  
      /**
       * Set the positioning type.
       */
      position: propTypes.oneOf(['bottom', 'top', 'static']),
  
      /**
       * The total steps.
       */
      steps: propTypes.number.isRequired,
  
      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['text', 'dots', 'progress'])
    };
    var MobileStepper$1 = withStyles$1(styles$1a, {
      name: 'MuiMobileStepper'
    })(MobileStepper);
  
    /**
     * @ignore - internal component.
     */
  
    var NativeSelectInput = React__default.forwardRef(function NativeSelectInput(props, ref) {
      var classes = props.classes,
          className = props.className,
          disabled = props.disabled,
          IconComponent = props.IconComponent,
          inputRef = props.inputRef,
          name = props.name,
          onChange = props.onChange,
          value = props.value,
          variant = props.variant,
          other = objectWithoutProperties(props, ["classes", "className", "disabled", "IconComponent", "inputRef", "name", "onChange", "value", "variant"]);
  
      return React__default.createElement("div", {
        className: classes.root
      }, React__default.createElement("select", _extends_1({
        className: clsx(classes.select, className, variant === 'filled' && classes.filled, variant === 'outlined' && classes.outlined, disabled && classes.disabled),
        name: name,
        disabled: disabled,
        onChange: onChange,
        value: value,
        ref: inputRef || ref
      }, other)), React__default.createElement(IconComponent, {
        className: classes.icon
      }));
    });
    NativeSelectInput.propTypes = {
      /**
       * The option elements to populate the select with.
       * Can be some `<option>` elements.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * The CSS class name of the select element.
       */
      className: propTypes.string,
  
      /**
       * If `true`, the select will be disabled.
       */
      disabled: propTypes.bool,
  
      /**
       * The icon that displays the arrow.
       */
      IconComponent: propTypes.elementType,
  
      /**
       * Use that property to pass a ref callback to the native select element.
       * @deprecated
       */
      inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  
      /**
       * Name attribute of the `select` or hidden `input` element.
       */
      name: propTypes.string,
  
      /**
       * Callback function fired when a menu item is selected.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value`.
       */
      onChange: propTypes.func,
  
      /**
       * The input value.
       */
      value: propTypes.any,
  
      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['standard', 'outlined', 'filled'])
    };
  
    /**
     * @ignore - internal component.
     */
  
    var ArrowDropDownIcon = createSvgIcon(React__default.createElement("path", {
      d: "M7 10l5 5 5-5z"
    }), 'ArrowDropDown');
  
    var styles$1b = function styles(theme) {
      return {
        /* Styles applied to the `Input` component `root` class. */
        root: {
          position: 'relative',
          width: '100%'
        },
  
        /* Styles applied to the `Input` component `select` class. */
        select: {
          '-moz-appearance': 'none',
          // Reset
          '-webkit-appearance': 'none',
          // Reset
          // When interacting quickly, the text can end up selected.
          // Native select can't be selected either.
          userSelect: 'none',
          paddingRight: 32,
          borderRadius: 0,
          // Reset
          width: 'calc(100% - 32px)',
          minWidth: 16,
          // So it doesn't collapse.
          cursor: 'pointer',
          '&:focus': {
            // Show that it's not an text input
            backgroundColor: theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)',
            borderRadius: 0 // Reset Chrome style
  
          },
          // Remove IE 11 arrow
          '&::-ms-expand': {
            display: 'none'
          },
          '&$disabled': {
            cursor: 'default'
          },
          '&[multiple]': {
            height: 'auto'
          },
          '&:not([multiple]) option, &:not([multiple]) optgroup': {
            backgroundColor: theme.palette.background.paper
          }
        },
  
        /* Styles applied to the `Input` component if `variant="filled"`. */
        filled: {
          width: 'calc(100% - 44px)'
        },
  
        /* Styles applied to the `Input` component if `variant="outlined"`. */
        outlined: {
          width: 'calc(100% - 46px)',
          borderRadius: theme.shape.borderRadius
        },
  
        /* Styles applied to the `Input` component `selectMenu` class. */
        selectMenu: {
          width: 'auto',
          // Fix Safari textOverflow
          height: 'auto',
          // Reset
          textOverflow: 'ellipsis',
          whiteSpace: 'nowrap',
          overflow: 'hidden'
        },
  
        /* Pseudo-class applied to the `Input` component `disabled` class. */
        disabled: {},
  
        /* Styles applied to the `Input` component `icon` class. */
        icon: {
          // We use a position absolute over a flexbox in order to forward the pointer events
          // to the input.
          position: 'absolute',
          right: 0,
          top: 'calc(50% - 12px)',
          // Center vertically
          color: theme.palette.action.active,
          'pointer-events': 'none' // Don't block pointer events on the select under the icon.
  
        }
      };
    };
    var defaultInput = React__default.createElement(Input$1, null);
    /**
     * An alternative to `<Select native />` with a much smaller bundle size footprint.
     */
  
    var NativeSelect = React__default.forwardRef(function NativeSelect(props, ref) {
      var children = props.children,
          classes = props.classes,
          _props$IconComponent = props.IconComponent,
          IconComponent = _props$IconComponent === void 0 ? ArrowDropDownIcon : _props$IconComponent,
          _props$input = props.input,
          input = _props$input === void 0 ? defaultInput : _props$input,
          inputProps = props.inputProps,
          muiFormControl = props.muiFormControl,
          variant = props.variant,
          other = objectWithoutProperties(props, ["children", "classes", "IconComponent", "input", "inputProps", "muiFormControl", "variant"]);
  
      var fcs = formControlState({
        props: props,
        muiFormControl: muiFormControl,
        states: ['variant']
      });
      return React__default.cloneElement(input, _extends_1({
        // Most of the logic is implemented in `NativeSelectInput`.
        // The `Select` component is a simple API wrapper to expose something better to play with.
        inputComponent: NativeSelectInput,
        inputProps: _extends_1({
          children: children,
          classes: classes,
          IconComponent: IconComponent,
          variant: fcs.variant,
          type: undefined
        }, inputProps, input ? input.props.inputProps : {}),
        ref: ref
      }, other));
    });
    NativeSelect.propTypes = {
      /**
       * The option elements to populate the select with.
       * Can be some `<option>` elements.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * The icon that displays the arrow.
       */
      IconComponent: propTypes.elementType,
  
      /**
       * An `Input` element; does not have to be a material-ui specific `Input`.
       */
      input: propTypes.element,
  
      /**
       * Attributes applied to the `select` element.
       */
      inputProps: propTypes.object,
  
      /**
       * @ignore
       */
      muiFormControl: propTypes.object,
  
      /**
       * Callback function fired when a menu item is selected.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value`.
       */
      onChange: propTypes.func,
  
      /**
       * The input value.
       */
      value: propTypes.any,
  
      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['standard', 'outlined', 'filled'])
    };
    NativeSelect.muiName = 'Select';
    var NativeSelect$1 = withStyles$1(styles$1b, {
      name: 'MuiNativeSelect'
    })(withFormControlContext(NativeSelect));
  
    var styles$1c = function styles(theme) {
      var align = theme.direction === 'rtl' ? 'right' : 'left';
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'absolute',
          bottom: 0,
          right: 0,
          top: -5,
          left: 0,
          margin: 0,
          padding: 0,
          pointerEvents: 'none',
          borderRadius: theme.shape.borderRadius,
          borderStyle: 'solid',
          borderWidth: 1,
          // Match the Input Label
          transition: theme.transitions.create(["padding-".concat(align), 'border-color', 'border-width'], {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut
          })
        },
  
        /* Styles applied to the legend element. */
        legend: {
          textAlign: 'left',
          padding: 0,
          lineHeight: '11px',
          transition: theme.transitions.create('width', {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut
          })
        }
      };
    };
    /**
     * @ignore - internal component.
     */
  
    var NotchedOutline = React__default.forwardRef(function NotchedOutline(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          labelWidthProp = props.labelWidth,
          notched = props.notched,
          style = props.style,
          theme = props.theme,
          other = objectWithoutProperties(props, ["children", "classes", "className", "labelWidth", "notched", "style", "theme"]);
  
      var align = theme.direction === 'rtl' ? 'right' : 'left';
      var labelWidth = labelWidthProp > 0 ? labelWidthProp * 0.75 + 8 : 0;
      return React__default.createElement("fieldset", _extends_1({
        "aria-hidden": true,
        style: _extends_1(defineProperty({}, "padding".concat(capitalize(align)), 8 + (notched ? 0 : labelWidth / 2)), style),
        className: clsx(classes.root, className),
        ref: ref
      }, other), React__default.createElement("legend", {
        className: classes.legend,
        style: {
          // IE 11: fieldset with legend does not render
          // a border radius. This maintains consistency
          // by always having a legend rendered
          width: notched ? labelWidth : 0.01
        }
      }, React__default.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: '&#8203;'
        }
      })));
    });
    NotchedOutline.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The width of the label.
       */
      labelWidth: propTypes.number.isRequired,
  
      /**
       * If `true`, the outline is notched to accommodate the label.
       */
      notched: propTypes.bool.isRequired,
  
      /**
       * @ignore
       */
      style: propTypes.object,
  
      /**
       * @ignore
       */
      theme: propTypes.object
    };
    var NotchedOutline$1 = withStyles$1(styles$1c, {
      name: 'PrivateNotchedOutline',
      withTheme: true
    })(NotchedOutline);
  
    var styles$1d = function styles(theme) {
      var borderColor = theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'relative',
          '& $notchedOutline': {
            borderColor: borderColor
          },
          '&:hover $notchedOutline': {
            borderColor: theme.palette.text.primary,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              borderColor: borderColor
            }
          },
          '&$focused $notchedOutline': {
            borderColor: theme.palette.primary.main,
            borderWidth: 2
          },
          '&$error $notchedOutline': {
            borderColor: theme.palette.error.main
          },
          '&$disabled $notchedOutline': {
            borderColor: theme.palette.action.disabled
          }
        },
  
        /* Styles applied to the root element if the component is focused. */
        focused: {},
  
        /* Styles applied to the root element if `disabled={true}`. */
        disabled: {},
  
        /* Styles applied to the root element if `startAdornment` is provided. */
        adornedStart: {
          paddingLeft: 14
        },
  
        /* Styles applied to the root element if `endAdornment` is provided. */
        adornedEnd: {
          paddingRight: 14
        },
  
        /* Styles applied to the root element if `error={true}`. */
        error: {},
  
        /* Styles applied to the `input` element if `margin="dense"`. */
        marginDense: {},
  
        /* Styles applied to the root element if `multiline={true}`. */
        multiline: {
          padding: '18.5px 14px',
          '&$marginDense': {
            paddingTop: 10.5,
            paddingBottom: 10.5
          }
        },
  
        /* Styles applied to the `NotchedOutline` element. */
        notchedOutline: {},
  
        /* Styles applied to the `input` element. */
        input: {
          padding: '18.5px 14px'
        },
  
        /* Styles applied to the `input` element if `margin="dense"`. */
        inputMarginDense: {
          paddingTop: 10.5,
          paddingBottom: 10.5
        },
  
        /* Styles applied to the `input` element if `multiline={true}`. */
        inputMultiline: {
          padding: 0
        },
  
        /* Styles applied to the `input` element if `startAdornment` is provided. */
        inputAdornedStart: {
          paddingLeft: 0
        },
  
        /* Styles applied to the `input` element if `endAdornment` is provided. */
        inputAdornedEnd: {
          paddingRight: 0
        }
      };
    };
    var OutlinedInput = React__default.forwardRef(function OutlinedInput(props, ref) {
      var classes = props.classes,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          _props$inputComponent = props.inputComponent,
          inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,
          _props$labelWidth = props.labelWidth,
          labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth,
          _props$multiline = props.multiline,
          multiline = _props$multiline === void 0 ? false : _props$multiline,
          notched = props.notched,
          _props$type = props.type,
          type = _props$type === void 0 ? 'text' : _props$type,
          other = objectWithoutProperties(props, ["classes", "fullWidth", "inputComponent", "labelWidth", "multiline", "notched", "type"]);
  
      return React__default.createElement(InputBase$1, _extends_1({
        renderPrefix: function renderPrefix(state) {
          return React__default.createElement(NotchedOutline$1, {
            className: classes.notchedOutline,
            labelWidth: labelWidth,
            notched: typeof notched !== 'undefined' ? notched : Boolean(state.startAdornment || state.filled || state.focused)
          });
        },
        classes: _extends_1({}, classes, {
          root: clsx(classes.root, classes.underline),
          notchedOutline: null
        }),
        fullWidth: fullWidth,
        inputComponent: inputComponent,
        multiline: multiline,
        ref: ref,
        type: type
      }, other));
    });
    OutlinedInput.propTypes = {
      /**
       * This property helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: propTypes.string,
  
      /**
       * If `true`, the `input` element will be focused during the first mount.
       */
      autoFocus: propTypes.bool,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * The CSS class name of the wrapper element.
       */
      className: propTypes.string,
  
      /**
       * The default `input` element value. Use when the component is not controlled.
       */
      defaultValue: propTypes.any,
  
      /**
       * If `true`, the `input` element will be disabled.
       */
      disabled: propTypes.bool,
  
      /**
       * End `InputAdornment` for this component.
       */
      endAdornment: propTypes.node,
  
      /**
       * If `true`, the input will indicate an error. This is normally obtained via context from
       * FormControl.
       */
      error: propTypes.bool,
  
      /**
       * If `true`, the input will take up the full width of its container.
       */
      fullWidth: propTypes.bool,
  
      /**
       * The id of the `input` element.
       */
      id: propTypes.string,
  
      /**
       * The component used for the native input.
       * Either a string to use a DOM element or a component.
       */
      inputComponent: propTypes.elementType,
  
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: propTypes.object,
  
      /**
       * This property can be used to pass a ref callback to the `input` element.
       */
      inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  
      /**
       * The width of the label.
       */
      labelWidth: propTypes.number,
  
      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: propTypes.oneOf(['dense', 'none']),
  
      /**
       * If `true`, a textarea element will be rendered.
       */
      multiline: propTypes.bool,
  
      /**
       * Name attribute of the `input` element.
       */
      name: propTypes.string,
  
      /**
       * If `true`, the outline is notched to accommodate the label.
       */
      notched: propTypes.bool,
  
      /**
       * Callback fired when the value is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value`.
       */
      onChange: propTypes.func,
  
      /**
       * The short hint displayed in the input before the user enters a value.
       */
      placeholder: propTypes.string,
  
      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: propTypes.bool,
  
      /**
       * If `true`, the `input` element will be required.
       */
      required: propTypes.bool,
  
      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: propTypes.oneOfType([propTypes.string, propTypes.number]),
  
      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      rowsMax: propTypes.oneOfType([propTypes.string, propTypes.number]),
  
      /**
       * Start `InputAdornment` for this component.
       */
      startAdornment: propTypes.node,
  
      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       */
      type: propTypes.string,
  
      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: propTypes.any
    };
    OutlinedInput.muiName = 'Input';
    var OutlinedInput$1 = withStyles$1(styles$1d, {
      name: 'MuiOutlinedInput'
    })(OutlinedInput);
  
    /**!
     * @fileOverview Kickass library to create and place poppers near their reference elements.
     * @version 1.15.0
     * @license
     * Copyright (c) 2016 Federico Zivolo and contributors
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     */
    var isBrowser$1 = typeof window !== 'undefined' && typeof document !== 'undefined';
  
    var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
    var timeoutDuration = 0;
    for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
      if (isBrowser$1 && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
        timeoutDuration = 1;
        break;
      }
    }
  
    function microtaskDebounce(fn) {
      var called = false;
      return function () {
        if (called) {
          return;
        }
        called = true;
        window.Promise.resolve().then(function () {
          called = false;
          fn();
        });
      };
    }
  
    function taskDebounce(fn) {
      var scheduled = false;
      return function () {
        if (!scheduled) {
          scheduled = true;
          setTimeout(function () {
            scheduled = false;
            fn();
          }, timeoutDuration);
        }
      };
    }
  
    var supportsMicroTasks = isBrowser$1 && window.Promise;
  
    /**
    * Create a debounced version of a method, that's asynchronously deferred
    * but called in the minimum time possible.
    *
    * @method
    * @memberof Popper.Utils
    * @argument {Function} fn
    * @returns {Function}
    */
    var debounce$1 = supportsMicroTasks ? microtaskDebounce : taskDebounce;
  
    /**
     * Check if the given variable is a function
     * @method
     * @memberof Popper.Utils
     * @argument {Any} functionToCheck - variable to check
     * @returns {Boolean} answer to: is a function?
     */
    function isFunction(functionToCheck) {
      var getType = {};
      return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
    }
  
    /**
     * Get CSS computed property of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Eement} element
     * @argument {String} property
     */
    function getStyleComputedProperty(element, property) {
      if (element.nodeType !== 1) {
        return [];
      }
      // NOTE: 1 DOM access here
      var window = element.ownerDocument.defaultView;
      var css = window.getComputedStyle(element, null);
      return property ? css[property] : css;
    }
  
    /**
     * Returns the parentNode or the host of the element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} parent
     */
    function getParentNode(element) {
      if (element.nodeName === 'HTML') {
        return element;
      }
      return element.parentNode || element.host;
    }
  
    /**
     * Returns the scrolling parent of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} scroll parent
     */
    function getScrollParent$1(element) {
      // Return body, `getScroll` will take care to get the correct `scrollTop` from it
      if (!element) {
        return document.body;
      }
  
      switch (element.nodeName) {
        case 'HTML':
        case 'BODY':
          return element.ownerDocument.body;
        case '#document':
          return element.body;
      }
  
      // Firefox want us to check `-x` and `-y` variations as well
  
      var _getStyleComputedProp = getStyleComputedProperty(element),
          overflow = _getStyleComputedProp.overflow,
          overflowX = _getStyleComputedProp.overflowX,
          overflowY = _getStyleComputedProp.overflowY;
  
      if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
        return element;
      }
  
      return getScrollParent$1(getParentNode(element));
    }
  
    var isIE11 = isBrowser$1 && !!(window.MSInputMethodContext && document.documentMode);
    var isIE10 = isBrowser$1 && /MSIE 10/.test(navigator.userAgent);
  
    /**
     * Determines if the browser is Internet Explorer
     * @method
     * @memberof Popper.Utils
     * @param {Number} version to check
     * @returns {Boolean} isIE
     */
    function isIE(version) {
      if (version === 11) {
        return isIE11;
      }
      if (version === 10) {
        return isIE10;
      }
      return isIE11 || isIE10;
    }
  
    /**
     * Returns the offset parent of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} offset parent
     */
    function getOffsetParent(element) {
      if (!element) {
        return document.documentElement;
      }
  
      var noOffsetParent = isIE(10) ? document.body : null;
  
      // NOTE: 1 DOM access here
      var offsetParent = element.offsetParent || null;
      // Skip hidden elements which don't have an offsetParent
      while (offsetParent === noOffsetParent && element.nextElementSibling) {
        offsetParent = (element = element.nextElementSibling).offsetParent;
      }
  
      var nodeName = offsetParent && offsetParent.nodeName;
  
      if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
        return element ? element.ownerDocument.documentElement : document.documentElement;
      }
  
      // .offsetParent will return the closest TH, TD or TABLE in case
      // no offsetParent is present, I hate this job...
      if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
        return getOffsetParent(offsetParent);
      }
  
      return offsetParent;
    }
  
    function isOffsetContainer(element) {
      var nodeName = element.nodeName;
  
      if (nodeName === 'BODY') {
        return false;
      }
      return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
    }
  
    /**
     * Finds the root node (document, shadowDOM root) of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} node
     * @returns {Element} root node
     */
    function getRoot(node) {
      if (node.parentNode !== null) {
        return getRoot(node.parentNode);
      }
  
      return node;
    }
  
    /**
     * Finds the offset parent common to the two provided nodes
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element1
     * @argument {Element} element2
     * @returns {Element} common offset parent
     */
    function findCommonOffsetParent(element1, element2) {
      // This check is needed to avoid errors in case one of the elements isn't defined for any reason
      if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
        return document.documentElement;
      }
  
      // Here we make sure to give as "start" the element that comes first in the DOM
      var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
      var start = order ? element1 : element2;
      var end = order ? element2 : element1;
  
      // Get common ancestor container
      var range = document.createRange();
      range.setStart(start, 0);
      range.setEnd(end, 0);
      var commonAncestorContainer = range.commonAncestorContainer;
  
      // Both nodes are inside #document
  
      if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
        if (isOffsetContainer(commonAncestorContainer)) {
          return commonAncestorContainer;
        }
  
        return getOffsetParent(commonAncestorContainer);
      }
  
      // one of the nodes is inside shadowDOM, find which one
      var element1root = getRoot(element1);
      if (element1root.host) {
        return findCommonOffsetParent(element1root.host, element2);
      } else {
        return findCommonOffsetParent(element1, getRoot(element2).host);
      }
    }
  
    /**
     * Gets the scroll value of the given element in the given side (top and left)
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @argument {String} side `top` or `left`
     * @returns {number} amount of scrolled pixels
     */
    function getScroll(element) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';
  
      var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
      var nodeName = element.nodeName;
  
      if (nodeName === 'BODY' || nodeName === 'HTML') {
        var html = element.ownerDocument.documentElement;
        var scrollingElement = element.ownerDocument.scrollingElement || html;
        return scrollingElement[upperSide];
      }
  
      return element[upperSide];
    }
  
    /*
     * Sum or subtract the element scroll values (left and top) from a given rect object
     * @method
     * @memberof Popper.Utils
     * @param {Object} rect - Rect object you want to change
     * @param {HTMLElement} element - The element from the function reads the scroll values
     * @param {Boolean} subtract - set to true if you want to subtract the scroll values
     * @return {Object} rect - The modifier rect object
     */
    function includeScroll(rect, element) {
      var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  
      var scrollTop = getScroll(element, 'top');
      var scrollLeft = getScroll(element, 'left');
      var modifier = subtract ? -1 : 1;
      rect.top += scrollTop * modifier;
      rect.bottom += scrollTop * modifier;
      rect.left += scrollLeft * modifier;
      rect.right += scrollLeft * modifier;
      return rect;
    }
  
    /*
     * Helper to detect borders of a given element
     * @method
     * @memberof Popper.Utils
     * @param {CSSStyleDeclaration} styles
     * Result of `getStyleComputedProperty` on the given element
     * @param {String} axis - `x` or `y`
     * @return {number} borders - The borders size of the given axis
     */
  
    function getBordersSize(styles, axis) {
      var sideA = axis === 'x' ? 'Left' : 'Top';
      var sideB = sideA === 'Left' ? 'Right' : 'Bottom';
  
      return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);
    }
  
    function getSize(axis, body, html, computedStyle) {
      return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
    }
  
    function getWindowSizes(document) {
      var body = document.body;
      var html = document.documentElement;
      var computedStyle = isIE(10) && getComputedStyle(html);
  
      return {
        height: getSize('Height', body, html, computedStyle),
        width: getSize('Width', body, html, computedStyle)
      };
    }
  
    var classCallCheck$1 = function (instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    };
  
    var createClass$1 = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
  
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
  
  
  
  
  
    var defineProperty$2 = function (obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
  
      return obj;
    };
  
    var _extends$1 = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
  
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
  
      return target;
    };
  
    /**
     * Given element offsets, generate an output similar to getBoundingClientRect
     * @method
     * @memberof Popper.Utils
     * @argument {Object} offsets
     * @returns {Object} ClientRect like output
     */
    function getClientRect(offsets) {
      return _extends$1({}, offsets, {
        right: offsets.left + offsets.width,
        bottom: offsets.top + offsets.height
      });
    }
  
    /**
     * Get bounding client rect of given element
     * @method
     * @memberof Popper.Utils
     * @param {HTMLElement} element
     * @return {Object} client rect
     */
    function getBoundingClientRect(element) {
      var rect = {};
  
      // IE10 10 FIX: Please, don't ask, the element isn't
      // considered in DOM in some circumstances...
      // This isn't reproducible in IE10 compatibility mode of IE11
      try {
        if (isIE(10)) {
          rect = element.getBoundingClientRect();
          var scrollTop = getScroll(element, 'top');
          var scrollLeft = getScroll(element, 'left');
          rect.top += scrollTop;
          rect.left += scrollLeft;
          rect.bottom += scrollTop;
          rect.right += scrollLeft;
        } else {
          rect = element.getBoundingClientRect();
        }
      } catch (e) {}
  
      var result = {
        left: rect.left,
        top: rect.top,
        width: rect.right - rect.left,
        height: rect.bottom - rect.top
      };
  
      // subtract scrollbar size from sizes
      var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
      var width = sizes.width || element.clientWidth || result.right - result.left;
      var height = sizes.height || element.clientHeight || result.bottom - result.top;
  
      var horizScrollbar = element.offsetWidth - width;
      var vertScrollbar = element.offsetHeight - height;
  
      // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
      // we make this check conditional for performance reasons
      if (horizScrollbar || vertScrollbar) {
        var styles = getStyleComputedProperty(element);
        horizScrollbar -= getBordersSize(styles, 'x');
        vertScrollbar -= getBordersSize(styles, 'y');
  
        result.width -= horizScrollbar;
        result.height -= vertScrollbar;
      }
  
      return getClientRect(result);
    }
  
    function getOffsetRectRelativeToArbitraryNode(children, parent) {
      var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  
      var isIE10 = isIE(10);
      var isHTML = parent.nodeName === 'HTML';
      var childrenRect = getBoundingClientRect(children);
      var parentRect = getBoundingClientRect(parent);
      var scrollParent = getScrollParent$1(children);
  
      var styles = getStyleComputedProperty(parent);
      var borderTopWidth = parseFloat(styles.borderTopWidth, 10);
      var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);
  
      // In cases where the parent is fixed, we must ignore negative scroll in offset calc
      if (fixedPosition && isHTML) {
        parentRect.top = Math.max(parentRect.top, 0);
        parentRect.left = Math.max(parentRect.left, 0);
      }
      var offsets = getClientRect({
        top: childrenRect.top - parentRect.top - borderTopWidth,
        left: childrenRect.left - parentRect.left - borderLeftWidth,
        width: childrenRect.width,
        height: childrenRect.height
      });
      offsets.marginTop = 0;
      offsets.marginLeft = 0;
  
      // Subtract margins of documentElement in case it's being used as parent
      // we do this only on HTML because it's the only element that behaves
      // differently when margins are applied to it. The margins are included in
      // the box of the documentElement, in the other cases not.
      if (!isIE10 && isHTML) {
        var marginTop = parseFloat(styles.marginTop, 10);
        var marginLeft = parseFloat(styles.marginLeft, 10);
  
        offsets.top -= borderTopWidth - marginTop;
        offsets.bottom -= borderTopWidth - marginTop;
        offsets.left -= borderLeftWidth - marginLeft;
        offsets.right -= borderLeftWidth - marginLeft;
  
        // Attach marginTop and marginLeft because in some circumstances we may need them
        offsets.marginTop = marginTop;
        offsets.marginLeft = marginLeft;
      }
  
      if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
        offsets = includeScroll(offsets, parent);
      }
  
      return offsets;
    }
  
    function getViewportOffsetRectRelativeToArtbitraryNode(element) {
      var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  
      var html = element.ownerDocument.documentElement;
      var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
      var width = Math.max(html.clientWidth, window.innerWidth || 0);
      var height = Math.max(html.clientHeight, window.innerHeight || 0);
  
      var scrollTop = !excludeScroll ? getScroll(html) : 0;
      var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;
  
      var offset = {
        top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
        left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
        width: width,
        height: height
      };
  
      return getClientRect(offset);
    }
  
    /**
     * Check if the given element is fixed or is inside a fixed parent
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @argument {Element} customContainer
     * @returns {Boolean} answer to "isFixed?"
     */
    function isFixed(element) {
      var nodeName = element.nodeName;
      if (nodeName === 'BODY' || nodeName === 'HTML') {
        return false;
      }
      if (getStyleComputedProperty(element, 'position') === 'fixed') {
        return true;
      }
      var parentNode = getParentNode(element);
      if (!parentNode) {
        return false;
      }
      return isFixed(parentNode);
    }
  
    /**
     * Finds the first parent of an element that has a transformed property defined
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} first transformed parent or documentElement
     */
  
    function getFixedPositionOffsetParent(element) {
      // This check is needed to avoid errors in case one of the elements isn't defined for any reason
      if (!element || !element.parentElement || isIE()) {
        return document.documentElement;
      }
      var el = element.parentElement;
      while (el && getStyleComputedProperty(el, 'transform') === 'none') {
        el = el.parentElement;
      }
      return el || document.documentElement;
    }
  
    /**
     * Computed the boundaries limits and return them
     * @method
     * @memberof Popper.Utils
     * @param {HTMLElement} popper
     * @param {HTMLElement} reference
     * @param {number} padding
     * @param {HTMLElement} boundariesElement - Element used to define the boundaries
     * @param {Boolean} fixedPosition - Is in fixed position mode
     * @returns {Object} Coordinates of the boundaries
     */
    function getBoundaries(popper, reference, padding, boundariesElement) {
      var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  
      // NOTE: 1 DOM access here
  
      var boundaries = { top: 0, left: 0 };
      var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);
  
      // Handle viewport case
      if (boundariesElement === 'viewport') {
        boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
      } else {
        // Handle other cases based on DOM element used as boundaries
        var boundariesNode = void 0;
        if (boundariesElement === 'scrollParent') {
          boundariesNode = getScrollParent$1(getParentNode(reference));
          if (boundariesNode.nodeName === 'BODY') {
            boundariesNode = popper.ownerDocument.documentElement;
          }
        } else if (boundariesElement === 'window') {
          boundariesNode = popper.ownerDocument.documentElement;
        } else {
          boundariesNode = boundariesElement;
        }
  
        var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);
  
        // In case of HTML, we need a different computation
        if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
          var _getWindowSizes = getWindowSizes(popper.ownerDocument),
              height = _getWindowSizes.height,
              width = _getWindowSizes.width;
  
          boundaries.top += offsets.top - offsets.marginTop;
          boundaries.bottom = height + offsets.top;
          boundaries.left += offsets.left - offsets.marginLeft;
          boundaries.right = width + offsets.left;
        } else {
          // for all the other DOM elements, this one is good
          boundaries = offsets;
        }
      }
  
      // Add paddings
      padding = padding || 0;
      var isPaddingNumber = typeof padding === 'number';
      boundaries.left += isPaddingNumber ? padding : padding.left || 0;
      boundaries.top += isPaddingNumber ? padding : padding.top || 0;
      boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
      boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;
  
      return boundaries;
    }
  
    function getArea(_ref) {
      var width = _ref.width,
          height = _ref.height;
  
      return width * height;
    }
  
    /**
     * Utility used to transform the `auto` placement to the placement with more
     * available space.
     * @method
     * @memberof Popper.Utils
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
      var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
  
      if (placement.indexOf('auto') === -1) {
        return placement;
      }
  
      var boundaries = getBoundaries(popper, reference, padding, boundariesElement);
  
      var rects = {
        top: {
          width: boundaries.width,
          height: refRect.top - boundaries.top
        },
        right: {
          width: boundaries.right - refRect.right,
          height: boundaries.height
        },
        bottom: {
          width: boundaries.width,
          height: boundaries.bottom - refRect.bottom
        },
        left: {
          width: refRect.left - boundaries.left,
          height: boundaries.height
        }
      };
  
      var sortedAreas = Object.keys(rects).map(function (key) {
        return _extends$1({
          key: key
        }, rects[key], {
          area: getArea(rects[key])
        });
      }).sort(function (a, b) {
        return b.area - a.area;
      });
  
      var filteredAreas = sortedAreas.filter(function (_ref2) {
        var width = _ref2.width,
            height = _ref2.height;
        return width >= popper.clientWidth && height >= popper.clientHeight;
      });
  
      var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;
  
      var variation = placement.split('-')[1];
  
      return computedPlacement + (variation ? '-' + variation : '');
    }
  
    /**
     * Get offsets to the reference element
     * @method
     * @memberof Popper.Utils
     * @param {Object} state
     * @param {Element} popper - the popper element
     * @param {Element} reference - the reference element (the popper will be relative to this)
     * @param {Element} fixedPosition - is in fixed position mode
     * @returns {Object} An object containing the offsets which will be applied to the popper
     */
    function getReferenceOffsets(state, popper, reference) {
      var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  
      var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);
      return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
    }
  
    /**
     * Get the outer sizes of the given element (offset size + margins)
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Object} object containing width and height properties
     */
    function getOuterSizes(element) {
      var window = element.ownerDocument.defaultView;
      var styles = window.getComputedStyle(element);
      var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
      var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
      var result = {
        width: element.offsetWidth + y,
        height: element.offsetHeight + x
      };
      return result;
    }
  
    /**
     * Get the opposite placement of the given one
     * @method
     * @memberof Popper.Utils
     * @argument {String} placement
     * @returns {String} flipped placement
     */
    function getOppositePlacement(placement) {
      var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
      return placement.replace(/left|right|bottom|top/g, function (matched) {
        return hash[matched];
      });
    }
  
    /**
     * Get offsets to the popper
     * @method
     * @memberof Popper.Utils
     * @param {Object} position - CSS position the Popper will get applied
     * @param {HTMLElement} popper - the popper element
     * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
     * @param {String} placement - one of the valid placement options
     * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
     */
    function getPopperOffsets(popper, referenceOffsets, placement) {
      placement = placement.split('-')[0];
  
      // Get popper node sizes
      var popperRect = getOuterSizes(popper);
  
      // Add position, width and height to our offsets object
      var popperOffsets = {
        width: popperRect.width,
        height: popperRect.height
      };
  
      // depending by the popper placement we have to compute its offsets slightly differently
      var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
      var mainSide = isHoriz ? 'top' : 'left';
      var secondarySide = isHoriz ? 'left' : 'top';
      var measurement = isHoriz ? 'height' : 'width';
      var secondaryMeasurement = !isHoriz ? 'height' : 'width';
  
      popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
      if (placement === secondarySide) {
        popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
      } else {
        popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
      }
  
      return popperOffsets;
    }
  
    /**
     * Mimics the `find` method of Array
     * @method
     * @memberof Popper.Utils
     * @argument {Array} arr
     * @argument prop
     * @argument value
     * @returns index or -1
     */
    function find(arr, check) {
      // use native find if supported
      if (Array.prototype.find) {
        return arr.find(check);
      }
  
      // use `filter` to obtain the same behavior of `find`
      return arr.filter(check)[0];
    }
  
    /**
     * Return the index of the matching object
     * @method
     * @memberof Popper.Utils
     * @argument {Array} arr
     * @argument prop
     * @argument value
     * @returns index or -1
     */
    function findIndex(arr, prop, value) {
      // use native findIndex if supported
      if (Array.prototype.findIndex) {
        return arr.findIndex(function (cur) {
          return cur[prop] === value;
        });
      }
  
      // use `find` + `indexOf` if `findIndex` isn't supported
      var match = find(arr, function (obj) {
        return obj[prop] === value;
      });
      return arr.indexOf(match);
    }
  
    /**
     * Loop trough the list of modifiers and run them in order,
     * each of them will then edit the data object.
     * @method
     * @memberof Popper.Utils
     * @param {dataObject} data
     * @param {Array} modifiers
     * @param {String} ends - Optional modifier name used as stopper
     * @returns {dataObject}
     */
    function runModifiers(modifiers, data, ends) {
      var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));
  
      modifiersToRun.forEach(function (modifier) {
        if (modifier['function']) {
          // eslint-disable-line dot-notation
          console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
        }
        var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
        if (modifier.enabled && isFunction(fn)) {
          // Add properties to offsets to make them a complete clientRect object
          // we do this before each modifier to make sure the previous one doesn't
          // mess with these values
          data.offsets.popper = getClientRect(data.offsets.popper);
          data.offsets.reference = getClientRect(data.offsets.reference);
  
          data = fn(data, modifier);
        }
      });
  
      return data;
    }
  
    /**
     * Updates the position of the popper, computing the new offsets and applying
     * the new style.<br />
     * Prefer `scheduleUpdate` over `update` because of performance reasons.
     * @method
     * @memberof Popper
     */
    function update$1() {
      // if popper is destroyed, don't perform any further update
      if (this.state.isDestroyed) {
        return;
      }
  
      var data = {
        instance: this,
        styles: {},
        arrowStyles: {},
        attributes: {},
        flipped: false,
        offsets: {}
      };
  
      // compute reference element offsets
      data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);
  
      // compute auto placement, store placement inside the data object,
      // modifiers will be able to edit `placement` if needed
      // and refer to originalPlacement to know the original value
      data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);
  
      // store the computed placement inside `originalPlacement`
      data.originalPlacement = data.placement;
  
      data.positionFixed = this.options.positionFixed;
  
      // compute the popper offsets
      data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);
  
      data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';
  
      // run the modifiers
      data = runModifiers(this.modifiers, data);
  
      // the first `update` will call `onCreate` callback
      // the other ones will call `onUpdate` callback
      if (!this.state.isCreated) {
        this.state.isCreated = true;
        this.options.onCreate(data);
      } else {
        this.options.onUpdate(data);
      }
    }
  
    /**
     * Helper used to know if the given modifier is enabled.
     * @method
     * @memberof Popper.Utils
     * @returns {Boolean}
     */
    function isModifierEnabled(modifiers, modifierName) {
      return modifiers.some(function (_ref) {
        var name = _ref.name,
            enabled = _ref.enabled;
        return enabled && name === modifierName;
      });
    }
  
    /**
     * Get the prefixed supported property name
     * @method
     * @memberof Popper.Utils
     * @argument {String} property (camelCase)
     * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
     */
    function getSupportedPropertyName(property) {
      var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
      var upperProp = property.charAt(0).toUpperCase() + property.slice(1);
  
      for (var i = 0; i < prefixes.length; i++) {
        var prefix = prefixes[i];
        var toCheck = prefix ? '' + prefix + upperProp : property;
        if (typeof document.body.style[toCheck] !== 'undefined') {
          return toCheck;
        }
      }
      return null;
    }
  
    /**
     * Destroys the popper.
     * @method
     * @memberof Popper
     */
    function destroy() {
      this.state.isDestroyed = true;
  
      // touch DOM only if `applyStyle` modifier is enabled
      if (isModifierEnabled(this.modifiers, 'applyStyle')) {
        this.popper.removeAttribute('x-placement');
        this.popper.style.position = '';
        this.popper.style.top = '';
        this.popper.style.left = '';
        this.popper.style.right = '';
        this.popper.style.bottom = '';
        this.popper.style.willChange = '';
        this.popper.style[getSupportedPropertyName('transform')] = '';
      }
  
      this.disableEventListeners();
  
      // remove the popper if user explicity asked for the deletion on destroy
      // do not use `remove` because IE11 doesn't support it
      if (this.options.removeOnDestroy) {
        this.popper.parentNode.removeChild(this.popper);
      }
      return this;
    }
  
    /**
     * Get the window associated with the element
     * @argument {Element} element
     * @returns {Window}
     */
    function getWindow(element) {
      var ownerDocument = element.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView : window;
    }
  
    function attachToScrollParents(scrollParent, event, callback, scrollParents) {
      var isBody = scrollParent.nodeName === 'BODY';
      var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
      target.addEventListener(event, callback, { passive: true });
  
      if (!isBody) {
        attachToScrollParents(getScrollParent$1(target.parentNode), event, callback, scrollParents);
      }
      scrollParents.push(target);
    }
  
    /**
     * Setup needed event listeners used to update the popper position
     * @method
     * @memberof Popper.Utils
     * @private
     */
    function setupEventListeners(reference, options, state, updateBound) {
      // Resize event listener on window
      state.updateBound = updateBound;
      getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });
  
      // Scroll event listener on scroll parents
      var scrollElement = getScrollParent$1(reference);
      attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
      state.scrollElement = scrollElement;
      state.eventsEnabled = true;
  
      return state;
    }
  
    /**
     * It will add resize/scroll events and start recalculating
     * position of the popper element when they are triggered.
     * @method
     * @memberof Popper
     */
    function enableEventListeners() {
      if (!this.state.eventsEnabled) {
        this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
      }
    }
  
    /**
     * Remove event listeners used to update the popper position
     * @method
     * @memberof Popper.Utils
     * @private
     */
    function removeEventListeners(reference, state) {
      // Remove resize event listener on window
      getWindow(reference).removeEventListener('resize', state.updateBound);
  
      // Remove scroll event listener on scroll parents
      state.scrollParents.forEach(function (target) {
        target.removeEventListener('scroll', state.updateBound);
      });
  
      // Reset state
      state.updateBound = null;
      state.scrollParents = [];
      state.scrollElement = null;
      state.eventsEnabled = false;
      return state;
    }
  
    /**
     * It will remove resize/scroll events and won't recalculate popper position
     * when they are triggered. It also won't trigger `onUpdate` callback anymore,
     * unless you call `update` method manually.
     * @method
     * @memberof Popper
     */
    function disableEventListeners() {
      if (this.state.eventsEnabled) {
        cancelAnimationFrame(this.scheduleUpdate);
        this.state = removeEventListeners(this.reference, this.state);
      }
    }
  
    /**
     * Tells if a given input is a number
     * @method
     * @memberof Popper.Utils
     * @param {*} input to check
     * @return {Boolean}
     */
    function isNumeric(n) {
      return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
    }
  
    /**
     * Set the style to the given popper
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element - Element to apply the style to
     * @argument {Object} styles
     * Object with a list of properties and values which will be applied to the element
     */
    function setStyles(element, styles) {
      Object.keys(styles).forEach(function (prop) {
        var unit = '';
        // add unit if the value is numeric and is one of the following
        if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
          unit = 'px';
        }
        element.style[prop] = styles[prop] + unit;
      });
    }
  
    /**
     * Set the attributes to the given popper
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element - Element to apply the attributes to
     * @argument {Object} styles
     * Object with a list of properties and values which will be applied to the element
     */
    function setAttributes(element, attributes) {
      Object.keys(attributes).forEach(function (prop) {
        var value = attributes[prop];
        if (value !== false) {
          element.setAttribute(prop, attributes[prop]);
        } else {
          element.removeAttribute(prop);
        }
      });
    }
  
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} data.styles - List of style properties - values to apply to popper element
     * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The same data object
     */
    function applyStyle(data) {
      // any property present in `data.styles` will be applied to the popper,
      // in this way we can make the 3rd party modifiers add custom styles to it
      // Be aware, modifiers could override the properties defined in the previous
      // lines of this modifier!
      setStyles(data.instance.popper, data.styles);
  
      // any property present in `data.attributes` will be applied to the popper,
      // they will be set as HTML attributes of the element
      setAttributes(data.instance.popper, data.attributes);
  
      // if arrowElement is defined and arrowStyles has some properties
      if (data.arrowElement && Object.keys(data.arrowStyles).length) {
        setStyles(data.arrowElement, data.arrowStyles);
      }
  
      return data;
    }
  
    /**
     * Set the x-placement attribute before everything else because it could be used
     * to add margins to the popper margins needs to be calculated to get the
     * correct popper offsets.
     * @method
     * @memberof Popper.modifiers
     * @param {HTMLElement} reference - The reference element used to position the popper
     * @param {HTMLElement} popper - The HTML element used as popper
     * @param {Object} options - Popper.js options
     */
    function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
      // compute reference element offsets
      var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);
  
      // compute auto placement, store placement inside the data object,
      // modifiers will be able to edit `placement` if needed
      // and refer to originalPlacement to know the original value
      var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);
  
      popper.setAttribute('x-placement', placement);
  
      // Apply `position` to popper before anything else because
      // without the position applied we can't guarantee correct computations
      setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });
  
      return options;
    }
  
    /**
     * @function
     * @memberof Popper.Utils
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Boolean} shouldRound - If the offsets should be rounded at all
     * @returns {Object} The popper's position offsets rounded
     *
     * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
     * good as it can be within reason.
     * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
     *
     * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
     * as well on High DPI screens).
     *
     * Firefox prefers no rounding for positioning and does not have blurriness on
     * high DPI screens.
     *
     * Only horizontal placement and left/right values need to be considered.
     */
    function getRoundedOffsets(data, shouldRound) {
      var _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference;
      var round = Math.round,
          floor = Math.floor;
  
      var noRound = function noRound(v) {
        return v;
      };
  
      var referenceWidth = round(reference.width);
      var popperWidth = round(popper.width);
  
      var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
      var isVariation = data.placement.indexOf('-') !== -1;
      var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
      var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;
  
      var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
      var verticalToInteger = !shouldRound ? noRound : round;
  
      return {
        left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
        top: verticalToInteger(popper.top),
        bottom: verticalToInteger(popper.bottom),
        right: horizontalToInteger(popper.right)
      };
    }
  
    var isFirefox = isBrowser$1 && /Firefox/i.test(navigator.userAgent);
  
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function computeStyle(data, options) {
      var x = options.x,
          y = options.y;
      var popper = data.offsets.popper;
  
      // Remove this legacy support in Popper.js v2
  
      var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
        return modifier.name === 'applyStyle';
      }).gpuAcceleration;
      if (legacyGpuAccelerationOption !== undefined) {
        console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
      }
      var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;
  
      var offsetParent = getOffsetParent(data.instance.popper);
      var offsetParentRect = getBoundingClientRect(offsetParent);
  
      // Styles
      var styles = {
        position: popper.position
      };
  
      var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);
  
      var sideA = x === 'bottom' ? 'top' : 'bottom';
      var sideB = y === 'right' ? 'left' : 'right';
  
      // if gpuAcceleration is set to `true` and transform is supported,
      //  we use `translate3d` to apply the position to the popper we
      // automatically use the supported prefixed version if needed
      var prefixedProperty = getSupportedPropertyName('transform');
  
      // now, let's make a step back and look at this code closely (wtf?)
      // If the content of the popper grows once it's been positioned, it
      // may happen that the popper gets misplaced because of the new content
      // overflowing its reference element
      // To avoid this problem, we provide two options (x and y), which allow
      // the consumer to define the offset origin.
      // If we position a popper on top of a reference element, we can set
      // `x` to `top` to make the popper grow towards its top instead of
      // its bottom.
      var left = void 0,
          top = void 0;
      if (sideA === 'bottom') {
        // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
        // and not the bottom of the html element
        if (offsetParent.nodeName === 'HTML') {
          top = -offsetParent.clientHeight + offsets.bottom;
        } else {
          top = -offsetParentRect.height + offsets.bottom;
        }
      } else {
        top = offsets.top;
      }
      if (sideB === 'right') {
        if (offsetParent.nodeName === 'HTML') {
          left = -offsetParent.clientWidth + offsets.right;
        } else {
          left = -offsetParentRect.width + offsets.right;
        }
      } else {
        left = offsets.left;
      }
      if (gpuAcceleration && prefixedProperty) {
        styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
        styles[sideA] = 0;
        styles[sideB] = 0;
        styles.willChange = 'transform';
      } else {
        // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
        var invertTop = sideA === 'bottom' ? -1 : 1;
        var invertLeft = sideB === 'right' ? -1 : 1;
        styles[sideA] = top * invertTop;
        styles[sideB] = left * invertLeft;
        styles.willChange = sideA + ', ' + sideB;
      }
  
      // Attributes
      var attributes = {
        'x-placement': data.placement
      };
  
      // Update `data` attributes, styles and arrowStyles
      data.attributes = _extends$1({}, attributes, data.attributes);
      data.styles = _extends$1({}, styles, data.styles);
      data.arrowStyles = _extends$1({}, data.offsets.arrow, data.arrowStyles);
  
      return data;
    }
  
    /**
     * Helper used to know if the given modifier depends from another one.<br />
     * It checks if the needed modifier is listed and enabled.
     * @method
     * @memberof Popper.Utils
     * @param {Array} modifiers - list of modifiers
     * @param {String} requestingName - name of requesting modifier
     * @param {String} requestedName - name of requested modifier
     * @returns {Boolean}
     */
    function isModifierRequired(modifiers, requestingName, requestedName) {
      var requesting = find(modifiers, function (_ref) {
        var name = _ref.name;
        return name === requestingName;
      });
  
      var isRequired = !!requesting && modifiers.some(function (modifier) {
        return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
      });
  
      if (!isRequired) {
        var _requesting = '`' + requestingName + '`';
        var requested = '`' + requestedName + '`';
        console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
      }
      return isRequired;
    }
  
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function arrow(data, options) {
      var _data$offsets$arrow;
  
      // arrow depends on keepTogether in order to work
      if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
        return data;
      }
  
      var arrowElement = options.element;
  
      // if arrowElement is a string, suppose it's a CSS selector
      if (typeof arrowElement === 'string') {
        arrowElement = data.instance.popper.querySelector(arrowElement);
  
        // if arrowElement is not found, don't run the modifier
        if (!arrowElement) {
          return data;
        }
      } else {
        // if the arrowElement isn't a query selector we must check that the
        // provided DOM node is child of its popper node
        if (!data.instance.popper.contains(arrowElement)) {
          console.warn('WARNING: `arrow.element` must be child of its popper element!');
          return data;
        }
      }
  
      var placement = data.placement.split('-')[0];
      var _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference;
  
      var isVertical = ['left', 'right'].indexOf(placement) !== -1;
  
      var len = isVertical ? 'height' : 'width';
      var sideCapitalized = isVertical ? 'Top' : 'Left';
      var side = sideCapitalized.toLowerCase();
      var altSide = isVertical ? 'left' : 'top';
      var opSide = isVertical ? 'bottom' : 'right';
      var arrowElementSize = getOuterSizes(arrowElement)[len];
  
      //
      // extends keepTogether behavior making sure the popper and its
      // reference have enough pixels in conjunction
      //
  
      // top/left side
      if (reference[opSide] - arrowElementSize < popper[side]) {
        data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
      }
      // bottom/right side
      if (reference[side] + arrowElementSize > popper[opSide]) {
        data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
      }
      data.offsets.popper = getClientRect(data.offsets.popper);
  
      // compute center of the popper
      var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;
  
      // Compute the sideValue using the updated popper offsets
      // take popper margin in account because we don't have this info available
      var css = getStyleComputedProperty(data.instance.popper);
      var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);
      var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);
      var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;
  
      // prevent arrowElement from being placed not contiguously to its popper
      sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);
  
      data.arrowElement = arrowElement;
      data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty$2(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty$2(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);
  
      return data;
    }
  
    /**
     * Get the opposite placement variation of the given one
     * @method
     * @memberof Popper.Utils
     * @argument {String} placement variation
     * @returns {String} flipped placement variation
     */
    function getOppositeVariation(variation) {
      if (variation === 'end') {
        return 'start';
      } else if (variation === 'start') {
        return 'end';
      }
      return variation;
    }
  
    /**
     * List of accepted placements to use as values of the `placement` option.<br />
     * Valid placements are:
     * - `auto`
     * - `top`
     * - `right`
     * - `bottom`
     * - `left`
     *
     * Each placement can have a variation from this list:
     * - `-start`
     * - `-end`
     *
     * Variations are interpreted easily if you think of them as the left to right
     * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
     * is right.<br />
     * Vertically (`left` and `right`), `start` is top and `end` is bottom.
     *
     * Some valid examples are:
     * - `top-end` (on top of reference, right aligned)
     * - `right-start` (on right of reference, top aligned)
     * - `bottom` (on bottom, centered)
     * - `auto-end` (on the side with more space available, alignment depends by placement)
     *
     * @static
     * @type {Array}
     * @enum {String}
     * @readonly
     * @method placements
     * @memberof Popper
     */
    var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];
  
    // Get rid of `auto` `auto-start` and `auto-end`
    var validPlacements = placements.slice(3);
  
    /**
     * Given an initial placement, returns all the subsequent placements
     * clockwise (or counter-clockwise).
     *
     * @method
     * @memberof Popper.Utils
     * @argument {String} placement - A valid placement (it accepts variations)
     * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
     * @returns {Array} placements including their variations
     */
    function clockwise(placement) {
      var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  
      var index = validPlacements.indexOf(placement);
      var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
      return counter ? arr.reverse() : arr;
    }
  
    var BEHAVIORS = {
      FLIP: 'flip',
      CLOCKWISE: 'clockwise',
      COUNTERCLOCKWISE: 'counterclockwise'
    };
  
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function flip(data, options) {
      // if `inner` modifier is enabled, we can't use the `flip` modifier
      if (isModifierEnabled(data.instance.modifiers, 'inner')) {
        return data;
      }
  
      if (data.flipped && data.placement === data.originalPlacement) {
        // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
        return data;
      }
  
      var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);
  
      var placement = data.placement.split('-')[0];
      var placementOpposite = getOppositePlacement(placement);
      var variation = data.placement.split('-')[1] || '';
  
      var flipOrder = [];
  
      switch (options.behavior) {
        case BEHAVIORS.FLIP:
          flipOrder = [placement, placementOpposite];
          break;
        case BEHAVIORS.CLOCKWISE:
          flipOrder = clockwise(placement);
          break;
        case BEHAVIORS.COUNTERCLOCKWISE:
          flipOrder = clockwise(placement, true);
          break;
        default:
          flipOrder = options.behavior;
      }
  
      flipOrder.forEach(function (step, index) {
        if (placement !== step || flipOrder.length === index + 1) {
          return data;
        }
  
        placement = data.placement.split('-')[0];
        placementOpposite = getOppositePlacement(placement);
  
        var popperOffsets = data.offsets.popper;
        var refOffsets = data.offsets.reference;
  
        // using floor because the reference offsets may contain decimals we are not going to consider here
        var floor = Math.floor;
        var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);
  
        var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
        var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
        var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
        var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);
  
        var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;
  
        // flip the variation if required
        var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
  
        // flips variation if reference element overflows boundaries
        var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);
  
        // flips variation if popper content overflows boundaries
        var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);
  
        var flippedVariation = flippedVariationByRef || flippedVariationByContent;
  
        if (overlapsRef || overflowsBoundaries || flippedVariation) {
          // this boolean to detect any flip loop
          data.flipped = true;
  
          if (overlapsRef || overflowsBoundaries) {
            placement = flipOrder[index + 1];
          }
  
          if (flippedVariation) {
            variation = getOppositeVariation(variation);
          }
  
          data.placement = placement + (variation ? '-' + variation : '');
  
          // this object contains `position`, we want to preserve it along with
          // any additional property we may add in the future
          data.offsets.popper = _extends$1({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));
  
          data = runModifiers(data.instance.modifiers, data, 'flip');
        }
      });
      return data;
    }
  
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function keepTogether(data) {
      var _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference;
  
      var placement = data.placement.split('-')[0];
      var floor = Math.floor;
      var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
      var side = isVertical ? 'right' : 'bottom';
      var opSide = isVertical ? 'left' : 'top';
      var measurement = isVertical ? 'width' : 'height';
  
      if (popper[side] < floor(reference[opSide])) {
        data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
      }
      if (popper[opSide] > floor(reference[side])) {
        data.offsets.popper[opSide] = floor(reference[side]);
      }
  
      return data;
    }
  
    /**
     * Converts a string containing value + unit into a px value number
     * @function
     * @memberof {modifiers~offset}
     * @private
     * @argument {String} str - Value + unit string
     * @argument {String} measurement - `height` or `width`
     * @argument {Object} popperOffsets
     * @argument {Object} referenceOffsets
     * @returns {Number|String}
     * Value in pixels, or original string if no values were extracted
     */
    function toValue(str, measurement, popperOffsets, referenceOffsets) {
      // separate value from unit
      var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
      var value = +split[1];
      var unit = split[2];
  
      // If it's not a number it's an operator, I guess
      if (!value) {
        return str;
      }
  
      if (unit.indexOf('%') === 0) {
        var element = void 0;
        switch (unit) {
          case '%p':
            element = popperOffsets;
            break;
          case '%':
          case '%r':
          default:
            element = referenceOffsets;
        }
  
        var rect = getClientRect(element);
        return rect[measurement] / 100 * value;
      } else if (unit === 'vh' || unit === 'vw') {
        // if is a vh or vw, we calculate the size based on the viewport
        var size = void 0;
        if (unit === 'vh') {
          size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
        } else {
          size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
        }
        return size / 100 * value;
      } else {
        // if is an explicit pixel unit, we get rid of the unit and keep the value
        // if is an implicit unit, it's px, and we return just the value
        return value;
      }
    }
  
    /**
     * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
     * @function
     * @memberof {modifiers~offset}
     * @private
     * @argument {String} offset
     * @argument {Object} popperOffsets
     * @argument {Object} referenceOffsets
     * @argument {String} basePlacement
     * @returns {Array} a two cells array with x and y offsets in numbers
     */
    function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
      var offsets = [0, 0];
  
      // Use height if placement is left or right and index is 0 otherwise use width
      // in this way the first offset will use an axis and the second one
      // will use the other one
      var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;
  
      // Split the offset string to obtain a list of values and operands
      // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
      var fragments = offset.split(/(\+|\-)/).map(function (frag) {
        return frag.trim();
      });
  
      // Detect if the offset string contains a pair of values or a single one
      // they could be separated by comma or space
      var divider = fragments.indexOf(find(fragments, function (frag) {
        return frag.search(/,|\s/) !== -1;
      }));
  
      if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
        console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
      }
  
      // If divider is found, we divide the list of values and operands to divide
      // them by ofset X and Y.
      var splitRegex = /\s*,\s*|\s+/;
      var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];
  
      // Convert the values with units to absolute pixels to allow our computations
      ops = ops.map(function (op, index) {
        // Most of the units rely on the orientation of the popper
        var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
        var mergeWithPrevious = false;
        return op
        // This aggregates any `+` or `-` sign that aren't considered operators
        // e.g.: 10 + +5 => [10, +, +5]
        .reduce(function (a, b) {
          if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
            a[a.length - 1] = b;
            mergeWithPrevious = true;
            return a;
          } else if (mergeWithPrevious) {
            a[a.length - 1] += b;
            mergeWithPrevious = false;
            return a;
          } else {
            return a.concat(b);
          }
        }, [])
        // Here we convert the string values into number values (in px)
        .map(function (str) {
          return toValue(str, measurement, popperOffsets, referenceOffsets);
        });
      });
  
      // Loop trough the offsets arrays and execute the operations
      ops.forEach(function (op, index) {
        op.forEach(function (frag, index2) {
          if (isNumeric(frag)) {
            offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
          }
        });
      });
      return offsets;
    }
  
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @argument {Number|String} options.offset=0
     * The offset value as described in the modifier description
     * @returns {Object} The data object, properly modified
     */
    function offset(data, _ref) {
      var offset = _ref.offset;
      var placement = data.placement,
          _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference;
  
      var basePlacement = placement.split('-')[0];
  
      var offsets = void 0;
      if (isNumeric(+offset)) {
        offsets = [+offset, 0];
      } else {
        offsets = parseOffset(offset, popper, reference, basePlacement);
      }
  
      if (basePlacement === 'left') {
        popper.top += offsets[0];
        popper.left -= offsets[1];
      } else if (basePlacement === 'right') {
        popper.top += offsets[0];
        popper.left += offsets[1];
      } else if (basePlacement === 'top') {
        popper.left += offsets[0];
        popper.top -= offsets[1];
      } else if (basePlacement === 'bottom') {
        popper.left += offsets[0];
        popper.top += offsets[1];
      }
  
      data.popper = popper;
      return data;
    }
  
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function preventOverflow(data, options) {
      var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);
  
      // If offsetParent is the reference element, we really want to
      // go one step up and use the next offsetParent as reference to
      // avoid to make this modifier completely useless and look like broken
      if (data.instance.reference === boundariesElement) {
        boundariesElement = getOffsetParent(boundariesElement);
      }
  
      // NOTE: DOM access here
      // resets the popper's position so that the document size can be calculated excluding
      // the size of the popper element itself
      var transformProp = getSupportedPropertyName('transform');
      var popperStyles = data.instance.popper.style; // assignment to help minification
      var top = popperStyles.top,
          left = popperStyles.left,
          transform = popperStyles[transformProp];
  
      popperStyles.top = '';
      popperStyles.left = '';
      popperStyles[transformProp] = '';
  
      var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);
  
      // NOTE: DOM access here
      // restores the original style properties after the offsets have been computed
      popperStyles.top = top;
      popperStyles.left = left;
      popperStyles[transformProp] = transform;
  
      options.boundaries = boundaries;
  
      var order = options.priority;
      var popper = data.offsets.popper;
  
      var check = {
        primary: function primary(placement) {
          var value = popper[placement];
          if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
            value = Math.max(popper[placement], boundaries[placement]);
          }
          return defineProperty$2({}, placement, value);
        },
        secondary: function secondary(placement) {
          var mainSide = placement === 'right' ? 'left' : 'top';
          var value = popper[mainSide];
          if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
            value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
          }
          return defineProperty$2({}, mainSide, value);
        }
      };
  
      order.forEach(function (placement) {
        var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
        popper = _extends$1({}, popper, check[side](placement));
      });
  
      data.offsets.popper = popper;
  
      return data;
    }
  
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function shift(data) {
      var placement = data.placement;
      var basePlacement = placement.split('-')[0];
      var shiftvariation = placement.split('-')[1];
  
      // if shift shiftvariation is specified, run the modifier
      if (shiftvariation) {
        var _data$offsets = data.offsets,
            reference = _data$offsets.reference,
            popper = _data$offsets.popper;
  
        var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
        var side = isVertical ? 'left' : 'top';
        var measurement = isVertical ? 'width' : 'height';
  
        var shiftOffsets = {
          start: defineProperty$2({}, side, reference[side]),
          end: defineProperty$2({}, side, reference[side] + reference[measurement] - popper[measurement])
        };
  
        data.offsets.popper = _extends$1({}, popper, shiftOffsets[shiftvariation]);
      }
  
      return data;
    }
  
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function hide(data) {
      if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
        return data;
      }
  
      var refRect = data.offsets.reference;
      var bound = find(data.instance.modifiers, function (modifier) {
        return modifier.name === 'preventOverflow';
      }).boundaries;
  
      if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
        // Avoid unnecessary DOM access if visibility hasn't changed
        if (data.hide === true) {
          return data;
        }
  
        data.hide = true;
        data.attributes['x-out-of-boundaries'] = '';
      } else {
        // Avoid unnecessary DOM access if visibility hasn't changed
        if (data.hide === false) {
          return data;
        }
  
        data.hide = false;
        data.attributes['x-out-of-boundaries'] = false;
      }
  
      return data;
    }
  
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function inner(data) {
      var placement = data.placement;
      var basePlacement = placement.split('-')[0];
      var _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference;
  
      var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;
  
      var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;
  
      popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);
  
      data.placement = getOppositePlacement(placement);
      data.offsets.popper = getClientRect(popper);
  
      return data;
    }
  
    /**
     * Modifier function, each modifier can have a function of this type assigned
     * to its `fn` property.<br />
     * These functions will be called on each update, this means that you must
     * make sure they are performant enough to avoid performance bottlenecks.
     *
     * @function ModifierFn
     * @argument {dataObject} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {dataObject} The data object, properly modified
     */
  
    /**
     * Modifiers are plugins used to alter the behavior of your poppers.<br />
     * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
     * needed by the library.
     *
     * Usually you don't want to override the `order`, `fn` and `onLoad` props.
     * All the other properties are configurations that could be tweaked.
     * @namespace modifiers
     */
    var modifiers = {
      /**
       * Modifier used to shift the popper on the start or end of its reference
       * element.<br />
       * It will read the variation of the `placement` property.<br />
       * It can be one either `-end` or `-start`.
       * @memberof modifiers
       * @inner
       */
      shift: {
        /** @prop {number} order=100 - Index used to define the order of execution */
        order: 100,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: shift
      },
  
      /**
       * The `offset` modifier can shift your popper on both its axis.
       *
       * It accepts the following units:
       * - `px` or unit-less, interpreted as pixels
       * - `%` or `%r`, percentage relative to the length of the reference element
       * - `%p`, percentage relative to the length of the popper element
       * - `vw`, CSS viewport width unit
       * - `vh`, CSS viewport height unit
       *
       * For length is intended the main axis relative to the placement of the popper.<br />
       * This means that if the placement is `top` or `bottom`, the length will be the
       * `width`. In case of `left` or `right`, it will be the `height`.
       *
       * You can provide a single value (as `Number` or `String`), or a pair of values
       * as `String` divided by a comma or one (or more) white spaces.<br />
       * The latter is a deprecated method because it leads to confusion and will be
       * removed in v2.<br />
       * Additionally, it accepts additions and subtractions between different units.
       * Note that multiplications and divisions aren't supported.
       *
       * Valid examples are:
       * ```
       * 10
       * '10%'
       * '10, 10'
       * '10%, 10'
       * '10 + 10%'
       * '10 - 5vh + 3%'
       * '-10px + 5vh, 5px - 6%'
       * ```
       * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
       * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
       * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
       *
       * @memberof modifiers
       * @inner
       */
      offset: {
        /** @prop {number} order=200 - Index used to define the order of execution */
        order: 200,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: offset,
        /** @prop {Number|String} offset=0
         * The offset value as described in the modifier description
         */
        offset: 0
      },
  
      /**
       * Modifier used to prevent the popper from being positioned outside the boundary.
       *
       * A scenario exists where the reference itself is not within the boundaries.<br />
       * We can say it has "escaped the boundaries" — or just "escaped".<br />
       * In this case we need to decide whether the popper should either:
       *
       * - detach from the reference and remain "trapped" in the boundaries, or
       * - if it should ignore the boundary and "escape with its reference"
       *
       * When `escapeWithReference` is set to`true` and reference is completely
       * outside its boundaries, the popper will overflow (or completely leave)
       * the boundaries in order to remain attached to the edge of the reference.
       *
       * @memberof modifiers
       * @inner
       */
      preventOverflow: {
        /** @prop {number} order=300 - Index used to define the order of execution */
        order: 300,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: preventOverflow,
        /**
         * @prop {Array} [priority=['left','right','top','bottom']]
         * Popper will try to prevent overflow following these priorities by default,
         * then, it could overflow on the left and on top of the `boundariesElement`
         */
        priority: ['left', 'right', 'top', 'bottom'],
        /**
         * @prop {number} padding=5
         * Amount of pixel used to define a minimum distance between the boundaries
         * and the popper. This makes sure the popper always has a little padding
         * between the edges of its container
         */
        padding: 5,
        /**
         * @prop {String|HTMLElement} boundariesElement='scrollParent'
         * Boundaries used by the modifier. Can be `scrollParent`, `window`,
         * `viewport` or any DOM element.
         */
        boundariesElement: 'scrollParent'
      },
  
      /**
       * Modifier used to make sure the reference and its popper stay near each other
       * without leaving any gap between the two. Especially useful when the arrow is
       * enabled and you want to ensure that it points to its reference element.
       * It cares only about the first axis. You can still have poppers with margin
       * between the popper and its reference element.
       * @memberof modifiers
       * @inner
       */
      keepTogether: {
        /** @prop {number} order=400 - Index used to define the order of execution */
        order: 400,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: keepTogether
      },
  
      /**
       * This modifier is used to move the `arrowElement` of the popper to make
       * sure it is positioned between the reference element and its popper element.
       * It will read the outer size of the `arrowElement` node to detect how many
       * pixels of conjunction are needed.
       *
       * It has no effect if no `arrowElement` is provided.
       * @memberof modifiers
       * @inner
       */
      arrow: {
        /** @prop {number} order=500 - Index used to define the order of execution */
        order: 500,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: arrow,
        /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
        element: '[x-arrow]'
      },
  
      /**
       * Modifier used to flip the popper's placement when it starts to overlap its
       * reference element.
       *
       * Requires the `preventOverflow` modifier before it in order to work.
       *
       * **NOTE:** this modifier will interrupt the current update cycle and will
       * restart it if it detects the need to flip the placement.
       * @memberof modifiers
       * @inner
       */
      flip: {
        /** @prop {number} order=600 - Index used to define the order of execution */
        order: 600,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: flip,
        /**
         * @prop {String|Array} behavior='flip'
         * The behavior used to change the popper's placement. It can be one of
         * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
         * placements (with optional variations)
         */
        behavior: 'flip',
        /**
         * @prop {number} padding=5
         * The popper will flip if it hits the edges of the `boundariesElement`
         */
        padding: 5,
        /**
         * @prop {String|HTMLElement} boundariesElement='viewport'
         * The element which will define the boundaries of the popper position.
         * The popper will never be placed outside of the defined boundaries
         * (except if `keepTogether` is enabled)
         */
        boundariesElement: 'viewport',
        /**
         * @prop {Boolean} flipVariations=false
         * The popper will switch placement variation between `-start` and `-end` when
         * the reference element overlaps its boundaries.
         *
         * The original placement should have a set variation.
         */
        flipVariations: false,
        /**
         * @prop {Boolean} flipVariationsByContent=false
         * The popper will switch placement variation between `-start` and `-end` when
         * the popper element overlaps its reference boundaries.
         *
         * The original placement should have a set variation.
         */
        flipVariationsByContent: false
      },
  
      /**
       * Modifier used to make the popper flow toward the inner of the reference element.
       * By default, when this modifier is disabled, the popper will be placed outside
       * the reference element.
       * @memberof modifiers
       * @inner
       */
      inner: {
        /** @prop {number} order=700 - Index used to define the order of execution */
        order: 700,
        /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
        enabled: false,
        /** @prop {ModifierFn} */
        fn: inner
      },
  
      /**
       * Modifier used to hide the popper when its reference element is outside of the
       * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
       * be used to hide with a CSS selector the popper when its reference is
       * out of boundaries.
       *
       * Requires the `preventOverflow` modifier before it in order to work.
       * @memberof modifiers
       * @inner
       */
      hide: {
        /** @prop {number} order=800 - Index used to define the order of execution */
        order: 800,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: hide
      },
  
      /**
       * Computes the style that will be applied to the popper element to gets
       * properly positioned.
       *
       * Note that this modifier will not touch the DOM, it just prepares the styles
       * so that `applyStyle` modifier can apply it. This separation is useful
       * in case you need to replace `applyStyle` with a custom implementation.
       *
       * This modifier has `850` as `order` value to maintain backward compatibility
       * with previous versions of Popper.js. Expect the modifiers ordering method
       * to change in future major versions of the library.
       *
       * @memberof modifiers
       * @inner
       */
      computeStyle: {
        /** @prop {number} order=850 - Index used to define the order of execution */
        order: 850,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: computeStyle,
        /**
         * @prop {Boolean} gpuAcceleration=true
         * If true, it uses the CSS 3D transformation to position the popper.
         * Otherwise, it will use the `top` and `left` properties
         */
        gpuAcceleration: true,
        /**
         * @prop {string} [x='bottom']
         * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
         * Change this if your popper should grow in a direction different from `bottom`
         */
        x: 'bottom',
        /**
         * @prop {string} [x='left']
         * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
         * Change this if your popper should grow in a direction different from `right`
         */
        y: 'right'
      },
  
      /**
       * Applies the computed styles to the popper element.
       *
       * All the DOM manipulations are limited to this modifier. This is useful in case
       * you want to integrate Popper.js inside a framework or view library and you
       * want to delegate all the DOM manipulations to it.
       *
       * Note that if you disable this modifier, you must make sure the popper element
       * has its position set to `absolute` before Popper.js can do its work!
       *
       * Just disable this modifier and define your own to achieve the desired effect.
       *
       * @memberof modifiers
       * @inner
       */
      applyStyle: {
        /** @prop {number} order=900 - Index used to define the order of execution */
        order: 900,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: applyStyle,
        /** @prop {Function} */
        onLoad: applyStyleOnLoad,
        /**
         * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
         * @prop {Boolean} gpuAcceleration=true
         * If true, it uses the CSS 3D transformation to position the popper.
         * Otherwise, it will use the `top` and `left` properties
         */
        gpuAcceleration: undefined
      }
    };
  
    /**
     * The `dataObject` is an object containing all the information used by Popper.js.
     * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
     * @name dataObject
     * @property {Object} data.instance The Popper.js instance
     * @property {String} data.placement Placement applied to popper
     * @property {String} data.originalPlacement Placement originally defined on init
     * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
     * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
     * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
     * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
     * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
     * @property {Object} data.boundaries Offsets of the popper boundaries
     * @property {Object} data.offsets The measurements of popper, reference and arrow elements
     * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
     * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
     * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
     */
  
    /**
     * Default options provided to Popper.js constructor.<br />
     * These can be overridden using the `options` argument of Popper.js.<br />
     * To override an option, simply pass an object with the same
     * structure of the `options` object, as the 3rd argument. For example:
     * ```
     * new Popper(ref, pop, {
     *   modifiers: {
     *     preventOverflow: { enabled: false }
     *   }
     * })
     * ```
     * @type {Object}
     * @static
     * @memberof Popper
     */
    var Defaults = {
      /**
       * Popper's placement.
       * @prop {Popper.placements} placement='bottom'
       */
      placement: 'bottom',
  
      /**
       * Set this to true if you want popper to position it self in 'fixed' mode
       * @prop {Boolean} positionFixed=false
       */
      positionFixed: false,
  
      /**
       * Whether events (resize, scroll) are initially enabled.
       * @prop {Boolean} eventsEnabled=true
       */
      eventsEnabled: true,
  
      /**
       * Set to true if you want to automatically remove the popper when
       * you call the `destroy` method.
       * @prop {Boolean} removeOnDestroy=false
       */
      removeOnDestroy: false,
  
      /**
       * Callback called when the popper is created.<br />
       * By default, it is set to no-op.<br />
       * Access Popper.js instance with `data.instance`.
       * @prop {onCreate}
       */
      onCreate: function onCreate() {},
  
      /**
       * Callback called when the popper is updated. This callback is not called
       * on the initialization/creation of the popper, but only on subsequent
       * updates.<br />
       * By default, it is set to no-op.<br />
       * Access Popper.js instance with `data.instance`.
       * @prop {onUpdate}
       */
      onUpdate: function onUpdate() {},
  
      /**
       * List of modifiers used to modify the offsets before they are applied to the popper.
       * They provide most of the functionalities of Popper.js.
       * @prop {modifiers}
       */
      modifiers: modifiers
    };
  
    /**
     * @callback onCreate
     * @param {dataObject} data
     */
  
    /**
     * @callback onUpdate
     * @param {dataObject} data
     */
  
    // Utils
    // Methods
    var Popper = function () {
      /**
       * Creates a new Popper.js instance.
       * @class Popper
       * @param {Element|referenceObject} reference - The reference element used to position the popper
       * @param {Element} popper - The HTML / XML element used as the popper
       * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
       * @return {Object} instance - The generated Popper.js instance
       */
      function Popper(reference, popper) {
        var _this = this;
  
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        classCallCheck$1(this, Popper);
  
        this.scheduleUpdate = function () {
          return requestAnimationFrame(_this.update);
        };
  
        // make update() debounced, so that it only runs at most once-per-tick
        this.update = debounce$1(this.update.bind(this));
  
        // with {} we create a new object with the options inside it
        this.options = _extends$1({}, Popper.Defaults, options);
  
        // init state
        this.state = {
          isDestroyed: false,
          isCreated: false,
          scrollParents: []
        };
  
        // get reference and popper elements (allow jQuery wrappers)
        this.reference = reference && reference.jquery ? reference[0] : reference;
        this.popper = popper && popper.jquery ? popper[0] : popper;
  
        // Deep merge modifiers options
        this.options.modifiers = {};
        Object.keys(_extends$1({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
          _this.options.modifiers[name] = _extends$1({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
        });
  
        // Refactoring modifiers' list (Object => Array)
        this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
          return _extends$1({
            name: name
          }, _this.options.modifiers[name]);
        })
        // sort the modifiers by order
        .sort(function (a, b) {
          return a.order - b.order;
        });
  
        // modifiers have the ability to execute arbitrary code when Popper.js get inited
        // such code is executed in the same order of its modifier
        // they could add new properties to their options configuration
        // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
        this.modifiers.forEach(function (modifierOptions) {
          if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
            modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
          }
        });
  
        // fire the first update to position the popper in the right place
        this.update();
  
        var eventsEnabled = this.options.eventsEnabled;
        if (eventsEnabled) {
          // setup event listeners, they will take care of update the position in specific situations
          this.enableEventListeners();
        }
  
        this.state.eventsEnabled = eventsEnabled;
      }
  
      // We can't use class properties because they don't get listed in the
      // class prototype and break stuff like Sinon stubs
  
  
      createClass$1(Popper, [{
        key: 'update',
        value: function update$$1() {
          return update$1.call(this);
        }
      }, {
        key: 'destroy',
        value: function destroy$$1() {
          return destroy.call(this);
        }
      }, {
        key: 'enableEventListeners',
        value: function enableEventListeners$$1() {
          return enableEventListeners.call(this);
        }
      }, {
        key: 'disableEventListeners',
        value: function disableEventListeners$$1() {
          return disableEventListeners.call(this);
        }
  
        /**
         * Schedules an update. It will run on the next UI update available.
         * @method scheduleUpdate
         * @memberof Popper
         */
  
  
        /**
         * Collection of utilities useful when writing custom modifiers.
         * Starting from version 1.7, this method is available only if you
         * include `popper-utils.js` before `popper.js`.
         *
         * **DEPRECATION**: This way to access PopperUtils is deprecated
         * and will be removed in v2! Use the PopperUtils module directly instead.
         * Due to the high instability of the methods contained in Utils, we can't
         * guarantee them to follow semver. Use them at your own risk!
         * @static
         * @private
         * @type {Object}
         * @deprecated since version 1.8
         * @member Utils
         * @memberof Popper
         */
  
      }]);
      return Popper;
    }();
  
    /**
     * The `referenceObject` is an object that provides an interface compatible with Popper.js
     * and lets you use it as replacement of a real DOM node.<br />
     * You can use this method to position a popper relatively to a set of coordinates
     * in case you don't have a DOM node to use as reference.
     *
     * ```
     * new Popper(referenceObject, popperNode);
     * ```
     *
     * NB: This feature isn't supported in Internet Explorer 10.
     * @name referenceObject
     * @property {Function} data.getBoundingClientRect
     * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
     * @property {number} data.clientWidth
     * An ES6 getter that will return the width of the virtual reference element.
     * @property {number} data.clientHeight
     * An ES6 getter that will return the height of the virtual reference element.
     */
  
  
    Popper.Utils = (typeof window !== 'undefined' ? window : global$1).PopperUtils;
    Popper.placements = placements;
    Popper.Defaults = Defaults;
  
    function flipPlacement(placement) {
      var direction = typeof window !== 'undefined' && document.body.getAttribute('dir') || 'ltr';
  
      if (direction !== 'rtl') {
        return placement;
      }
  
      switch (placement) {
        case 'bottom-end':
          return 'bottom-start';
  
        case 'bottom-start':
          return 'bottom-end';
  
        case 'top-end':
          return 'top-start';
  
        case 'top-start':
          return 'top-end';
  
        default:
          return placement;
      }
    }
  
    function getAnchorEl$1(anchorEl) {
      return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
    }
  
    var useEnhancedEffect$7 = typeof window !== 'undefined' ? React__default.useLayoutEffect : React__default.useEffect;
    var defaultPopperOptions = {};
    /**
     * Poppers rely on the 3rd party library [Popper.js](https://github.com/FezVrasta/popper.js) for positioning.
     */
  
    var Popper$1 = React__default.forwardRef(function Popper$1(props, ref) {
      var anchorEl = props.anchorEl,
          children = props.children,
          container = props.container,
          _props$disablePortal = props.disablePortal,
          disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,
          _props$keepMounted = props.keepMounted,
          keepMounted = _props$keepMounted === void 0 ? false : _props$keepMounted,
          modifiers = props.modifiers,
          open = props.open,
          _props$placement = props.placement,
          placementProps = _props$placement === void 0 ? 'bottom' : _props$placement,
          _props$popperOptions = props.popperOptions,
          popperOptions = _props$popperOptions === void 0 ? defaultPopperOptions : _props$popperOptions,
          popperRefProp = props.popperRef,
          _props$transition = props.transition,
          transition = _props$transition === void 0 ? false : _props$transition,
          other = objectWithoutProperties(props, ["anchorEl", "children", "container", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "transition"]);
  
      var tooltipRef = React__default.useRef(null);
      var handleRef = useForkRef(tooltipRef, ref);
      var popperRef = React__default.useRef(null);
      var handlePopperRefRef = React__default.useRef();
      var handlePopperRef = useForkRef(popperRef, popperRefProp);
      useEnhancedEffect$7(function () {
        handlePopperRefRef.current = handlePopperRef;
      }, [handlePopperRef]);
      React__default.useImperativeHandle(popperRefProp, function () {
        return popperRef.current;
      }, []);
  
      var _React$useState = React__default.useState(!props.open),
          _React$useState2 = slicedToArray(_React$useState, 2),
          exited = _React$useState2[0],
          setExited = _React$useState2[1];
  
      var _React$useState3 = React__default.useState(),
          _React$useState4 = slicedToArray(_React$useState3, 2),
          placement = _React$useState4[0],
          setPlacement = _React$useState4[1];
  
      var handleOpen = React__default.useCallback(function () {
        var handlePopperUpdate = function handlePopperUpdate(data) {
          if (data.placement !== placement) {
            setPlacement(data.placement);
          }
        };
  
        var popperNode = tooltipRef.current;
  
        if (!popperNode || !anchorEl || !open) {
          return;
        }
  
        if (popperRef.current) {
          popperRef.current.destroy();
          handlePopperRefRef.current(null);
        }
  
        var popper = new Popper(getAnchorEl$1(anchorEl), popperNode, _extends_1({
          placement: flipPlacement(placementProps)
        }, popperOptions, {
          modifiers: _extends_1({}, disablePortal ? {} : {
            // It's using scrollParent by default, we can use the viewport when using a portal.
            preventOverflow: {
              boundariesElement: 'window'
            }
          }, modifiers, popperOptions.modifiers),
          // We could have been using a custom modifier like react-popper is doing.
          // But it seems this is the best public API for this use case.
          onCreate: createChainedFunction(handlePopperUpdate, popperOptions.onCreate),
          onUpdate: createChainedFunction(handlePopperUpdate, popperOptions.onUpdate)
        }));
        handlePopperRefRef.current(popper);
      }, [anchorEl, disablePortal, modifiers, open, placement, placementProps, popperOptions]);
  
      var handleEnter = function handleEnter() {
        setExited(false);
      };
  
      var handleClose = function handleClose() {
        if (!popperRef.current) {
          return;
        }
  
        popperRef.current.destroy();
        handlePopperRefRef.current(null);
      };
  
      var handleExited = function handleExited() {
        setExited(true);
        handleClose();
      };
  
      React__default.useEffect(function () {
        return function () {
          handleClose();
        };
      }, []);
      React__default.useEffect(function () {
        // Let's update the popper position.
        handleOpen();
      }, [handleOpen]);
      React__default.useEffect(function () {
        if (!open && !transition) {
          // Otherwise handleExited will call this.
          handleClose();
        }
      }, [open, transition]);
  
      if (!keepMounted && !open && (!transition || exited)) {
        return null;
      }
  
      var childProps = {
        placement: placement || flipPlacement(placementProps)
      };
  
      if (transition) {
        childProps.TransitionProps = {
          in: open,
          onEnter: handleEnter,
          onExited: handleExited
        };
      }
  
      return React__default.createElement(Portal, {
        onRendered: handleOpen,
        disablePortal: disablePortal,
        container: container
      }, React__default.createElement("div", _extends_1({
        ref: handleRef,
        role: "tooltip",
        style: {
          // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
          position: 'absolute'
        }
      }, other), typeof children === 'function' ? children(childProps) : children));
    });
    Popper$1.propTypes = {
      /**
       * This is the reference element, or a function that returns the reference element,
       * that may be used to set the position of the popover.
       * The return value will passed as the reference object of the Popper
       * instance.
       *
       * The reference element should be an HTML Element instance or a referenceObject:
       * https://popper.js.org/popper-documentation.html#referenceObject.
       */
      anchorEl: chainPropTypes(propTypes.oneOfType([propTypes.object, propTypes.func]), function (props) {
        if (props.open) {
          var resolvedAnchorEl = getAnchorEl$1(props.anchorEl);
  
          if (resolvedAnchorEl instanceof Element) {
            var box = resolvedAnchorEl.getBoundingClientRect();
  
            if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
              return new Error(['Material-UI: the `anchorEl` prop provided to the component is invalid.', 'The reference element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
            }
          } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.clientWidth !== 'number' || typeof resolvedAnchorEl.clientHeight !== 'number' || typeof resolvedAnchorEl.getBoundingClientRect !== 'function') {
            return new Error(['Material-UI: the `anchorEl` prop provided to the component is invalid.', 'It should be an HTML Element instance or a referenceObject:', 'https://popper.js.org/popper-documentation.html#referenceObject.'].join('\n'));
          }
        }
  
        return null;
      }),
  
      /**
       * Popper render function or node.
       */
      children: propTypes.oneOfType([propTypes.node, propTypes.func]).isRequired,
  
      /**
       * A node, component instance, or function that returns either.
       * The `container` will passed to the Modal component.
       * By default, it uses the body of the anchorEl's top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: propTypes.oneOfType([propTypes.object, propTypes.func]),
  
      /**
       * Disable the portal behavior.
       * The children stay within it's parent DOM hierarchy.
       */
      disablePortal: propTypes.bool,
  
      /**
       * Always keep the children in the DOM.
       * This property can be useful in SEO situation or
       * when you want to maximize the responsiveness of the Popper.
       */
      keepMounted: propTypes.bool,
  
      /**
       * Popper.js is based on a "plugin-like" architecture,
       * most of its features are fully encapsulated "modifiers".
       *
       * A modifier is a function that is called each time Popper.js needs to
       * compute the position of the popper.
       * For this reason, modifiers should be very performant to avoid bottlenecks.
       * To learn how to create a modifier, [read the modifiers documentation](https://github.com/FezVrasta/popper.js/blob/master/docs/_includes/popper-documentation.md#modifiers--object).
       */
      modifiers: propTypes.object,
  
      /**
       * If `true`, the popper is visible.
       */
      open: propTypes.bool.isRequired,
  
      /**
       * Popper placement.
       */
      placement: propTypes.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),
  
      /**
       * Options provided to the [`popper.js`](https://github.com/FezVrasta/popper.js) instance.
       */
      popperOptions: propTypes.object,
  
      /**
       * Callback fired when a new popper instance is used.
       */
      popperRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  
      /**
       * Help supporting a react-transition-group/Transition component.
       */
      transition: propTypes.bool
    };
  
    /**
     * @ignore - internal component.
     */
  
    var RadioButtonUncheckedIcon = createSvgIcon(React__default.createElement("path", {
      d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
    }), 'RadioButtonUnchecked');
  
    /**
     * @ignore - internal component.
     */
  
    var RadioButtonCheckedIcon = createSvgIcon(React__default.createElement("path", {
      d: "M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
    }), 'RadioButtonChecked');
  
    var styles$1e = function styles(theme) {
      return {
        root: {
          position: 'relative',
          display: 'flex',
          '&$checked $layer': {
            transform: 'scale(1)',
            transition: theme.transitions.create('transform', {
              easing: theme.transitions.easing.easeOut,
              duration: theme.transitions.duration.shortest
            })
          }
        },
        layer: {
          left: 0,
          position: 'absolute',
          transform: 'scale(0)',
          transition: theme.transitions.create('transform', {
            easing: theme.transitions.easing.easeIn,
            duration: theme.transitions.duration.shortest
          })
        },
        checked: {}
      };
    };
    /**
     * @ignore - internal component.
     */
  
    var _ref = React__default.createElement(RadioButtonUncheckedIcon, null);
  
    function RadioButtonIcon(props) {
      var checked = props.checked,
          classes = props.classes,
          className = props.className,
          other = objectWithoutProperties(props, ["checked", "classes", "className"]);
  
      return React__default.createElement("div", _extends_1({
        className: clsx(classes.root, className, checked && classes.checked)
      }, other), _ref, React__default.createElement(RadioButtonCheckedIcon, {
        className: classes.layer
      }));
    }
  
    RadioButtonIcon.propTypes = {
      /**
       * If `true`, the component is checked.
       */
      checked: propTypes.bool,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string
    };
    var RadioButtonIcon$1 = withStyles$1(styles$1e, {
      name: 'PrivateRadioButtonIcon'
    })(RadioButtonIcon);
  
    /**
     * @ignore - internal component.
     */
  
    var RadioGroupContext = React__default.createContext();
  
    var styles$1f = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          color: theme.palette.text.secondary
        },
  
        /* Pseudo-class applied to the root element if `checked={true}`. */
        checked: {},
  
        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},
  
        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          '&$checked': {
            color: theme.palette.primary.main,
            '&:hover': {
              backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
              // Reset on touch devices, it doesn't add specificity
              '@media (hover: none)': {
                backgroundColor: 'transparent'
              }
            }
          },
          '&$disabled': {
            color: theme.palette.action.disabled
          }
        },
  
        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          '&$checked': {
            color: theme.palette.secondary.main,
            '&:hover': {
              backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
              // Reset on touch devices, it doesn't add specificity
              '@media (hover: none)': {
                backgroundColor: 'transparent'
              }
            }
          },
          '&$disabled': {
            color: theme.palette.action.disabled
          }
        }
      };
    };
    var defaultCheckedIcon$1 = React__default.createElement(RadioButtonIcon$1, {
      checked: true
    });
    var defaultIcon$1 = React__default.createElement(RadioButtonIcon$1, null);
    var Radio = React__default.forwardRef(function Radio(props, ref) {
      var checkedProp = props.checked,
          classes = props.classes,
          _props$color = props.color,
          color = _props$color === void 0 ? 'secondary' : _props$color,
          nameProp = props.name,
          onChangeProp = props.onChange,
          other = objectWithoutProperties(props, ["checked", "classes", "color", "name", "onChange"]);
  
      var radioGroup = React__default.useContext(RadioGroupContext);
      var checked = checkedProp;
      var onChange = createChainedFunction(onChangeProp, radioGroup && radioGroup.onChange);
      var name = nameProp;
  
      if (radioGroup) {
        if (typeof checked === 'undefined') {
          checked = radioGroup.value === props.value;
        }
  
        if (typeof name === 'undefined') {
          name = radioGroup.name;
        }
      }
  
      return React__default.createElement(SwitchBase$1, _extends_1({
        color: color,
        type: "radio",
        icon: defaultIcon$1,
        checkedIcon: defaultCheckedIcon$1,
        classes: {
          root: clsx(classes.root, classes["color".concat(capitalize(color))]),
          checked: classes.checked,
          disabled: classes.disabled
        },
        name: name,
        checked: checked,
        onChange: onChange,
        ref: ref
      }, other));
    });
    Radio.propTypes = {
      /**
       * If `true`, the component is checked.
       */
      checked: propTypes.bool,
  
      /**
       * The icon to display when the component is checked.
       */
      checkedIcon: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['primary', 'secondary', 'default']),
  
      /**
       * If `true`, the switch will be disabled.
       */
      disabled: propTypes.bool,
  
      /**
       * If `true`, the ripple effect will be disabled.
       */
      disableRipple: propTypes.bool,
  
      /**
       * The icon to display when the component is unchecked.
       */
      icon: propTypes.node,
  
      /**
       * The id of the `input` element.
       */
      id: propTypes.string,
  
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: propTypes.object,
  
      /**
       * This property can be used to pass a ref callback to the `input` element.
       */
      inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  
      /**
       * Name attribute of the `input` element.
       */
      name: propTypes.string,
  
      /**
       * Callback fired when the state is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value`.
       * @param {boolean} checked The `checked` value of the switch
       */
      onChange: propTypes.func,
  
      /**
       * The input component property `type`.
       */
      type: propTypes.string,
  
      /**
       * The value of the component.
       */
      value: propTypes.any
    };
    var Radio$1 = withStyles$1(styles$1f, {
      name: 'MuiRadio'
    })(Radio);
  
    var RadioGroup = React__default.forwardRef(function RadioGroup(props, ref) {
      var actions = props.actions,
          children = props.children,
          name = props.name,
          valueProp = props.value,
          onChange = props.onChange,
          other = objectWithoutProperties(props, ["actions", "children", "name", "value", "onChange"]);
  
      var rootRef = React__default.useRef(null);
  
      var _React$useRef = React__default.useRef(props.value != null),
          isControlled = _React$useRef.current;
  
      var _React$useState = React__default.useState(function () {
        if (!isControlled) {
          return props.defaultValue;
        }
  
        return null;
      }),
          _React$useState2 = slicedToArray(_React$useState, 2),
          valueState = _React$useState2[0],
          setValue = _React$useState2[1];
  
      React__default.useImperativeHandle(actions, function () {
        return {
          focus: function focus() {
            var input = rootRef.current.querySelector('input:not(:disabled):checked');
  
            if (!input) {
              input = rootRef.current.querySelector('input:not(:disabled)');
            }
  
            if (input) {
              input.focus();
            }
          }
        };
      }, []);
      React__default.useEffect(function () {
        warning_1(isControlled === (valueProp != null), ["Material-UI: A component is changing ".concat(isControlled ? 'a ' : 'an un', "controlled RadioGroup to be ").concat(isControlled ? 'un' : '', "controlled."), 'Input elements should not switch from uncontrolled to controlled (or vice versa).', 'Decide between using a controlled or uncontrolled RadioGroup ' + 'element for the lifetime of the component.', 'More info: https://fb.me/react-controlled-components'].join('\n'));
      }, [valueProp, isControlled]);
      var value = isControlled ? valueProp : valueState;
  
      var handleChange = function handleChange(event) {
        if (!isControlled) {
          setValue(event.target.value);
        }
  
        if (onChange) {
          onChange(event, event.target.value);
        }
      };
  
      var context = {
        name: name,
        onChange: handleChange,
        value: value
      };
      var handleRef = useForkRef(ref, rootRef);
      return React__default.createElement(FormGroup$1, _extends_1({
        role: "radiogroup",
        ref: handleRef
      }, other), React__default.createElement(RadioGroupContext.Provider, {
        value: context
      }, children));
    });
    RadioGroup.propTypes = {
      /**
       * @ignore
       */
      actions: propTypes.shape({
        current: propTypes.object
      }),
  
      /**
       * The content of the component.
       */
      children: propTypes.node,
  
      /**
       * The default `input` element value. Use when the component is not controlled.
       */
      defaultValue: propTypes.any,
  
      /**
       * The name used to reference the value of the control.
       */
      name: propTypes.string,
  
      /**
       * @ignore
       */
      onBlur: propTypes.func,
  
      /**
       * Callback fired when a radio button is selected.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value`.
       * @param {string} value The `value` of the selected radio button
       */
      onChange: propTypes.func,
  
      /**
       * @ignore
       */
      onKeyDown: propTypes.func,
  
      /**
       * Value of the selected radio button.
       */
      value: propTypes.string
    };
  
    /**
     * ⚠️⚠️⚠️
     * If you want the DOM element of a Material-UI component check out
     * [/getting-started/faq/#how-can-i-access-the-dom-element](FAQ: How can I access the DOM element?)
     * first.
     *
     * This component uses `findDOMNode` which is deprecated in React.StrictMode.
     *
     * Helper component to allow attaching a ref to a
     * wrapped element to access the underlying DOM element.
     *
     * It's highly inspired by https://github.com/facebook/react/issues/11401#issuecomment-340543801.
     * For example:
     * ```jsx
     * import React from 'react';
     * import RootRef from '@material-ui/core/RootRef';
     *
     * class MyComponent extends React.Component {
     *   constructor() {
     *     super();
     *     this.domRef = React.createRef();
     *   }
     *
     *   componentDidMount() {
     *     console.log(this.domRef.current); // DOM node
     *   }
     *
     *   render() {
     *     return (
     *       <RootRef rootRef={this.domRef}>
     *         <SomeChildComponent />
     *       </RootRef>
     *     );
     *   }
     * }
     * ```
     */
  
    var RootRef =
    /*#__PURE__*/
    function (_React$Component) {
      inherits(RootRef, _React$Component);
  
      function RootRef() {
        classCallCheck(this, RootRef);
  
        return possibleConstructorReturn(this, getPrototypeOf$1(RootRef).apply(this, arguments));
      }
  
      createClass(RootRef, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.ref = ReactDOM__default.findDOMNode(this);
          setRef(this.props.rootRef, this.ref);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var ref = ReactDOM__default.findDOMNode(this);
  
          if (prevProps.rootRef !== this.props.rootRef || this.ref !== ref) {
            if (prevProps.rootRef !== this.props.rootRef) {
              setRef(prevProps.rootRef, null);
            }
  
            this.ref = ref;
            setRef(this.props.rootRef, this.ref);
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.ref = null;
          setRef(this.props.rootRef, null);
        }
      }, {
        key: "render",
        value: function render() {
          return this.props.children;
        }
      }]);
  
      return RootRef;
    }(React__default.Component);
  
    RootRef.propTypes = {
      /**
       * The wrapped element.
       */
      children: propTypes.element.isRequired,
  
      /**
       * Provide a way to access the DOM node of the wrapped element.
       * You can provide a callback ref or a `React.createRef()` ref.
       */
      rootRef: propTypes.oneOfType([propTypes.func, propTypes.object]).isRequired
    };
  
    {
      RootRef.propTypes = exactProp(RootRef.propTypes);
    }
  
    function areEqualValues(a, b) {
      if (_typeof_1(b) === 'object' && b !== null) {
        return a === b;
      }
  
      return String(a) === String(b);
    }
    /**
     * @ignore - internal component.
     */
  
  
    var SelectInput = React__default.forwardRef(function SelectInput(props, ref) {
      var autoFocus = props.autoFocus,
          autoWidth = props.autoWidth,
          children = props.children,
          classes = props.classes,
          className = props.className,
          disabled = props.disabled,
          displayEmpty = props.displayEmpty,
          IconComponent = props.IconComponent,
          inputRef = props.inputRef,
          _props$MenuProps = props.MenuProps,
          MenuProps = _props$MenuProps === void 0 ? {} : _props$MenuProps,
          multiple = props.multiple,
          name = props.name,
          onBlur = props.onBlur,
          onChange = props.onChange,
          onClose = props.onClose,
          onFocus = props.onFocus,
          onOpen = props.onOpen,
          openProp = props.open,
          readOnly = props.readOnly,
          renderValue = props.renderValue,
          required = props.required,
          SelectDisplayProps = props.SelectDisplayProps,
          tabIndexProp = props.tabIndex,
          _props$type = props.type,
          type = _props$type === void 0 ? 'hidden' : _props$type,
          value = props.value,
          variant = props.variant,
          other = objectWithoutProperties(props, ["autoFocus", "autoWidth", "children", "classes", "className", "disabled", "displayEmpty", "IconComponent", "inputRef", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "required", "SelectDisplayProps", "tabIndex", "type", "value", "variant"]);
  
      var displayRef = React__default.useRef(null);
      var ignoreNextBlur = React__default.useRef(false);
  
      var _React$useRef = React__default.useRef(props.open != null),
          isOpenControlled = _React$useRef.current;
  
      var _React$useState = React__default.useState(),
          _React$useState2 = slicedToArray(_React$useState, 2),
          menuMinWidthState = _React$useState2[0],
          setMenuMinWidthState = _React$useState2[1];
  
      var _React$useState3 = React__default.useState(false),
          _React$useState4 = slicedToArray(_React$useState3, 2),
          openState = _React$useState4[0],
          setOpenState = _React$useState4[1];
  
      var _React$useState5 = React__default.useState(0),
          _React$useState6 = slicedToArray(_React$useState5, 2),
          forceUpdate = _React$useState6[1];
  
      var handleRef = useForkRef(ref, inputRef);
      React__default.useImperativeHandle(handleRef, function () {
        return {
          focus: function focus() {
            displayRef.current.focus();
          },
          node: inputRef ? inputRef.current : null,
          value: value
        };
      }, [inputRef, value]);
      React__default.useEffect(function () {
        if (isOpenControlled && openProp) {
          // Focus the display node so the focus is restored on this element once
          // the menu is closed.
          displayRef.current.focus(); // Rerender with the resolve `displayRef` reference.
  
          forceUpdate(function (n) {
            return !n;
          });
        }
  
        if (autoFocus) {
          displayRef.current.focus();
        }
      }, [autoFocus, isOpenControlled, openProp]);
  
      var update = function update(open, event) {
        if (open) {
          if (onOpen) {
            onOpen(event);
          }
        } else if (onClose) {
          onClose(event);
        }
  
        if (!isOpenControlled) {
          setMenuMinWidthState(autoWidth ? null : displayRef.current.clientWidth);
          setOpenState(open);
        }
      };
  
      var handleClick = function handleClick(event) {
        // Opening the menu is going to blur the. It will be focused back when closed.
        ignoreNextBlur.current = true;
        update(true, event);
      };
  
      var handleClose = function handleClose(event) {
        update(false, event);
      };
  
      var handleItemClick = function handleItemClick(child) {
        return function (event) {
          if (!multiple) {
            update(false, event);
          }
  
          if (onChange) {
            var newValue;
  
            if (multiple) {
              newValue = Array.isArray(value) ? toConsumableArray(value) : [];
              var itemIndex = value.indexOf(child.props.value);
  
              if (itemIndex === -1) {
                newValue.push(child.props.value);
              } else {
                newValue.splice(itemIndex, 1);
              }
            } else {
              newValue = child.props.value;
            }
  
            event.persist();
            event.target = {
              value: newValue,
              name: name
            };
            onChange(event, child);
          }
        };
      };
  
      var handleBlur = function handleBlur(event) {
        if (ignoreNextBlur.current === true) {
          // The parent components are relying on the bubbling of the event.
          event.stopPropagation();
          ignoreNextBlur.current = false;
          return;
        }
  
        if (onBlur) {
          event.persist();
          event.target = {
            value: value,
            name: name
          };
          onBlur(event);
        }
      };
  
      var handleKeyDown = function handleKeyDown(event) {
        if (!readOnly) {
          var validKeys = [' ', 'ArrowUp', 'ArrowDown', // The native select doesn't respond to enter on MacOS, but it's recommended by
          // https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html
          'Enter'];
  
          if (validKeys.indexOf(event.key) !== -1) {
            event.preventDefault(); // Opening the menu is going to blur the. It will be focused back when closed.
  
            ignoreNextBlur.current = true;
            update(true, event);
          }
        }
      };
  
      var open = isOpenControlled && displayRef.current ? openProp : openState;
      delete other['aria-invalid'];
      var display;
      var displaySingle = '';
      var displayMultiple = [];
      var computeDisplay = false; // No need to display any value if the field is empty.
  
      if (isFilled(props) || displayEmpty) {
        if (renderValue) {
          display = renderValue(value);
        } else {
          computeDisplay = true;
        }
      }
  
      var items = React__default.Children.map(children, function (child) {
        if (!React__default.isValidElement(child)) {
          return null;
        }
  
        warning_1(child.type !== React__default.Fragment, ["Material-UI: the Select component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
        var selected;
  
        if (multiple) {
          if (!Array.isArray(value)) {
            throw new Error('Material-UI: the `value` property must be an array ' + 'when using the `Select` component with `multiple`.');
          }
  
          selected = value.some(function (v) {
            return areEqualValues(v, child.props.value);
          });
  
          if (selected && computeDisplay) {
            displayMultiple.push(child.props.children);
          }
        } else {
          selected = areEqualValues(value, child.props.value);
  
          if (selected && computeDisplay) {
            displaySingle = child.props.children;
          }
        }
  
        return React__default.cloneElement(child, {
          onClick: handleItemClick(child),
          role: 'option',
          selected: selected,
          value: undefined,
          // The value is most likely not a valid HTML attribute.
          'data-value': child.props.value // Instead, we provide it as a data attribute.
  
        });
      });
  
      if (computeDisplay) {
        display = multiple ? displayMultiple.join(', ') : displaySingle;
      } // Avoid performing a layout computation in the render method.
  
  
      var menuMinWidth = menuMinWidthState;
  
      if (!autoWidth && isOpenControlled.current && displayRef.current) {
        menuMinWidth = displayRef.current.clientWidth;
      }
  
      var tabIndex;
  
      if (typeof tabIndexProp !== 'undefined') {
        tabIndex = tabIndexProp;
      } else {
        tabIndex = disabled ? null : 0;
      }
  
      return React__default.createElement("div", {
        className: classes.root
      }, React__default.createElement("div", _extends_1({
        className: clsx(classes.select, classes.selectMenu, className, disabled && classes.disabled, variant === 'filled' && classes.filled, variant === 'outlined' && classes.outlined),
        ref: displayRef,
        "aria-pressed": open ? 'true' : 'false',
        tabIndex: tabIndex,
        role: "button",
        "aria-owns": open ? "menu-".concat(name || '') : undefined,
        "aria-haspopup": "true",
        onKeyDown: handleKeyDown,
        onBlur: handleBlur,
        onClick: disabled || readOnly ? null : handleClick,
        onFocus: onFocus // The id can help with end-to-end testing automation.
        ,
        id: name ? "select-".concat(name) : undefined
      }, SelectDisplayProps), display != null ? display : React__default.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: '&#8203;'
        }
      })), React__default.createElement("input", _extends_1({
        value: Array.isArray(value) ? value.join(',') : value,
        name: name,
        ref: handleRef,
        type: type,
        autoFocus: autoFocus
      }, other)), React__default.createElement(IconComponent, {
        className: classes.icon
      }), React__default.createElement(Menu$1, _extends_1({
        id: "menu-".concat(name || ''),
        anchorEl: displayRef.current,
        open: open,
        onClose: handleClose
      }, MenuProps, {
        MenuListProps: _extends_1({
          role: 'listbox',
          disableListWrap: true
        }, MenuProps.MenuListProps),
        PaperProps: _extends_1({}, MenuProps.PaperProps, {
          style: _extends_1({
            minWidth: menuMinWidth
          }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
        })
      }), items));
    });
    SelectInput.propTypes = {
      /**
       * @ignore
       */
      autoFocus: propTypes.bool,
  
      /**
       * If true, the width of the popover will automatically be set according to the items inside the
       * menu, otherwise it will be at least the width of the select input.
       */
      autoWidth: propTypes.bool,
  
      /**
       * The option elements to populate the select with.
       * Can be some `<MenuItem>` elements.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * The CSS class name of the select element.
       */
      className: propTypes.string,
  
      /**
       * If `true`, the select will be disabled.
       */
      disabled: propTypes.bool,
  
      /**
       * If `true`, the selected item is displayed even if its value is empty.
       */
      displayEmpty: propTypes.bool,
  
      /**
       * The icon that displays the arrow.
       */
      IconComponent: propTypes.elementType,
  
      /**
       * Use that property to pass a ref callback to the native select element.
       */
      inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  
      /**
       * Properties applied to the [`Menu`](/api/menu/) element.
       */
      MenuProps: propTypes.object,
  
      /**
       * If true, `value` must be an array and the menu will support multiple selections.
       */
      multiple: propTypes.bool,
  
      /**
       * Name attribute of the `select` or hidden `input` element.
       */
      name: propTypes.string,
  
      /**
       * @ignore
       */
      onBlur: propTypes.func,
  
      /**
       * Callback function fired when a menu item is selected.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value`.
       * @param {object} [child] The react element that was selected.
       */
      onChange: propTypes.func,
  
      /**
       * Callback fired when the component requests to be closed.
       * Use in controlled mode (see open).
       *
       * @param {object} event The event source of the callback
       */
      onClose: propTypes.func,
  
      /**
       * @ignore
       */
      onFocus: propTypes.func,
  
      /**
       * Callback fired when the component requests to be opened.
       * Use in controlled mode (see open).
       *
       * @param {object} event The event source of the callback
       */
      onOpen: propTypes.func,
  
      /**
       * Control `select` open state.
       */
      open: propTypes.bool,
  
      /**
       * @ignore
       */
      readOnly: propTypes.bool,
  
      /**
       * Render the selected value.
       *
       * @param {*} value The `value` provided to the component.
       * @returns {ReactElement}
       */
      renderValue: propTypes.func,
  
      /**
       * @ignore
       */
      required: propTypes.bool,
  
      /**
       * Properties applied to the clickable div element.
       */
      SelectDisplayProps: propTypes.object,
  
      /**
       * @ignore
       */
      tabIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),
  
      /**
       * @ignore
       */
      type: propTypes.string,
  
      /**
       * The input value.
       */
      value: propTypes.any.isRequired,
  
      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['standard', 'outlined', 'filled'])
    };
  
    var styles$1g = styles$1b;
    var defaultInput$1 = React__default.createElement(Input$1, null);
    var Select = React__default.forwardRef(function Select(props, ref) {
      var _props$autoWidth = props.autoWidth,
          autoWidth = _props$autoWidth === void 0 ? false : _props$autoWidth,
          children = props.children,
          classes = props.classes,
          _props$displayEmpty = props.displayEmpty,
          displayEmpty = _props$displayEmpty === void 0 ? false : _props$displayEmpty,
          _props$IconComponent = props.IconComponent,
          IconComponent = _props$IconComponent === void 0 ? ArrowDropDownIcon : _props$IconComponent,
          _props$input = props.input,
          input = _props$input === void 0 ? defaultInput$1 : _props$input,
          inputProps = props.inputProps,
          MenuProps = props.MenuProps,
          muiFormControl = props.muiFormControl,
          _props$multiple = props.multiple,
          multiple = _props$multiple === void 0 ? false : _props$multiple,
          _props$native = props.native,
          native = _props$native === void 0 ? false : _props$native,
          onClose = props.onClose,
          onOpen = props.onOpen,
          open = props.open,
          renderValue = props.renderValue,
          SelectDisplayProps = props.SelectDisplayProps,
          variant = props.variant,
          other = objectWithoutProperties(props, ["autoWidth", "children", "classes", "displayEmpty", "IconComponent", "input", "inputProps", "MenuProps", "muiFormControl", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"]);
  
      var inputComponent = native ? NativeSelectInput : SelectInput;
      var fcs = formControlState({
        props: props,
        muiFormControl: muiFormControl,
        states: ['variant']
      });
      return React__default.cloneElement(input, _extends_1({
        // Most of the logic is implemented in `SelectInput`.
        // The `Select` component is a simple API wrapper to expose something better to play with.
        inputComponent: inputComponent,
        inputProps: _extends_1({
          children: children,
          IconComponent: IconComponent,
          variant: fcs.variant,
          type: undefined,
          // We render a select. We can ignore the type provided by the `Input`.
          multiple: multiple
        }, native ? {} : {
          autoWidth: autoWidth,
          displayEmpty: displayEmpty,
          MenuProps: MenuProps,
          onClose: onClose,
          onOpen: onOpen,
          open: open,
          renderValue: renderValue,
          SelectDisplayProps: SelectDisplayProps
        }, inputProps, {
          classes: inputProps ? mergeClasses({
            baseClasses: classes,
            newClasses: inputProps.classes,
            Component: Select
          }) : classes
        }, input ? input.props.inputProps : {}),
        ref: ref
      }, other));
    });
    Select.propTypes = {
      /**
       * If true, the width of the popover will automatically be set according to the items inside the
       * menu, otherwise it will be at least the width of the select input.
       */
      autoWidth: propTypes.bool,
  
      /**
       * The option elements to populate the select with.
       * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
       *
       * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * If `true`, the selected item is displayed even if its value is empty.
       * You can only use it when the `native` property is `false` (default).
       */
      displayEmpty: propTypes.bool,
  
      /**
       * The icon that displays the arrow.
       */
      IconComponent: propTypes.elementType,
  
      /**
       * An `Input` element; does not have to be a material-ui specific `Input`.
       */
      input: propTypes.element,
  
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       * When `native` is `true`, the attributes are applied on the `select` element.
       */
      inputProps: propTypes.object,
  
      /**
       * Properties applied to the [`Menu`](/api/menu/) element.
       */
      MenuProps: propTypes.object,
  
      /**
       * @ignore
       * from `withFormControlContext`
       */
      muiFormControl: propTypes.object,
  
      /**
       * If true, `value` must be an array and the menu will support multiple selections.
       */
      multiple: propTypes.bool,
  
      /**
       * If `true`, the component will be using a native `select` element.
       */
      native: propTypes.bool,
  
      /**
       * Callback function fired when a menu item is selected.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value`.
       * @param {object} [child] The react element that was selected when `native` is `false` (default).
       */
      onChange: propTypes.func,
  
      /**
       * Callback fired when the component requests to be closed.
       * Use in controlled mode (see open).
       *
       * @param {object} event The event source of the callback
       */
      onClose: propTypes.func,
  
      /**
       * Callback fired when the component requests to be opened.
       * Use in controlled mode (see open).
       *
       * @param {object} event The event source of the callback
       */
      onOpen: propTypes.func,
  
      /**
       * Control `select` open state.
       * You can only use it when the `native` property is `false` (default).
       */
      open: propTypes.bool,
  
      /**
       * Render the selected value.
       * You can only use it when the `native` property is `false` (default).
       *
       * @param {*} value The `value` provided to the component.
       * @returns {ReactElement}
       */
      renderValue: propTypes.func,
  
      /**
       * Properties applied to the clickable div element.
       */
      SelectDisplayProps: propTypes.object,
  
      /**
       * The input value.
       * This property is required when the `native` property is `false` (default).
       */
      value: propTypes.any,
  
      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['standard', 'outlined', 'filled'])
    };
    Select.muiName = 'Select';
    var Select$1 = withStyles$1(styles$1g, {
      name: 'MuiSelect'
    })(withFormControlContext(Select));
  
    var styles$1h = function styles(theme) {
      var emphasis = theme.palette.type === 'light' ? 0.8 : 0.98;
      var backgroundColor = emphasize(theme.palette.background.default, emphasis);
      return {
        /* Styles applied to the root element. */
        root: defineProperty({
          color: theme.palette.getContrastText(backgroundColor),
          backgroundColor: backgroundColor,
          display: 'flex',
          alignItems: 'center',
          flexWrap: 'wrap',
          padding: '6px 16px',
          borderRadius: theme.shape.borderRadius,
          flexGrow: 1
        }, theme.breakpoints.up('sm'), {
          flexGrow: 'initial',
          minWidth: 288
        }),
  
        /* Styles applied to the message wrapper element. */
        message: {
          padding: '8px 0'
        },
  
        /* Styles applied to the action wrapper element if `action` is provided. */
        action: {
          display: 'flex',
          alignItems: 'center',
          marginLeft: 'auto',
          paddingLeft: 16,
          marginRight: -8
        }
      };
    };
    var SnackbarContent = React__default.forwardRef(function SnackbarContent(props, ref) {
      var action = props.action,
          classes = props.classes,
          className = props.className,
          message = props.message,
          other = objectWithoutProperties(props, ["action", "classes", "className", "message"]);
  
      return React__default.createElement(Paper$1, _extends_1({
        component: Typography$1,
        variant: "body2",
        variantMapping: {
          body1: 'div',
          body2: 'div'
        },
        role: "alertdialog",
        square: true,
        elevation: 6,
        className: clsx(classes.root, className),
        ref: ref
      }, other), React__default.createElement("div", {
        className: classes.message
      }, message), action ? React__default.createElement("div", {
        className: classes.action
      }, action) : null);
    });
    SnackbarContent.propTypes = {
      /**
       * The action to display.
       */
      action: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The message to display.
       */
      message: propTypes.node
    };
    var SnackbarContent$1 = withStyles$1(styles$1h, {
      name: 'MuiSnackbarContent'
    })(SnackbarContent);
  
    var styles$1i = function styles(theme) {
      var top1 = {
        top: 8
      };
      var bottom1 = {
        bottom: 8
      };
      var right = {
        justifyContent: 'flex-end'
      };
      var left = {
        justifyContent: 'flex-start'
      };
      var top3 = {
        top: 24
      };
      var bottom3 = {
        bottom: 24
      };
      var right3 = {
        right: 24
      };
      var left3 = {
        left: 24
      };
      var center = {
        left: '50%',
        right: 'auto',
        transform: 'translateX(-50%)'
      };
      return {
        /* Styles applied to the root element. */
        root: {
          zIndex: theme.zIndex.snackbar,
          position: 'fixed',
          display: 'flex',
          left: 8,
          right: 8,
          justifyContent: 'center',
          alignItems: 'center'
        },
  
        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'center' }}`. */
        anchorOriginTopCenter: _extends_1({}, top1, defineProperty({}, theme.breakpoints.up('sm'), _extends_1({}, top3, center))),
  
        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'center' }}`. */
        anchorOriginBottomCenter: _extends_1({}, bottom1, defineProperty({}, theme.breakpoints.up('sm'), _extends_1({}, bottom3, center))),
  
        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }}`. */
        anchorOriginTopRight: _extends_1({}, top1, right, defineProperty({}, theme.breakpoints.up('sm'), _extends_1({
          left: 'auto'
        }, top3, right3))),
  
        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }}`. */
        anchorOriginBottomRight: _extends_1({}, bottom1, right, defineProperty({}, theme.breakpoints.up('sm'), _extends_1({
          left: 'auto'
        }, bottom3, right3))),
  
        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }}`. */
        anchorOriginTopLeft: _extends_1({}, top1, left, defineProperty({}, theme.breakpoints.up('sm'), _extends_1({
          right: 'auto'
        }, top3, left3))),
  
        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }}`. */
        anchorOriginBottomLeft: _extends_1({}, bottom1, left, defineProperty({}, theme.breakpoints.up('sm'), _extends_1({
          right: 'auto'
        }, bottom3, left3)))
      };
    };
    var Snackbar = React__default.forwardRef(function Snackbar(props, ref) {
      var action = props.action,
          _props$anchorOrigin = props.anchorOrigin,
          vertical = _props$anchorOrigin.vertical,
          horizontal = _props$anchorOrigin.horizontal,
          autoHideDuration = props.autoHideDuration,
          children = props.children,
          classes = props.classes,
          className = props.className,
          ClickAwayListenerProps = props.ClickAwayListenerProps,
          ContentProps = props.ContentProps,
          disableWindowBlurListener = props.disableWindowBlurListener,
          message = props.message,
          onClose = props.onClose,
          onEnter = props.onEnter,
          onEntered = props.onEntered,
          onEntering = props.onEntering,
          onExit = props.onExit,
          onExited = props.onExited,
          onExiting = props.onExiting,
          onMouseEnter = props.onMouseEnter,
          onMouseLeave = props.onMouseLeave,
          open = props.open,
          resumeHideDuration = props.resumeHideDuration,
          TransitionComponent = props.TransitionComponent,
          transitionDuration = props.transitionDuration,
          TransitionProps = props.TransitionProps,
          other = objectWithoutProperties(props, ["action", "anchorOrigin", "autoHideDuration", "children", "classes", "className", "ClickAwayListenerProps", "ContentProps", "disableWindowBlurListener", "message", "onClose", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration", "TransitionComponent", "transitionDuration", "TransitionProps"]);
  
      var timerAutoHide = React__default.useRef();
  
      var _React$useState = React__default.useState(!open),
          _React$useState2 = slicedToArray(_React$useState, 2),
          exited = _React$useState2[0],
          setExited = _React$useState2[1]; // Timer that controls delay before snackbar auto hides
  
  
      var setAutoHideTimer = React__default.useCallback(function (autoHideDurationParam) {
        var autoHideDurationBefore = autoHideDurationParam != null ? autoHideDurationParam : autoHideDuration;
  
        if (!onClose || autoHideDurationBefore == null) {
          return;
        }
  
        clearTimeout(timerAutoHide.current);
        timerAutoHide.current = setTimeout(function () {
          var autoHideDurationAfter = autoHideDurationParam != null ? autoHideDurationParam : autoHideDuration;
  
          if (!onClose || autoHideDurationAfter == null) {
            return;
          }
  
          onClose(null, 'timeout');
        }, autoHideDurationBefore);
      }, [autoHideDuration, onClose]);
      React__default.useEffect(function () {
        if (open) {
          setAutoHideTimer();
        }
  
        return function () {
          clearTimeout(timerAutoHide.current);
        };
      }, [open, setAutoHideTimer]); // Pause the timer when the user is interacting with the Snackbar
      // or when the user hide the window.
  
      var handlePause = function handlePause() {
        clearTimeout(timerAutoHide.current);
      }; // Restart the timer when the user is no longer interacting with the Snackbar
      // or when the window is shown back.
  
  
      var handleResume = React__default.useCallback(function () {
        if (autoHideDuration != null) {
          if (resumeHideDuration != null) {
            setAutoHideTimer(resumeHideDuration);
            return;
          }
  
          setAutoHideTimer(autoHideDuration * 0.5);
        }
      }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);
  
      var handleMouseEnter = function handleMouseEnter(event) {
        if (onMouseEnter) {
          onMouseEnter(event);
        }
  
        handlePause();
      };
  
      var handleMouseLeave = function handleMouseLeave(event) {
        if (onMouseLeave) {
          onMouseLeave(event);
        }
  
        handleResume();
      };
  
      var handleClickAway = function handleClickAway(event) {
        if (onClose) {
          onClose(event, 'clickaway');
        }
      };
  
      var handleExited = function handleExited() {
        setExited(true);
      };
  
      var handleEnter = function handleEnter() {
        setExited(false);
      };
  
      React__default.useEffect(function () {
        if (!disableWindowBlurListener && open) {
          window.addEventListener('focus', handleResume);
          window.addEventListener('blur', handlePause);
          return function () {
            window.removeEventListener('focus', handleResume);
            window.removeEventListener('blur', handlePause);
          };
        }
  
        return undefined;
      }, [disableWindowBlurListener, handleResume, open]); // So we only render active snackbars.
  
      if (!open && exited) {
        return null;
      }
  
      return React__default.createElement(ClickAwayListener, _extends_1({
        onClickAway: handleClickAway
      }, ClickAwayListenerProps), React__default.createElement("div", _extends_1({
        className: clsx(classes.root, classes["anchorOrigin".concat(capitalize(vertical)).concat(capitalize(horizontal))], className),
        onMouseEnter: handleMouseEnter,
        onMouseLeave: handleMouseLeave,
        ref: ref
      }, other), React__default.createElement(TransitionComponent, _extends_1({
        appear: true,
        in: open,
        onEnter: createChainedFunction(handleEnter, onEnter),
        onEntered: onEntered,
        onEntering: onEntering,
        onExit: onExit,
        onExited: createChainedFunction(handleExited, onExited),
        onExiting: onExiting,
        timeout: transitionDuration,
        direction: vertical === 'top' ? 'down' : 'up'
      }, TransitionProps), children || React__default.createElement(SnackbarContent$1, _extends_1({
        message: message,
        action: action
      }, ContentProps)))));
    });
    Snackbar.propTypes = {
      /**
       * The action to display.
       */
      action: propTypes.node,
  
      /**
       * The anchor of the `Snackbar`.
       */
      anchorOrigin: propTypes.shape({
        horizontal: propTypes.oneOf(['left', 'center', 'right']).isRequired,
        vertical: propTypes.oneOf(['top', 'bottom']).isRequired
      }),
  
      /**
       * The number of milliseconds to wait before automatically calling the
       * `onClose` function. `onClose` should then set the state of the `open`
       * prop to hide the Snackbar. This behavior is disabled by default with
       * the `null` value.
       */
      autoHideDuration: propTypes.number,
  
      /**
       * Replace the `SnackbarContent` component.
       */
      children: propTypes.element,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * Properties applied to the `ClickAwayListener` element.
       */
      ClickAwayListenerProps: propTypes.object,
  
      /**
       * Properties applied to the [`SnackbarContent`](/api/snackbar-content/) element.
       */
      ContentProps: propTypes.object,
  
      /**
       * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.
       */
      disableWindowBlurListener: propTypes.bool,
  
      /**
       * When displaying multiple consecutive Snackbars from a parent rendering a single
       * <Snackbar/>, add the key property to ensure independent treatment of each message.
       * e.g. <Snackbar key={message} />, otherwise, the message may update-in-place and
       * features such as autoHideDuration may be canceled.
       */
      key: propTypes.any,
  
      /**
       * The message to display.
       */
      message: propTypes.node,
  
      /**
       * Callback fired when the component requests to be closed.
       * Typically `onClose` is used to set state in the parent component,
       * which is used to control the `Snackbar` `open` prop.
       * The `reason` parameter can optionally be used to control the response to `onClose`,
       * for example ignoring `clickaway`.
       *
       * @param {object} event The event source of the callback
       * @param {string} reason Can be:`"timeout"` (`autoHideDuration` expired) or: `"clickaway"`
       */
      onClose: propTypes.func,
  
      /**
       * Callback fired before the transition is entering.
       */
      onEnter: propTypes.func,
  
      /**
       * Callback fired when the transition has entered.
       */
      onEntered: propTypes.func,
  
      /**
       * Callback fired when the transition is entering.
       */
      onEntering: propTypes.func,
  
      /**
       * Callback fired before the transition is exiting.
       */
      onExit: propTypes.func,
  
      /**
       * Callback fired when the transition has exited.
       */
      onExited: propTypes.func,
  
      /**
       * Callback fired when the transition is exiting.
       */
      onExiting: propTypes.func,
  
      /**
       * @ignore
       */
      onMouseEnter: propTypes.func,
  
      /**
       * @ignore
       */
      onMouseLeave: propTypes.func,
  
      /**
       * If true, `Snackbar` is open.
       */
      open: propTypes.bool,
  
      /**
       * The number of milliseconds to wait before dismissing after user interaction.
       * If `autoHideDuration` property isn't specified, it does nothing.
       * If `autoHideDuration` property is specified but `resumeHideDuration` isn't,
       * we default to `autoHideDuration / 2` ms.
       */
      resumeHideDuration: propTypes.number,
  
      /**
       * The component used for the transition.
       */
      TransitionComponent: propTypes.elementType,
  
      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      transitionDuration: propTypes.oneOfType([propTypes.number, propTypes.shape({
        enter: propTypes.number,
        exit: propTypes.number
      })]),
  
      /**
       * Properties applied to the `Transition` element.
       */
      TransitionProps: propTypes.object
    };
    Snackbar.defaultProps = {
      anchorOrigin: {
        vertical: 'bottom',
        horizontal: 'center'
      },
      disableWindowBlurListener: false,
      TransitionComponent: Grow$1,
      transitionDuration: {
        enter: duration.enteringScreen,
        exit: duration.leavingScreen
      }
    };
    var Snackbar$1 = withStyles$1(styles$1i, {
      flip: false,
      name: 'MuiSnackbar'
    })(Snackbar);
  
    var styles$1j = {
      /* Styles applied to the root element. */
      root: {},
  
      /* Styles applied to the root element if `orientation="horizontal"`. */
      horizontal: {
        paddingLeft: 8,
        paddingRight: 8,
        '&:first-child': {
          paddingLeft: 0
        },
        '&:last-child': {
          paddingRight: 0
        }
      },
  
      /* Styles applied to the root element if `orientation="vertical"`. */
      vertical: {},
  
      /* Styles applied to the root element if `alternativeLabel={true}`. */
      alternativeLabel: {
        flex: 1,
        position: 'relative'
      },
  
      /* Pseudo-class applied to the root element if `completed={true}`. */
      completed: {}
    };
    var Step = React__default.forwardRef(function Step(props, ref) {
      var _props$active = props.active,
          active = _props$active === void 0 ? false : _props$active,
          alternativeLabel = props.alternativeLabel,
          children = props.children,
          classes = props.classes,
          classNameProp = props.className,
          _props$completed = props.completed,
          completed = _props$completed === void 0 ? false : _props$completed,
          connector = props.connector,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          index = props.index,
          last = props.last,
          orientation = props.orientation,
          other = objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "connector", "disabled", "index", "last", "orientation"]);
  
      var className = clsx(classes.root, classes[orientation], classNameProp, alternativeLabel && classes.alternativeLabel, completed && classes.completed);
      return React__default.createElement("div", _extends_1({
        className: className,
        ref: ref
      }, other), connector && alternativeLabel && index !== 0 && React__default.cloneElement(connector, {
        orientation: orientation,
        alternativeLabel: alternativeLabel,
        index: index,
        active: active,
        completed: completed,
        disabled: disabled
      }), React__default.Children.map(children, function (child) {
        if (!React__default.isValidElement(child)) {
          return null;
        }
  
        warning_1(child.type !== React__default.Fragment, ["Material-UI: the Step component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
        return React__default.cloneElement(child, _extends_1({
          active: active,
          alternativeLabel: alternativeLabel,
          completed: completed,
          disabled: disabled,
          last: last,
          icon: index + 1,
          orientation: orientation
        }, child.props));
      }));
    });
    Step.propTypes = {
      /**
       * Sets the step as active. Is passed to child components.
       */
      active: propTypes.bool,
  
      /**
       * @ignore
       * Set internally by Stepper when it's supplied with the alternativeLabel property.
       */
      alternativeLabel: propTypes.bool,
  
      /**
       * Should be `Step` sub-components such as `StepLabel`, `StepContent`.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * Mark the step as completed. Is passed to child components.
       */
      completed: propTypes.bool,
  
      /**
       * @ignore
       * Passed down from Stepper if alternativeLabel is also set.
       */
      connector: propTypes.element,
  
      /**
       * Mark the step as disabled, will also disable the button if
       * `StepButton` is a child of `Step`. Is passed to child components.
       */
      disabled: propTypes.bool,
  
      /**
       * @ignore
       * Used internally for numbering.
       */
      index: propTypes.number,
  
      /**
       * @ignore
       */
      last: propTypes.bool,
  
      /**
       * @ignore
       */
      orientation: propTypes.oneOf(['horizontal', 'vertical'])
    };
    var Step$1 = withStyles$1(styles$1j, {
      name: 'MuiStep'
    })(Step);
  
    /**
     * @ignore - internal component.
     */
  
    var CheckCircle = createSvgIcon(React__default.createElement("path", {
      d: "M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm-2 17l-5-5 1.4-1.4 3.6 3.6 7.6-7.6L19 8l-9 9z"
    }), 'CheckCircle');
  
    /**
     * @ignore - internal component.
     */
  
    var Warning = createSvgIcon(React__default.createElement("path", {
      d: "M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"
    }), 'Warning');
  
    var styles$1k = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'block',
          color: theme.palette.text.disabled,
          '&$active': {
            color: theme.palette.primary.main
          },
          '&$completed': {
            color: theme.palette.primary.main
          },
          '&$error': {
            color: theme.palette.error.main
          }
        },
  
        /* Styles applied to the SVG text element. */
        text: {
          fill: theme.palette.primary.contrastText,
          fontSize: theme.typography.caption.fontSize,
          fontFamily: theme.typography.fontFamily
        },
  
        /* Pseudo-class applied to the root element if `active={true}`. */
        active: {},
  
        /* Pseudo-class applied to the root element if `completed={true}`. */
        completed: {},
  
        /* Pseudo-class applied to the root element if `error={true}`. */
        error: {}
      };
    };
  
    var _ref$1 = React__default.createElement("circle", {
      cx: "12",
      cy: "12",
      r: "12"
    });
  
    var StepIcon = React__default.forwardRef(function StepIcon(props, ref) {
      var _props$completed = props.completed,
          completed = _props$completed === void 0 ? false : _props$completed,
          icon = props.icon,
          _props$active = props.active,
          active = _props$active === void 0 ? false : _props$active,
          _props$error = props.error,
          error = _props$error === void 0 ? false : _props$error,
          classes = props.classes;
  
      if (typeof icon === 'number' || typeof icon === 'string') {
        if (error) {
          return React__default.createElement(Warning, {
            className: clsx(classes.root, classes.error),
            ref: ref
          });
        }
  
        if (completed) {
          return React__default.createElement(CheckCircle, {
            className: clsx(classes.root, classes.completed),
            ref: ref
          });
        }
  
        return React__default.createElement(SvgIcon$1, {
          className: clsx(classes.root, active && classes.active),
          ref: ref
        }, _ref$1, React__default.createElement("text", {
          className: classes.text,
          x: "12",
          y: "16",
          textAnchor: "middle"
        }, icon));
      }
  
      return icon;
    });
    StepIcon.propTypes = {
      /**
       * Whether this step is active.
       */
      active: propTypes.bool,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * Mark the step as completed. Is passed to child components.
       */
      completed: propTypes.bool,
  
      /**
       * Mark the step as failed.
       */
      error: propTypes.bool,
  
      /**
       * The icon displayed by the step label.
       */
      icon: propTypes.node.isRequired
    };
    var StepIcon$1 = withStyles$1(styles$1k, {
      name: 'MuiStepIcon'
    })(StepIcon);
  
    var styles$1l = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'flex',
          alignItems: 'center',
          '&$alternativeLabel': {
            flexDirection: 'column'
          },
          '&$disabled': {
            cursor: 'default'
          }
        },
  
        /* Styles applied to the root element if `orientation="horizontal". */
        horizontal: {},
  
        /* Styles applied to the root element if `orientation="vertical". */
        vertical: {},
  
        /* Styles applied to the `Typography` component which wraps `children`. */
        label: {
          color: theme.palette.text.secondary,
          '&$active': {
            color: theme.palette.text.primary,
            fontWeight: 500
          },
          '&$completed': {
            color: theme.palette.text.primary,
            fontWeight: 500
          },
          '&$alternativeLabel': {
            textAlign: 'center',
            marginTop: 16
          },
          '&$error': {
            color: theme.palette.error.main
          }
        },
  
        /* Pseudo-class applied to the `Typography` component if `active={true}`. */
        active: {},
  
        /* Pseudo-class applied to the `Typography` component if `completed={true}`. */
        completed: {},
  
        /* Pseudo-class applied to the root element and `Typography` component if `error={true}`. */
        error: {},
  
        /* Pseudo-class applied to the root element and `Typography` component if `disabled={true}`. */
        disabled: {},
  
        /* Styles applied to the `icon` container element. */
        iconContainer: {
          flexShrink: 0,
          // Fix IE 11 issue
          display: 'flex',
          paddingRight: 8,
          '&$alternativeLabel': {
            paddingRight: 0
          }
        },
  
        /* Pseudo-class applied to the root & icon container and `Typography` if `alternativeLabel={true}`. */
        alternativeLabel: {},
  
        /* Styles applied to the container element which wraps `Typography` and `optional`. */
        labelContainer: {
          width: '100%'
        }
      };
    };
    var StepLabel = React__default.forwardRef(function StepLabel(props, ref) {
      var _props$active = props.active,
          active = _props$active === void 0 ? false : _props$active,
          _props$alternativeLab = props.alternativeLabel,
          alternativeLabel = _props$alternativeLab === void 0 ? false : _props$alternativeLab,
          children = props.children,
          classes = props.classes,
          classNameProp = props.className,
          _props$completed = props.completed,
          completed = _props$completed === void 0 ? false : _props$completed,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$error = props.error,
          error = _props$error === void 0 ? false : _props$error,
          icon = props.icon,
          last = props.last,
          optional = props.optional,
          _props$orientation = props.orientation,
          orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,
          StepIconComponentProp = props.StepIconComponent,
          StepIconProps = props.StepIconProps,
          other = objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "disabled", "error", "icon", "last", "optional", "orientation", "StepIconComponent", "StepIconProps"]);
  
      var StepIconComponent = StepIconComponentProp;
  
      if (icon && !StepIconComponent) {
        StepIconComponent = StepIcon$1;
      }
  
      return React__default.createElement("span", _extends_1({
        className: clsx(classes.root, classes[orientation], classNameProp, disabled && classes.disabled, alternativeLabel && classes.alternativeLabel, error && classes.error),
        ref: ref
      }, other), icon || StepIconComponent ? React__default.createElement("span", {
        className: clsx(classes.iconContainer, alternativeLabel && classes.alternativeLabel)
      }, React__default.createElement(StepIconComponent, _extends_1({
        completed: completed,
        active: active,
        error: error,
        icon: icon
      }, StepIconProps))) : null, React__default.createElement("span", {
        className: classes.labelContainer
      }, React__default.createElement(Typography$1, {
        variant: "body2",
        component: "span",
        className: clsx(classes.label, alternativeLabel && classes.alternativeLabel, completed && classes.completed, active && classes.active, error && classes.error),
        display: "block"
      }, children), optional));
    });
    StepLabel.propTypes = {
      /**
       * @ignore
       * Sets the step as active. Is passed to child components.
       */
      active: propTypes.bool,
  
      /**
       * @ignore
       * Set internally by Stepper when it's supplied with the alternativeLabel prop.
       */
      alternativeLabel: propTypes.bool,
  
      /**
       * In most cases will simply be a string containing a title for the label.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * @ignore
       * Mark the step as completed. Is passed to child components.
       */
      completed: propTypes.bool,
  
      /**
       * Mark the step as disabled, will also disable the button if
       * `StepLabelButton` is a child of `StepLabel`. Is passed to child components.
       */
      disabled: propTypes.bool,
  
      /**
       * Mark the step as failed.
       */
      error: propTypes.bool,
  
      /**
       * Override the default icon.
       */
      icon: propTypes.node,
  
      /**
       * @ignore
       */
      last: propTypes.bool,
  
      /**
       * The optional node to display.
       */
      optional: propTypes.node,
  
      /**
       * @ignore
       */
      orientation: propTypes.oneOf(['horizontal', 'vertical']),
  
      /**
       * The component to render in place of the [`StepIcon`](/api/step-icon/).
       */
      StepIconComponent: propTypes.elementType,
  
      /**
       * Properties applied to the [`StepIcon`](/api/step-icon/) element.
       */
      StepIconProps: propTypes.object
    };
    StepLabel.muiName = 'StepLabel';
    var StepLabel$1 = withStyles$1(styles$1l, {
      name: 'MuiStepLabel'
    })(StepLabel);
  
    var styles$1m = {
      /* Styles applied to the root element. */
      root: {
        width: '100%',
        padding: '24px 16px',
        margin: '-24px -16px',
        boxSizing: 'content-box'
      },
  
      /* Styles applied to the root element if `orientation="horizontal"`. */
      horizontal: {},
  
      /* Styles applied to the root element if `orientation="vertical"`. */
      vertical: {
        justifyContent: 'flex-start'
      },
  
      /* Styles applied to the `ButtonBase` touch-ripple. */
      touchRipple: {
        color: 'rgba(0, 0, 0, 0.3)'
      }
    };
    var StepButton = React__default.forwardRef(function StepButton(props, ref) {
      var active = props.active,
          alternativeLabel = props.alternativeLabel,
          children = props.children,
          classes = props.classes,
          classNameProp = props.className,
          completed = props.completed,
          disabled = props.disabled,
          icon = props.icon,
          last = props.last,
          optional = props.optional,
          orientation = props.orientation,
          other = objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "disabled", "icon", "last", "optional", "orientation"]);
  
      var childProps = {
        active: active,
        alternativeLabel: alternativeLabel,
        completed: completed,
        disabled: disabled,
        icon: icon,
        optional: optional,
        orientation: orientation
      };
      var child = isMuiElement(children, ['StepLabel']) ? React__default.cloneElement(children, childProps) : React__default.createElement(StepLabel$1, childProps, children);
      return React__default.createElement(ButtonBase$1, _extends_1({
        disabled: disabled,
        TouchRippleProps: {
          className: classes.touchRipple
        },
        className: clsx(classes.root, classes[orientation], classNameProp),
        ref: ref
      }, other), child);
    });
    StepButton.propTypes = {
      /**
       * @ignore
       * Passed in via `Step` - passed through to `StepLabel`.
       */
      active: propTypes.bool,
  
      /**
       * @ignore
       * Set internally by Stepper when it's supplied with the alternativeLabel property.
       */
      alternativeLabel: propTypes.bool,
  
      /**
       * Can be a `StepLabel` or a node to place inside `StepLabel` as children.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * @ignore
       * Sets completed styling. Is passed to StepLabel.
       */
      completed: propTypes.bool,
  
      /**
       * @ignore
       * Disables the button and sets disabled styling. Is passed to StepLabel.
       */
      disabled: propTypes.bool,
  
      /**
       * The icon displayed by the step label.
       */
      icon: propTypes.node,
  
      /**
       * @ignore
       */
      last: propTypes.bool,
  
      /**
       * The optional node to display.
       */
      optional: propTypes.node,
  
      /**
       * @ignore
       */
      orientation: propTypes.oneOf(['horizontal', 'vertical'])
    };
    var StepButton$1 = withStyles$1(styles$1m, {
      name: 'MuiStepButton'
    })(StepButton);
  
    var styles$1n = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          flex: '1 1 auto'
        },
  
        /* Styles applied to the root element if `orientation="horizontal"`. */
        horizontal: {},
  
        /* Styles applied to the root element if `orientation="vertical"`. */
        vertical: {
          marginLeft: 12,
          // half icon
          padding: '0 0 8px'
        },
  
        /* Styles applied to the root element if `alternativeLabel={true}`. */
        alternativeLabel: {
          position: 'absolute',
          top: 8 + 4,
          left: 'calc(-50% + 20px)',
          right: 'calc(50% + 20px)'
        },
  
        /* Pseudo-class applied to the root element if `active={true}`. */
        active: {},
  
        /* Pseudo-class applied to the root element if `completed={true}`. */
        completed: {},
  
        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},
  
        /* Styles applied to the line element. */
        line: {
          display: 'block',
          borderColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]
        },
  
        /* Styles applied to the root element if `orientation="horizontal"`. */
        lineHorizontal: {
          borderTopStyle: 'solid',
          borderTopWidth: 1
        },
  
        /* Styles applied to the root element if `orientation="vertical"`. */
        lineVertical: {
          borderLeftStyle: 'solid',
          borderLeftWidth: 1,
          minHeight: 24
        }
      };
    };
    var StepConnector = React__default.forwardRef(function StepConnector(props, ref) {
      var active = props.active,
          _props$alternativeLab = props.alternativeLabel,
          alternativeLabel = _props$alternativeLab === void 0 ? false : _props$alternativeLab,
          classes = props.classes,
          classNameProp = props.className,
          completed = props.completed,
          disabled = props.disabled,
          index = props.index,
          _props$orientation = props.orientation,
          orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,
          other = objectWithoutProperties(props, ["active", "alternativeLabel", "classes", "className", "completed", "disabled", "index", "orientation"]);
  
      return React__default.createElement("div", _extends_1({
        className: clsx(classes.root, classes[orientation], classNameProp, alternativeLabel && classes.alternativeLabel, active && classes.active, completed && classes.completed, disabled && classes.disabled),
        ref: ref
      }, other), React__default.createElement("span", {
        className: clsx(classes.line, orientation === 'vertical' ? classes.lineVertical : classes.lineHorizontal)
      }));
    });
    StepConnector.propTypes = {
      /**
       * @ignore
       */
      active: propTypes.bool,
  
      /**
       * @ignore
       * Set internally by Step when it's supplied with the alternativeLabel property.
       */
      alternativeLabel: propTypes.bool,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * @ignore
       */
      completed: propTypes.bool,
  
      /**
       * @ignore
       */
      disabled: propTypes.bool,
  
      /**
       * @ignore
       */
      index: propTypes.number,
  
      /**
       * @ignore
       */
      orientation: propTypes.oneOf(['horizontal', 'vertical'])
    };
    var StepConnector$1 = withStyles$1(styles$1n, {
      name: 'MuiStepConnector'
    })(StepConnector);
  
    var styles$1o = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          marginTop: 8,
          marginLeft: 12,
          // half icon
          paddingLeft: 8 + 12,
          // margin + half icon
          paddingRight: 8,
          borderLeft: "1px solid ".concat(theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600])
        },
  
        /* Styles applied to the root element if `last={true}` (controlled by `Step`). */
        last: {
          borderLeft: 'none'
        },
  
        /* Styles applied to the Transition component. */
        transition: {}
      };
    };
    var StepContent = React__default.forwardRef(function StepContent(props, ref) {
      var active = props.active,
          alternativeLabel = props.alternativeLabel,
          children = props.children,
          classes = props.classes,
          className = props.className,
          completed = props.completed,
          last = props.last,
          optional = props.optional,
          orientation = props.orientation,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Collapse$1 : _props$TransitionComp,
          _props$transitionDura = props.transitionDuration,
          transitionDurationProp = _props$transitionDura === void 0 ? 'auto' : _props$transitionDura,
          TransitionProps = props.TransitionProps,
          other = objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "last", "optional", "orientation", "TransitionComponent", "transitionDuration", "TransitionProps"]);
  
      warning_1(orientation === 'vertical', 'Material-UI: <StepContent /> is only designed for use with the vertical stepper.');
      var transitionDuration = transitionDurationProp;
  
      if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {
        transitionDuration = undefined;
      }
  
      return React__default.createElement("div", _extends_1({
        className: clsx(classes.root, className, last && classes.last),
        ref: ref
      }, other), React__default.createElement(TransitionComponent, _extends_1({
        in: active,
        className: classes.transition,
        timeout: transitionDuration,
        unmountOnExit: true
      }, TransitionProps), children));
    });
    StepContent.propTypes = {
      /**
       * @ignore
       * Expands the content.
       */
      active: propTypes.bool,
  
      /**
       * @ignore
       * Set internally by Step when it's supplied with the alternativeLabel property.
       */
      alternativeLabel: propTypes.bool,
  
      /**
       * Step content.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * @ignore
       */
      completed: propTypes.bool,
  
      /**
       * @ignore
       */
      last: propTypes.bool,
  
      /**
       * @ignore
       * Set internally by Step when it's supplied with the optional property.
       */
      optional: propTypes.bool,
  
      /**
       * @ignore
       */
      orientation: propTypes.oneOf(['horizontal', 'vertical']),
  
      /**
       * The component used for the transition.
       */
      TransitionComponent: propTypes.elementType,
  
      /**
       * Adjust the duration of the content expand transition.
       * Passed as a property to the transition component.
       *
       * Set to 'auto' to automatically calculate transition time based on height.
       */
      transitionDuration: propTypes.oneOfType([propTypes.number, propTypes.shape({
        enter: propTypes.number,
        exit: propTypes.number
      }), propTypes.oneOf(['auto'])]),
  
      /**
       * Properties applied to the `Transition` element.
       */
      TransitionProps: propTypes.object
    };
    var StepContent$1 = withStyles$1(styles$1o, {
      name: 'MuiStepContent'
    })(StepContent);
  
    var styles$1p = {
      /* Styles applied to the root element. */
      root: {
        display: 'flex',
        padding: 24
      },
  
      /* Styles applied to the root element if `orientation="horizontal"`. */
      horizontal: {
        flexDirection: 'row',
        alignItems: 'center'
      },
  
      /* Styles applied to the root element if `orientation="vertical"`. */
      vertical: {
        flexDirection: 'column'
      },
  
      /* Styles applied to the root element if `alternativeLabel={true}`. */
      alternativeLabel: {
        alignItems: 'flex-start'
      }
    };
    var defaultConnector = React__default.createElement(StepConnector$1, null);
    var Stepper = React__default.forwardRef(function Stepper(props, ref) {
      var _props$activeStep = props.activeStep,
          activeStep = _props$activeStep === void 0 ? 0 : _props$activeStep,
          _props$alternativeLab = props.alternativeLabel,
          alternativeLabel = _props$alternativeLab === void 0 ? false : _props$alternativeLab,
          children = props.children,
          classes = props.classes,
          classNameProp = props.className,
          _props$connector = props.connector,
          connectorProp = _props$connector === void 0 ? defaultConnector : _props$connector,
          _props$nonLinear = props.nonLinear,
          nonLinear = _props$nonLinear === void 0 ? false : _props$nonLinear,
          _props$orientation = props.orientation,
          orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,
          other = objectWithoutProperties(props, ["activeStep", "alternativeLabel", "children", "classes", "className", "connector", "nonLinear", "orientation"]);
  
      var className = clsx(classes.root, classes[orientation], classNameProp, alternativeLabel && classes.alternativeLabel);
      var connector = React__default.isValidElement(connectorProp) ? React__default.cloneElement(connectorProp, {
        orientation: orientation
      }) : null;
      var childrenArray = React__default.Children.toArray(children);
      var steps = childrenArray.map(function (step, index) {
        var controlProps = {
          alternativeLabel: alternativeLabel,
          connector: connectorProp,
          last: index + 1 === childrenArray.length,
          orientation: orientation
        };
        var state = {
          index: index,
          active: false,
          completed: false,
          disabled: false
        };
  
        if (activeStep === index) {
          state.active = true;
        } else if (!nonLinear && activeStep > index) {
          state.completed = true;
        } else if (!nonLinear && activeStep < index) {
          state.disabled = true;
        }
  
        return [!alternativeLabel && connector && index !== 0 && React__default.cloneElement(connector, _extends_1({
          key: index
        }, state)), React__default.cloneElement(step, _extends_1({}, controlProps, state, step.props))];
      });
      return React__default.createElement(Paper$1, _extends_1({
        square: true,
        elevation: 0,
        className: className,
        ref: ref
      }, other), steps);
    });
    Stepper.propTypes = {
      /**
       * Set the active step (zero based index).
       */
      activeStep: propTypes.number,
  
      /**
       * If set to 'true' and orientation is horizontal,
       * then the step label will be positioned under the icon.
       */
      alternativeLabel: propTypes.bool,
  
      /**
       * Two or more `<Step />` components.
       */
      children: propTypes.node.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * A component to be placed between each step.
       */
      connector: propTypes.element,
  
      /**
       * If set the `Stepper` will not assist in controlling steps for linear flow.
       */
      nonLinear: propTypes.bool,
  
      /**
       * The stepper orientation (layout flow direction).
       */
      orientation: propTypes.oneOf(['horizontal', 'vertical'])
    };
    var Stepper$1 = withStyles$1(styles$1p, {
      name: 'MuiStepper'
    })(Stepper);
  
    var styles$1q = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'fixed',
          top: 0,
          left: 0,
          bottom: 0,
          zIndex: theme.zIndex.drawer - 1
        },
        anchorLeft: {
          right: 'auto'
        },
        anchorRight: {
          left: 'auto',
          right: 0
        },
        anchorTop: {
          bottom: 'auto',
          right: 0
        },
        anchorBottom: {
          top: 'auto',
          bottom: 0,
          right: 0
        }
      };
    };
    /**
     * @ignore - internal component.
     */
  
    var SwipeArea = React__default.forwardRef(function SwipeArea(props, ref) {
      var anchor = props.anchor,
          classes = props.classes,
          className = props.className,
          width = props.width,
          other = objectWithoutProperties(props, ["anchor", "classes", "className", "width"]);
  
      return React__default.createElement("div", _extends_1({
        className: clsx(classes.root, classes["anchor".concat(capitalize(anchor))], className),
        ref: ref,
        style: defineProperty({}, isHorizontal(anchor) ? 'width' : 'height', width)
      }, other));
    });
    SwipeArea.propTypes = {
      /**
       * Side on which to attach the discovery area.
       */
      anchor: propTypes.oneOf(['left', 'top', 'right', 'bottom']).isRequired,
  
      /**
       * @ignore
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The width of the left most (or right most) area in pixels where the
       * drawer can be swiped open from.
       */
      width: propTypes.number.isRequired
    };
    var SwipeArea$1 = withStyles$1(styles$1q, {
      name: 'PrivateSwipeArea'
    })(SwipeArea);
  
    // trigger a native scroll.
  
    var UNCERTAINTY_THRESHOLD = 3; // px
    // We can only have one node at the time claiming ownership for handling the swipe.
    // Otherwise, the UX would be confusing.
    // That's why we use a singleton here.
  
    var nodeThatClaimedTheSwipe = null; // Exported for test purposes.
  
    function calculateCurrentX(anchor, touches) {
      return anchor === 'right' ? document.body.offsetWidth - touches[0].pageX : touches[0].pageX;
    }
  
    function calculateCurrentY(anchor, touches) {
      return anchor === 'bottom' ? window.innerHeight - touches[0].clientY : touches[0].clientY;
    }
  
    function getMaxTranslate(horizontalSwipe, paperInstance) {
      return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;
    }
  
    function getTranslate(currentTranslate, startLocation, open, maxTranslate) {
      return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);
    }
  
    var useEnhancedEffect$8 = typeof window !== 'undefined' ? React__default.useLayoutEffect : React__default.useEffect;
    var SwipeableDrawer = React__default.forwardRef(function SwipeableDrawer(props, ref) {
      var anchor = props.anchor,
          disableBackdropTransition = props.disableBackdropTransition,
          disableDiscovery = props.disableDiscovery,
          disableSwipeToOpen = props.disableSwipeToOpen,
          hideBackdrop = props.hideBackdrop,
          hysteresis = props.hysteresis,
          minFlingVelocity = props.minFlingVelocity,
          _props$ModalProps = props.ModalProps;
      _props$ModalProps = _props$ModalProps === void 0 ? {} : _props$ModalProps;
  
      var BackdropProps = _props$ModalProps.BackdropProps,
          ModalPropsProp = objectWithoutProperties(_props$ModalProps, ["BackdropProps"]),
          onClose = props.onClose,
          onOpen = props.onOpen,
          open = props.open,
          _props$PaperProps = props.PaperProps,
          PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,
          SwipeAreaProps = props.SwipeAreaProps,
          swipeAreaWidth = props.swipeAreaWidth,
          theme = props.theme,
          transitionDuration = props.transitionDuration,
          variant = props.variant,
          other = objectWithoutProperties(props, ["anchor", "disableBackdropTransition", "disableDiscovery", "disableSwipeToOpen", "hideBackdrop", "hysteresis", "minFlingVelocity", "ModalProps", "onClose", "onOpen", "open", "PaperProps", "SwipeAreaProps", "swipeAreaWidth", "theme", "transitionDuration", "variant"]);
  
      var _React$useState = React__default.useState(false),
          _React$useState2 = slicedToArray(_React$useState, 2),
          maybeSwiping = _React$useState2[0],
          setMaybeSwiping = _React$useState2[1];
  
      var swipeInstance = React__default.useRef({
        isSwiping: null
      });
      var swipeAreaRef = React__default.useRef();
      var backdropRef = React__default.useRef();
      var paperRef = React__default.useRef();
      var touchDetected = React__default.useRef(false);
      var openRef = React__default.useRef(open); // Use a ref so the open value used is always up to date inside useCallback.
  
      useEnhancedEffect$8(function () {
        openRef.current = open;
      }, [open]);
      var setPosition = React__default.useCallback(function (translate) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var _options$mode = options.mode,
            mode = _options$mode === void 0 ? null : _options$mode,
            _options$changeTransi = options.changeTransition,
            changeTransition = _options$changeTransi === void 0 ? true : _options$changeTransi;
        var anchorRtl = getAnchor(theme, anchor);
        var rtlTranslateMultiplier = ['right', 'bottom'].indexOf(anchorRtl) !== -1 ? 1 : -1;
        var horizontalSwipe = isHorizontal(anchor);
        var transform = horizontalSwipe ? "translate(".concat(rtlTranslateMultiplier * translate, "px, 0)") : "translate(0, ".concat(rtlTranslateMultiplier * translate, "px)");
        var drawerStyle = paperRef.current.style;
        drawerStyle.webkitTransform = transform;
        drawerStyle.transform = transform;
        var transition = '';
  
        if (mode) {
          transition = theme.transitions.create('all', getTransitionProps({
            timeout: transitionDuration
          }, {
            mode: mode
          }));
        }
  
        if (changeTransition) {
          drawerStyle.webkitTransition = transition;
          drawerStyle.transition = transition;
        }
  
        if (!disableBackdropTransition && !hideBackdrop) {
          var backdropStyle = backdropRef.current.style;
          backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);
  
          if (changeTransition) {
            backdropStyle.webkitTransition = transition;
            backdropStyle.transition = transition;
          }
        }
      }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);
      var handleBodyTouchEnd = React__default.useCallback(function (event) {
        if (!touchDetected.current) {
          return;
        }
  
        nodeThatClaimedTheSwipe = null;
        touchDetected.current = false;
        setMaybeSwiping(false); // The swipe wasn't started.
  
        if (!swipeInstance.current.isSwiping) {
          swipeInstance.current.isSwiping = null;
          return;
        }
  
        swipeInstance.current.isSwiping = null;
        var anchorRtl = getAnchor(theme, anchor);
        var horizontal = isHorizontal(anchor);
        var current;
  
        if (horizontal) {
          current = calculateCurrentX(anchorRtl, event.changedTouches);
        } else {
          current = calculateCurrentY(anchorRtl, event.changedTouches);
        }
  
        var startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;
        var maxTranslate = getMaxTranslate(horizontal, paperRef.current);
        var currentTranslate = getTranslate(current, startLocation, openRef.current, maxTranslate);
        var translateRatio = currentTranslate / maxTranslate;
  
        if (openRef.current) {
          if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {
            onClose();
          } else {
            // Reset the position, the swipe was aborted.
            setPosition(0, {
              mode: 'exit'
            });
          }
  
          return;
        }
  
        if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {
          onOpen();
        } else {
          // Reset the position, the swipe was aborted.
          setPosition(getMaxTranslate(horizontal, paperRef.current), {
            mode: 'enter'
          });
        }
      }, [anchor, hysteresis, minFlingVelocity, onClose, onOpen, setPosition, theme]);
      var handleBodyTouchMove = React__default.useCallback(function (event) {
        // the ref may be null when a parent component updates while swiping
        if (!paperRef.current || !touchDetected.current) {
          return;
        }
  
        var anchorRtl = getAnchor(theme, anchor);
        var horizontalSwipe = isHorizontal(anchor);
        var currentX = calculateCurrentX(anchorRtl, event.touches);
        var currentY = calculateCurrentY(anchorRtl, event.touches); // We don't know yet.
  
        if (swipeInstance.current.isSwiping == null) {
          var dx = Math.abs(currentX - swipeInstance.current.startX);
          var dy = Math.abs(currentY - swipeInstance.current.startY); // We are likely to be swiping, let's prevent the scroll event on iOS.
  
          if (dx > dy) {
            if (event.cancelable) {
              event.preventDefault();
            }
          }
  
          var definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;
  
          if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {
            swipeInstance.current.isSwiping = definitelySwiping;
  
            if (!definitelySwiping) {
              handleBodyTouchEnd(event);
              return;
            } // Shift the starting point.
  
  
            swipeInstance.current.startX = currentX;
            swipeInstance.current.startY = currentY; // Compensate for the part of the drawer displayed on touch start.
  
            if (!disableDiscovery && !openRef.current) {
              if (horizontalSwipe) {
                swipeInstance.current.startX -= swipeAreaWidth;
              } else {
                swipeInstance.current.startY -= swipeAreaWidth;
              }
            }
          }
        }
  
        if (!swipeInstance.current.isSwiping) {
          return;
        }
  
        var startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;
        var maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);
        var translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, openRef.current, maxTranslate);
  
        if (swipeInstance.current.lastTranslate === null) {
          swipeInstance.current.lastTranslate = translate;
          swipeInstance.current.lastTime = performance.now() + 1;
        }
  
        var velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3; // Low Pass filter.
  
        swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;
        swipeInstance.current.lastTranslate = translate;
        swipeInstance.current.lastTime = performance.now(); // We are swiping, let's prevent the scroll event on iOS.
  
        if (event.cancelable) {
          event.preventDefault();
        }
  
        setPosition(translate);
      }, [setPosition, handleBodyTouchEnd, anchor, disableDiscovery, swipeAreaWidth, theme]);
      var handleBodyTouchStart = React__default.useCallback(function (event) {
        // We are not supposed to handle this touch move.
        if (nodeThatClaimedTheSwipe !== null && nodeThatClaimedTheSwipe !== swipeInstance.current) {
          return;
        }
  
        var anchorRtl = getAnchor(theme, anchor);
        var horizontalSwipe = isHorizontal(anchor);
        var currentX = calculateCurrentX(anchorRtl, event.touches);
        var currentY = calculateCurrentY(anchorRtl, event.touches);
  
        if (!openRef.current) {
          if (disableSwipeToOpen || event.target !== swipeAreaRef.current) {
            return;
          }
  
          if (horizontalSwipe) {
            if (currentX > swipeAreaWidth) {
              return;
            }
          } else if (currentY > swipeAreaWidth) {
            return;
          }
        }
  
        nodeThatClaimedTheSwipe = swipeInstance.current;
        swipeInstance.current.startX = currentX;
        swipeInstance.current.startY = currentY;
        setMaybeSwiping(true);
  
        if (!openRef.current && paperRef.current) {
          // The ref may be null when a parent component updates while swiping.
          setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 20 : -swipeAreaWidth), {
            changeTransition: false
          });
        }
  
        swipeInstance.current.velocity = 0;
        swipeInstance.current.lastTime = null;
        swipeInstance.current.lastTranslate = null;
        touchDetected.current = true;
      }, [setPosition, anchor, disableDiscovery, disableSwipeToOpen, swipeAreaWidth, theme]);
      React__default.useEffect(function () {
        if (variant === 'temporary') {
          document.body.addEventListener('touchstart', handleBodyTouchStart);
          document.body.addEventListener('touchmove', handleBodyTouchMove, {
            passive: false
          });
          document.body.addEventListener('touchend', handleBodyTouchEnd);
          return function () {
            document.body.removeEventListener('touchstart', handleBodyTouchStart);
            document.body.removeEventListener('touchmove', handleBodyTouchMove, {
              passive: false
            });
            document.body.removeEventListener('touchend', handleBodyTouchEnd);
          };
        }
  
        return undefined;
      }, [variant, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);
      React__default.useEffect(function () {
        return function () {
          // We need to release the lock.
          if (nodeThatClaimedTheSwipe === swipeInstance.current) {
            nodeThatClaimedTheSwipe = null;
          }
        };
      }, []);
      React__default.useEffect(function () {
        if (!open) {
          setMaybeSwiping(false);
        }
      }, [open]);
      var handleBackdropRef = React__default.useCallback(function (instance) {
        // #StrictMode ready
        backdropRef.current = ReactDOM__default.findDOMNode(instance);
      }, []);
      var handlePaperRef = React__default.useCallback(function (instance) {
        // #StrictMode ready
        paperRef.current = ReactDOM__default.findDOMNode(instance);
      }, []);
      return React__default.createElement(React__default.Fragment, null, React__default.createElement(Drawer$1, _extends_1({
        open: variant === 'temporary' && maybeSwiping ? true : open,
        variant: variant,
        ModalProps: _extends_1({
          BackdropProps: _extends_1({}, BackdropProps, {
            ref: handleBackdropRef
          })
        }, ModalPropsProp),
        PaperProps: _extends_1({}, PaperProps, {
          style: _extends_1({
            pointerEvents: variant === 'temporary' && !open ? 'none' : ''
          }, PaperProps.style),
          ref: handlePaperRef
        }),
        anchor: anchor,
        transitionDuration: transitionDuration,
        onClose: onClose,
        ref: ref
      }, other)), !disableSwipeToOpen && variant === 'temporary' && React__default.createElement(NoSsr, null, React__default.createElement(SwipeArea$1, _extends_1({
        anchor: anchor,
        ref: swipeAreaRef,
        width: swipeAreaWidth
      }, SwipeAreaProps))));
    });
    SwipeableDrawer.propTypes = {
      /**
       * @ignore
       */
      anchor: propTypes.oneOf(['left', 'top', 'right', 'bottom']),
  
      /**
       * Disable the backdrop transition.
       * This can improve the FPS on low-end devices.
       */
      disableBackdropTransition: propTypes.bool,
  
      /**
       * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit
       * to promote accidental discovery of the swipe gesture.
       */
      disableDiscovery: propTypes.bool,
  
      /**
       * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers
       * navigation actions. Swipe to open is disabled on iOS browsers by default.
       */
      disableSwipeToOpen: propTypes.bool,
  
      /**
       * @ignore
       */
      hideBackdrop: propTypes.bool,
  
      /**
       * Affects how far the drawer must be opened/closed to change his state.
       * Specified as percent (0-1) of the width of the drawer
       */
      hysteresis: propTypes.number,
  
      /**
       * Defines, from which (average) velocity on, the swipe is
       * defined as complete although hysteresis isn't reached.
       * Good threshold is between 250 - 1000 px/s
       */
      minFlingVelocity: propTypes.number,
  
      /**
       * @ignore
       */
      ModalProps: propTypes.shape({
        BackdropProps: propTypes.shape({
          component: elementTypeAcceptingRef$1
        })
      }),
  
      /**
       * Callback fired when the component requests to be closed.
       *
       * @param {object} event The event source of the callback
       */
      onClose: propTypes.func.isRequired,
  
      /**
       * Callback fired when the component requests to be opened.
       *
       * @param {object} event The event source of the callback
       */
      onOpen: propTypes.func.isRequired,
  
      /**
       * If `true`, the drawer is open.
       */
      open: propTypes.bool.isRequired,
  
      /**
       * @ignore
       */
      PaperProps: propTypes.shape({
        component: elementTypeAcceptingRef$1
      }),
  
      /**
       * Properties applied to the swipe area element.
       */
      SwipeAreaProps: propTypes.object,
  
      /**
       * The width of the left most (or right most) area in pixels where the
       * drawer can be swiped open from.
       */
      swipeAreaWidth: propTypes.number,
  
      /**
       * @ignore
       */
      theme: propTypes.object.isRequired,
  
      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      transitionDuration: propTypes.oneOfType([propTypes.number, propTypes.shape({
        enter: propTypes.number,
        exit: propTypes.number
      })]),
  
      /**
       * @ignore
       */
      variant: propTypes.oneOf(['permanent', 'persistent', 'temporary'])
    };
    SwipeableDrawer.defaultProps = {
      anchor: 'left',
      disableBackdropTransition: false,
      disableDiscovery: false,
      disableSwipeToOpen: typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent),
      hysteresis: 0.55,
      minFlingVelocity: 400,
      swipeAreaWidth: 20,
      transitionDuration: {
        enter: duration.enteringScreen,
        exit: duration.leavingScreen
      },
      variant: 'temporary' // Mobile first.
  
    };
    var SwipeableDrawer$1 = withTheme$1(SwipeableDrawer);
  
    var styles$1r = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'inline-flex',
          width: 34 + 12 * 2,
          height: 14 + 12 * 2,
          overflow: 'hidden',
          padding: 12,
          boxSizing: 'border-box',
          position: 'relative',
          flexShrink: 0,
          zIndex: 0,
          // Reset the stacking context.
          verticalAlign: 'middle' // For correct alignment with the text.
  
        },
  
        /* Styles applied to the root element if `edge="start"`. */
        edgeStart: {
          marginLeft: -8
        },
  
        /* Styles applied to the root element if `edge="end"`. */
        edgeEnd: {
          marginRight: -8
        },
  
        /* Styles applied to the internal `SwitchBase` component's `root` class. */
        switchBase: {
          position: 'absolute',
          top: 0,
          left: 0,
          zIndex: 1,
          // Render above the focus ripple.
          color: theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[400],
          transition: theme.transitions.create('transform', {
            duration: theme.transitions.duration.shortest
          }),
          '&$checked': {
            transform: 'translateX(50%)'
          },
          '&$disabled': {
            color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]
          },
          '&$checked + $track': {
            opacity: 0.5
          },
          '&$disabled + $track': {
            opacity: theme.palette.type === 'light' ? 0.12 : 0.1
          }
        },
  
        /* Styles applied to the internal SwitchBase component's root element if `color="primary"`. */
        colorPrimary: {
          '&$checked': {
            color: theme.palette.primary.main,
            '&:hover': {
              backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity)
            }
          },
          '&$disabled': {
            color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]
          },
          '&$checked + $track': {
            backgroundColor: theme.palette.primary.main
          },
          '&$disabled + $track': {
            backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white
          }
        },
  
        /* Styles applied to the internal SwitchBase component's root element if `color="secondary"`. */
        colorSecondary: {
          '&$checked': {
            color: theme.palette.secondary.main,
            '&:hover': {
              backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity)
            }
          },
          '&$disabled': {
            color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]
          },
          '&$checked + $track': {
            backgroundColor: theme.palette.secondary.main
          },
          '&$disabled + $track': {
            backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white
          }
        },
  
        /* Pseudo-class applied to the internal `SwitchBase` component's `checked` class. */
        checked: {},
  
        /* Pseudo-class applied to the internal SwitchBase component's disabled class. */
        disabled: {},
  
        /* Styles applied to the internal SwitchBase component's input element. */
        input: {
          left: '-100%',
          width: '300%'
        },
  
        /* Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop. */
        thumb: {
          boxShadow: theme.shadows[1],
          backgroundColor: 'currentColor',
          width: 20,
          height: 20,
          borderRadius: '50%'
        },
  
        /* Styles applied to the track element. */
        track: {
          height: '100%',
          width: '100%',
          borderRadius: 14 / 2,
          zIndex: -1,
          transition: theme.transitions.create(['opacity', 'background-color'], {
            duration: theme.transitions.duration.shortest
          }),
          backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,
          opacity: theme.palette.type === 'light' ? 0.38 : 0.3
        }
      };
    };
    var Switch = React__default.forwardRef(function Switch(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'secondary' : _props$color,
          _props$edge = props.edge,
          edge = _props$edge === void 0 ? false : _props$edge,
          other = objectWithoutProperties(props, ["classes", "className", "color", "edge"]);
  
      var icon = React__default.createElement("span", {
        className: classes.thumb
      });
      return React__default.createElement("span", {
        className: clsx(classes.root, className, edge === 'start' && classes.edgeStart, edge === 'end' && classes.edgeEnd)
      }, React__default.createElement(SwitchBase$1, _extends_1({
        type: "checkbox",
        icon: icon,
        checkedIcon: icon,
        classes: {
          root: clsx(classes.switchBase, classes["color".concat(capitalize(color))]),
          input: classes.input,
          checked: classes.checked,
          disabled: classes.disabled
        },
        ref: ref
      }, other)), React__default.createElement("span", {
        className: classes.track
      }));
    });
    Switch.propTypes = {
      /**
       * If `true`, the component is checked.
       */
      checked: propTypes.bool,
  
      /**
       * The icon to display when the component is checked.
       */
      checkedIcon: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['primary', 'secondary', 'default']),
  
      /**
       * @ignore
       */
      defaultChecked: propTypes.bool,
  
      /**
       * If `true`, the switch will be disabled.
       */
      disabled: propTypes.bool,
  
      /**
       * If `true`, the ripple effect will be disabled.
       */
      disableRipple: propTypes.bool,
  
      /**
       * If given, uses a negative margin to counteract the padding on one
       * side (this is often helpful for aligning the left or right
       * side of the icon with content above or below, without ruining the border
       * size and shape).
       */
      edge: propTypes.oneOf(['start', 'end', false]),
  
      /**
       * The icon to display when the component is unchecked.
       */
      icon: propTypes.node,
  
      /**
       * The id of the `input` element.
       */
      id: propTypes.string,
  
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: propTypes.object,
  
      /**
       * This property can be used to pass a ref callback to the `input` element.
       */
      inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  
      /**
       * Callback fired when the state is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.checked`.
       * @param {boolean} checked The `checked` value of the switch
       */
      onChange: propTypes.func,
  
      /**
       * The input component property `type`.
       */
      type: propTypes.string,
  
      /**
       * The value of the component.
       */
      value: propTypes.any
    };
    var Switch$1 = withStyles$1(styles$1r, {
      name: 'MuiSwitch'
    })(Switch);
  
    var styles$1s = function styles(theme) {
      var _extends2;
  
      return {
        /* Styles applied to the root element. */
        root: _extends_1({}, theme.typography.button, (_extends2 = {
          maxWidth: 264,
          minWidth: 72,
          position: 'relative',
          boxSizing: 'border-box',
          minHeight: 48,
          flexShrink: 0,
          padding: '6px 12px'
        }, defineProperty(_extends2, theme.breakpoints.up('md'), {
          padding: '6px 24px'
        }), defineProperty(_extends2, "overflow", 'hidden'), defineProperty(_extends2, "whiteSpace", 'normal'), defineProperty(_extends2, "textAlign", 'center'), defineProperty(_extends2, theme.breakpoints.up('md'), {
          fontSize: theme.typography.pxToRem(13),
          minWidth: 160
        }), _extends2)),
  
        /* Styles applied to the root element if both `icon` and `label` are provided. */
        labelIcon: {
          minHeight: 72,
          paddingTop: 9,
          '& $wrapper > *:first-child': {
            marginBottom: 6
          }
        },
  
        /* Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor="inherit"`. */
        textColorInherit: {
          color: 'inherit',
          opacity: 0.7,
          '&$selected': {
            opacity: 1
          },
          '&$disabled': {
            opacity: 0.4
          }
        },
  
        /* Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor="primary"`. */
        textColorPrimary: {
          color: theme.palette.text.secondary,
          '&$selected': {
            color: theme.palette.primary.main
          },
          '&$disabled': {
            color: theme.palette.text.disabled
          }
        },
  
        /* Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor="secondary"`. */
        textColorSecondary: {
          color: theme.palette.text.secondary,
          '&$selected': {
            color: theme.palette.secondary.main
          },
          '&$disabled': {
            color: theme.palette.text.disabled
          }
        },
  
        /* Pseudo-class applied to the root element if `selected={true}` (controlled by the Tabs component). */
        selected: {},
  
        /* Pseudo-class applied to the root element if `disabled={true}` (controlled by the Tabs component). */
        disabled: {},
  
        /* Styles applied to the root element if `fullWidth={true}` (controlled by the Tabs component). */
        fullWidth: {
          flexShrink: 1,
          flexGrow: 1,
          flexBasis: 0,
          maxWidth: 'none'
        },
  
        /* Styles applied to the root element if `wrapped={true}`. */
        wrapped: {
          fontSize: theme.typography.pxToRem(12),
          lineHeight: 1.5
        },
  
        /* Styles applied to the `icon` and `label`'s wrapper element. */
        wrapper: {
          display: 'inline-flex',
          alignItems: 'center',
          justifyContent: 'center',
          width: '100%',
          flexDirection: 'column'
        }
      };
    };
    var Tab = React__default.forwardRef(function Tab(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$disableFocusRi = props.disableFocusRipple,
          disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,
          fullWidth = props.fullWidth,
          icon = props.icon,
          indicator = props.indicator,
          label = props.label,
          onChange = props.onChange,
          onClick = props.onClick,
          selected = props.selected,
          _props$textColor = props.textColor,
          textColor = _props$textColor === void 0 ? 'inherit' : _props$textColor,
          value = props.value,
          _props$wrapped = props.wrapped,
          wrapped = _props$wrapped === void 0 ? false : _props$wrapped,
          other = objectWithoutProperties(props, ["classes", "className", "disabled", "disableFocusRipple", "fullWidth", "icon", "indicator", "label", "onChange", "onClick", "selected", "textColor", "value", "wrapped"]);
  
      var handleChange = function handleChange(event) {
        if (onChange) {
          onChange(event, value);
        }
  
        if (onClick) {
          onClick(event);
        }
      };
  
      return React__default.createElement(ButtonBase$1, _extends_1({
        focusRipple: !disableFocusRipple,
        className: clsx(classes.root, classes["textColor".concat(capitalize(textColor))], className, disabled && classes.disabled, selected && classes.selected, label && icon && classes.labelIcon, fullWidth && classes.fullWidth, wrapped && classes.wrapped),
        ref: ref,
        role: "tab",
        "aria-selected": selected,
        disabled: disabled,
        onClick: handleChange
      }, other), React__default.createElement("span", {
        className: classes.wrapper
      }, icon, label), indicator);
    });
    Tab.propTypes = {
      /**
       * This property isn't supported.
       * Use the `component` property if you need to change the children structure.
       */
      children: unsupportedProp,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * If `true`, the tab will be disabled.
       */
      disabled: propTypes.bool,
  
      /**
       * If `true`, the  keyboard focus ripple will be disabled.
       * `disableRipple` must also be true.
       */
      disableFocusRipple: propTypes.bool,
  
      /**
       * If `true`, the ripple effect will be disabled.
       */
      disableRipple: propTypes.bool,
  
      /**
       * @ignore
       */
      fullWidth: propTypes.bool,
  
      /**
       * The icon element.
       */
      icon: propTypes.node,
  
      /**
       * @ignore
       * For server-side rendering consideration, we let the selected tab
       * render the indicator.
       */
      indicator: propTypes.node,
  
      /**
       * The label element.
       */
      label: propTypes.node,
  
      /**
       * @ignore
       */
      onChange: propTypes.func,
  
      /**
       * @ignore
       */
      onClick: propTypes.func,
  
      /**
       * @ignore
       */
      selected: propTypes.bool,
  
      /**
       * @ignore
       */
      textColor: propTypes.oneOf(['secondary', 'primary', 'inherit']),
  
      /**
       * You can provide your own value. Otherwise, we fallback to the child position index.
       */
      value: propTypes.any,
  
      /**
       * Tab labels appear in a single row.
       * They can use a second line if needed.
       */
      wrapped: propTypes.bool
    };
    var Tab$1 = withStyles$1(styles$1s, {
      name: 'MuiTab'
    })(Tab);
  
    /**
     * @ignore - internal component.
     */
  
    var TableContext = React__default.createContext();
  
    var styles$1t = {
      /* Styles applied to the root element. */
      root: {
        display: 'table',
        width: '100%',
        borderCollapse: 'collapse',
        borderSpacing: 0
      }
    };
    var Table = React__default.forwardRef(function Table(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'table' : _props$component,
          _props$padding = props.padding,
          padding = _props$padding === void 0 ? 'default' : _props$padding,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          other = objectWithoutProperties(props, ["classes", "className", "component", "padding", "size"]);
  
      var table = React__default.useMemo(function () {
        return {
          padding: padding,
          size: size
        };
      }, [padding, size]);
      return React__default.createElement(TableContext.Provider, {
        value: table
      }, React__default.createElement(Component, _extends_1({
        ref: ref,
        className: clsx(classes.root, className)
      }, other)));
    });
    Table.propTypes = {
      /**
       * The content of the table, normally `TableHead` and `TableBody`.
       */
      children: propTypes.node.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * Allows TableCells to inherit padding of the Table.
       */
      padding: propTypes.oneOf(['default', 'checkbox', 'none']),
  
      /**
       * Allows TableCells to inherit size of the Table.
       */
      size: propTypes.oneOf(['small', 'medium'])
    };
    var Table$1 = withStyles$1(styles$1t, {
      name: 'MuiTable'
    })(Table);
  
    /**
     * @ignore - internal component.
     */
  
    var Tablelvl2Context = React__default.createContext();
  
    var styles$1u = {
      /* Styles applied to the root element. */
      root: {
        display: 'table-row-group'
      }
    };
    var tablelvl2 = {
      variant: 'body'
    };
    var TableBody = React__default.forwardRef(function TableBody(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'tbody' : _props$component,
          other = objectWithoutProperties(props, ["classes", "className", "component"]);
  
      return React__default.createElement(Tablelvl2Context.Provider, {
        value: tablelvl2
      }, React__default.createElement(Component, _extends_1({
        className: clsx(classes.root, className),
        ref: ref
      }, other)));
    });
    TableBody.propTypes = {
      /**
       * The content of the component, normally `TableRow`.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType
    };
    var TableBody$1 = withStyles$1(styles$1u, {
      name: 'MuiTableBody'
    })(TableBody);
  
    var styles$1v = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: _extends_1({}, theme.typography.body2, {
          display: 'table-cell',
          verticalAlign: 'inherit',
          // Workaround for a rendering bug with spanned columns in Chrome 62.0.
          // Removes the alpha (sets it to 1), and lightens or darkens the theme color.
          borderBottom: "1px solid\n    ".concat(theme.palette.type === 'light' ? lighten(fade(theme.palette.divider, 1), 0.88) : darken(fade(theme.palette.divider, 1), 0.68)),
          textAlign: 'left',
          padding: '14px 40px 14px 16px',
          '&:last-child': {
            paddingRight: 16
          }
        }),
  
        /* Styles applied to the root element if `variant="head"` or `context.table.head`. */
        head: {
          color: theme.palette.text.secondary,
          fontSize: theme.typography.pxToRem(12),
          lineHeight: theme.typography.pxToRem(21),
          fontWeight: theme.typography.fontWeightMedium
        },
  
        /* Styles applied to the root element if `variant="body"` or `context.table.body`. */
        body: {
          color: theme.palette.text.primary,
          fontWeight: theme.typography.fontWeightRegular
        },
  
        /* Styles applied to the root element if `variant="footer"` or `context.table.footer`. */
        footer: {
          color: theme.palette.text.secondary,
          lineHeight: theme.typography.pxToRem(21),
          fontSize: theme.typography.pxToRem(12)
        },
  
        /* Styles applied to the root element if `padding="dense"`. */
        sizeSmall: {
          padding: '6px 24px 6px 16px',
          '&:last-child': {
            paddingRight: 16
          },
          '&$paddingCheckbox': {
            width: 24,
            // prevent the checkbox column from growing
            padding: '0px 12px 0 16px',
            '&:last-child': {
              paddingLeft: 12,
              paddingRight: 16
            },
            '& > *': {
              padding: 0
            }
          }
        },
  
        /* Styles applied to the root element if `padding="checkbox"`. */
        paddingCheckbox: {
          width: 48,
          // prevent the checkbox column from growing
          padding: '0 0 0 4px',
          '&:last-child': {
            paddingLeft: 0,
            paddingRight: 4
          }
        },
  
        /* Styles applied to the root element if `padding="none"`. */
        paddingNone: {
          padding: 0,
          '&:last-child': {
            padding: 0
          }
        },
  
        /* Styles applied to the root element if `align="left"`. */
        alignLeft: {
          textAlign: 'left'
        },
  
        /* Styles applied to the root element if `align="center"`. */
        alignCenter: {
          textAlign: 'center'
        },
  
        /* Styles applied to the root element if `align="right"`. */
        alignRight: {
          textAlign: 'right',
          flexDirection: 'row-reverse'
        },
  
        /* Styles applied to the root element if `align="justify"`. */
        alignJustify: {
          textAlign: 'justify'
        }
      };
    };
    var TableCell = React__default.forwardRef(function TableCell(props, ref) {
      var _props$align = props.align,
          align = _props$align === void 0 ? 'inherit' : _props$align,
          classes = props.classes,
          className = props.className,
          component = props.component,
          paddingProp = props.padding,
          scopeProp = props.scope,
          sizeProp = props.size,
          sortDirection = props.sortDirection,
          variant = props.variant,
          other = objectWithoutProperties(props, ["align", "classes", "className", "component", "padding", "scope", "size", "sortDirection", "variant"]);
  
      var table = React__default.useContext(TableContext);
      var tablelvl2 = React__default.useContext(Tablelvl2Context);
      var Component;
  
      if (component) {
        Component = component;
      } else {
        Component = tablelvl2 && tablelvl2.variant === 'head' ? 'th' : 'td';
      }
  
      var scope = scopeProp;
  
      if (!scope && tablelvl2 && tablelvl2.variant === 'head') {
        scope = 'col';
      }
  
      var padding = paddingProp || (table && table.padding ? table.padding : 'default');
      var size = sizeProp || (table && table.size ? table.size : 'medium');
      var ariaSort = null;
  
      if (sortDirection) {
        ariaSort = sortDirection === 'asc' ? 'ascending' : 'descending';
      }
  
      return React__default.createElement(Component, _extends_1({
        ref: ref,
        className: clsx(classes.root, className, (variant ? variant === 'head' : tablelvl2 && tablelvl2.variant === 'head') && classes.head, (variant ? variant === 'body' : tablelvl2 && tablelvl2.variant === 'body') && classes.body, (variant ? variant === 'footer' : tablelvl2 && tablelvl2.variant === 'footer') && classes.footer, align !== 'inherit' && classes["align".concat(capitalize(align))], padding !== 'default' && classes["padding".concat(capitalize(padding))], size !== 'medium' && classes["size".concat(capitalize(size))]),
        "aria-sort": ariaSort,
        scope: scope
      }, other));
    });
    TableCell.propTypes = {
      /**
       * Set the text-align on the table cell content.
       *
       * Monetary or generally number fields **should be right aligned** as that allows
       * you to add them up quickly in your head without having to worry about decimals.
       */
      align: propTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),
  
      /**
       * The table cell contents.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * Sets the padding applied to the cell.
       * By default, the Table parent component set the value.
       */
      padding: propTypes.oneOf(['default', 'checkbox', 'none']),
  
      /**
       * Set scope attribute.
       */
      scope: propTypes.string,
  
      /**
       * Specify the size of the cell.
       * By default, the Table parent component set the value (`normal`).
       */
      size: propTypes.oneOf(['small', 'medium']),
  
      /**
       * Set aria-sort direction.
       */
      sortDirection: propTypes.oneOf(['asc', 'desc', false]),
  
      /**
       * Specify the cell type.
       * By default, the TableHead, TableBody or TableFooter parent component set the value.
       */
      variant: propTypes.oneOf(['head', 'body', 'footer'])
    };
    var TableCell$1 = withStyles$1(styles$1v, {
      name: 'MuiTableCell'
    })(TableCell);
  
    var styles$1w = {
      /* Styles applied to the root element. */
      root: {
        display: 'table-footer-group'
      }
    };
    var tablelvl2$1 = {
      variant: 'footer'
    };
    var TableFooter = React__default.forwardRef(function TableFooter(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'tfoot' : _props$component,
          other = objectWithoutProperties(props, ["classes", "className", "component"]);
  
      return React__default.createElement(Tablelvl2Context.Provider, {
        value: tablelvl2$1
      }, React__default.createElement(Component, _extends_1({
        className: clsx(classes.root, className),
        ref: ref
      }, other)));
    });
    TableFooter.propTypes = {
      /**
       * The content of the component, normally `TableRow`.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType
    };
    var TableFooter$1 = withStyles$1(styles$1w, {
      name: 'MuiTableFooter'
    })(TableFooter);
  
    var styles$1x = {
      /* Styles applied to the root element. */
      root: {
        display: 'table-header-group'
      }
    };
    var tablelvl2$2 = {
      variant: 'head'
    };
    var TableHead = React__default.forwardRef(function TableHead(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'thead' : _props$component,
          other = objectWithoutProperties(props, ["classes", "className", "component"]);
  
      return React__default.createElement(Tablelvl2Context.Provider, {
        value: tablelvl2$2
      }, React__default.createElement(Component, _extends_1({
        className: clsx(classes.root, className),
        ref: ref
      }, other)));
    });
    TableHead.propTypes = {
      /**
       * The content of the component, normally `TableRow`.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType
    };
    var TableHead$1 = withStyles$1(styles$1x, {
      name: 'MuiTableHead'
    })(TableHead);
  
    var styles$1y = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'relative',
          display: 'flex',
          alignItems: 'center'
        },
  
        /* Styles applied to the root element if `disableGutters={false}`. */
        gutters: defineProperty({
          paddingLeft: theme.spacing(2),
          paddingRight: theme.spacing(2)
        }, theme.breakpoints.up('sm'), {
          paddingLeft: theme.spacing(3),
          paddingRight: theme.spacing(3)
        }),
  
        /* Styles applied to the root element if `variant="regular"`. */
        regular: theme.mixins.toolbar,
  
        /* Styles applied to the root element if `variant="dense"`. */
        dense: {
          minHeight: 48
        }
      };
    };
    var Toolbar = React__default.forwardRef(function Toolbar(props, ref) {
      var classes = props.classes,
          classNameProp = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _props$disableGutters = props.disableGutters,
          disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'regular' : _props$variant,
          other = objectWithoutProperties(props, ["classes", "className", "component", "disableGutters", "variant"]);
  
      var className = clsx(classes.root, classes[variant], classNameProp, !disableGutters && classes.gutters);
      return React__default.createElement(Component, _extends_1({
        className: className,
        ref: ref
      }, other));
    });
    Toolbar.propTypes = {
      /**
       * Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * If `true`, disables gutter padding.
       */
      disableGutters: propTypes.bool,
  
      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['regular', 'dense'])
    };
    var Toolbar$1 = withStyles$1(styles$1y, {
      name: 'MuiToolbar'
    })(Toolbar);
  
    /**
     * @ignore - internal component.
     */
  
    var KeyboardArrowLeft = createSvgIcon(React__default.createElement("path", {
      d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
    }), 'KeyboardArrowLeft');
  
    /**
     * @ignore - internal component.
     */
  
    var KeyboardArrowRight = createSvgIcon(React__default.createElement("path", {
      d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
    }), 'KeyboardArrowRight');
  
    /**
     * @ignore - internal component.
     */
  
    var _ref$2 = React__default.createElement(KeyboardArrowRight, null);
  
    var _ref2 = React__default.createElement(KeyboardArrowLeft, null);
  
    var _ref3 = React__default.createElement(KeyboardArrowLeft, null);
  
    var _ref4 = React__default.createElement(KeyboardArrowRight, null);
  
    var TablePaginationActions = React__default.forwardRef(function TablePaginationActions(props, ref) {
      var backIconButtonProps = props.backIconButtonProps,
          count = props.count,
          nextIconButtonProps = props.nextIconButtonProps,
          onChangePage = props.onChangePage,
          page = props.page,
          rowsPerPage = props.rowsPerPage,
          theme = props.theme,
          other = objectWithoutProperties(props, ["backIconButtonProps", "count", "nextIconButtonProps", "onChangePage", "page", "rowsPerPage", "theme"]);
  
      var handleBackButtonClick = function handleBackButtonClick(event) {
        onChangePage(event, page - 1);
      };
  
      var handleNextButtonClick = function handleNextButtonClick(event) {
        onChangePage(event, page + 1);
      };
  
      return React__default.createElement("div", _extends_1({
        ref: ref
      }, other), React__default.createElement(IconButton$1, _extends_1({
        onClick: handleBackButtonClick,
        disabled: page === 0,
        color: "inherit"
      }, backIconButtonProps), theme.direction === 'rtl' ? _ref$2 : _ref2), React__default.createElement(IconButton$1, _extends_1({
        onClick: handleNextButtonClick,
        disabled: page >= Math.ceil(count / rowsPerPage) - 1,
        color: "inherit"
      }, nextIconButtonProps), theme.direction === 'rtl' ? _ref3 : _ref4));
    });
    TablePaginationActions.propTypes = {
      /**
       * Properties applied to the back arrow [`IconButton`](/api/icon-button/) element.
       */
      backIconButtonProps: propTypes.object,
  
      /**
       * The total number of rows.
       */
      count: propTypes.number.isRequired,
  
      /**
       * Properties applied to the next arrow [`IconButton`](/api/icon-button/) element.
       */
      nextIconButtonProps: propTypes.object,
  
      /**
       * Callback fired when the page is changed.
       *
       * @param {object} event The event source of the callback
       * @param {number} page The page selected
       */
      onChangePage: propTypes.func.isRequired,
  
      /**
       * The zero-based index of the current page.
       */
      page: propTypes.number.isRequired,
  
      /**
       * The number of rows per page.
       */
      rowsPerPage: propTypes.number.isRequired,
  
      /**
       * @ignore
       */
      theme: propTypes.object.isRequired
    };
    var TablePaginationActions$1 = withTheme$1(TablePaginationActions);
  
    var styles$1z = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          color: theme.palette.text.secondary,
          fontSize: theme.typography.pxToRem(12),
          // Increase the specificity to override TableCell.
          '&:last-child': {
            padding: 0
          }
        },
  
        /* Styles applied to the Toolbar component. */
        toolbar: {
          height: 56,
          minHeight: 56,
          paddingRight: 2
        },
  
        /* Styles applied to the spacer element. */
        spacer: {
          flex: '1 1 100%'
        },
  
        /* Styles applied to the caption Typography components if `variant="caption"`. */
        caption: {
          flexShrink: 0
        },
  
        /* Styles applied to the Select component `root` class. */
        selectRoot: {
          marginRight: 32,
          marginLeft: 8
        },
  
        /* Styles applied to the Select component `select` class. */
        select: {
          paddingLeft: 8,
          paddingRight: 24,
          textAlign: 'right',
          textAlignLast: 'right' // Align <select> on Chrome.
  
        },
  
        /* Styles applied to the Select component `icon` class. */
        selectIcon: {
          top: 1
        },
  
        /* Styles applied to the `InputBase` component. */
        input: {
          color: 'inherit',
          fontSize: 'inherit',
          flexShrink: 0
        },
  
        /* Styles applied to the MenuItem component. */
        menuItem: {},
  
        /* Styles applied to the internal `TablePaginationActions` component. */
        actions: {
          flexShrink: 0,
          marginLeft: 20
        }
      };
    };
  
    var defaultLabelDisplayedRows = function defaultLabelDisplayedRows(_ref) {
      var from = _ref.from,
          to = _ref.to,
          count = _ref.count;
      return "".concat(from, "-").concat(to, " of ").concat(count);
    };
  
    var defaultRowsPerPageOptions = [10, 25, 50, 100];
    /**
     * A `TableCell` based component for placing inside `TableFooter` for pagination.
     */
  
    var TablePagination = React__default.forwardRef(function TablePagination(props, ref) {
      var _props$ActionsCompone = props.ActionsComponent,
          ActionsComponent = _props$ActionsCompone === void 0 ? TablePaginationActions$1 : _props$ActionsCompone,
          backIconButtonProps = props.backIconButtonProps,
          classes = props.classes,
          colSpanProp = props.colSpan,
          _props$component = props.component,
          Component = _props$component === void 0 ? TableCell$1 : _props$component,
          count = props.count,
          _props$labelDisplayed = props.labelDisplayedRows,
          labelDisplayedRows = _props$labelDisplayed === void 0 ? defaultLabelDisplayedRows : _props$labelDisplayed,
          _props$labelRowsPerPa = props.labelRowsPerPage,
          labelRowsPerPage = _props$labelRowsPerPa === void 0 ? 'Rows per page:' : _props$labelRowsPerPa,
          nextIconButtonProps = props.nextIconButtonProps,
          onChangePage = props.onChangePage,
          onChangeRowsPerPage = props.onChangeRowsPerPage,
          page = props.page,
          rowsPerPage = props.rowsPerPage,
          _props$rowsPerPageOpt = props.rowsPerPageOptions,
          rowsPerPageOptions = _props$rowsPerPageOpt === void 0 ? defaultRowsPerPageOptions : _props$rowsPerPageOpt,
          _props$SelectProps = props.SelectProps,
          SelectProps = _props$SelectProps === void 0 ? {} : _props$SelectProps,
          other = objectWithoutProperties(props, ["ActionsComponent", "backIconButtonProps", "classes", "colSpan", "component", "count", "labelDisplayedRows", "labelRowsPerPage", "nextIconButtonProps", "onChangePage", "onChangeRowsPerPage", "page", "rowsPerPage", "rowsPerPageOptions", "SelectProps"]);
  
      var colSpan;
  
      if (Component === TableCell$1 || Component === 'td') {
        colSpan = colSpanProp || 1000; // col-span over everything
      }
  
      var MenuItemComponent = SelectProps.native ? 'option' : MenuItem$1;
      return React__default.createElement(Component, _extends_1({
        className: classes.root,
        colSpan: colSpan,
        ref: ref
      }, other), React__default.createElement(Toolbar$1, {
        className: classes.toolbar
      }, React__default.createElement("div", {
        className: classes.spacer
      }), rowsPerPageOptions.length > 1 && React__default.createElement(Typography$1, {
        color: "inherit",
        variant: "caption",
        className: classes.caption
      }, labelRowsPerPage), rowsPerPageOptions.length > 1 && React__default.createElement(Select$1, _extends_1({
        classes: {
          root: classes.selectRoot,
          select: classes.select,
          icon: classes.selectIcon
        },
        input: React__default.createElement(InputBase$1, {
          className: classes.input
        }),
        value: rowsPerPage,
        onChange: onChangeRowsPerPage
      }, SelectProps), rowsPerPageOptions.map(function (rowsPerPageOption) {
        return React__default.createElement(MenuItemComponent, {
          className: classes.menuItem,
          key: rowsPerPageOption,
          value: rowsPerPageOption
        }, rowsPerPageOption);
      })), React__default.createElement(Typography$1, {
        color: "inherit",
        variant: "caption",
        className: classes.caption
      }, labelDisplayedRows({
        from: count === 0 ? 0 : page * rowsPerPage + 1,
        to: Math.min(count, (page + 1) * rowsPerPage),
        count: count,
        page: page
      })), React__default.createElement(ActionsComponent, {
        className: classes.actions,
        backIconButtonProps: backIconButtonProps,
        count: count,
        nextIconButtonProps: nextIconButtonProps,
        onChangePage: onChangePage,
        page: page,
        rowsPerPage: rowsPerPage
      })));
    });
    TablePagination.propTypes = {
      /**
       * The component used for displaying the actions.
       * Either a string to use a DOM element or a component.
       */
      ActionsComponent: propTypes.elementType,
  
      /**
       * Properties applied to the back arrow [`IconButton`](/api/icon-button/) component.
       */
      backIconButtonProps: propTypes.object,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      colSpan: propTypes.number,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * The total number of rows.
       */
      count: propTypes.number.isRequired,
  
      /**
       * Customize the displayed rows label.
       */
      labelDisplayedRows: propTypes.func,
  
      /**
       * Customize the rows per page label. Invoked with a `{ from, to, count, page }`
       * object.
       */
      labelRowsPerPage: propTypes.node,
  
      /**
       * Properties applied to the next arrow [`IconButton`](/api/icon-button/) element.
       */
      nextIconButtonProps: propTypes.object,
  
      /**
       * Callback fired when the page is changed.
       *
       * @param {object} event The event source of the callback
       * @param {number} page The page selected
       */
      onChangePage: propTypes.func.isRequired,
  
      /**
       * Callback fired when the number of rows per page is changed.
       *
       * @param {object} event The event source of the callback
       */
      onChangeRowsPerPage: propTypes.func,
  
      /**
       * The zero-based index of the current page.
       */
      page: chainPropTypes(propTypes.number.isRequired, function (props) {
        var count = props.count,
            page = props.page,
            rowsPerPage = props.rowsPerPage;
        var newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);
  
        if (page < 0 || page > newLastPage) {
          return new Error('Material-UI: the page prop of a TablePagination is out of range ' + "(0 to ".concat(newLastPage, ", but page is ").concat(page, ")."));
        }
  
        return null;
      }),
  
      /**
       * The number of rows per page.
       */
      rowsPerPage: propTypes.number.isRequired,
  
      /**
       * Customizes the options of the rows per page select field. If less than two options are
       * available, no select field will be displayed.
       */
      rowsPerPageOptions: propTypes.array,
  
      /**
       * Properties applied to the rows per page [`Select`](/api/select/) element.
       */
      SelectProps: propTypes.object
    };
    var TablePagination$1 = withStyles$1(styles$1z, {
      name: 'MuiTablePagination'
    })(TablePagination);
  
    var styles$1A = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          color: 'inherit',
          display: 'table-row',
          verticalAlign: 'middle',
          // We disable the focus ring for mouse, touch and keyboard users.
          outline: 'none',
          '&$selected': {
            backgroundColor: theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.04)' // grey[100]
            : 'rgba(255, 255, 255, 0.08)'
          },
          '&$hover:hover': {
            backgroundColor: theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.07)' // grey[200]
            : 'rgba(255, 255, 255, 0.14)'
          }
        },
  
        /* Pseudo-class applied to the root element if `selected={true}`. */
        selected: {},
  
        /* Pseudo-class applied to the root element if `hover={true}`. */
        hover: {},
  
        /* Styles applied to the root element if table variant="head". */
        head: {},
  
        /* Styles applied to the root element if table variant="footer". */
        footer: {}
      };
    };
    /**
     * Will automatically set dynamic row height
     * based on the material table element parent (head, body, etc).
     */
  
    var TableRow = React__default.forwardRef(function TableRow(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'tr' : _props$component,
          _props$hover = props.hover,
          hover = _props$hover === void 0 ? false : _props$hover,
          _props$selected = props.selected,
          selected = _props$selected === void 0 ? false : _props$selected,
          other = objectWithoutProperties(props, ["classes", "className", "component", "hover", "selected"]);
  
      var tablelvl2 = React__default.useContext(Tablelvl2Context);
      return React__default.createElement(Component, _extends_1({
        ref: ref,
        className: clsx(classes.root, className, tablelvl2 && [tablelvl2.variant === 'head' && classes.head, tablelvl2.variant === 'footer' && classes.footer], hover && classes.hover, selected && classes.selected)
      }, other));
    });
    TableRow.propTypes = {
      /**
       * Should be valid <tr> children such as `TableCell`.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * If `true`, the table row will shade on hover.
       */
      hover: propTypes.bool,
  
      /**
       * If `true`, the table row will have the selected shading.
       */
      selected: propTypes.bool
    };
    var TableRow$1 = withStyles$1(styles$1A, {
      name: 'MuiTableRow'
    })(TableRow);
  
    /**
     * @ignore - internal component.
     */
  
    var ArrowDownwardIcon = createSvgIcon(React__default.createElement("path", {
      d: "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
    }), 'ArrowDownward');
  
    var styles$1B = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          cursor: 'pointer',
          display: 'inline-flex',
          justifyContent: 'flex-start',
          flexDirection: 'inherit',
          alignItems: 'center',
          '&:focus': {
            color: theme.palette.text.primary
          },
          '&:hover': {
            color: theme.palette.text.primary,
            '& $icon': {
              opacity: 1,
              color: theme.palette.text.secondary
            }
          },
          '&$active': {
            color: theme.palette.text.primary,
            // && instead of & is a workaround for https://github.com/cssinjs/jss/issues/1045
            '&& $icon': {
              opacity: 1,
              color: theme.palette.text.primary
            }
          }
        },
  
        /* Pseudo-class applied to the root element if `active={true}`. */
        active: {},
  
        /* Styles applied to the icon component. */
        icon: {
          height: 18,
          marginRight: 4,
          marginLeft: 4,
          opacity: 0,
          transition: theme.transitions.create(['opacity', 'transform'], {
            duration: theme.transitions.duration.shorter
          }),
          userSelect: 'none',
          width: 18
        },
  
        /* Styles applied to the icon component if `direction="desc"`. */
        iconDirectionDesc: {
          transform: 'rotate(0deg)'
        },
  
        /* Styles applied to the icon component if `direction="asc"`. */
        iconDirectionAsc: {
          transform: 'rotate(180deg)'
        }
      };
    };
    /**
     * A button based label for placing inside `TableCell` for column sorting.
     */
  
    var TableSortLabel = React__default.forwardRef(function TableSortLabel(props, ref) {
      var _props$active = props.active,
          active = _props$active === void 0 ? false : _props$active,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$direction = props.direction,
          direction = _props$direction === void 0 ? 'desc' : _props$direction,
          _props$hideSortIcon = props.hideSortIcon,
          hideSortIcon = _props$hideSortIcon === void 0 ? false : _props$hideSortIcon,
          _props$IconComponent = props.IconComponent,
          IconComponent = _props$IconComponent === void 0 ? ArrowDownwardIcon : _props$IconComponent,
          other = objectWithoutProperties(props, ["active", "children", "classes", "className", "direction", "hideSortIcon", "IconComponent"]);
  
      return React__default.createElement(ButtonBase$1, _extends_1({
        className: clsx(classes.root, className, active && classes.active),
        component: "span",
        disableRipple: true,
        ref: ref
      }, other), children, hideSortIcon && !active ? null : React__default.createElement(IconComponent, {
        className: clsx(classes.icon, classes["iconDirection".concat(capitalize(direction))])
      }));
    });
    TableSortLabel.propTypes = {
      /**
       * If `true`, the label will have the active styling (should be true for the sorted column).
       */
      active: propTypes.bool,
  
      /**
       * Label contents, the arrow will be appended automatically.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The current sort direction.
       */
      direction: propTypes.oneOf(['asc', 'desc']),
  
      /**
       * Hide sort icon when active is false.
       */
      hideSortIcon: propTypes.bool,
  
      /**
       * Sort icon to use.
       */
      IconComponent: propTypes.elementType
    };
    var TableSortLabel$1 = withStyles$1(styles$1B, {
      name: 'MuiTableSortLabel'
    })(TableSortLabel);
  
    var reactEventListener_cjs = createCommonjsModule(function (module, exports) {
  
    Object.defineProperty(exports, '__esModule', { value: true });
  
    function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
  
    var _classCallCheck = _interopDefault(classCallCheck);
    var _createClass = _interopDefault(createClass);
    var _possibleConstructorReturn = _interopDefault(possibleConstructorReturn);
    var _getPrototypeOf = _interopDefault(getPrototypeOf$1);
    var _inherits = _interopDefault(inherits);
    var _typeof = _interopDefault(_typeof_1);
    var _objectWithoutProperties = _interopDefault(objectWithoutProperties);
    var _extends = _interopDefault(_extends_1);
    var React = _interopDefault(React__default);
    var PropTypes = _interopDefault(propTypes);
    var warning = _interopDefault(warning_1);
  
    function defineProperty(object, property, attr) {
      return Object.defineProperty(object, property, attr);
    } // Passive options
    // Inspired by https://github.com/Modernizr/Modernizr/blob/master/feature-detects/dom/passiveeventlisteners.js
  
  
    var passiveOption = function () {
      var cache = null;
      return function () {
        if (cache !== null) {
          return cache;
        }
  
        var supportsPassiveOption = false;
  
        try {
          window.addEventListener('test', null, defineProperty({}, 'passive', {
            get: function get() {
              supportsPassiveOption = true;
            }
          }));
        } catch (err) {//
        }
  
        cache = supportsPassiveOption;
        return supportsPassiveOption;
      }();
    }();
  
    var defaultEventOptions = {
      capture: false,
      passive: false
    };
  
    function mergeDefaultEventOptions(options) {
      return _extends({}, defaultEventOptions, options);
    }
  
    function getEventListenerArgs(eventName, callback, options) {
      var args = [eventName, callback];
      args.push(passiveOption ? options : options.capture);
      return args;
    }
  
    function on(target, eventName, callback, options) {
      // eslint-disable-next-line prefer-spread
      target.addEventListener.apply(target, getEventListenerArgs(eventName, callback, options));
    }
  
    function off(target, eventName, callback, options) {
      // eslint-disable-next-line prefer-spread
      target.removeEventListener.apply(target, getEventListenerArgs(eventName, callback, options));
    }
  
    function forEachListener(props, iteratee) {
      var children = props.children,
          target = props.target,
          eventProps = _objectWithoutProperties(props, ["children", "target"]);
  
      Object.keys(eventProps).forEach(function (name) {
        if (name.substring(0, 2) !== 'on') {
          return;
        }
  
        var prop = eventProps[name];
  
        var type = _typeof(prop);
  
        var isObject = type === 'object';
        var isFunction = type === 'function';
  
        if (!isObject && !isFunction) {
          return;
        }
  
        var capture = name.substr(-7).toLowerCase() === 'capture';
        var eventName = name.substring(2).toLowerCase();
        eventName = capture ? eventName.substring(0, eventName.length - 7) : eventName;
  
        if (isObject) {
          iteratee(eventName, prop.handler, prop.options);
        } else {
          iteratee(eventName, prop, mergeDefaultEventOptions({
            capture: capture
          }));
        }
      });
    }
  
    function withOptions(handler, options) {
      warning(options, 'react-event-listener: should be specified options in withOptions.');
      return {
        handler: handler,
        options: mergeDefaultEventOptions(options)
      };
    }
  
    var EventListener =
    /*#__PURE__*/
    function (_React$PureComponent) {
      _inherits(EventListener, _React$PureComponent);
  
      function EventListener() {
        _classCallCheck(this, EventListener);
  
        return _possibleConstructorReturn(this, _getPrototypeOf(EventListener).apply(this, arguments));
      }
  
      _createClass(EventListener, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.applyListeners(on);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          this.applyListeners(off, prevProps);
          this.applyListeners(on);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.applyListeners(off);
        }
      }, {
        key: "applyListeners",
        value: function applyListeners(onOrOff) {
          var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props;
          var target = props.target;
  
          if (target) {
            var element = target;
  
            if (typeof target === 'string') {
              element = window[target];
            }
  
            forEachListener(props, onOrOff.bind(null, element));
          }
        }
      }, {
        key: "render",
        value: function render() {
          return this.props.children || null;
        }
      }]);
  
      return EventListener;
    }(React.PureComponent);
  
    EventListener.propTypes = {
      /**
       * You can provide a single child too.
       */
      children: PropTypes.node,
  
      /**
       * The DOM target to listen to.
       */
      target: PropTypes.oneOfType([PropTypes.object, PropTypes.string]).isRequired
    };
  
    exports.withOptions = withOptions;
    exports.default = EventListener;
    });
  
    var EventListener = unwrapExports(reactEventListener_cjs);
    var reactEventListener_cjs_1 = reactEventListener_cjs.withOptions;
  
    // Based on https://github.com/react-bootstrap/dom-helpers/blob/master/src/util/inDOM.js
    var inDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
    var cachedType;
    // Based on the jquery plugin https://github.com/othree/jquery.rtl-scroll-type
    function detectScrollType() {
        if (cachedType) {
            return cachedType;
        }
        if (!inDOM || !window.document.body) {
            return 'indeterminate';
        }
        var dummy = window.document.createElement('div');
        dummy.appendChild(document.createTextNode('ABCD'));
        dummy.dir = 'rtl';
        dummy.style.fontSize = '14px';
        dummy.style.width = '4px';
        dummy.style.height = '1px';
        dummy.style.position = 'absolute';
        dummy.style.top = '-1000px';
        dummy.style.overflow = 'scroll';
        document.body.appendChild(dummy);
        cachedType = 'reverse';
        if (dummy.scrollLeft > 0) {
            cachedType = 'default';
        }
        else {
            dummy.scrollLeft = 1;
            if (dummy.scrollLeft === 0) {
                cachedType = 'negative';
            }
        }
        document.body.removeChild(dummy);
        return cachedType;
    }
    // Based on https://stackoverflow.com/a/24394376
    function getNormalizedScrollLeft(element, direction) {
        var scrollLeft = element.scrollLeft;
        // Perform the calculations only when direction is rtl to avoid messing up the ltr bahavior
        if (direction !== 'rtl') {
            return scrollLeft;
        }
        var type = detectScrollType();
        if (type === 'indeterminate') {
            return Number.NaN;
        }
        switch (type) {
            case 'negative':
                return element.scrollWidth - element.clientWidth + scrollLeft;
            case 'reverse':
                return element.scrollWidth - element.clientWidth - scrollLeft;
        }
        return scrollLeft;
    }
  
    function easeInOutSin(time) {
      return (1 + Math.sin(Math.PI * time - Math.PI / 2)) / 2;
    }
  
    function animate(prop, element, to) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var cb = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {};
      var _options$ease = options.ease,
          ease = _options$ease === void 0 ? easeInOutSin : _options$ease,
          _options$duration = options.duration,
          duration = _options$duration === void 0 ? 300 : _options$duration;
      var start = null;
      var from = element[prop];
      var cancelled = false;
  
      var cancel = function cancel() {
        cancelled = true;
      };
  
      var step = function step(timestamp) {
        if (cancelled) {
          cb(new Error('Animation cancelled'));
          return;
        }
  
        if (start === null) {
          start = timestamp;
        }
  
        var time = Math.min(1, (timestamp - start) / duration);
        element[prop] = ease(time) * (to - from) + from;
  
        if (time >= 1) {
          requestAnimationFrame(function () {
            cb(null);
          });
          return;
        }
  
        requestAnimationFrame(step);
      };
  
      if (from === to) {
        cb(new Error('Element already at target position'));
        return cancel;
      }
  
      requestAnimationFrame(step);
      return cancel;
    }
  
    var styles$1C = {
      width: 99,
      height: 99,
      position: 'absolute',
      top: -9999,
      overflow: 'scroll'
    };
    /**
     * @ignore - internal component.
     * The component is originates from https://github.com/STORIS/react-scrollbar-size.
     * It has been moved into the core in order to minimize the bundle size.
     */
  
    function ScrollbarSize(props) {
      var onChange = props.onChange,
          other = objectWithoutProperties(props, ["onChange"]);
  
      var scrollbarHeight = React__default.useRef();
      var nodeRef = React__default.useRef(null);
  
      var setMeasurements = function setMeasurements() {
        scrollbarHeight.current = nodeRef.current.offsetHeight - nodeRef.current.clientHeight;
      };
  
      React__default.useEffect(function () {
        var handleResize = debounce_1(function () {
          var prevHeight = scrollbarHeight.current;
          setMeasurements();
  
          if (prevHeight !== scrollbarHeight.current) {
            onChange(scrollbarHeight.current);
          }
        }, 166); // Corresponds to 10 frames at 60 Hz.
  
        window.addEventListener('resize', handleResize);
        return function () {
          handleResize.clear();
          window.removeEventListener('resize', handleResize);
        };
      }, [onChange]);
      React__default.useEffect(function () {
        setMeasurements();
        onChange(scrollbarHeight.current);
      }, [onChange]);
      return React__default.createElement("div", _extends_1({
        style: styles$1C,
        ref: nodeRef
      }, other));
    }
    ScrollbarSize.propTypes = {
      onChange: propTypes.func.isRequired
    };
  
    var styles$1D = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'absolute',
          height: 2,
          bottom: 0,
          width: '100%',
          transition: theme.transitions.create()
        },
  
        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          backgroundColor: theme.palette.primary.main
        },
  
        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          backgroundColor: theme.palette.secondary.main
        }
      };
    };
    /**
     * @ignore - internal component.
     */
  
    var TabIndicator = React__default.forwardRef(function TabIndicator(props, ref) {
      var classes = props.classes,
          className = props.className,
          color = props.color,
          other = objectWithoutProperties(props, ["classes", "className", "color"]);
  
      return React__default.createElement("span", _extends_1({
        className: clsx(classes.root, classes["color".concat(capitalize(color))], className),
        ref: ref
      }, other));
    });
    TabIndicator.propTypes = {
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * @ignore
       * The color of the tab indicator.
       */
      color: propTypes.oneOf(['primary', 'secondary'])
    };
    var TabIndicator$1 = withStyles$1(styles$1D, {
      name: 'PrivateTabIndicator'
    })(TabIndicator);
  
    var styles$1E = {
      /* Styles applied to the root element. */
      root: {
        color: 'inherit',
        width: 40,
        flexShrink: 0
      }
    };
    /**
     * @ignore - internal component.
     */
  
    var _ref$3 = React__default.createElement(KeyboardArrowLeft, {
      fontSize: "small"
    });
  
    var _ref2$1 = React__default.createElement(KeyboardArrowRight, {
      fontSize: "small"
    });
  
    var TabScrollButton = React__default.forwardRef(function TabScrollButton(props, ref) {
      var classes = props.classes,
          classNameProp = props.className,
          direction = props.direction,
          onClick = props.onClick,
          _props$visible = props.visible,
          visible = _props$visible === void 0 ? true : _props$visible,
          other = objectWithoutProperties(props, ["classes", "className", "direction", "onClick", "visible"]);
  
      var className = clsx(classes.root, classNameProp);
  
      if (!visible) {
        return React__default.createElement("div", {
          className: className
        });
      }
  
      return React__default.createElement(ButtonBase$1, _extends_1({
        component: "div",
        className: className,
        onClick: onClick,
        ref: ref,
        role: null,
        tabIndex: null
      }, other), direction === 'left' ? _ref$3 : _ref2$1);
    });
    TabScrollButton.propTypes = {
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * Which direction should the button indicate?
       */
      direction: propTypes.oneOf(['left', 'right']),
  
      /**
       * Callback to execute for button press.
       */
      onClick: propTypes.func,
  
      /**
       * Should the button be present or just consume space.
       */
      visible: propTypes.bool
    };
    var TabScrollButton$1 = withStyles$1(styles$1E, {
      name: 'PrivateTabScrollButton'
    })(TabScrollButton);
  
    var styles$1F = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          overflow: 'hidden',
          minHeight: 48,
          WebkitOverflowScrolling: 'touch' // Add iOS momentum scrolling.
  
        },
  
        /* Styles applied to the flex container element. */
        flexContainer: {
          display: 'flex'
        },
  
        /* Styles applied to the flex container element if `centered={true}` & `!variant="scrollable"`. */
        centered: {
          justifyContent: 'center'
        },
  
        /* Styles applied to the tablist element. */
        scroller: {
          position: 'relative',
          display: 'inline-block',
          flex: '1 1 auto',
          whiteSpace: 'nowrap'
        },
  
        /* Styles applied to the tablist element if `!variant="scrollable"`. */
        fixed: {
          overflowX: 'hidden',
          width: '100%'
        },
  
        /* Styles applied to the tablist element if `variant="scrollable"`. */
        scrollable: {
          overflowX: 'scroll',
          // Hide dimensionless scrollbar on MacOS
          scrollbarWidth: 'none',
          // Firefox
          '&::-webkit-scrollbar': {
            display: 'none' // Safari + Chrome
  
          }
        },
  
        /* Styles applied to the `ScrollButtonComponent` component. */
        scrollButtons: {},
  
        /* Styles applied to the `ScrollButtonComponent` component if `scrollButtons="auto"` or scrollButtons="desktop"`. */
        scrollButtonsDesktop: defineProperty({}, theme.breakpoints.down('xs'), {
          display: 'none'
        }),
  
        /* Styles applied to the `TabIndicator` component. */
        indicator: {}
      };
    };
  
    var Tabs =
    /*#__PURE__*/
    function (_React$Component) {
      inherits(Tabs, _React$Component);
  
      function Tabs() {
        var _this;
  
        classCallCheck(this, Tabs);
  
        _this = possibleConstructorReturn(this, getPrototypeOf$1(Tabs).call(this));
        _this.state = {
          indicatorStyle: {},
          scrollerStyle: {
            overflow: 'hidden',
            marginBottom: null
          },
          showLeftScroll: false,
          showRightScroll: false,
          mounted: false
        };
  
        _this.getConditionalElements = function () {
          var _this$props = _this.props,
              classes = _this$props.classes,
              ScrollButtonComponent = _this$props.ScrollButtonComponent,
              scrollButtons = _this$props.scrollButtons,
              theme = _this$props.theme,
              variant = _this$props.variant;
          var _this$state = _this.state,
              showLeftScroll = _this$state.showLeftScroll,
              showRightScroll = _this$state.showRightScroll;
          var conditionalElements = {};
          var scrollable = variant === 'scrollable';
          conditionalElements.scrollbarSizeListener = scrollable ? React__default.createElement(ScrollbarSize, {
            className: classes.scrollable,
            onChange: _this.handleScrollbarSizeChange
          }) : null;
          var scrollButtonsActive = showLeftScroll || showRightScroll;
          var showScrollButtons = scrollable && (scrollButtons === 'auto' && scrollButtonsActive || scrollButtons === 'desktop' || scrollButtons === 'on');
          conditionalElements.scrollButtonLeft = showScrollButtons ? React__default.createElement(ScrollButtonComponent, {
            direction: theme.direction === 'rtl' ? 'right' : 'left',
            onClick: _this.handleLeftScrollClick,
            visible: showLeftScroll,
            className: clsx(classes.scrollButtons, scrollButtons !== 'on' && classes.scrollButtonsDesktop)
          }) : null;
          conditionalElements.scrollButtonRight = showScrollButtons ? React__default.createElement(ScrollButtonComponent, {
            direction: theme.direction === 'rtl' ? 'left' : 'right',
            onClick: _this.handleRightScrollClick,
            visible: showRightScroll,
            className: clsx(classes.scrollButtons, scrollButtons !== 'on' && classes.scrollButtonsDesktop)
          }) : null;
          return conditionalElements;
        };
  
        _this.getTabsMeta = function (value, direction) {
          var tabsMeta;
  
          if (_this.tabsRef) {
            var rect = _this.tabsRef.getBoundingClientRect(); // create a new object with ClientRect class props + scrollLeft
  
  
            tabsMeta = {
              clientWidth: _this.tabsRef.clientWidth,
              scrollLeft: _this.tabsRef.scrollLeft,
              scrollLeftNormalized: getNormalizedScrollLeft(_this.tabsRef, direction),
              scrollWidth: _this.tabsRef.scrollWidth,
              left: rect.left,
              right: rect.right
            };
          }
  
          var tabMeta;
  
          if (_this.tabsRef && value !== false) {
            var children = _this.tabsRef.children[0].children;
  
            if (children.length > 0) {
              var tab = children[_this.valueToIndex.get(value)];
  
              warning_1(tab, ["Material-UI: the value provided `".concat(value, "` to the Tabs component is invalid."), 'None of the Tabs children have this value.', _this.valueToIndex.keys ? "You can provide one of the following values: ".concat(Array.from(_this.valueToIndex.keys()).join(', '), ".") : null].join('\n'));
              tabMeta = tab ? tab.getBoundingClientRect() : null;
            }
          }
  
          return {
            tabsMeta: tabsMeta,
            tabMeta: tabMeta
          };
        };
  
        _this.handleLeftScrollClick = function () {
          _this.moveTabsScroll(-_this.tabsRef.clientWidth);
        };
  
        _this.handleRightScrollClick = function () {
          _this.moveTabsScroll(_this.tabsRef.clientWidth);
        };
  
        _this.handleScrollbarSizeChange = function (scrollbarHeight) {
          _this.setState({
            scrollerStyle: {
              overflow: null,
              marginBottom: -scrollbarHeight
            }
          });
        };
  
        _this.handleTabsRef = function (ref) {
          _this.tabsRef = ref;
        };
  
        _this.moveTabsScroll = function (delta) {
          var theme = _this.props.theme;
          var multiplier = theme.direction === 'rtl' ? -1 : 1;
          var nextScrollLeft = _this.tabsRef.scrollLeft + delta * multiplier; // Fix for Edge
  
          var invert = theme.direction === 'rtl' && detectScrollType() === 'reverse' ? -1 : 1;
  
          _this.scroll(invert * nextScrollLeft);
        };
  
        _this.scrollSelectedIntoView = function () {
          var _this$props2 = _this.props,
              theme = _this$props2.theme,
              value = _this$props2.value;
  
          var _this$getTabsMeta = _this.getTabsMeta(value, theme.direction),
              tabsMeta = _this$getTabsMeta.tabsMeta,
              tabMeta = _this$getTabsMeta.tabMeta;
  
          if (!tabMeta || !tabsMeta) {
            return;
          }
  
          if (tabMeta.left < tabsMeta.left) {
            // left side of button is out of view
            var nextScrollLeft = tabsMeta.scrollLeft + (tabMeta.left - tabsMeta.left);
  
            _this.scroll(nextScrollLeft);
          } else if (tabMeta.right > tabsMeta.right) {
            // right side of button is out of view
            var _nextScrollLeft = tabsMeta.scrollLeft + (tabMeta.right - tabsMeta.right);
  
            _this.scroll(_nextScrollLeft);
          }
        };
  
        _this.scroll = function (value) {
          animate('scrollLeft', _this.tabsRef, value);
        };
  
        _this.updateScrollButtonState = function () {
          var _this$props3 = _this.props,
              scrollButtons = _this$props3.scrollButtons,
              theme = _this$props3.theme,
              variant = _this$props3.variant;
          var scrollable = variant === 'scrollable';
  
          if (scrollable && scrollButtons !== 'off') {
            var _this$tabsRef = _this.tabsRef,
                scrollWidth = _this$tabsRef.scrollWidth,
                clientWidth = _this$tabsRef.clientWidth;
            var scrollLeft = getNormalizedScrollLeft(_this.tabsRef, theme.direction); // use 1 for the potential rounding error with browser zooms.
  
            var showLeftScroll = theme.direction === 'rtl' ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;
            var showRightScroll = theme.direction !== 'rtl' ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;
  
            if (showLeftScroll !== _this.state.showLeftScroll || showRightScroll !== _this.state.showRightScroll) {
              _this.setState({
                showLeftScroll: showLeftScroll,
                showRightScroll: showRightScroll
              });
            }
          }
        };
  
        if (typeof window !== 'undefined') {
          _this.handleResize = debounce_1(function () {
            _this.updateIndicatorState(_this.props);
  
            _this.updateScrollButtonState();
          }, 166); // Corresponds to 10 frames at 60 Hz.
  
          _this.handleTabsScroll = debounce_1(function () {
            _this.updateScrollButtonState();
          }, 166); // Corresponds to 10 frames at 60 Hz.
        }
  
        return _this;
      }
  
      createClass(Tabs, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.setState({
            mounted: true
          });
          this.updateIndicatorState(this.props);
          this.updateScrollButtonState();
  
          if (this.props.action) {
            this.props.action({
              updateIndicator: this.handleResize
            });
          }
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps, prevState) {
          // The index might have changed at the same time.
          // We need to check again the right indicator position.
          this.updateIndicatorState(this.props);
          this.updateScrollButtonState();
  
          if (this.state.indicatorStyle !== prevState.indicatorStyle) {
            this.scrollSelectedIntoView();
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.handleResize.clear();
          this.handleTabsScroll.clear();
        }
      }, {
        key: "updateIndicatorState",
        value: function updateIndicatorState(props) {
          var theme = props.theme,
              value = props.value;
  
          var _this$getTabsMeta2 = this.getTabsMeta(value, theme.direction),
              tabsMeta = _this$getTabsMeta2.tabsMeta,
              tabMeta = _this$getTabsMeta2.tabMeta;
  
          var left = 0;
  
          if (tabMeta && tabsMeta) {
            var correction = theme.direction === 'rtl' ? tabsMeta.scrollLeftNormalized + tabsMeta.clientWidth - tabsMeta.scrollWidth : tabsMeta.scrollLeft;
            left = Math.round(tabMeta.left - tabsMeta.left + correction);
          }
  
          var indicatorStyle = {
            left: left,
            // May be wrong until the font is loaded.
            width: tabMeta ? Math.round(tabMeta.width) : 0
          };
  
          if ((indicatorStyle.left !== this.state.indicatorStyle.left || indicatorStyle.width !== this.state.indicatorStyle.width) && !isNaN(indicatorStyle.left) && !isNaN(indicatorStyle.width)) {
            this.setState({
              indicatorStyle: indicatorStyle
            });
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;
  
          var _this$props4 = this.props,
              action = _this$props4.action,
              centered = _this$props4.centered,
              childrenProp = _this$props4.children,
              classes = _this$props4.classes,
              className = _this$props4.className,
              Component = _this$props4.component,
              indicatorColor = _this$props4.indicatorColor,
              innerRef = _this$props4.innerRef,
              onChange = _this$props4.onChange,
              ScrollButtonComponent = _this$props4.ScrollButtonComponent,
              scrollButtons = _this$props4.scrollButtons,
              _this$props4$TabIndic = _this$props4.TabIndicatorProps,
              TabIndicatorProps = _this$props4$TabIndic === void 0 ? {} : _this$props4$TabIndic,
              textColor = _this$props4.textColor,
              theme = _this$props4.theme,
              value = _this$props4.value,
              variant = _this$props4.variant,
              other = objectWithoutProperties(_this$props4, ["action", "centered", "children", "classes", "className", "component", "indicatorColor", "innerRef", "onChange", "ScrollButtonComponent", "scrollButtons", "TabIndicatorProps", "textColor", "theme", "value", "variant"]);
  
          var scrollable = variant === 'scrollable';
          warning_1(!centered || !scrollable, 'Material-UI: you can not use the `centered={true}` and `variant="scrollable"` properties ' + 'at the same time on a `Tabs` component.');
          var indicator = React__default.createElement(TabIndicator$1, _extends_1({
            className: classes.indicator,
            color: indicatorColor
          }, TabIndicatorProps, {
            style: _extends_1({}, this.state.indicatorStyle, TabIndicatorProps.style)
          }));
          this.valueToIndex = new Map();
          var childIndex = 0;
          var children = React__default.Children.map(childrenProp, function (child) {
            if (!React__default.isValidElement(child)) {
              return null;
            }
  
            warning_1(child.type !== React__default.Fragment, ["Material-UI: the Tabs component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
            var childValue = child.props.value === undefined ? childIndex : child.props.value;
  
            _this2.valueToIndex.set(childValue, childIndex);
  
            var selected = childValue === value;
            childIndex += 1;
            return React__default.cloneElement(child, {
              fullWidth: variant === 'fullWidth',
              indicator: selected && !_this2.state.mounted && indicator,
              selected: selected,
              onChange: onChange,
              textColor: textColor,
              value: childValue
            });
          });
          var conditionalElements = this.getConditionalElements();
          return React__default.createElement(Component, _extends_1({
            className: clsx(classes.root, className),
            ref: innerRef
          }, other), React__default.createElement(EventListener, {
            target: "window",
            onResize: this.handleResize
          }), React__default.createElement("div", {
            className: classes.flexContainer
          }, conditionalElements.scrollButtonLeft, conditionalElements.scrollbarSizeListener, React__default.createElement("div", {
            className: clsx(classes.scroller, scrollable ? classes.scrollable : classes.fixed),
            style: this.state.scrollerStyle,
            ref: this.handleTabsRef,
            role: "tablist",
            onScroll: this.handleTabsScroll
          }, React__default.createElement("div", {
            className: clsx(classes.flexContainer, centered && !scrollable && classes.centered)
          }, children), this.state.mounted && indicator), conditionalElements.scrollButtonRight));
        }
      }]);
  
      return Tabs;
    }(React__default.Component);
  
    Tabs.propTypes = {
      /**
       * Callback fired when the component mounts.
       * This is useful when you want to trigger an action programmatically.
       * It currently only supports `updateIndicator()` action.
       *
       * @param {object} actions This object contains all possible actions
       * that can be triggered programmatically.
       */
      action: propTypes.func,
  
      /**
       * If `true`, the tabs will be centered.
       * This property is intended for large views.
       */
      centered: propTypes.bool,
  
      /**
       * The content of the component.
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The component used for the root node.
       * Either a string to use a DOM element or a component.
       */
      component: propTypes.elementType,
  
      /**
       * Determines the color of the indicator.
       */
      indicatorColor: propTypes.oneOf(['secondary', 'primary']),
  
      /**
       * @ignore
       * from `withForwardRef`
       */
      innerRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  
      /**
       * Callback fired when the value changes.
       *
       * @param {object} event The event source of the callback
       * @param {any} value We default to the index of the child (number)
       */
      onChange: propTypes.func,
  
      /**
       * The component used to render the scroll buttons.
       */
      ScrollButtonComponent: propTypes.elementType,
  
      /**
       * Determine behavior of scroll buttons when tabs are set to scroll:
       *
       * - `auto` will only present them when not all the items are visible.
       * - `desktop` will only present them on medium and larger viewports.
       * - `on` will always present them.
       * - `off` will never present them.
       */
      scrollButtons: propTypes.oneOf(['auto', 'desktop', 'on', 'off']),
  
      /**
       * Properties applied to the `TabIndicator` element.
       */
      TabIndicatorProps: propTypes.object,
  
      /**
       * Determines the color of the `Tab`.
       */
      textColor: propTypes.oneOf(['secondary', 'primary', 'inherit']),
  
      /**
       * @ignore
       */
      theme: propTypes.object.isRequired,
  
      /**
       * The value of the currently selected `Tab`.
       * If you don't want any selected `Tab`, you can set this property to `false`.
       */
      value: propTypes.any,
  
      /**
       *  Determines additional display behavior of the tabs:
       *
       *  - `scrollable` will invoke scrolling properties and allow for horizontally
       *  scrolling (or swiping) of the tab bar.
       *  -`fullWidth` will make the tabs grow to use all the available space,
       *  which should be used for small views, like on mobile.
       *  - `standard` will render the default state.
       */
      variant: propTypes.oneOf(['standard', 'scrollable', 'fullWidth'])
    };
    Tabs.defaultProps = {
      centered: false,
      component: 'div',
      indicatorColor: 'secondary',
      ScrollButtonComponent: TabScrollButton$1,
      scrollButtons: 'auto',
      textColor: 'inherit',
      variant: 'standard'
    };
    var Tabs$1 = withStyles$1(styles$1F, {
      name: 'MuiTabs',
      withTheme: true
    })(withForwardedRef(Tabs));
  
    var variantComponent = {
      standard: Input$1,
      filled: FilledInput$1,
      outlined: OutlinedInput$1
    };
    var styles$1G = {
      /* Styles applied to the root element. */
      root: {}
    };
    /**
     * The `TextField` is a convenience wrapper for the most common cases (80%).
     * It cannot be all things to all people, otherwise the API would grow out of control.
     *
     * ## Advanced Configuration
     *
     * It's important to understand that the text field is a simple abstraction
     * on top of the following components:
     *
     * - [FormControl](/api/form-control/)
     * - [InputLabel](/api/input-label/)
     * - [FilledInput](/api/filled-input/)
     * - [OutlinedInput](/api/outlined-input/)
     * - [Input](/api/input/)
     * - [FormHelperText](/api/form-helper-text/)
     *
     * If you wish to alter the properties applied to the `input` element, you can do so as follows:
     *
     * ```jsx
     * const inputProps = {
     *   step: 300,
     * };
     *
     * return <TextField id="time" type="time" inputProps={inputProps} />;
     * ```
     *
     * For advanced cases, please look at the source of TextField by clicking on the
     * "Edit this page" button above. Consider either:
     *
     * - using the upper case props for passing values directly to the components
     * - using the underlying components directly as shown in the demos
     */
  
    var TextField = React__default.forwardRef(function TextField(props, ref) {
      var autoComplete = props.autoComplete,
          autoFocus = props.autoFocus,
          children = props.children,
          classes = props.classes,
          classNameProp = props.className,
          defaultValue = props.defaultValue,
          error = props.error,
          FormHelperTextProps = props.FormHelperTextProps,
          fullWidth = props.fullWidth,
          helperText = props.helperText,
          id = props.id,
          InputLabelProps = props.InputLabelProps,
          inputProps = props.inputProps,
          InputProps = props.InputProps,
          inputRef = props.inputRef,
          label = props.label,
          multiline = props.multiline,
          name = props.name,
          onBlur = props.onBlur,
          onChange = props.onChange,
          onFocus = props.onFocus,
          placeholder = props.placeholder,
          _props$required = props.required,
          required = _props$required === void 0 ? false : _props$required,
          rows = props.rows,
          rowsMax = props.rowsMax,
          _props$select = props.select,
          select = _props$select === void 0 ? false : _props$select,
          SelectProps = props.SelectProps,
          type = props.type,
          value = props.value,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'standard' : _props$variant,
          other = objectWithoutProperties(props, ["autoComplete", "autoFocus", "children", "classes", "className", "defaultValue", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "rowsMax", "select", "SelectProps", "type", "value", "variant"]);
  
      var _React$useState = React__default.useState(0),
          _React$useState2 = slicedToArray(_React$useState, 2),
          labelWidth = _React$useState2[0],
          setLabelWidth = _React$useState2[1];
  
      var labelRef = React__default.useRef(null);
      React__default.useEffect(function () {
        if (variant === 'outlined') {
          // #StrictMode ready
          var labelNode = ReactDOM__default.findDOMNode(labelRef.current);
          setLabelWidth(labelNode != null ? labelNode.offsetWidth : 0);
        }
      }, [variant, required]);
      warning_1(!select || Boolean(children), 'Material-UI: `children` must be passed when using the `TextField` component with `select`.');
      var InputMore = {};
  
      if (variant === 'outlined') {
        if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {
          InputMore.notched = InputLabelProps.shrink;
        }
  
        InputMore.labelWidth = labelWidth;
      }
  
      var helperTextId = helperText && id ? "".concat(id, "-helper-text") : undefined;
      var InputComponent = variantComponent[variant];
      var InputElement = React__default.createElement(InputComponent, _extends_1({
        "aria-describedby": helperTextId,
        autoComplete: autoComplete,
        autoFocus: autoFocus,
        defaultValue: defaultValue,
        fullWidth: fullWidth,
        multiline: multiline,
        name: name,
        rows: rows,
        rowsMax: rowsMax,
        type: type,
        value: value,
        id: id,
        inputRef: inputRef,
        onBlur: onBlur,
        onChange: onChange,
        onFocus: onFocus,
        placeholder: placeholder,
        inputProps: inputProps
      }, InputMore, InputProps));
      return React__default.createElement(FormControl$1, _extends_1({
        className: clsx(classes.root, classNameProp),
        error: error,
        fullWidth: fullWidth,
        ref: ref,
        required: required,
        variant: variant
      }, other), label && React__default.createElement(InputLabel$1, _extends_1({
        htmlFor: id,
        ref: labelRef
      }, InputLabelProps), label), select ? React__default.createElement(Select$1, _extends_1({
        "aria-describedby": helperTextId,
        value: value,
        input: InputElement
      }, SelectProps), children) : InputElement, helperText && React__default.createElement(FormHelperText$1, _extends_1({
        id: helperTextId
      }, FormHelperTextProps), helperText));
    });
    TextField.propTypes = {
      /**
       * This property helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: propTypes.string,
  
      /**
       * If `true`, the `input` element will be focused during the first mount.
       */
      autoFocus: propTypes.bool,
  
      /**
       * @ignore
       */
      children: propTypes.node,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * @ignore
       */
      className: propTypes.string,
  
      /**
       * The default value of the `input` element.
       */
      defaultValue: propTypes.any,
  
      /**
       * If `true`, the `input` element will be disabled.
       */
      disabled: propTypes.bool,
  
      /**
       * If `true`, the label will be displayed in an error state.
       */
      error: propTypes.bool,
  
      /**
       * Properties applied to the [`FormHelperText`](/api/form-helper-text/) element.
       */
      FormHelperTextProps: propTypes.object,
  
      /**
       * If `true`, the input will take up the full width of its container.
       */
      fullWidth: propTypes.bool,
  
      /**
       * The helper text content.
       */
      helperText: propTypes.node,
  
      /**
       * The id of the `input` element.
       * Use this property to make `label` and `helperText` accessible for screen readers.
       */
      id: propTypes.string,
  
      /**
       * Properties applied to the [`InputLabel`](/api/input-label/) element.
       */
      InputLabelProps: propTypes.object,
  
      /**
       * Properties applied to the Input element.
       * It will be a [`FilledInput`](/api/filled-input/),
       * [`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)
       * component depending on the `variant` prop value.
       */
      InputProps: propTypes.object,
  
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: propTypes.object,
  
      /**
       * This property can be used to pass a ref callback to the `input` element.
       */
      inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  
      /**
       * The label content.
       */
      label: propTypes.node,
  
      /**
       * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
       */
      margin: propTypes.oneOf(['none', 'dense', 'normal']),
  
      /**
       * If `true`, a textarea element will be rendered instead of an input.
       */
      multiline: propTypes.bool,
  
      /**
       * Name attribute of the `input` element.
       */
      name: propTypes.string,
  
      /**
       * @ignore
       */
      onBlur: propTypes.func,
  
      /**
       * Callback fired when the value is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value`.
       */
      onChange: propTypes.func,
  
      /**
       * @ignore
       */
      onFocus: propTypes.func,
  
      /**
       * The short hint displayed in the input before the user enters a value.
       */
      placeholder: propTypes.string,
  
      /**
       * If `true`, the label is displayed as required and the `input` element` will be required.
       */
      required: propTypes.bool,
  
      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: propTypes.oneOfType([propTypes.string, propTypes.number]),
  
      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      rowsMax: propTypes.oneOfType([propTypes.string, propTypes.number]),
  
      /**
       * Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.
       * If this option is set you must pass the options of the select as children.
       */
      select: propTypes.bool,
  
      /**
       * Properties applied to the [`Select`](/api/select/) element.
       */
      SelectProps: propTypes.object,
  
      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       */
      type: propTypes.string,
  
      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: propTypes.any,
  
      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['standard', 'outlined', 'filled'])
    };
    var TextField$1 = withStyles$1(styles$1G, {
      name: 'MuiTextField'
    })(TextField);
  
    var styles$1H = function styles(theme) {
      return {
        /* Styles applied to the Popper component. */
        popper: {
          zIndex: theme.zIndex.tooltip,
          pointerEvents: 'none',
          position: 'absolute',
          top: 0,
          left: 0,
          flip: false // disable jss-rtl plugin
  
        },
  
        /* Styles applied to the Popper component if `interactive={true}`. */
        popperInteractive: {
          pointerEvents: 'auto'
        },
  
        /* Styles applied to the tooltip (label wrapper) element. */
        tooltip: {
          backgroundColor: fade(theme.palette.grey[700], 0.9),
          borderRadius: theme.shape.borderRadius,
          color: theme.palette.common.white,
          fontFamily: theme.typography.fontFamily,
          padding: '4px 8px',
          fontSize: theme.typography.pxToRem(10),
          lineHeight: "".concat(theme.typography.round(14 / 10), "em"),
          maxWidth: 300,
          fontWeight: theme.typography.fontWeightMedium
        },
  
        /* Styles applied to the tooltip (label wrapper) element if the tooltip is opened by touch. */
        touch: {
          padding: '8px 16px',
          fontSize: theme.typography.pxToRem(14),
          lineHeight: "".concat(theme.typography.round(16 / 14), "em"),
          fontWeight: theme.typography.fontWeightRegular
        },
  
        /* Styles applied to the tooltip (label wrapper) element if `placement` contains "left". */
        tooltipPlacementLeft: defineProperty({
          transformOrigin: 'right center',
          margin: '0 24px '
        }, theme.breakpoints.up('sm'), {
          margin: '0 14px'
        }),
  
        /* Styles applied to the tooltip (label wrapper) element if `placement` contains "right". */
        tooltipPlacementRight: defineProperty({
          transformOrigin: 'left center',
          margin: '0 24px'
        }, theme.breakpoints.up('sm'), {
          margin: '0 14px'
        }),
  
        /* Styles applied to the tooltip (label wrapper) element if `placement` contains "top". */
        tooltipPlacementTop: defineProperty({
          transformOrigin: 'center bottom',
          margin: '24px 0'
        }, theme.breakpoints.up('sm'), {
          margin: '14px 0'
        }),
  
        /* Styles applied to the tooltip (label wrapper) element if `placement` contains "bottom". */
        tooltipPlacementBottom: defineProperty({
          transformOrigin: 'center top',
          margin: '24px 0'
        }, theme.breakpoints.up('sm'), {
          margin: '14px 0'
        })
      };
    };
  
    function Tooltip(props) {
      var children = props.children,
          classes = props.classes,
          _props$disableFocusLi = props.disableFocusListener,
          disableFocusListener = _props$disableFocusLi === void 0 ? false : _props$disableFocusLi,
          _props$disableHoverLi = props.disableHoverListener,
          disableHoverListener = _props$disableHoverLi === void 0 ? false : _props$disableHoverLi,
          _props$disableTouchLi = props.disableTouchListener,
          disableTouchListener = _props$disableTouchLi === void 0 ? false : _props$disableTouchLi,
          _props$enterDelay = props.enterDelay,
          enterDelay = _props$enterDelay === void 0 ? 0 : _props$enterDelay,
          _props$enterTouchDela = props.enterTouchDelay,
          enterTouchDelay = _props$enterTouchDela === void 0 ? 700 : _props$enterTouchDela,
          id = props.id,
          _props$interactive = props.interactive,
          interactive = _props$interactive === void 0 ? false : _props$interactive,
          _props$leaveDelay = props.leaveDelay,
          leaveDelay = _props$leaveDelay === void 0 ? 0 : _props$leaveDelay,
          _props$leaveTouchDela = props.leaveTouchDelay,
          leaveTouchDelay = _props$leaveTouchDela === void 0 ? 1500 : _props$leaveTouchDela,
          onClose = props.onClose,
          onOpen = props.onOpen,
          openProp = props.open,
          _props$placement = props.placement,
          placement = _props$placement === void 0 ? 'bottom' : _props$placement,
          PopperProps = props.PopperProps,
          theme = props.theme,
          title = props.title,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Grow$1 : _props$TransitionComp,
          TransitionProps = props.TransitionProps,
          other = objectWithoutProperties(props, ["children", "classes", "disableFocusListener", "disableHoverListener", "disableTouchListener", "enterDelay", "enterTouchDelay", "id", "interactive", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperProps", "theme", "title", "TransitionComponent", "TransitionProps"]);
  
      var _React$useState = React__default.useState(false),
          _React$useState2 = slicedToArray(_React$useState, 2),
          openState = _React$useState2[0],
          setOpenState = _React$useState2[1];
  
      var _React$useState3 = React__default.useState(0),
          _React$useState4 = slicedToArray(_React$useState3, 2),
          forceUpdate = _React$useState4[1];
  
      var _React$useState5 = React__default.useState(),
          _React$useState6 = slicedToArray(_React$useState5, 2),
          childNode = _React$useState6[0],
          setChildNode = _React$useState6[1];
  
      var ignoreNonTouchEvents = React__default.useRef(false);
  
      var _React$useRef = React__default.useRef(props.open != null),
          isControlled = _React$useRef.current;
  
      var defaultId = React__default.useRef();
      var closeTimer = React__default.useRef();
      var enterTimer = React__default.useRef();
      var leaveTimer = React__default.useRef();
      var touchTimer = React__default.useRef();
      React__default.useEffect(function () {
        warning_1(!(childNode && childNode.disabled && !isControlled && title !== '' && childNode.tagName.toLowerCase() === 'button'), ['Material-UI: you are providing a disabled `button` child to the Tooltip component.', 'A disabled element does not fire events.', "Tooltip needs to listen to the child element's events to display the title.", '', 'Place a `div` container on top of the element.'].join('\n'));
      }, [isControlled, title, childNode]);
      React__default.useEffect(function () {
        // Fallback to this default id when possible.
        // Use the random value for client side rendering only.
        // We can't use it server-side.
        if (!defaultId.current) {
          defaultId.current = "mui-tooltip-".concat(Math.round(Math.random() * 1e5));
        } // Rerender with defaultId and childNode.
  
  
        if (openProp) {
          forceUpdate(function (n) {
            return !n;
          });
        }
      }, [openProp]);
      React__default.useEffect(function () {
        return function () {
          clearTimeout(closeTimer.current);
          clearTimeout(enterTimer.current);
          clearTimeout(leaveTimer.current);
          clearTimeout(touchTimer.current);
        };
      }, []);
  
      var handleOpen = function handleOpen(event) {
        // The mouseover event will trigger for every nested element in the tooltip.
        // We can skip rerendering when the tooltip is already open.
        // We are using the mouseover event instead of the mouseenter event to fix a hide/show issue.
        if (!isControlled && !openState) {
          setOpenState(true);
        }
  
        if (onOpen) {
          onOpen(event);
        }
      };
  
      var handleEnter = function handleEnter(event) {
        var childrenProps = children.props;
  
        if (event.type === 'mouseover' && childrenProps.onMouseOver) {
          childrenProps.onMouseOver(event);
        }
  
        if (ignoreNonTouchEvents.current && event.type !== 'touchstart') {
          return;
        } // Remove the title ahead of time.
        // We don't want to wait for the next render commit.
        // We would risk displaying two tooltips at the same time (native + this one).
  
  
        if (childNode) {
          childNode.setAttribute('title', '');
        }
  
        clearTimeout(enterTimer.current);
        clearTimeout(leaveTimer.current);
  
        if (enterDelay) {
          event.persist();
          enterTimer.current = setTimeout(function () {
            handleOpen(event);
          }, enterDelay);
        } else {
          handleOpen(event);
        }
      };
  
      var _useIsFocusVisible = useIsFocusVisible(),
          isFocusVisible = _useIsFocusVisible.isFocusVisible,
          onBlurVisible = _useIsFocusVisible.onBlurVisible,
          focusVisibleRef = _useIsFocusVisible.ref;
  
      var _React$useState7 = React__default.useState(false),
          _React$useState8 = slicedToArray(_React$useState7, 2),
          childIsFocusVisible = _React$useState8[0],
          setChildIsFocusVisible = _React$useState8[1];
  
      function handleBlur() {
        if (childIsFocusVisible) {
          setChildIsFocusVisible(false);
          onBlurVisible();
        }
      }
  
      var handleFocus = function handleFocus(event) {
        // Workaround for https://github.com/facebook/react/issues/7769
        // The autoFocus of React might trigger the event before the componentDidMount.
        // We need to account for this eventuality.
        if (!childNode) {
          setChildNode(event.currentTarget);
        }
  
        if (isFocusVisible(event)) {
          setChildIsFocusVisible(true);
          handleEnter(event);
        }
  
        var childrenProps = children.props;
  
        if (childrenProps.onFocus) {
          childrenProps.onFocus(event);
        }
      };
  
      var handleClose = function handleClose(event) {
        if (!isControlled) {
          setOpenState(false);
        }
  
        if (onClose) {
          onClose(event);
        }
  
        clearTimeout(closeTimer.current);
        closeTimer.current = setTimeout(function () {
          ignoreNonTouchEvents.current = false;
        }, theme.transitions.duration.shortest);
      };
  
      var handleLeave = function handleLeave(event) {
        var childrenProps = children.props;
  
        if (event.type === 'blur') {
          if (childrenProps.onBlur) {
            childrenProps.onBlur(event);
          }
  
          handleBlur(event);
        }
  
        if (event.type === 'mouseleave' && childrenProps.onMouseLeave) {
          childrenProps.onMouseLeave(event);
        }
  
        clearTimeout(enterTimer.current);
        clearTimeout(leaveTimer.current);
  
        if (leaveDelay) {
          event.persist();
          leaveTimer.current = setTimeout(function () {
            handleClose(event);
          }, leaveDelay);
        } else {
          handleClose(event);
        }
      };
  
      var handleTouchStart = function handleTouchStart(event) {
        ignoreNonTouchEvents.current = true;
        var childrenProps = children.props;
  
        if (childrenProps.onTouchStart) {
          childrenProps.onTouchStart(event);
        }
  
        clearTimeout(leaveTimer.current);
        clearTimeout(closeTimer.current);
        clearTimeout(touchTimer.current);
        event.persist();
        touchTimer.current = setTimeout(function () {
          handleEnter(event);
        }, enterTouchDelay);
      };
  
      var handleTouchEnd = function handleTouchEnd(event) {
        if (children.props.onTouchEnd) {
          children.props.onTouchEnd(event);
        }
  
        clearTimeout(touchTimer.current);
        clearTimeout(leaveTimer.current);
        event.persist();
        leaveTimer.current = setTimeout(function () {
          handleClose(event);
        }, leaveTouchDelay);
      }; // can be removed once we drop support for non ref forwarding class components
  
  
      var handleOwnRef = useForkRef(React__default.useCallback(function (instance) {
        // #StrictMode ready
        setChildNode(ReactDOM__default.findDOMNode(instance));
      }, []), focusVisibleRef);
      var handleRef = useForkRef(children.ref, handleOwnRef);
      var open = isControlled ? openProp : openState; // There is no point in displaying an empty tooltip.
  
      if (title === '') {
        open = false;
      } // For accessibility and SEO concerns, we render the title to the DOM node when
      // the tooltip is hidden. However, we have made a tradeoff when
      // `disableHoverListener` is set. This title logic is disabled.
      // It's allowing us to keep the implementation size minimal.
      // We are open to change the tradeoff.
  
  
      var shouldShowNativeTitle = !open && !disableHoverListener;
  
      var childrenProps = _extends_1({
        'aria-describedby': open ? id || defaultId.current : null,
        title: shouldShowNativeTitle && typeof title === 'string' ? title : null
      }, other, children.props, {
        className: clsx(other.className, children.props.className)
      });
  
      if (!disableTouchListener) {
        childrenProps.onTouchStart = handleTouchStart;
        childrenProps.onTouchEnd = handleTouchEnd;
      }
  
      if (!disableHoverListener) {
        childrenProps.onMouseOver = handleEnter;
        childrenProps.onMouseLeave = handleLeave;
      }
  
      if (!disableFocusListener) {
        childrenProps.onFocus = handleFocus;
        childrenProps.onBlur = handleLeave;
      }
  
      var interactiveWrapperListeners = interactive ? {
        onMouseOver: childrenProps.onMouseOver,
        onMouseLeave: childrenProps.onMouseLeave,
        onFocus: childrenProps.onFocus,
        onBlur: childrenProps.onBlur
      } : {};
      warning_1(!children.props.title, ['Material-UI: you have provided a `title` property to the child of <Tooltip />.', "Remove this title property `".concat(children.props.title, "` or the Tooltip component.")].join('\n'));
      return React__default.createElement(React__default.Fragment, null, React__default.cloneElement(children, _extends_1({
        ref: handleRef
      }, childrenProps)), React__default.createElement(Popper$1, _extends_1({
        className: clsx(classes.popper, interactive && classes.popperInteractive),
        placement: placement,
        anchorEl: childNode,
        open: childNode ? open : false,
        id: childrenProps['aria-describedby'],
        transition: true
      }, interactiveWrapperListeners, PopperProps), function (_ref) {
        var placementInner = _ref.placement,
            TransitionPropsInner = _ref.TransitionProps;
        return React__default.createElement(TransitionComponent, _extends_1({
          timeout: theme.transitions.duration.shorter
        }, TransitionPropsInner, TransitionProps), React__default.createElement("div", {
          className: clsx(classes.tooltip, classes["tooltipPlacement".concat(capitalize(placementInner.split('-')[0]))], ignoreNonTouchEvents.current && classes.touch)
        }, title));
      }));
    }
  
    Tooltip.propTypes = {
      /**
       * Tooltip reference element.
       */
      children: elementAcceptingRef.isRequired,
  
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,
  
      /**
       * Do not respond to focus events.
       */
      disableFocusListener: propTypes.bool,
  
      /**
       * Do not respond to hover events.
       */
      disableHoverListener: propTypes.bool,
  
      /**
       * Do not respond to long press touch events.
       */
      disableTouchListener: propTypes.bool,
  
      /**
       * The number of milliseconds to wait before showing the tooltip.
       * This property won't impact the enter touch delay (`enterTouchDelay`).
       */
      enterDelay: propTypes.number,
  
      /**
       * The number of milliseconds a user must touch the element before showing the tooltip.
       */
      enterTouchDelay: propTypes.number,
  
      /**
       * The relationship between the tooltip and the wrapper component is not clear from the DOM.
       * This property is used with aria-describedby to solve the accessibility issue.
       * If you don't provide this property. It falls back to a randomly generated id.
       */
      id: propTypes.string,
  
      /**
       * Makes a tooltip interactive, i.e. will not close when the user
       * hovers over the tooltip before the `leaveDelay` is expired.
       */
      interactive: propTypes.bool,
  
      /**
       * The number of milliseconds to wait before hiding the tooltip.
       * This property won't impact the leave touch delay (`leaveTouchDelay`).
       */
      leaveDelay: propTypes.number,
  
      /**
       * The number of milliseconds after the user stops touching an element before hiding the tooltip.
       */
      leaveTouchDelay: propTypes.number,
  
      /**
       * Callback fired when the tooltip requests to be closed.
       *
       * @param {object} event The event source of the callback
       */
      onClose: propTypes.func,
  
      /**
       * Callback fired when the tooltip requests to be open.
       *
       * @param {object} event The event source of the callback
       */
      onOpen: propTypes.func,
  
      /**
       * If `true`, the tooltip is shown.
       */
      open: propTypes.bool,
  
      /**
       * Tooltip placement.
       */
      placement: propTypes.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),
  
      /**
       * Properties applied to the [`Popper`](/api/popper/) element.
       */
      PopperProps: propTypes.object,
  
      /**
       * @ignore
       */
      theme: propTypes.object.isRequired,
  
      /**
       * Tooltip title. Zero-length titles string are never displayed.
       */
      title: propTypes.node.isRequired,
  
      /**
       * The component used for the transition.
       */
      TransitionComponent: propTypes.elementType,
  
      /**
       * Properties applied to the `Transition` element.
       */
      TransitionProps: propTypes.object
    };
    var Tooltip$1 = withStyles$1(styles$1H, {
      name: 'MuiTooltip',
      withTheme: true
    })(Tooltip);
  
    function getScrollY(ref) {
      return ref.pageYOffset !== undefined ? ref.pageYOffset : ref.scrollTop;
    }
  
    function defaultTrigger(event, store, options) {
      var _options$disableHyste = options.disableHysteresis,
          disableHysteresis = _options$disableHyste === void 0 ? false : _options$disableHyste,
          _options$threshold = options.threshold,
          threshold = _options$threshold === void 0 ? 100 : _options$threshold;
      var previous = store.current;
      store.current = event ? getScrollY(event.currentTarget) : previous;
  
      if (!disableHysteresis && previous !== undefined) {
        if (store.current < previous) {
          return false;
        }
      }
  
      return store.current > threshold;
    }
  
    var defaultTarget = typeof window !== 'undefined' ? window : null;
    function useScrollTrigger() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  
      var _options$getTrigger = options.getTrigger,
          getTrigger = _options$getTrigger === void 0 ? defaultTrigger : _options$getTrigger,
          _options$target = options.target,
          target = _options$target === void 0 ? defaultTarget : _options$target,
          other = objectWithoutProperties(options, ["getTrigger", "target"]);
  
      var store = React__default.useRef();
  
      var _React$useState = React__default.useState(function () {
        return getTrigger(null, store, other);
      }),
          _React$useState2 = slicedToArray(_React$useState, 2),
          trigger = _React$useState2[0],
          setTrigger = _React$useState2[1];
  
      React__default.useEffect(function () {
        var handleScroll = function handleScroll(event) {
          setTrigger(getTrigger(event, store, other));
        };
  
        handleScroll(null); // Re-evaluate trigger when dependencies change
  
        target.addEventListener('scroll', handleScroll);
        return function () {
          target.removeEventListener('scroll', handleScroll);
        }; // See Option 3. https://github.com/facebook/react/issues/14476#issuecomment-471199055
        // eslint-disable-next-line react-hooks/exhaustive-deps
      }, [target, getTrigger, JSON.stringify(other)]);
      return trigger;
    }
  
    /**
     * Dialog will responsively be full screen *at or below* the given breakpoint
     * (defaults to 'sm' for mobile devices).
     * Notice that this Higher-order Component is incompatible with server-side rendering.
     */
  
    var withMobileDialog = function withMobileDialog() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return function (Component) {
        var _options$breakpoint = options.breakpoint,
            breakpoint = _options$breakpoint === void 0 ? 'sm' : _options$breakpoint;
  
        function WithMobileDialog(props) {
          return React__default.createElement(Component, _extends_1({
            fullScreen: isWidthDown(breakpoint, props.width)
          }, props));
        }
  
        WithMobileDialog.propTypes = {
          width: propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']).isRequired
        };
        return withWidth()(WithMobileDialog);
      };
    };
  
    var styles$1I = {
      entering: {
        transform: 'scale(1)'
      },
      entered: {
        transform: 'scale(1)'
      }
    };
    var defaultTimeout$2 = {
      enter: duration.enteringScreen,
      exit: duration.leavingScreen
    };
    /**
     * The Zoom transition can be used for the floating variant of the
     * [Button](/components/buttons/#floating-action-buttons) component.
     * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
     */
  
    var Zoom = React__default.forwardRef(function Zoom(props, ref) {
      var children = props.children,
          inProp = props.in,
          onEnter = props.onEnter,
          onExit = props.onExit,
          style = props.style,
          theme = props.theme,
          _props$timeout = props.timeout,
          timeout = _props$timeout === void 0 ? defaultTimeout$2 : _props$timeout,
          other = objectWithoutProperties(props, ["children", "in", "onEnter", "onExit", "style", "theme", "timeout"]);
  
      var handleRef = useForkRef(children.ref, ref);
  
      var handleEnter = function handleEnter(node) {
        reflow(node); // So the animation always start from the start.
  
        var transitionProps = getTransitionProps({
          style: style,
          timeout: timeout
        }, {
          mode: 'enter'
        });
        node.style.webkitTransition = theme.transitions.create('transform', transitionProps);
        node.style.transition = theme.transitions.create('transform', transitionProps);
  
        if (onEnter) {
          onEnter(node);
        }
      };
  
      var handleExit = function handleExit(node) {
        var transitionProps = getTransitionProps({
          style: style,
          timeout: timeout
        }, {
          mode: 'exit'
        });
        node.style.webkitTransition = theme.transitions.create('transform', transitionProps);
        node.style.transition = theme.transitions.create('transform', transitionProps);
  
        if (onExit) {
          onExit(node);
        }
      };
  
      return React__default.createElement(Transition, _extends_1({
        appear: true,
        in: inProp,
        onEnter: handleEnter,
        onExit: handleExit,
        timeout: timeout
      }, other), function (state, childProps) {
        return React__default.cloneElement(children, _extends_1({
          style: _extends_1({
            transform: 'scale(0)',
            visibility: state === 'exited' && !inProp ? 'hidden' : undefined
          }, styles$1I[state], style, children.props.style),
          ref: handleRef
        }, childProps));
      });
    });
    Zoom.propTypes = {
      /**
       * A single child content element.
       */
      children: propTypes.element,
  
      /**
       * If `true`, the component will transition in.
       */
      in: propTypes.bool,
  
      /**
       * @ignore
       */
      onEnter: propTypes.func,
  
      /**
       * @ignore
       */
      onExit: propTypes.func,
  
      /**
       * @ignore
       */
      style: propTypes.object,
  
      /**
       * @ignore
       */
      theme: propTypes.object.isRequired,
  
      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      timeout: propTypes.oneOfType([propTypes.number, propTypes.shape({
        enter: propTypes.number,
        exit: propTypes.number
      })])
    };
    var Zoom$1 = withTheme$1(Zoom);
  
    exports.AppBar = AppBar$1;
    exports.Avatar = Avatar$1;
    exports.Backdrop = Backdrop$1;
    exports.Badge = Badge$1;
    exports.BottomNavigation = BottomNavigation$1;
    exports.BottomNavigationAction = BottomNavigationAction$1;
    exports.Box = Box;
    exports.Breadcrumbs = Breadcrumbs$1;
    exports.Button = Button$1;
    exports.ButtonBase = ButtonBase$1;
    exports.ButtonGroup = ButtonGroup$1;
    exports.Card = Card$1;
    exports.CardActionArea = CardActionArea$1;
    exports.CardActions = CardActions$1;
    exports.CardContent = CardContent$1;
    exports.CardHeader = CardHeader$1;
    exports.CardMedia = CardMedia$1;
    exports.Checkbox = Checkbox$1;
    exports.Chip = Chip$1;
    exports.CircularProgress = CircularProgress$1;
    exports.ClickAwayListener = ClickAwayListener;
    exports.Collapse = Collapse$1;
    exports.Container = Container$1;
    exports.CssBaseline = CssBaseline;
    exports.Dialog = Dialog$1;
    exports.DialogActions = DialogActions$1;
    exports.DialogContent = DialogContent$1;
    exports.DialogContentText = DialogContentText$1;
    exports.DialogTitle = DialogTitle$1;
    exports.Divider = Divider$1;
    exports.Drawer = Drawer$1;
    exports.ExpansionPanel = ExpansionPanel$1;
    exports.ExpansionPanelActions = ExpansionPanelActions$1;
    exports.ExpansionPanelDetails = ExpansionPanelDetails$1;
    exports.ExpansionPanelSummary = ExpansionPanelSummary$1;
    exports.Fab = Fab$1;
    exports.Fade = Fade$1;
    exports.FilledInput = FilledInput$1;
    exports.FormControl = FormControl$1;
    exports.FormControlLabel = FormControlLabel$1;
    exports.FormGroup = FormGroup$1;
    exports.FormHelperText = FormHelperText$1;
    exports.FormLabel = FormLabel$1;
    exports.Grid = StyledGrid;
    exports.GridList = GridList$1;
    exports.GridListTile = GridListTile$1;
    exports.GridListTileBar = GridListTileBar$1;
    exports.Grow = Grow$1;
    exports.Hidden = Hidden;
    exports.Icon = Icon$1;
    exports.IconButton = IconButton$1;
    exports.Input = Input$1;
    exports.InputAdornment = InputAdornment$1;
    exports.InputBase = InputBase$1;
    exports.InputLabel = InputLabel$1;
    exports.LinearProgress = LinearProgress$1;
    exports.Link = Link$1;
    exports.List = List$1;
    exports.ListItem = ListItem$1;
    exports.ListItemAvatar = ListItemAvatar$1;
    exports.ListItemIcon = ListItemIcon$1;
    exports.ListItemSecondaryAction = ListItemSecondaryAction$1;
    exports.ListItemText = ListItemText$1;
    exports.ListSubheader = ListSubheader$1;
    exports.Menu = Menu$1;
    exports.MenuItem = MenuItem$1;
    exports.MenuList = MenuList;
    exports.MobileStepper = MobileStepper$1;
    exports.Modal = Modal$1;
    exports.ModalManager = ModalManager;
    exports.MuiThemeProvider = ThemeProvider;
    exports.NativeSelect = NativeSelect$1;
    exports.NoSsr = NoSsr;
    exports.OutlinedInput = OutlinedInput$1;
    exports.Paper = Paper$1;
    exports.Popover = Popover$1;
    exports.Popper = Popper$1;
    exports.Portal = Portal;
    exports.Radio = Radio$1;
    exports.RadioGroup = RadioGroup;
    exports.RootRef = RootRef;
    exports.Select = Select$1;
    exports.Slide = Slide$1;
    exports.Snackbar = Snackbar$1;
    exports.SnackbarContent = SnackbarContent$1;
    exports.Step = Step$1;
    exports.StepButton = StepButton$1;
    exports.StepConnector = StepConnector$1;
    exports.StepContent = StepContent$1;
    exports.StepIcon = StepIcon$1;
    exports.StepLabel = StepLabel$1;
    exports.Stepper = Stepper$1;
    exports.SvgIcon = SvgIcon$1;
    exports.SwipeableDrawer = SwipeableDrawer$1;
    exports.Switch = Switch$1;
    exports.Tab = Tab$1;
    exports.Table = Table$1;
    exports.TableBody = TableBody$1;
    exports.TableCell = TableCell$1;
    exports.TableFooter = TableFooter$1;
    exports.TableHead = TableHead$1;
    exports.TablePagination = TablePagination$1;
    exports.TableRow = TableRow$1;
    exports.TableSortLabel = TableSortLabel$1;
    exports.Tabs = Tabs$1;
    exports.TextField = TextField$1;
    exports.Toolbar = Toolbar$1;
    exports.Tooltip = Tooltip$1;
    exports.Typography = Typography$1;
    exports.Zoom = Zoom$1;
    exports.colors = index;
    exports.createMuiTheme = createMuiTheme;
    exports.createStyles = createStyles$1;
    exports.makeStyles = makeStyles$1;
    exports.styled = styled$1;
    exports.useMediaQuery = useMediaQuery;
    exports.useScrollTrigger = useScrollTrigger;
    exports.withMobileDialog = withMobileDialog;
    exports.withStyles = withStyles$1;
    exports.withTheme = withTheme$1;
    exports.withWidth = withWidth;
  
    Object.defineProperty(exports, '__esModule', { value: true });
  
  }));
!(function(e, t) {
    "object" == typeof exports && "undefined" != typeof module
        ? t(
              exports,
              require("react"),
              require("prop-types"),
              require("classnames"),
              require("date-fns/isDate"),
              require("date-fns/isValid"),
              require("date-fns/format"),
              require("date-fns/addMinutes"),
              require("date-fns/addHours"),
              require("date-fns/addDays"),
              require("date-fns/addWeeks"),
              require("date-fns/addMonths"),
              require("date-fns/addYears"),
              require("date-fns/subMinutes"),
              require("date-fns/subHours"),
              require("date-fns/subDays"),
              require("date-fns/subWeeks"),
              require("date-fns/subMonths"),
              require("date-fns/subYears"),
              require("date-fns/getSeconds"),
              require("date-fns/getMinutes"),
              require("date-fns/getHours"),
              require("date-fns/getDay"),
              require("date-fns/getDate"),
              require("date-fns/getMonth"),
              require("date-fns/getYear"),
              require("date-fns/getTime"),
              require("date-fns/setSeconds"),
              require("date-fns/setMinutes"),
              require("date-fns/setHours"),
              require("date-fns/setMonth"),
              require("date-fns/setYear"),
              require("date-fns/min"),
              require("date-fns/max"),
              require("date-fns/differenceInCalendarDays"),
              require("date-fns/differenceInCalendarMonths"),
              require("date-fns/differenceInCalendarWeeks"),
              require("date-fns/setDayOfYear"),
              require("date-fns/startOfDay"),
              require("date-fns/startOfWeek"),
              require("date-fns/startOfMonth"),
              require("date-fns/startOfYear"),
              require("date-fns/endOfWeek"),
              require("date-fns/endOfMonth"),
              require("date-fns/isEqual"),
              require("date-fns/isSameDay"),
              require("date-fns/isSameMonth"),
              require("date-fns/isSameYear"),
              require("date-fns/isAfter"),
              require("date-fns/isBefore"),
              require("date-fns/isWithinInterval"),
              require("date-fns/toDate"),
              require("date-fns/parse"),
              require("react-onclickoutside"),
              require("react-popper")
          )
        : "function" == typeof define && define.amd
        ? define([
              "exports",
              "react",
              "prop-types",
              "classnames",
              "date-fns/isDate",
              "date-fns/isValid",
              "date-fns/format",
              "date-fns/addMinutes",
              "date-fns/addHours",
              "date-fns/addDays",
              "date-fns/addWeeks",
              "date-fns/addMonths",
              "date-fns/addYears",
              "date-fns/subMinutes",
              "date-fns/subHours",
              "date-fns/subDays",
              "date-fns/subWeeks",
              "date-fns/subMonths",
              "date-fns/subYears",
              "date-fns/getSeconds",
              "date-fns/getMinutes",
              "date-fns/getHours",
              "date-fns/getDay",
              "date-fns/getDate",
              "date-fns/getMonth",
              "date-fns/getYear",
              "date-fns/getTime",
              "date-fns/setSeconds",
              "date-fns/setMinutes",
              "date-fns/setHours",
              "date-fns/setMonth",
              "date-fns/setYear",
              "date-fns/min",
              "date-fns/max",
              "date-fns/differenceInCalendarDays",
              "date-fns/differenceInCalendarMonths",
              "date-fns/differenceInCalendarWeeks",
              "date-fns/setDayOfYear",
              "date-fns/startOfDay",
              "date-fns/startOfWeek",
              "date-fns/startOfMonth",
              "date-fns/startOfYear",
              "date-fns/endOfWeek",
              "date-fns/endOfMonth",
              "date-fns/isEqual",
              "date-fns/isSameDay",
              "date-fns/isSameMonth",
              "date-fns/isSameYear",
              "date-fns/isAfter",
              "date-fns/isBefore",
              "date-fns/isWithinInterval",
              "date-fns/toDate",
              "date-fns/parse",
              "react-onclickoutside",
              "react-popper"
          ], t)
        : t(
              (e.DatePicker = {}),
              e.React,
              e.PropTypes,
              e.classNames,
              e.isDate,
              e.isValidDate,
              e.format,
              e.addMinutes,
              e.addHours,
              e.addDays,
              e.addWeeks,
              e.addMonths,
              e.addYears,
              e.subMinutes,
              e.subHours,
              e.subDays,
              e.subWeeks,
              e.subMonths,
              e.subYears,
              e.getSeconds,
              e.getMinutes,
              e.getHours,
              e.getDay,
              e.getDate,
              e.getMonth,
              e.getYear,
              e.getTime,
              e.setSeconds,
              e.setMinutes,
              e.setHours,
              e.setMonth,
              e.setYear,
              e.min,
              e.max,
              e.differenceInCalendarDays,
              e.differenceInCalendarMonths,
              e.differenceInCalendarWeeks,
              e.setDayOfYear,
              e.startOfDay,
              e.startOfWeek,
              e.startOfMonth,
              e.startOfYear,
              e.endOfWeek,
              e.endOfMonth,
              e.dfIsEqual,
              e.dfIsSameDay,
              e.dfIsSameMonth,
              e.dfIsSameYear,
              e.isAfter,
              e.isBefore,
              e.isWithinInterval,
              e.toDate,
              e.parse,
              e.onClickOutside,
              e.ReactPopper
          );
})(this, function(
    e,
    t,
    n,
    r,
    a,
    o,
    s,
    p,
    i,
    c,
    d,
    l,
    u,
    h,
    f,
    m,
    y,
    D,
    g,
    w,
    v,
    k,
    C,
    _,
    S,
    M,
    b,
    O,
    E,
    N,
    P,
    T,
    Y,
    x,
    I,
    W,
    L,
    q,
    F,
    B,
    H,
    R,
    j,
    V,
    A,
    K,
    U,
    z,
    G,
    J,
    Q,
    X,
    Z,
    $,
    ee
) {
    "use strict";
    function te(e) {
        var t = e ? X(e) : new Date();
        return ne(t) ? t : null;
    }
    function ne(e) {
        return o(e) && G(e, new Date("1/1/1000"));
    }
    function re(e, t, n) {
        if ("en" === n) return s(e, t, { awareOfUnicodeTokens: !0 });
        var r = he(n);
        return (
            n &&
                !r &&
                console.warn(
                    'A locale object was not found for the provided string ["' +
                        n +
                        '"].'
                ),
            !r && ue() && he(ue()) && (r = he(ue())),
            s(e, t, { locale: r || null, awareOfUnicodeTokens: !0 })
        );
    }
    function ae(e, t) {
        var n = t.hour,
            r = void 0 === n ? 0 : n,
            a = t.minute,
            o = void 0 === a ? 0 : a,
            s = t.second;
        return N(E(O(e, void 0 === s ? 0 : s), o), r);
    }
    function oe(e, t) {
        var n = he(t ? t : ue());
        return B(e, { locale: n });
    }
    function se(e) {
        return H(e);
    }
    function pe(e, t) {
        return e && t ? z(e, t) : !e && !t;
    }
    function ie(e, t) {
        return e && t ? U(e, t) : !e && !t;
    }
    function ce(e, t) {
        return e && t ? K(e, t) : !e && !t;
    }
    function de(e, t) {
        return e && t ? A(e, t) : !e && !t;
    }
    function le(e, t, n) {
        var r = void 0;
        try {
            r = Q(e, { start: t, end: n });
        } catch (e) {
            r = !1;
        }
        return r;
    }
    function ue() {
        return ("undefined" != typeof window ? window : global).__localeId__;
    }
    function he(e) {
        if ("string" == typeof e) {
            var t = "undefined" != typeof window ? window : global;
            return t.__localeData__ ? t.__localeData__[e] : null;
        }
        return e;
    }
    function fe(e, t) {
        return re(P(te(), e), "LLL", t);
    }
    function me(e) {
        var t =
                arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : {},
            n = t.excludeDates,
            r = t.includeDates,
            a = t.filterDate;
        return (
            De(e, { minDate: t.minDate, maxDate: t.maxDate }) ||
            (n &&
                n.some(function(t) {
                    return ce(e, t);
                })) ||
            (r &&
                !r.some(function(t) {
                    return ce(e, t);
                })) ||
            (a && !a(te(e))) ||
            !1
        );
    }
    function ye(e, t, n, r) {
        var a = M(e),
            o = S(e),
            s = M(t),
            p = S(t),
            i = M(r);
        return a === s && a === i
            ? n >= o && p >= n
            : s > a
            ? (i === a && n >= o) || (i === s && p >= n) || (s > i && i > a)
            : void 0;
    }
    function De(e) {
        var t =
                arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : {},
            n = t.minDate,
            r = t.maxDate;
        return (n && 0 > I(e, n)) || (r && I(e, r) > 0);
    }
    function ge(e, t) {
        for (var n = t.length, r = 0; n > r; r++)
            if (k(t[r]) === k(e) && v(t[r]) === v(e)) return !0;
        return !1;
    }
    function we(e, t) {
        var n = t.minTime,
            r = t.maxTime;
        if (!n || !r) throw Error("Both minTime and maxTime props required");
        var a = te(),
            o = N(E(a, v(e)), k(e)),
            s = N(E(a, v(n)), k(n)),
            p = N(E(a, v(r)), k(r)),
            i = void 0;
        try {
            i = !Q(o, { start: s, end: p });
        } catch (e) {
            i = !1;
        }
        return i;
    }
    function ve(e) {
        var t =
                arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : {},
            n = t.minDate,
            r = t.includeDates,
            a = D(e, 1);
        return (
            (n && W(n, a) > 0) ||
            (r &&
                r.every(function(e) {
                    return W(e, a) > 0;
                })) ||
            !1
        );
    }
    function ke(e) {
        var t =
                arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : {},
            n = t.maxDate,
            r = t.includeDates,
            a = l(e, 1);
        return (
            (n && W(a, n) > 0) ||
            (r &&
                r.every(function(e) {
                    return W(a, e) > 0;
                })) ||
            !1
        );
    }
    function Ce(e) {
        var t = e.minDate,
            n = e.includeDates;
        if (n && t) {
            var r = n.filter(function(e) {
                return I(e, t) >= 0;
            });
            return Y(r);
        }
        return n ? Y(n) : t;
    }
    function _e(e) {
        var t = e.maxDate,
            n = e.includeDates;
        if (n && t) {
            var r = n.filter(function(e) {
                return 0 >= I(e, t);
            });
            return x(r);
        }
        return n ? x(n) : t;
    }
    function Se() {
        for (
            var e =
                    arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : [],
                t =
                    arguments.length > 1 && void 0 !== arguments[1]
                        ? arguments[1]
                        : "react-datepicker__day--highlighted",
                n = new Map(),
                r = 0,
                o = e.length;
            o > r;
            r++
        ) {
            var s = e[r];
            if (a(s)) {
                var p = re(s, "MM.dd.yyyy"),
                    i = n.get(p) || [];
                i.includes(t) || (i.push(t), n.set(p, i));
            } else if ("object" === (void 0 === s ? "undefined" : Oe(s))) {
                var c = Object.keys(s),
                    d = c[0],
                    l = s[c[0]];
                if ("string" == typeof d && l.constructor === Array)
                    for (var u = 0, h = l.length; h > u; u++) {
                        var f = re(l[u], "MM.dd.yyyy"),
                            m = n.get(f) || [];
                        m.includes(d) || (m.push(d), n.set(f, m));
                    }
            }
        }
        return n;
    }
    function Me(e) {
        return 10 > e && (e = "0" + e), e;
    }
    function be(e) {
        var n = e.children,
            r = e.arrowProps;
        return t.createElement(
            "div",
            { className: e.className },
            t.createElement(
                "div",
                Pe(
                    { className: "react-datepicker__triangle" },
                    void 0 === r ? {} : r
                )
            ),
            n
        );
    }
    (t = t && t.hasOwnProperty("default") ? t.default : t),
        (n = n && n.hasOwnProperty("default") ? n.default : n),
        (r = r && r.hasOwnProperty("default") ? r.default : r),
        (a = a && a.hasOwnProperty("default") ? a.default : a),
        (o = o && o.hasOwnProperty("default") ? o.default : o),
        (s = s && s.hasOwnProperty("default") ? s.default : s),
        (p = p && p.hasOwnProperty("default") ? p.default : p),
        (i = i && i.hasOwnProperty("default") ? i.default : i),
        (c = c && c.hasOwnProperty("default") ? c.default : c),
        (d = d && d.hasOwnProperty("default") ? d.default : d),
        (l = l && l.hasOwnProperty("default") ? l.default : l),
        (u = u && u.hasOwnProperty("default") ? u.default : u),
        (h = h && h.hasOwnProperty("default") ? h.default : h),
        (f = f && f.hasOwnProperty("default") ? f.default : f),
        (m = m && m.hasOwnProperty("default") ? m.default : m),
        (y = y && y.hasOwnProperty("default") ? y.default : y),
        (D = D && D.hasOwnProperty("default") ? D.default : D),
        (g = g && g.hasOwnProperty("default") ? g.default : g),
        (w = w && w.hasOwnProperty("default") ? w.default : w),
        (v = v && v.hasOwnProperty("default") ? v.default : v),
        (k = k && k.hasOwnProperty("default") ? k.default : k),
        (C = C && C.hasOwnProperty("default") ? C.default : C),
        (_ = _ && _.hasOwnProperty("default") ? _.default : _),
        (S = S && S.hasOwnProperty("default") ? S.default : S),
        (M = M && M.hasOwnProperty("default") ? M.default : M),
        (b = b && b.hasOwnProperty("default") ? b.default : b),
        (O = O && O.hasOwnProperty("default") ? O.default : O),
        (E = E && E.hasOwnProperty("default") ? E.default : E),
        (N = N && N.hasOwnProperty("default") ? N.default : N),
        (P = P && P.hasOwnProperty("default") ? P.default : P),
        (T = T && T.hasOwnProperty("default") ? T.default : T),
        (Y = Y && Y.hasOwnProperty("default") ? Y.default : Y),
        (x = x && x.hasOwnProperty("default") ? x.default : x),
        (I = I && I.hasOwnProperty("default") ? I.default : I),
        (W = W && W.hasOwnProperty("default") ? W.default : W),
        (L = L && L.hasOwnProperty("default") ? L.default : L),
        (q = q && q.hasOwnProperty("default") ? q.default : q),
        (F = F && F.hasOwnProperty("default") ? F.default : F),
        (B = B && B.hasOwnProperty("default") ? B.default : B),
        (H = H && H.hasOwnProperty("default") ? H.default : H),
        (R = R && R.hasOwnProperty("default") ? R.default : R),
        (j = j && j.hasOwnProperty("default") ? j.default : j),
        (V = V && V.hasOwnProperty("default") ? V.default : V),
        (A = A && A.hasOwnProperty("default") ? A.default : A),
        (K = K && K.hasOwnProperty("default") ? K.default : K),
        (U = U && U.hasOwnProperty("default") ? U.default : U),
        (z = z && z.hasOwnProperty("default") ? z.default : z),
        (G = G && G.hasOwnProperty("default") ? G.default : G),
        (J = J && J.hasOwnProperty("default") ? J.default : J),
        (Q = Q && Q.hasOwnProperty("default") ? Q.default : Q),
        (X = X && X.hasOwnProperty("default") ? X.default : X),
        (Z = Z && Z.hasOwnProperty("default") ? Z.default : Z),
        ($ = $ && $.hasOwnProperty("default") ? $.default : $);
    var Oe =
            "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                ? function(e) {
                      return typeof e;
                  }
                : function(e) {
                      return e &&
                          "function" == typeof Symbol &&
                          e.constructor === Symbol &&
                          e !== Symbol.prototype
                          ? "symbol"
                          : typeof e;
                  },
        Ee = function(e, t) {
            if (!(e instanceof t))
                throw new TypeError("Cannot call a class as a function");
        },
        Ne = (function() {
            function e(e, t) {
                for (var n = 0; t.length > n; n++) {
                    var r = t[n];
                    (r.enumerable = r.enumerable || !1),
                        (r.configurable = !0),
                        "value" in r && (r.writable = !0),
                        Object.defineProperty(e, r.key, r);
                }
            }
            return function(t, n, r) {
                return n && e(t.prototype, n), r && e(t, r), t;
            };
        })(),
        Pe =
            Object.assign ||
            function(e) {
                for (var t = 1; arguments.length > t; t++) {
                    var n = arguments[t];
                    for (var r in n)
                        Object.prototype.hasOwnProperty.call(n, r) &&
                            (e[r] = n[r]);
                }
                return e;
            },
        Te = function(e, t) {
            if ("function" != typeof t && null !== t)
                throw new TypeError(
                    "Super expression must either be null or a function, not " +
                        typeof t
                );
            (e.prototype = Object.create(t && t.prototype, {
                constructor: {
                    value: e,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            })),
                t &&
                    (Object.setPrototypeOf
                        ? Object.setPrototypeOf(e, t)
                        : (e.__proto__ = t));
        },
        Ye = function(e, t) {
            if (!e)
                throw new ReferenceError(
                    "this hasn't been initialised - super() hasn't been called"
                );
            return !t || ("object" != typeof t && "function" != typeof t)
                ? e
                : t;
        },
        xe = $(
            (function(e) {
                function n(r) {
                    Ee(this, n);
                    var a = Ye(this, e.call(this, r));
                    (a.renderOptions = function() {
                        var e = a.props.year,
                            n = a.state.yearsList.map(function(n) {
                                return t.createElement(
                                    "div",
                                    {
                                        className:
                                            e === n
                                                ? "react-datepicker__year-option react-datepicker__year-option--selected_year"
                                                : "react-datepicker__year-option",
                                        key: n,
                                        ref: n,
                                        onClick: a.onChange.bind(a, n)
                                    },
                                    e === n
                                        ? t.createElement(
                                              "span",
                                              {
                                                  className:
                                                      "react-datepicker__year-option--selected"
                                              },
                                              "✓"
                                          )
                                        : "",
                                    n
                                );
                            }),
                            r = a.props.minDate ? M(a.props.minDate) : null,
                            o = a.props.maxDate ? M(a.props.maxDate) : null;
                        return (
                            (o &&
                                a.state.yearsList.find(function(e) {
                                    return e === o;
                                })) ||
                                n.unshift(
                                    t.createElement(
                                        "div",
                                        {
                                            className:
                                                "react-datepicker__year-option",
                                            ref: "upcoming",
                                            key: "upcoming",
                                            onClick: a.incrementYears
                                        },
                                        t.createElement("a", {
                                            className:
                                                "react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-upcoming"
                                        })
                                    )
                                ),
                            (r &&
                                a.state.yearsList.find(function(e) {
                                    return e === r;
                                })) ||
                                n.push(
                                    t.createElement(
                                        "div",
                                        {
                                            className:
                                                "react-datepicker__year-option",
                                            ref: "previous",
                                            key: "previous",
                                            onClick: a.decrementYears
                                        },
                                        t.createElement("a", {
                                            className:
                                                "react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-previous"
                                        })
                                    )
                                ),
                            n
                        );
                    }),
                        (a.onChange = function(e) {
                            a.props.onChange(e);
                        }),
                        (a.handleClickOutside = function() {
                            a.props.onCancel();
                        }),
                        (a.shiftYears = function(e) {
                            var t = a.state.yearsList.map(function(t) {
                                return t + e;
                            });
                            a.setState({ yearsList: t });
                        }),
                        (a.incrementYears = function() {
                            return a.shiftYears(1);
                        }),
                        (a.decrementYears = function() {
                            return a.shiftYears(-1);
                        });
                    return (
                        (a.state = {
                            yearsList: (function(e, t, n, r) {
                                for (var a = [], o = 0; 2 * t + 1 > o; o++) {
                                    var s = e + t - o,
                                        p = !0;
                                    n && (p = M(n) <= s),
                                        r && p && (p = M(r) >= s),
                                        p && a.push(s);
                                }
                                return a;
                            })(
                                a.props.year,
                                r.yearDropdownItemNumber ||
                                    (r.scrollableYearDropdown ? 10 : 5),
                                a.props.minDate,
                                a.props.maxDate
                            )
                        }),
                        a
                    );
                }
                return (
                    Te(n, e),
                    (n.prototype.render = function() {
                        var e = r({
                            "react-datepicker__year-dropdown": !0,
                            "react-datepicker__year-dropdown--scrollable": this
                                .props.scrollableYearDropdown
                        });
                        return t.createElement(
                            "div",
                            { className: e },
                            this.renderOptions()
                        );
                    }),
                    n
                );
            })(t.Component)
        ),
        Ie = (function(e) {
            function n() {
                var r, a, o;
                Ee(this, n);
                for (var s = arguments.length, p = Array(s), i = 0; s > i; i++)
                    p[i] = arguments[i];
                return (
                    (r = a = Ye(this, e.call.apply(e, [this].concat(p)))),
                    (a.state = { dropdownVisible: !1 }),
                    (a.renderSelectOptions = function() {
                        for (
                            var e = a.props.minDate ? M(a.props.minDate) : 1900,
                                n = a.props.maxDate ? M(a.props.maxDate) : 2100,
                                r = [],
                                o = e;
                            n >= o;
                            o++
                        )
                            r.push(
                                t.createElement(
                                    "option",
                                    { key: o, value: o },
                                    o
                                )
                            );
                        return r;
                    }),
                    (a.onSelectChange = function(e) {
                        a.onChange(e.target.value);
                    }),
                    (a.renderSelectMode = function() {
                        return t.createElement(
                            "select",
                            {
                                value: a.props.year,
                                className: "react-datepicker__year-select",
                                onChange: a.onSelectChange
                            },
                            a.renderSelectOptions()
                        );
                    }),
                    (a.renderReadView = function(e) {
                        return t.createElement(
                            "div",
                            {
                                key: "read",
                                style: { visibility: e ? "visible" : "hidden" },
                                className: "react-datepicker__year-read-view",
                                onClick: function(e) {
                                    return a.toggleDropdown(e);
                                }
                            },
                            t.createElement("span", {
                                className:
                                    "react-datepicker__year-read-view--down-arrow"
                            }),
                            t.createElement(
                                "span",
                                {
                                    className:
                                        "react-datepicker__year-read-view--selected-year"
                                },
                                a.props.year
                            )
                        );
                    }),
                    (a.renderDropdown = function() {
                        return t.createElement(xe, {
                            key: "dropdown",
                            ref: "options",
                            year: a.props.year,
                            onChange: a.onChange,
                            onCancel: a.toggleDropdown,
                            minDate: a.props.minDate,
                            maxDate: a.props.maxDate,
                            scrollableYearDropdown:
                                a.props.scrollableYearDropdown,
                            yearDropdownItemNumber:
                                a.props.yearDropdownItemNumber
                        });
                    }),
                    (a.renderScrollMode = function() {
                        var e = a.state.dropdownVisible,
                            t = [a.renderReadView(!e)];
                        return e && t.unshift(a.renderDropdown()), t;
                    }),
                    (a.onChange = function(e) {
                        a.toggleDropdown(),
                            e !== a.props.year && a.props.onChange(e);
                    }),
                    (a.toggleDropdown = function(e) {
                        a.setState(
                            { dropdownVisible: !a.state.dropdownVisible },
                            function() {
                                a.props.adjustDateOnChange &&
                                    a.handleYearChange(a.props.date, e);
                            }
                        );
                    }),
                    (a.handleYearChange = function(e, t) {
                        a.onSelect(e, t), a.setOpen();
                    }),
                    (a.onSelect = function(e, t) {
                        a.props.onSelect && a.props.onSelect(e, t);
                    }),
                    (a.setOpen = function() {
                        a.props.setOpen && a.props.setOpen(!0);
                    }),
                    (o = r),
                    Ye(a, o)
                );
            }
            return (
                Te(n, e),
                (n.prototype.render = function() {
                    var e = void 0;
                    switch (this.props.dropdownMode) {
                        case "scroll":
                            e = this.renderScrollMode();
                            break;
                        case "select":
                            e = this.renderSelectMode();
                    }
                    return t.createElement(
                        "div",
                        {
                            className:
                                "react-datepicker__year-dropdown-container react-datepicker__year-dropdown-container--" +
                                this.props.dropdownMode
                        },
                        e
                    );
                }),
                n
            );
        })(t.Component),
        We = $(
            (function(e) {
                function n() {
                    var r, a, o;
                    Ee(this, n);
                    for (
                        var s = arguments.length, p = Array(s), i = 0;
                        s > i;
                        i++
                    )
                        p[i] = arguments[i];
                    return (
                        (r = a = Ye(this, e.call.apply(e, [this].concat(p)))),
                        (a.renderOptions = function() {
                            return a.props.monthNames.map(function(e, n) {
                                return t.createElement(
                                    "div",
                                    {
                                        className:
                                            a.props.month === n
                                                ? "react-datepicker__month-option --selected_month"
                                                : "react-datepicker__month-option",
                                        key: e,
                                        ref: e,
                                        onClick: a.onChange.bind(a, n)
                                    },
                                    a.props.month === n
                                        ? t.createElement(
                                              "span",
                                              {
                                                  className:
                                                      "react-datepicker__month-option--selected"
                                              },
                                              "✓"
                                          )
                                        : "",
                                    e
                                );
                            });
                        }),
                        (a.onChange = function(e) {
                            return a.props.onChange(e);
                        }),
                        (a.handleClickOutside = function() {
                            return a.props.onCancel();
                        }),
                        (o = r),
                        Ye(a, o)
                    );
                }
                return (
                    Te(n, e),
                    (n.prototype.render = function() {
                        return t.createElement(
                            "div",
                            { className: "react-datepicker__month-dropdown" },
                            this.renderOptions()
                        );
                    }),
                    n
                );
            })(t.Component)
        ),
        Le = (function(e) {
            function n() {
                var r, a, o;
                Ee(this, n);
                for (var s = arguments.length, p = Array(s), i = 0; s > i; i++)
                    p[i] = arguments[i];
                return (
                    (r = a = Ye(this, e.call.apply(e, [this].concat(p)))),
                    (a.state = { dropdownVisible: !1 }),
                    (a.renderSelectOptions = function(e) {
                        return e.map(function(e, n) {
                            return t.createElement(
                                "option",
                                { key: n, value: n },
                                e
                            );
                        });
                    }),
                    (a.renderSelectMode = function(e) {
                        return t.createElement(
                            "select",
                            {
                                value: a.props.month,
                                className: "react-datepicker__month-select",
                                onChange: function(e) {
                                    return a.onChange(e.target.value);
                                }
                            },
                            a.renderSelectOptions(e)
                        );
                    }),
                    (a.renderReadView = function(e, n) {
                        return t.createElement(
                            "div",
                            {
                                key: "read",
                                style: { visibility: e ? "visible" : "hidden" },
                                className: "react-datepicker__month-read-view",
                                onClick: a.toggleDropdown
                            },
                            t.createElement("span", {
                                className:
                                    "react-datepicker__month-read-view--down-arrow"
                            }),
                            t.createElement(
                                "span",
                                {
                                    className:
                                        "react-datepicker__month-read-view--selected-month"
                                },
                                n[a.props.month]
                            )
                        );
                    }),
                    (a.renderDropdown = function(e) {
                        return t.createElement(We, {
                            key: "dropdown",
                            ref: "options",
                            month: a.props.month,
                            monthNames: e,
                            onChange: a.onChange,
                            onCancel: a.toggleDropdown
                        });
                    }),
                    (a.renderScrollMode = function(e) {
                        var t = a.state.dropdownVisible,
                            n = [a.renderReadView(!t, e)];
                        return t && n.unshift(a.renderDropdown(e)), n;
                    }),
                    (a.onChange = function(e) {
                        a.toggleDropdown(),
                            e !== a.props.month && a.props.onChange(e);
                    }),
                    (a.toggleDropdown = function() {
                        return a.setState({
                            dropdownVisible: !a.state.dropdownVisible
                        });
                    }),
                    (o = r),
                    Ye(a, o)
                );
            }
            return (
                Te(n, e),
                (n.prototype.render = function() {
                    var e = this,
                        n = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(
                            this.props.useShortMonthInDropdown
                                ? function(t) {
                                      return fe(t, e.props.locale);
                                  }
                                : function(t) {
                                      return (function(e, t) {
                                          return re(P(te(), e), "LLLL", t);
                                      })(t, e.props.locale);
                                  }
                        ),
                        r = void 0;
                    switch (this.props.dropdownMode) {
                        case "scroll":
                            r = this.renderScrollMode(n);
                            break;
                        case "select":
                            r = this.renderSelectMode(n);
                    }
                    return t.createElement(
                        "div",
                        {
                            className:
                                "react-datepicker__month-dropdown-container react-datepicker__month-dropdown-container--" +
                                this.props.dropdownMode
                        },
                        r
                    );
                }),
                n
            );
        })(t.Component),
        qe = $(
            (function(e) {
                function n(r) {
                    Ee(this, n);
                    var a = Ye(this, e.call(this, r));
                    return (
                        (a.renderOptions = function() {
                            return a.state.monthYearsList.map(function(e) {
                                var n = b(e),
                                    r =
                                        pe(a.props.date, e) &&
                                        ie(a.props.date, e);
                                return t.createElement(
                                    "div",
                                    {
                                        className: r
                                            ? "react-datepicker__month-year-option --selected_month-year"
                                            : "react-datepicker__month-year-option",
                                        key: n,
                                        ref: n,
                                        onClick: a.onChange.bind(a, n)
                                    },
                                    r
                                        ? t.createElement(
                                              "span",
                                              {
                                                  className:
                                                      "react-datepicker__month-year-option--selected"
                                              },
                                              "✓"
                                          )
                                        : "",
                                    re(e, a.props.dateFormat)
                                );
                            });
                        }),
                        (a.onChange = function(e) {
                            return a.props.onChange(e);
                        }),
                        (a.handleClickOutside = function() {
                            a.props.onCancel();
                        }),
                        (a.state = {
                            monthYearsList: (function(e, t) {
                                for (
                                    var n = [], r = se(e), a = se(t);
                                    !G(r, a);

                                )
                                    n.push(te(r)), (r = l(r, 1));
                                return n;
                            })(a.props.minDate, a.props.maxDate)
                        }),
                        a
                    );
                }
                return (
                    Te(n, e),
                    (n.prototype.render = function() {
                        var e = r({
                            "react-datepicker__month-year-dropdown": !0,
                            "react-datepicker__month-year-dropdown--scrollable": this
                                .props.scrollableMonthYearDropdown
                        });
                        return t.createElement(
                            "div",
                            { className: e },
                            this.renderOptions()
                        );
                    }),
                    n
                );
            })(t.Component)
        ),
        Fe = (function(e) {
            function n() {
                var r, a, o;
                Ee(this, n);
                for (var s = arguments.length, p = Array(s), i = 0; s > i; i++)
                    p[i] = arguments[i];
                return (
                    (r = a = Ye(this, e.call.apply(e, [this].concat(p)))),
                    (a.state = { dropdownVisible: !1 }),
                    (a.renderSelectOptions = function() {
                        for (
                            var e = se(a.props.minDate),
                                n = se(a.props.maxDate),
                                r = [];
                            !G(e, n);

                        ) {
                            var o = b(e);
                            r.push(
                                t.createElement(
                                    "option",
                                    { key: o, value: o },
                                    re(e, a.props.dateFormat, a.props.locale)
                                )
                            ),
                                (e = l(e, 1));
                        }
                        return r;
                    }),
                    (a.onSelectChange = function(e) {
                        a.onChange(e.target.value);
                    }),
                    (a.renderSelectMode = function() {
                        return t.createElement(
                            "select",
                            {
                                value: b(se(a.props.date)),
                                className:
                                    "react-datepicker__month-year-select",
                                onChange: a.onSelectChange
                            },
                            a.renderSelectOptions()
                        );
                    }),
                    (a.renderReadView = function(e) {
                        var n = re(
                            a.props.date,
                            a.props.dateFormat,
                            a.props.locale
                        );
                        return t.createElement(
                            "div",
                            {
                                key: "read",
                                style: { visibility: e ? "visible" : "hidden" },
                                className:
                                    "react-datepicker__month-year-read-view",
                                onClick: function(e) {
                                    return a.toggleDropdown(e);
                                }
                            },
                            t.createElement("span", {
                                className:
                                    "react-datepicker__month-year-read-view--down-arrow"
                            }),
                            t.createElement(
                                "span",
                                {
                                    className:
                                        "react-datepicker__month-year-read-view--selected-month-year"
                                },
                                n
                            )
                        );
                    }),
                    (a.renderDropdown = function() {
                        return t.createElement(qe, {
                            key: "dropdown",
                            ref: "options",
                            date: a.props.date,
                            dateFormat: a.props.dateFormat,
                            onChange: a.onChange,
                            onCancel: a.toggleDropdown,
                            minDate: a.props.minDate,
                            maxDate: a.props.maxDate,
                            scrollableMonthYearDropdown:
                                a.props.scrollableMonthYearDropdown
                        });
                    }),
                    (a.renderScrollMode = function() {
                        var e = a.state.dropdownVisible,
                            t = [a.renderReadView(!e)];
                        return e && t.unshift(a.renderDropdown()), t;
                    }),
                    (a.onChange = function(e) {
                        a.toggleDropdown();
                        var t = te(parseInt(e));
                        (pe(a.props.date, t) && ie(a.props.date, t)) ||
                            a.props.onChange(t);
                    }),
                    (a.toggleDropdown = function() {
                        return a.setState({
                            dropdownVisible: !a.state.dropdownVisible
                        });
                    }),
                    (o = r),
                    Ye(a, o)
                );
            }
            return (
                Te(n, e),
                (n.prototype.render = function() {
                    var e = void 0;
                    switch (this.props.dropdownMode) {
                        case "scroll":
                            e = this.renderScrollMode();
                            break;
                        case "select":
                            e = this.renderSelectMode();
                    }
                    return t.createElement(
                        "div",
                        {
                            className:
                                "react-datepicker__month-year-dropdown-container react-datepicker__month-year-dropdown-container--" +
                                this.props.dropdownMode
                        },
                        e
                    );
                }),
                n
            );
        })(t.Component),
        Be = (function(e) {
            function n() {
                var t, a, o;
                Ee(this, n);
                for (var s = arguments.length, p = Array(s), i = 0; s > i; i++)
                    p[i] = arguments[i];
                return (
                    (t = a = Ye(this, e.call.apply(e, [this].concat(p)))),
                    (a.handleClick = function(e) {
                        !a.isDisabled() &&
                            a.props.onClick &&
                            a.props.onClick(e);
                    }),
                    (a.handleMouseEnter = function(e) {
                        !a.isDisabled() &&
                            a.props.onMouseEnter &&
                            a.props.onMouseEnter(e);
                    }),
                    (a.isSameDay = function(e) {
                        return ce(a.props.day, e);
                    }),
                    (a.isKeyboardSelected = function() {
                        return (
                            !a.props.disabledKeyboardNavigation &&
                            !a.props.inline &&
                            !a.isSameDay(a.props.selected) &&
                            a.isSameDay(a.props.preSelection)
                        );
                    }),
                    (a.isDisabled = function() {
                        return me(a.props.day, a.props);
                    }),
                    (a.getHighLightedClass = function(e) {
                        var t = a.props,
                            n = t.day,
                            r = t.highlightDates;
                        if (!r) return !1;
                        var o = re(n, "MM.dd.yyyy");
                        return r.get(o);
                    }),
                    (a.isInRange = function() {
                        var e = a.props,
                            t = e.startDate,
                            n = e.endDate;
                        return !(!t || !n) && le(e.day, t, n);
                    }),
                    (a.isInSelectingRange = function() {
                        var e = a.props,
                            t = e.day,
                            n = e.selectsStart,
                            r = e.selectsEnd,
                            o = e.selectingDate,
                            s = e.startDate,
                            p = e.endDate;
                        return (
                            !((!n && !r) || !o || a.isDisabled()) &&
                            (n && p && (J(o, p) || de(o, p))
                                ? le(t, o, p)
                                : !(!r || !s || (!G(o, s) && !de(o, s))) &&
                                  le(t, s, o))
                        );
                    }),
                    (a.isSelectingRangeStart = function() {
                        if (!a.isInSelectingRange()) return !1;
                        var e = a.props,
                            t = e.day,
                            n = e.startDate;
                        return e.selectsStart
                            ? ce(t, e.selectingDate)
                            : ce(t, n);
                    }),
                    (a.isSelectingRangeEnd = function() {
                        if (!a.isInSelectingRange()) return !1;
                        var e = a.props,
                            t = e.day,
                            n = e.endDate;
                        return e.selectsEnd ? ce(t, e.selectingDate) : ce(t, n);
                    }),
                    (a.isRangeStart = function() {
                        var e = a.props,
                            t = e.startDate;
                        return !(!t || !e.endDate) && ce(t, e.day);
                    }),
                    (a.isRangeEnd = function() {
                        var e = a.props,
                            t = e.endDate;
                        return !(!e.startDate || !t) && ce(t, e.day);
                    }),
                    (a.isWeekend = function() {
                        var e = C(a.props.day);
                        return 0 === e || 6 === e;
                    }),
                    (a.isOutsideMonth = function() {
                        return (
                            void 0 !== a.props.month &&
                            a.props.month !== S(a.props.day)
                        );
                    }),
                    (a.getClassNames = function(e) {
                        var t = a.props.dayClassName
                            ? a.props.dayClassName(e)
                            : void 0;
                        return r(
                            "react-datepicker__day",
                            t,
                            "react-datepicker__day--" +
                                (function(e, t) {
                                    return re(e, "ddd", t);
                                })(a.props.day),
                            {
                                "react-datepicker__day--disabled": a.isDisabled(),
                                "react-datepicker__day--selected": a.isSameDay(
                                    a.props.selected
                                ),
                                "react-datepicker__day--keyboard-selected": a.isKeyboardSelected(),
                                "react-datepicker__day--range-start": a.isRangeStart(),
                                "react-datepicker__day--range-end": a.isRangeEnd(),
                                "react-datepicker__day--in-range": a.isInRange(),
                                "react-datepicker__day--in-selecting-range": a.isInSelectingRange(),
                                "react-datepicker__day--selecting-range-start": a.isSelectingRangeStart(),
                                "react-datepicker__day--selecting-range-end": a.isSelectingRangeEnd(),
                                "react-datepicker__day--today": a.isSameDay(
                                    te()
                                ),
                                "react-datepicker__day--weekend": a.isWeekend(),
                                "react-datepicker__day--outside-month": a.isOutsideMonth()
                            },
                            a.getHighLightedClass(
                                "react-datepicker__day--highlighted"
                            )
                        );
                    }),
                    (o = t),
                    Ye(a, o)
                );
            }
            return (
                Te(n, e),
                (n.prototype.render = function() {
                    return t.createElement(
                        "div",
                        {
                            className: this.getClassNames(this.props.day),
                            onClick: this.handleClick,
                            onMouseEnter: this.handleMouseEnter,
                            "aria-label": "day-" + _(this.props.day),
                            role: "option"
                        },
                        this.props.renderDayContents
                            ? this.props.renderDayContents(
                                  _(this.props.day),
                                  this.props.day
                              )
                            : _(this.props.day)
                    );
                }),
                n
            );
        })(t.Component),
        He = (function(e) {
            function n() {
                var t, r, a;
                Ee(this, n);
                for (var o = arguments.length, s = Array(o), p = 0; o > p; p++)
                    s[p] = arguments[p];
                return (
                    (t = r = Ye(this, e.call.apply(e, [this].concat(s)))),
                    (r.handleClick = function(e) {
                        r.props.onClick && r.props.onClick(e);
                    }),
                    (a = t),
                    Ye(r, a)
                );
            }
            return (
                Te(n, e),
                (n.prototype.render = function() {
                    return t.createElement(
                        "div",
                        {
                            className: r({
                                "react-datepicker__week-number": !0,
                                "react-datepicker__week-number--clickable": !!this
                                    .props.onClick
                            }),
                            "aria-label": "week-" + this.props.weekNumber,
                            onClick: this.handleClick
                        },
                        this.props.weekNumber
                    );
                }),
                n
            );
        })(t.Component),
        Re = (function(e) {
            function n() {
                var r, a, o;
                Ee(this, n);
                for (var s = arguments.length, p = Array(s), i = 0; s > i; i++)
                    p[i] = arguments[i];
                return (
                    (r = a = Ye(this, e.call.apply(e, [this].concat(p)))),
                    (a.handleDayClick = function(e, t) {
                        a.props.onDayClick && a.props.onDayClick(e, t);
                    }),
                    (a.handleDayMouseEnter = function(e) {
                        a.props.onDayMouseEnter && a.props.onDayMouseEnter(e);
                    }),
                    (a.handleWeekClick = function(e, t, n) {
                        "function" == typeof a.props.onWeekSelect &&
                            a.props.onWeekSelect(e, t, n),
                            a.props.shouldCloseOnSelect && a.props.setOpen(!1);
                    }),
                    (a.formatWeekNumber = function(e) {
                        return a.props.formatWeekNumber
                            ? a.props.formatWeekNumber(e)
                            : (function(e) {
                                  return (
                                      q(e, 1), pe(j(e), e) ? L(e, R(e)) + 1 : 1
                                  );
                              })(e);
                    }),
                    (a.renderDays = function() {
                        var e = oe(a.props.day, a.props.locale),
                            n = [],
                            r = a.formatWeekNumber(e);
                        if (a.props.showWeekNumber) {
                            var o = a.props.onWeekSelect
                                ? a.handleWeekClick.bind(a, e, r)
                                : void 0;
                            n.push(
                                t.createElement(He, {
                                    key: "W",
                                    weekNumber: r,
                                    onClick: o
                                })
                            );
                        }
                        return n.concat(
                            [0, 1, 2, 3, 4, 5, 6].map(function(n) {
                                var r = c(e, n);
                                return t.createElement(Be, {
                                    key: n,
                                    day: r,
                                    month: a.props.month,
                                    onClick: a.handleDayClick.bind(a, r),
                                    onMouseEnter: a.handleDayMouseEnter.bind(
                                        a,
                                        r
                                    ),
                                    minDate: a.props.minDate,
                                    maxDate: a.props.maxDate,
                                    excludeDates: a.props.excludeDates,
                                    includeDates: a.props.includeDates,
                                    inline: a.props.inline,
                                    highlightDates: a.props.highlightDates,
                                    selectingDate: a.props.selectingDate,
                                    filterDate: a.props.filterDate,
                                    preSelection: a.props.preSelection,
                                    selected: a.props.selected,
                                    selectsStart: a.props.selectsStart,
                                    selectsEnd: a.props.selectsEnd,
                                    startDate: a.props.startDate,
                                    endDate: a.props.endDate,
                                    dayClassName: a.props.dayClassName,
                                    renderDayContents:
                                        a.props.renderDayContents,
                                    disabledKeyboardNavigation:
                                        a.props.disabledKeyboardNavigation
                                });
                            })
                        );
                    }),
                    (o = r),
                    Ye(a, o)
                );
            }
            return (
                Te(n, e),
                (n.prototype.render = function() {
                    return t.createElement(
                        "div",
                        { className: "react-datepicker__week" },
                        this.renderDays()
                    );
                }),
                Ne(n, null, [
                    {
                        key: "defaultProps",
                        get: function() {
                            return { shouldCloseOnSelect: !0 };
                        }
                    }
                ]),
                n
            );
        })(t.Component),
        je = 6,
        Ve = (function(e) {
            function n() {
                var a, o, s;
                Ee(this, n);
                for (var p = arguments.length, i = Array(p), l = 0; p > l; l++)
                    i[l] = arguments[l];
                return (
                    (a = o = Ye(this, e.call.apply(e, [this].concat(i)))),
                    (o.handleDayClick = function(e, t) {
                        o.props.onDayClick &&
                            o.props.onDayClick(e, t, o.props.orderInDisplay);
                    }),
                    (o.handleDayMouseEnter = function(e) {
                        o.props.onDayMouseEnter && o.props.onDayMouseEnter(e);
                    }),
                    (o.handleMouseLeave = function() {
                        o.props.onMouseLeave && o.props.onMouseLeave();
                    }),
                    (o.isWeekInMonth = function(e) {
                        var t = o.props.day,
                            n = c(e, 6);
                        return ie(e, t) || ie(n, t);
                    }),
                    (o.renderWeeks = function() {
                        for (
                            var e = [],
                                n = o.props.fixedHeight,
                                r = oe(se(o.props.day), o.props.locale),
                                a = 0,
                                s = !1;
                            ;

                        ) {
                            if (
                                (e.push(
                                    t.createElement(Re, {
                                        key: a,
                                        day: r,
                                        month: S(o.props.day),
                                        onDayClick: o.handleDayClick,
                                        onDayMouseEnter: o.handleDayMouseEnter,
                                        onWeekSelect: o.props.onWeekSelect,
                                        formatWeekNumber:
                                            o.props.formatWeekNumber,
                                        locale: o.props.locale,
                                        minDate: o.props.minDate,
                                        maxDate: o.props.maxDate,
                                        excludeDates: o.props.excludeDates,
                                        includeDates: o.props.includeDates,
                                        inline: o.props.inline,
                                        highlightDates: o.props.highlightDates,
                                        selectingDate: o.props.selectingDate,
                                        filterDate: o.props.filterDate,
                                        preSelection: o.props.preSelection,
                                        selected: o.props.selected,
                                        selectsStart: o.props.selectsStart,
                                        selectsEnd: o.props.selectsEnd,
                                        showWeekNumber: o.props.showWeekNumbers,
                                        startDate: o.props.startDate,
                                        endDate: o.props.endDate,
                                        dayClassName: o.props.dayClassName,
                                        setOpen: o.props.setOpen,
                                        shouldCloseOnSelect:
                                            o.props.shouldCloseOnSelect,
                                        disabledKeyboardNavigation:
                                            o.props.disabledKeyboardNavigation,
                                        renderDayContents:
                                            o.props.renderDayContents
                                    })
                                ),
                                s)
                            )
                                break;
                            a++, (r = d(r, 1));
                            var p = n && a >= je,
                                i = !n && !o.isWeekInMonth(r);
                            if (p || i) {
                                if (!o.props.peekNextMonth) break;
                                s = !0;
                            }
                        }
                        return e;
                    }),
                    (o.onMonthClick = function(e, t) {
                        o.handleDayClick(se(P(o.props.day, t)));
                    }),
                    (o.getMonthClassNames = function(e) {
                        var t = o.props,
                            n = t.day,
                            a = t.startDate,
                            s = t.endDate,
                            p = t.selected,
                            i = t.minDate,
                            c = t.maxDate;
                        return r(
                            "react-datepicker__month-text",
                            "react-datepicker__month-" + e,
                            {
                                "react-datepicker__month--disabled":
                                    i && c && !ye(i, c, e, n),
                                "react-datepicker__month--selected":
                                    S(n) === e && M(n) === M(p),
                                "react-datepicker__month--in-range": ye(
                                    a,
                                    s,
                                    e,
                                    n
                                )
                            }
                        );
                    }),
                    (o.renderMonths = function() {
                        return [
                            [0, 1, 2],
                            [3, 4, 5],
                            [6, 7, 8],
                            [9, 10, 11]
                        ].map(function(e, n) {
                            return t.createElement(
                                "div",
                                {
                                    className:
                                        "react-datepicker__month-wrapper",
                                    key: n
                                },
                                e.map(function(e, n) {
                                    return t.createElement(
                                        "div",
                                        {
                                            key: n,
                                            onClick: function(t) {
                                                o.onMonthClick(t.target, e);
                                            },
                                            className: o.getMonthClassNames(e)
                                        },
                                        fe(e, o.props.locale)
                                    );
                                })
                            );
                        });
                    }),
                    (o.getClassNames = function() {
                        var e = o.props;
                        return r(
                            "react-datepicker__month",
                            {
                                "react-datepicker__month--selecting-range":
                                    e.selectingDate &&
                                    (e.selectsStart || e.selectsEnd)
                            },
                            {
                                "react-datepicker__monthPicker":
                                    e.showMonthYearPicker
                            }
                        );
                    }),
                    (s = a),
                    Ye(o, s)
                );
            }
            return (
                Te(n, e),
                (n.prototype.render = function() {
                    var e = this.props.showMonthYearPicker;
                    return t.createElement(
                        "div",
                        {
                            className: this.getClassNames(),
                            onMouseLeave: this.handleMouseLeave,
                            role: "listbox",
                            "aria-label":
                                "month-" + re(this.props.day, "yyyy-MM")
                        },
                        e ? this.renderMonths() : this.renderWeeks()
                    );
                }),
                n
            );
        })(t.Component),
        Ae = (function(e) {
            function n() {
                var r, a, o;
                Ee(this, n);
                for (var s = arguments.length, c = Array(s), d = 0; s > d; d++)
                    c[d] = arguments[d];
                return (
                    (r = a = Ye(this, e.call.apply(e, [this].concat(c)))),
                    (a.state = { height: null }),
                    (a.handleClick = function(e) {
                        ((a.props.minTime || a.props.maxTime) &&
                            we(e, a.props)) ||
                            (a.props.excludeTimes &&
                                ge(e, a.props.excludeTimes)) ||
                            (a.props.includeTimes &&
                                !ge(e, a.props.includeTimes)) ||
                            a.props.onChange(e);
                    }),
                    (a.liClasses = function(e, t, n) {
                        var r = ["react-datepicker__time-list-item"];
                        return (
                            t === k(e) &&
                                n === v(e) &&
                                r.push(
                                    "react-datepicker__time-list-item--selected"
                                ),
                            (((a.props.minTime || a.props.maxTime) &&
                                we(e, a.props)) ||
                                (a.props.excludeTimes &&
                                    ge(e, a.props.excludeTimes)) ||
                                (a.props.includeTimes &&
                                    !ge(e, a.props.includeTimes))) &&
                                r.push(
                                    "react-datepicker__time-list-item--disabled"
                                ),
                            a.props.injectTimes &&
                                (60 * k(e) + v(e)) % a.props.intervals != 0 &&
                                r.push(
                                    "react-datepicker__time-list-item--injected"
                                ),
                            r.join(" ")
                        );
                    }),
                    (a.renderTimes = function() {
                        for (
                            var e = [],
                                n = a.props.format ? a.props.format : "p",
                                r = a.props.intervals,
                                o = a.props.selected ? a.props.selected : te(),
                                s = k(o),
                                c = v(o),
                                d = (function(e) {
                                    return F(e);
                                })(te()),
                                l = 1440 / r,
                                u =
                                    a.props.injectTimes &&
                                    a.props.injectTimes.sort(function(e, t) {
                                        return e - t;
                                    }),
                                h = 0;
                            l > h;
                            h++
                        ) {
                            var f = p(d, h * r);
                            if ((e.push(f), u)) {
                                var m = (function(e, t, n, r, a) {
                                    for (
                                        var o = a.length, s = [], c = 0;
                                        o > c;
                                        c++
                                    ) {
                                        var d = p(i(e, k(a[c])), v(a[c])),
                                            l = p(e, (n + 1) * r);
                                        G(d, t) && J(d, l) && s.push(a[c]);
                                    }
                                    return s;
                                })(d, f, h, r, u);
                                e = e.concat(m);
                            }
                        }
                        return e.map(function(e, r) {
                            return t.createElement(
                                "li",
                                {
                                    key: r,
                                    onClick: a.handleClick.bind(a, e),
                                    className: a.liClasses(e, s, c),
                                    ref: function(t) {
                                        ((s === k(e) && c === v(e)) ||
                                            (s === k(e) && !a.centerLi)) &&
                                            (a.centerLi = t);
                                    }
                                },
                                re(e, n)
                            );
                        });
                    }),
                    (o = r),
                    Ye(a, o)
                );
            }
            return (
                Te(n, e),
                (n.prototype.componentDidMount = function() {
                    (this.list.scrollTop = n.calcCenterPosition(
                        this.props.monthRef
                            ? this.props.monthRef.clientHeight -
                                  this.header.clientHeight
                            : this.list.clientHeight,
                        this.centerLi
                    )),
                        this.props.monthRef &&
                            this.header &&
                            this.setState({
                                height:
                                    this.props.monthRef.clientHeight -
                                    this.header.clientHeight
                            });
                }),
                (n.prototype.render = function() {
                    var e = this,
                        n = this.state.height;
                    return t.createElement(
                        "div",
                        {
                            className:
                                "react-datepicker__time-container " +
                                (this.props.todayButton
                                    ? "react-datepicker__time-container--with-today-button"
                                    : "")
                        },
                        t.createElement(
                            "div",
                            {
                                className:
                                    "react-datepicker__header react-datepicker__header--time",
                                ref: function(t) {
                                    e.header = t;
                                }
                            },
                            t.createElement(
                                "div",
                                { className: "react-datepicker-time__header" },
                                this.props.timeCaption
                            )
                        ),
                        t.createElement(
                            "div",
                            { className: "react-datepicker__time" },
                            t.createElement(
                                "div",
                                { className: "react-datepicker__time-box" },
                                t.createElement(
                                    "ul",
                                    {
                                        className:
                                            "react-datepicker__time-list",
                                        ref: function(t) {
                                            e.list = t;
                                        },
                                        style: n ? { height: n } : {}
                                    },
                                    this.renderTimes.bind(this)()
                                )
                            )
                        )
                    );
                }),
                Ne(n, null, [
                    {
                        key: "defaultProps",
                        get: function() {
                            return {
                                intervals: 30,
                                onTimeChange: function() {},
                                todayButton: null,
                                timeCaption: "Time"
                            };
                        }
                    }
                ]),
                n
            );
        })(t.Component);
    Ae.calcCenterPosition = function(e, t) {
        return t.offsetTop - (e / 2 - t.clientHeight / 2);
    };
    var Ke = (function(e) {
            function n(t) {
                Ee(this, n);
                var r = Ye(this, e.call(this, t));
                return (
                    (r.onTimeChange = function(e) {
                        r.setState({ time: e });
                        var t = new Date();
                        t.setHours(e.split(":")[0]),
                            t.setMinutes(e.split(":")[1]),
                            r.props.onChange(t);
                    }),
                    (r.state = { time: r.props.timeString }),
                    r
                );
            }
            return (
                Te(n, e),
                (n.prototype.render = function() {
                    var e = this,
                        n = this.state.time,
                        r = this.props.timeString;
                    return t.createElement(
                        "div",
                        { className: "react-datepicker__input-time-container" },
                        t.createElement(
                            "div",
                            { className: "react-datepicker-time__caption" },
                            this.props.timeInputLabel
                        ),
                        t.createElement(
                            "div",
                            {
                                className:
                                    "react-datepicker-time__input-container"
                            },
                            t.createElement(
                                "div",
                                { className: "react-datepicker-time__input" },
                                t.createElement("input", {
                                    type: "time",
                                    className: "react-datepicker-time__input",
                                    placeholder: "Time",
                                    name: "time-input",
                                    required: !0,
                                    value: n,
                                    onChange: function(t) {
                                        e.onTimeChange(t.target.value || r);
                                    }
                                })
                            )
                        )
                    );
                }),
                n
            );
        })(t.Component),
        Ue = [
            "react-datepicker__year-select",
            "react-datepicker__month-select",
            "react-datepicker__month-year-select"
        ],
        ze = function() {
            var e = (
                (arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : {}
                ).className || ""
            ).split(/\s+/);
            return Ue.some(function(t) {
                return e.indexOf(t) >= 0;
            });
        },
        Ge = (function(e) {
            function n(r) {
                Ee(this, n);
                var a = Ye(this, e.call(this, r));
                return (
                    (a.handleClickOutside = function(e) {
                        a.props.onClickOutside(e);
                    }),
                    (a.handleDropdownFocus = function(e) {
                        ze(e.target) && a.props.onDropdownFocus();
                    }),
                    (a.getDateInView = function() {
                        var e = a.props,
                            t = e.preSelection,
                            n = e.selected,
                            r = e.openToDate,
                            o = Ce(a.props),
                            s = _e(a.props),
                            p = te(),
                            i = r || n || t;
                        return i || (o && J(p, o) ? o : s && G(p, s) ? s : p);
                    }),
                    (a.increaseMonth = function() {
                        a.setState({ date: l(a.state.date, 1) }, function() {
                            return a.handleMonthChange(a.state.date);
                        });
                    }),
                    (a.decreaseMonth = function() {
                        a.setState({ date: D(a.state.date, 1) }, function() {
                            return a.handleMonthChange(a.state.date);
                        });
                    }),
                    (a.handleDayClick = function(e, t, n) {
                        return a.props.onSelect(e, t, n);
                    }),
                    (a.handleDayMouseEnter = function(e) {
                        a.setState({ selectingDate: e }),
                            a.props.onDayMouseEnter &&
                                a.props.onDayMouseEnter(e);
                    }),
                    (a.handleMonthMouseLeave = function() {
                        a.setState({ selectingDate: null }),
                            a.props.onMonthMouseLeave &&
                                a.props.onMonthMouseLeave();
                    }),
                    (a.handleYearChange = function(e) {
                        a.props.onYearChange && a.props.onYearChange(e);
                    }),
                    (a.handleMonthChange = function(e) {
                        a.props.onMonthChange && a.props.onMonthChange(e),
                            a.props.adjustDateOnChange &&
                                (a.props.onSelect && a.props.onSelect(e),
                                a.props.setOpen && a.props.setOpen(!0));
                    }),
                    (a.handleMonthYearChange = function(e) {
                        a.handleYearChange(e), a.handleMonthChange(e);
                    }),
                    (a.changeYear = function(e) {
                        a.setState({ date: T(a.state.date, e) }, function() {
                            return a.handleYearChange(a.state.date);
                        });
                    }),
                    (a.changeMonth = function(e) {
                        a.setState({ date: P(a.state.date, e) }, function() {
                            return a.handleMonthChange(a.state.date);
                        });
                    }),
                    (a.changeMonthYear = function(e) {
                        a.setState(
                            { date: T(P(a.state.date, S(e)), M(e)) },
                            function() {
                                return a.handleMonthYearChange(a.state.date);
                            }
                        );
                    }),
                    (a.header = function() {
                        var e = oe(
                                arguments.length > 0 && void 0 !== arguments[0]
                                    ? arguments[0]
                                    : a.state.date,
                                a.props.locale
                            ),
                            n = [];
                        return (
                            a.props.showWeekNumbers &&
                                n.push(
                                    t.createElement(
                                        "div",
                                        {
                                            key: "W",
                                            className:
                                                "react-datepicker__day-name"
                                        },
                                        a.props.weekLabel || "#"
                                    )
                                ),
                            n.concat(
                                [0, 1, 2, 3, 4, 5, 6].map(function(n) {
                                    var r = c(e, n),
                                        o = a.formatWeekday(r, a.props.locale);
                                    return t.createElement(
                                        "div",
                                        {
                                            key: n,
                                            className:
                                                "react-datepicker__day-name"
                                        },
                                        o
                                    );
                                })
                            )
                        );
                    }),
                    (a.formatWeekday = function(e, t) {
                        return a.props.formatWeekDay
                            ? (function(e, t, n) {
                                  return t(re(e, "EEEE", n));
                              })(e, a.props.formatWeekDay, t)
                            : a.props.useWeekdaysShort
                            ? (function(e, t) {
                                  return re(e, "EEE", t);
                              })(e, t)
                            : (function(e, t) {
                                  return re(e, "EEEEEE", t);
                              })(e, t);
                    }),
                    (a.decreaseYear = function() {
                        a.setState({ date: g(a.state.date, 1) }, function() {
                            return a.handleYearChange(a.state.date);
                        });
                    }),
                    (a.renderPreviousButton = function() {
                        if (!a.props.renderCustomHeader) {
                            var e = ve(a.state.date, a.props);
                            if (
                                (a.props.forceShowMonthNavigation ||
                                    a.props.showDisabledMonthNavigation ||
                                    !e) &&
                                !a.props.showTimeSelectOnly
                            ) {
                                var n = [
                                        "react-datepicker__navigation",
                                        "react-datepicker__navigation--previous"
                                    ],
                                    r = a.decreaseMonth;
                                return (
                                    a.props.showMonthYearPicker &&
                                        (r = a.decreaseYear),
                                    e &&
                                        a.props.showDisabledMonthNavigation &&
                                        (n.push(
                                            "react-datepicker__navigation--previous--disabled"
                                        ),
                                        (r = null)),
                                    t.createElement(
                                        "button",
                                        {
                                            type: "button",
                                            className: n.join(" "),
                                            onClick: r
                                        },
                                        a.props.showMonthYearPicker
                                            ? a.props.previousYearButtonLabel
                                            : a.props.previousMonthButtonLabel
                                    )
                                );
                            }
                        }
                    }),
                    (a.increaseYear = function() {
                        a.setState({ date: u(a.state.date, 1) }, function() {
                            return a.handleYearChange(a.state.date);
                        });
                    }),
                    (a.renderNextButton = function() {
                        if (!a.props.renderCustomHeader) {
                            var e = ke(a.state.date, a.props);
                            if (
                                (a.props.forceShowMonthNavigation ||
                                    a.props.showDisabledMonthNavigation ||
                                    !e) &&
                                !a.props.showTimeSelectOnly
                            ) {
                                var n = [
                                    "react-datepicker__navigation",
                                    "react-datepicker__navigation--next"
                                ];
                                a.props.showTimeSelect &&
                                    n.push(
                                        "react-datepicker__navigation--next--with-time"
                                    ),
                                    a.props.todayButton &&
                                        n.push(
                                            "react-datepicker__navigation--next--with-today-button"
                                        );
                                var r = a.increaseMonth;
                                return (
                                    a.props.showMonthYearPicker &&
                                        (r = a.increaseYear),
                                    e &&
                                        a.props.showDisabledMonthNavigation &&
                                        (n.push(
                                            "react-datepicker__navigation--next--disabled"
                                        ),
                                        (r = null)),
                                    t.createElement(
                                        "button",
                                        {
                                            type: "button",
                                            className: n.join(" "),
                                            onClick: r
                                        },
                                        a.props.showMonthYearPicker
                                            ? a.props.nextYearButtonLabel
                                            : a.props.nextMonthButtonLabel
                                    )
                                );
                            }
                        }
                    }),
                    (a.renderCurrentMonth = function() {
                        var e =
                                arguments.length > 0 && void 0 !== arguments[0]
                                    ? arguments[0]
                                    : a.state.date,
                            n = ["react-datepicker__current-month"];
                        return (
                            a.props.showYearDropdown &&
                                n.push(
                                    "react-datepicker__current-month--hasYearDropdown"
                                ),
                            a.props.showMonthDropdown &&
                                n.push(
                                    "react-datepicker__current-month--hasMonthDropdown"
                                ),
                            a.props.showMonthYearDropdown &&
                                n.push(
                                    "react-datepicker__current-month--hasMonthYearDropdown"
                                ),
                            t.createElement(
                                "div",
                                { className: n.join(" ") },
                                re(e, a.props.dateFormat, a.props.locale)
                            )
                        );
                    }),
                    (a.renderYearDropdown = function() {
                        if (
                            a.props.showYearDropdown &&
                            !(
                                arguments.length > 0 &&
                                void 0 !== arguments[0] &&
                                arguments[0]
                            )
                        )
                            return t.createElement(Ie, {
                                adjustDateOnChange: a.props.adjustDateOnChange,
                                date: a.state.date,
                                onSelect: a.props.onSelect,
                                setOpen: a.props.setOpen,
                                dropdownMode: a.props.dropdownMode,
                                onChange: a.changeYear,
                                minDate: a.props.minDate,
                                maxDate: a.props.maxDate,
                                year: M(a.state.date),
                                scrollableYearDropdown:
                                    a.props.scrollableYearDropdown,
                                yearDropdownItemNumber:
                                    a.props.yearDropdownItemNumber
                            });
                    }),
                    (a.renderMonthDropdown = function() {
                        if (
                            a.props.showMonthDropdown &&
                            !(
                                arguments.length > 0 &&
                                void 0 !== arguments[0] &&
                                arguments[0]
                            )
                        )
                            return t.createElement(Le, {
                                dropdownMode: a.props.dropdownMode,
                                locale: a.props.locale,
                                onChange: a.changeMonth,
                                month: S(a.state.date),
                                useShortMonthInDropdown:
                                    a.props.useShortMonthInDropdown
                            });
                    }),
                    (a.renderMonthYearDropdown = function() {
                        if (
                            a.props.showMonthYearDropdown &&
                            !(
                                arguments.length > 0 &&
                                void 0 !== arguments[0] &&
                                arguments[0]
                            )
                        )
                            return t.createElement(Fe, {
                                dropdownMode: a.props.dropdownMode,
                                locale: a.props.locale,
                                dateFormat: a.props.dateFormat,
                                onChange: a.changeMonthYear,
                                minDate: a.props.minDate,
                                maxDate: a.props.maxDate,
                                date: a.state.date,
                                scrollableMonthYearDropdown:
                                    a.props.scrollableMonthYearDropdown
                            });
                    }),
                    (a.renderTodayButton = function() {
                        if (a.props.todayButton && !a.props.showTimeSelectOnly)
                            return t.createElement(
                                "div",
                                {
                                    className: "react-datepicker__today-button",
                                    onClick: function(e) {
                                        return a.props.onSelect(F(te()), e);
                                    }
                                },
                                a.props.todayButton
                            );
                    }),
                    (a.renderDefaultHeader = function(e) {
                        var n = e.monthDate,
                            r = e.i;
                        return t.createElement(
                            "div",
                            { className: "react-datepicker__header" },
                            a.renderCurrentMonth(n),
                            t.createElement(
                                "div",
                                {
                                    className:
                                        "react-datepicker__header__dropdown react-datepicker__header__dropdown--" +
                                        a.props.dropdownMode,
                                    onFocus: a.handleDropdownFocus
                                },
                                a.renderMonthDropdown(0 !== r),
                                a.renderMonthYearDropdown(0 !== r),
                                a.renderYearDropdown(0 !== r)
                            ),
                            t.createElement(
                                "div",
                                { className: "react-datepicker__day-names" },
                                a.header(n)
                            )
                        );
                    }),
                    (a.renderCustomHeader = function(e) {
                        var n = e.monthDate;
                        if (0 !== e.i) return null;
                        var r = ve(a.state.date, a.props),
                            o = ke(a.state.date, a.props);
                        return t.createElement(
                            "div",
                            {
                                className:
                                    "react-datepicker__header react-datepicker__header--custom",
                                onFocus: a.props.onDropdownFocus
                            },
                            a.props.renderCustomHeader(
                                Pe({}, a.state, {
                                    changeMonth: a.changeMonth,
                                    changeYear: a.changeYear,
                                    decreaseMonth: a.decreaseMonth,
                                    increaseMonth: a.increaseMonth,
                                    prevMonthButtonDisabled: r,
                                    nextMonthButtonDisabled: o
                                })
                            ),
                            t.createElement(
                                "div",
                                { className: "react-datepicker__day-names" },
                                a.header(n)
                            )
                        );
                    }),
                    (a.renderYearHeader = function() {
                        return t.createElement(
                            "div",
                            {
                                className:
                                    "react-datepicker__header react-datepicker-year-header"
                            },
                            M(a.state.date)
                        );
                    }),
                    (a.renderMonths = function() {
                        if (!a.props.showTimeSelectOnly) {
                            for (
                                var e = [], n = 0;
                                a.props.monthsShown > n;
                                ++n
                            ) {
                                var r = l(
                                    a.state.date,
                                    n - a.props.monthSelectedIn
                                );
                                e.push(
                                    t.createElement(
                                        "div",
                                        {
                                            key: "month-" + n,
                                            ref: function(e) {
                                                a.monthContainer = e;
                                            },
                                            className:
                                                "react-datepicker__month-container"
                                        },
                                        a.props.showMonthYearPicker
                                            ? a.renderYearHeader({
                                                  monthDate: r,
                                                  i: n
                                              })
                                            : a.props.renderCustomHeader
                                            ? a.renderCustomHeader({
                                                  monthDate: r,
                                                  i: n
                                              })
                                            : a.renderDefaultHeader({
                                                  monthDate: r,
                                                  i: n
                                              }),
                                        t.createElement(Ve, {
                                            onChange: a.changeMonthYear,
                                            day: r,
                                            dayClassName: a.props.dayClassName,
                                            onDayClick: a.handleDayClick,
                                            onDayMouseEnter:
                                                a.handleDayMouseEnter,
                                            onMouseLeave:
                                                a.handleMonthMouseLeave,
                                            onWeekSelect: a.props.onWeekSelect,
                                            orderInDisplay: n,
                                            formatWeekNumber:
                                                a.props.formatWeekNumber,
                                            locale: a.props.locale,
                                            minDate: a.props.minDate,
                                            maxDate: a.props.maxDate,
                                            excludeDates: a.props.excludeDates,
                                            highlightDates:
                                                a.props.highlightDates,
                                            selectingDate:
                                                a.state.selectingDate,
                                            includeDates: a.props.includeDates,
                                            inline: a.props.inline,
                                            fixedHeight: a.props.fixedHeight,
                                            filterDate: a.props.filterDate,
                                            preSelection: a.props.preSelection,
                                            selected: a.props.selected,
                                            selectsStart: a.props.selectsStart,
                                            selectsEnd: a.props.selectsEnd,
                                            showWeekNumbers:
                                                a.props.showWeekNumbers,
                                            startDate: a.props.startDate,
                                            endDate: a.props.endDate,
                                            peekNextMonth:
                                                a.props.peekNextMonth,
                                            setOpen: a.props.setOpen,
                                            shouldCloseOnSelect:
                                                a.props.shouldCloseOnSelect,
                                            renderDayContents:
                                                a.props.renderDayContents,
                                            disabledKeyboardNavigation:
                                                a.props
                                                    .disabledKeyboardNavigation,
                                            showMonthYearPicker:
                                                a.props.showMonthYearPicker
                                        })
                                    )
                                );
                            }
                            return e;
                        }
                    }),
                    (a.renderTimeSection = function() {
                        if (
                            a.props.showTimeSelect &&
                            (a.state.monthContainer ||
                                a.props.showTimeSelectOnly)
                        )
                            return t.createElement(Ae, {
                                selected: a.props.selected,
                                onChange: a.props.onTimeChange,
                                format: a.props.timeFormat,
                                includeTimes: a.props.includeTimes,
                                intervals: a.props.timeIntervals,
                                minTime: a.props.minTime,
                                maxTime: a.props.maxTime,
                                excludeTimes: a.props.excludeTimes,
                                timeCaption: a.props.timeCaption,
                                todayButton: a.props.todayButton,
                                showMonthDropdown: a.props.showMonthDropdown,
                                showMonthYearDropdown:
                                    a.props.showMonthYearDropdown,
                                showYearDropdown: a.props.showYearDropdown,
                                withPortal: a.props.withPortal,
                                monthRef: a.state.monthContainer,
                                injectTimes: a.props.injectTimes
                            });
                    }),
                    (a.renderInputTimeSection = function() {
                        var e = new Date(a.props.selected),
                            n = Me(e.getHours()) + ":" + Me(e.getMinutes());
                        if (a.props.showTimeInput)
                            return t.createElement(Ke, {
                                timeString: n,
                                timeInputLabel: a.props.timeInputLabel,
                                onChange: a.props.onTimeChange
                            });
                    }),
                    (a.state = {
                        date: a.getDateInView(),
                        selectingDate: null,
                        monthContainer: null
                    }),
                    a
                );
            }
            return (
                Te(n, e),
                Ne(n, null, [
                    {
                        key: "defaultProps",
                        get: function() {
                            return {
                                onDropdownFocus: function() {},
                                monthsShown: 1,
                                monthSelectedIn: 0,
                                forceShowMonthNavigation: !1,
                                timeCaption: "Time",
                                previousYearButtonLabel: "Previous Year",
                                nextYearButtonLabel: "Next Year",
                                previousMonthButtonLabel: "Previous Month",
                                nextMonthButtonLabel: "Next Month"
                            };
                        }
                    }
                ]),
                (n.prototype.componentDidMount = function() {
                    var e = this;
                    this.props.showTimeSelect &&
                        (this.assignMonthContainer = void e.setState({
                            monthContainer: e.monthContainer
                        }));
                }),
                (n.prototype.componentDidUpdate = function(e) {
                    this.props.preSelection &&
                    !ce(this.props.preSelection, e.preSelection)
                        ? this.setState({ date: this.props.preSelection })
                        : this.props.openToDate &&
                          !ce(this.props.openToDate, e.openToDate) &&
                          this.setState({ date: this.props.openToDate });
                }),
                (n.prototype.render = function() {
                    return t.createElement(
                        this.props.container || be,
                        {
                            className: r(
                                "react-datepicker",
                                this.props.className,
                                {
                                    "react-datepicker--time-only": this.props
                                        .showTimeSelectOnly
                                }
                            )
                        },
                        this.renderPreviousButton(),
                        this.renderNextButton(),
                        this.renderMonths(),
                        this.renderTodayButton(),
                        this.renderTimeSection(),
                        this.renderInputTimeSection(),
                        this.props.children
                    );
                }),
                n
            );
        })(t.Component),
        Je = (function(e) {
            function n() {
                return Ee(this, n), Ye(this, e.apply(this, arguments));
            }
            return (
                Te(n, e),
                (n.prototype.render = function() {
                    var e = this.props,
                        n = e.popperComponent,
                        a = e.popperModifiers,
                        o = e.popperPlacement,
                        s = e.popperProps,
                        p = e.targetComponent,
                        i = void 0;
                    if (!e.hidePopper) {
                        var c = r("react-datepicker-popper", e.className);
                        i = t.createElement(
                            ee.Popper,
                            Pe({ modifiers: a, placement: o }, s),
                            function(e) {
                                var r = e.arrowProps;
                                return t.createElement(
                                    "div",
                                    Pe(
                                        { ref: e.ref, style: e.style },
                                        {
                                            className: c,
                                            "data-placement": e.placement
                                        }
                                    ),
                                    t.cloneElement(n, { arrowProps: r })
                                );
                            }
                        );
                    }
                    return (
                        this.props.popperContainer &&
                            (i = t.createElement(
                                this.props.popperContainer,
                                {},
                                i
                            )),
                        t.createElement(
                            ee.Manager,
                            null,
                            t.createElement(ee.Reference, null, function(e) {
                                return t.createElement(
                                    "div",
                                    {
                                        ref: e.ref,
                                        className: "react-datepicker-wrapper"
                                    },
                                    p
                                );
                            }),
                            i
                        )
                    );
                }),
                Ne(n, null, [
                    {
                        key: "defaultProps",
                        get: function() {
                            return {
                                hidePopper: !0,
                                popperModifiers: {
                                    preventOverflow: {
                                        enabled: !0,
                                        escapeWithReference: !0,
                                        boundariesElement: "viewport"
                                    }
                                },
                                popperProps: {},
                                popperPlacement: "bottom-start"
                            };
                        }
                    }
                ]),
                n
            );
        })(t.Component),
        Qe = "react-datepicker-ignore-onclickoutside",
        Xe = $(Ge),
        Ze = "Date input not valid.",
        $e = (function(e) {
            function n(o) {
                Ee(this, n);
                var p = Ye(this, e.call(this, o));
                return (
                    (p.getPreSelection = function() {
                        return p.props.openToDate
                            ? p.props.openToDate
                            : p.props.selectsEnd && p.props.startDate
                            ? p.props.startDate
                            : p.props.selectsStart && p.props.endDate
                            ? p.props.endDate
                            : te();
                    }),
                    (p.calcInitialState = function() {
                        var e = p.getPreSelection(),
                            t = Ce(p.props),
                            n = _e(p.props),
                            r = t && J(e, t) ? t : n && G(e, n) ? n : e;
                        return {
                            open: p.props.startOpen || !1,
                            preventFocus: !1,
                            preSelection: p.props.selected
                                ? p.props.selected
                                : r,
                            highlightDates: Se(p.props.highlightDates),
                            focused: !1
                        };
                    }),
                    (p.clearPreventFocusTimeout = function() {
                        p.preventFocusTimeout &&
                            clearTimeout(p.preventFocusTimeout);
                    }),
                    (p.setFocus = function() {
                        p.input && p.input.focus && p.input.focus();
                    }),
                    (p.setBlur = function() {
                        p.input && p.input.blur && p.input.blur(),
                            p.cancelFocusInput();
                    }),
                    (p.setOpen = function(e) {
                        var t =
                            arguments.length > 1 &&
                            void 0 !== arguments[1] &&
                            arguments[1];
                        p.setState(
                            {
                                open: e,
                                preSelection:
                                    e && p.state.open
                                        ? p.state.preSelection
                                        : p.calcInitialState().preSelection,
                                lastPreSelectChange: tt
                            },
                            function() {
                                e ||
                                    p.setState(
                                        function(e) {
                                            return {
                                                focused: !!t && e.focused
                                            };
                                        },
                                        function() {
                                            !t && p.setBlur(),
                                                p.setState({
                                                    inputValue: null
                                                });
                                        }
                                    );
                            }
                        );
                    }),
                    (p.inputOk = function() {
                        return a(p.state.preSelection);
                    }),
                    (p.isCalendarOpen = function() {
                        return void 0 === p.props.open
                            ? p.state.open &&
                                  !p.props.disabled &&
                                  !p.props.readOnly
                            : p.props.open;
                    }),
                    (p.handleFocus = function(e) {
                        p.state.preventFocus ||
                            (p.props.onFocus(e),
                            p.props.preventOpenOnFocus ||
                                p.props.readOnly ||
                                p.setOpen(!0)),
                            p.setState({ focused: !0 });
                    }),
                    (p.cancelFocusInput = function() {
                        clearTimeout(p.inputFocusTimeout),
                            (p.inputFocusTimeout = null);
                    }),
                    (p.deferFocusInput = function() {
                        p.cancelFocusInput(),
                            (p.inputFocusTimeout = setTimeout(function() {
                                return p.setFocus();
                            }, 1));
                    }),
                    (p.handleDropdownFocus = function() {
                        p.cancelFocusInput();
                    }),
                    (p.handleBlur = function(e) {
                        !p.state.open ||
                        p.props.withPortal ||
                        p.props.showTimeInput
                            ? p.props.onBlur(e)
                            : p.deferFocusInput(),
                            p.setState({ focused: !1 });
                    }),
                    (p.handleCalendarClickOutside = function(e) {
                        p.props.inline || p.setOpen(!1),
                            p.props.onClickOutside(e),
                            p.props.withPortal && e.preventDefault();
                    }),
                    (p.handleChange = function() {
                        for (
                            var e = arguments.length, t = Array(e), n = 0;
                            e > n;
                            n++
                        )
                            t[n] = arguments[n];
                        var r = t[0];
                        if (
                            !p.props.onChangeRaw ||
                            (p.props.onChangeRaw.apply(p, t),
                            "function" == typeof r.isDefaultPrevented &&
                                !r.isDefaultPrevented())
                        ) {
                            p.setState({
                                inputValue: r.target.value,
                                lastPreSelectChange: et
                            });
                            var a = (function(e, t, n, r) {
                                var a = null,
                                    o = he(n),
                                    p = !0;
                                return Array.isArray(t)
                                    ? (t.forEach(function(t) {
                                          var n = Z(e, t, new Date(), o);
                                          r &&
                                              (p =
                                                  ne(n) &&
                                                  e ===
                                                      s(n, t, {
                                                          awareOfUnicodeTokens: !0
                                                      })),
                                              ne(n) && p && (a = n);
                                      }),
                                      a)
                                    : ((a = Z(e, t, new Date(), o)),
                                      r
                                          ? (p =
                                                ne(a) &&
                                                e ===
                                                    s(a, t, {
                                                        awareOfUnicodeTokens: !0
                                                    }))
                                          : ne(a) || (a = new Date(e)),
                                      ne(a) && p ? a : null);
                            })(
                                r.target.value,
                                p.props.dateFormat,
                                p.props.locale,
                                p.props.strictParsing
                            );
                            (!a && r.target.value) || p.setSelected(a, r, !0);
                        }
                    }),
                    (p.handleSelect = function(e, t, n) {
                        p.setState({ preventFocus: !0 }, function() {
                            return (
                                (p.preventFocusTimeout = setTimeout(function() {
                                    return p.setState({ preventFocus: !1 });
                                }, 50)),
                                p.preventFocusTimeout
                            );
                        }),
                            p.setSelected(e, t, void 0, n),
                            !p.props.shouldCloseOnSelect ||
                            p.props.showTimeSelect
                                ? p.setPreSelection(e)
                                : p.props.inline || p.setOpen(!1);
                    }),
                    (p.setSelected = function(e, t, n, r) {
                        var a = e;
                        if (null !== a && me(a, p.props))
                            De(a, p.props) &&
                                (p.props.onChange(e, t),
                                p.props.onSelect(a, t));
                        else {
                            if (
                                !de(p.props.selected, a) ||
                                p.props.allowSameDay
                            ) {
                                if (null !== a) {
                                    if (p.props.selected) {
                                        var o = p.props.selected;
                                        n && (o = te(a)),
                                            (a = ae(a, {
                                                hour: k(o),
                                                minute: v(o),
                                                second: w(o)
                                            }));
                                    }
                                    p.props.inline ||
                                        p.setState({ preSelection: a }),
                                        p.props.inline &&
                                            p.props.monthsShown > 1 &&
                                            !p.props.inlineFocusSelectedMonth &&
                                            p.setState({ monthSelectedIn: r });
                                }
                                p.props.onChange(a, t);
                            }
                            p.props.onSelect(a, t),
                                n || p.setState({ inputValue: null });
                        }
                    }),
                    (p.setPreSelection = function(e) {
                        var t = void 0 !== p.props.minDate,
                            n = void 0 !== p.props.maxDate,
                            r = !0;
                        e &&
                            (t && n
                                ? (r = le(e, p.props.minDate, p.props.maxDate))
                                : t
                                ? (r = G(e, p.props.minDate))
                                : n && (r = J(e, p.props.maxDate))),
                            r && p.setState({ preSelection: e });
                    }),
                    (p.handleTimeChange = function(e) {
                        var t = ae(
                            p.props.selected
                                ? p.props.selected
                                : p.getPreSelection(),
                            { hour: k(e), minute: v(e) }
                        );
                        p.setState({ preSelection: t }),
                            p.props.onChange(t),
                            p.props.shouldCloseOnSelect && p.setOpen(!1),
                            p.props.showTimeInput && p.setOpen(!0),
                            p.setState({ inputValue: null });
                    }),
                    (p.onInputClick = function() {
                        p.props.disabled || p.props.readOnly || p.setOpen(!0),
                            p.props.onInputClick();
                    }),
                    (p.onInputKeyDown = function(e) {
                        p.props.onKeyDown(e);
                        var t = e.key;
                        if (
                            p.state.open ||
                            p.props.inline ||
                            p.props.preventOpenOnFocus
                        ) {
                            var n = te(p.state.preSelection);
                            if ("Enter" === t)
                                e.preventDefault(),
                                    p.inputOk() &&
                                    p.state.lastPreSelectChange === tt
                                        ? (p.handleSelect(n, e),
                                          !p.props.shouldCloseOnSelect &&
                                              p.setPreSelection(n))
                                        : p.setOpen(!1);
                            else if ("Escape" === t)
                                e.preventDefault(),
                                    p.setOpen(!1),
                                    p.inputOk() ||
                                        p.props.onInputError({
                                            code: 1,
                                            msg: Ze
                                        });
                            else if ("Tab" === t) p.setOpen(!1, !0);
                            else if (!p.props.disabledKeyboardNavigation) {
                                var r = void 0;
                                switch (t) {
                                    case "ArrowLeft":
                                        r = m(n, 1);
                                        break;
                                    case "ArrowRight":
                                        r = c(n, 1);
                                        break;
                                    case "ArrowUp":
                                        r = y(n, 1);
                                        break;
                                    case "ArrowDown":
                                        r = d(n, 1);
                                        break;
                                    case "PageUp":
                                        r = D(n, 1);
                                        break;
                                    case "PageDown":
                                        r = l(n, 1);
                                        break;
                                    case "Home":
                                        r = g(n, 1);
                                        break;
                                    case "End":
                                        r = u(n, 1);
                                }
                                if (!r)
                                    return void (
                                        p.props.onInputError &&
                                        p.props.onInputError({
                                            code: 1,
                                            msg: Ze
                                        })
                                    );
                                e.preventDefault(),
                                    p.setState({ lastPreSelectChange: tt }),
                                    p.props.adjustDateOnChange &&
                                        p.setSelected(r),
                                    p.setPreSelection(r);
                            }
                        } else
                            ("ArrowDown" !== t && "ArrowUp" !== t) ||
                                p.onInputClick();
                    }),
                    (p.onClearClick = function(e) {
                        e && e.preventDefault && e.preventDefault(),
                            p.props.onChange(null, e),
                            p.setState({ inputValue: null });
                    }),
                    (p.clear = function() {
                        p.onClearClick();
                    }),
                    (p.renderCalendar = function() {
                        return p.props.inline || p.isCalendarOpen()
                            ? t.createElement(
                                  Xe,
                                  {
                                      ref: function(e) {
                                          p.calendar = e;
                                      },
                                      locale: p.props.locale,
                                      adjustDateOnChange:
                                          p.props.adjustDateOnChange,
                                      setOpen: p.setOpen,
                                      shouldCloseOnSelect:
                                          p.props.shouldCloseOnSelect,
                                      dateFormat: p.props.dateFormatCalendar,
                                      useWeekdaysShort:
                                          p.props.useWeekdaysShort,
                                      formatWeekDay: p.props.formatWeekDay,
                                      dropdownMode: p.props.dropdownMode,
                                      selected: p.props.selected,
                                      preSelection: p.state.preSelection,
                                      onSelect: p.handleSelect,
                                      onWeekSelect: p.props.onWeekSelect,
                                      openToDate: p.props.openToDate,
                                      minDate: p.props.minDate,
                                      maxDate: p.props.maxDate,
                                      selectsStart: p.props.selectsStart,
                                      selectsEnd: p.props.selectsEnd,
                                      startDate: p.props.startDate,
                                      endDate: p.props.endDate,
                                      excludeDates: p.props.excludeDates,
                                      filterDate: p.props.filterDate,
                                      onClickOutside:
                                          p.handleCalendarClickOutside,
                                      formatWeekNumber:
                                          p.props.formatWeekNumber,
                                      highlightDates: p.state.highlightDates,
                                      includeDates: p.props.includeDates,
                                      includeTimes: p.props.includeTimes,
                                      injectTimes: p.props.injectTimes,
                                      inline: p.props.inline,
                                      peekNextMonth: p.props.peekNextMonth,
                                      showMonthDropdown:
                                          p.props.showMonthDropdown,
                                      useShortMonthInDropdown:
                                          p.props.useShortMonthInDropdown,
                                      showMonthYearDropdown:
                                          p.props.showMonthYearDropdown,
                                      showWeekNumbers: p.props.showWeekNumbers,
                                      showYearDropdown:
                                          p.props.showYearDropdown,
                                      withPortal: p.props.withPortal,
                                      forceShowMonthNavigation:
                                          p.props.forceShowMonthNavigation,
                                      showDisabledMonthNavigation:
                                          p.props.showDisabledMonthNavigation,
                                      scrollableYearDropdown:
                                          p.props.scrollableYearDropdown,
                                      scrollableMonthYearDropdown:
                                          p.props.scrollableMonthYearDropdown,
                                      todayButton: p.props.todayButton,
                                      weekLabel: p.props.weekLabel,
                                      outsideClickIgnoreClass: Qe,
                                      fixedHeight: p.props.fixedHeight,
                                      monthsShown: p.props.monthsShown,
                                      monthSelectedIn: p.state.monthSelectedIn,
                                      onDropdownFocus: p.handleDropdownFocus,
                                      onMonthChange: p.props.onMonthChange,
                                      onYearChange: p.props.onYearChange,
                                      dayClassName: p.props.dayClassName,
                                      showTimeSelect: p.props.showTimeSelect,
                                      showTimeSelectOnly:
                                          p.props.showTimeSelectOnly,
                                      onTimeChange: p.handleTimeChange,
                                      timeFormat: p.props.timeFormat,
                                      timeIntervals: p.props.timeIntervals,
                                      minTime: p.props.minTime,
                                      maxTime: p.props.maxTime,
                                      excludeTimes: p.props.excludeTimes,
                                      timeCaption: p.props.timeCaption,
                                      className: p.props.calendarClassName,
                                      container: p.props.calendarContainer,
                                      yearDropdownItemNumber:
                                          p.props.yearDropdownItemNumber,
                                      previousMonthButtonLabel:
                                          p.props.previousMonthButtonLabel,
                                      nextMonthButtonLabel:
                                          p.props.nextMonthButtonLabel,
                                      timeInputLabel: p.props.timeInputLabel,
                                      disabledKeyboardNavigation:
                                          p.props.disabledKeyboardNavigation,
                                      renderCustomHeader:
                                          p.props.renderCustomHeader,
                                      popperProps: p.props.popperProps,
                                      renderDayContents:
                                          p.props.renderDayContents,
                                      onDayMouseEnter: p.props.onDayMouseEnter,
                                      onMonthMouseLeave:
                                          p.props.onMonthMouseLeave,
                                      showTimeInput: p.props.showTimeInput,
                                      showMonthYearPicker:
                                          p.props.showMonthYearPicker
                                  },
                                  p.props.children
                              )
                            : null;
                    }),
                    (p.renderDateInput = function() {
                        var e,
                            n,
                            a = r(
                                p.props.className,
                                ((e = {}), (e[Qe] = p.state.open), e)
                            ),
                            o =
                                p.props.customInput ||
                                t.createElement("input", { type: "text" }),
                            s = p.props.customInputRef || "ref",
                            i =
                                "string" == typeof p.props.value
                                    ? p.props.value
                                    : "string" == typeof p.state.inputValue
                                    ? p.state.inputValue
                                    : (function(e, t) {
                                          var n = t.dateFormat,
                                              r = t.locale;
                                          return (
                                              (e &&
                                                  re(
                                                      e,
                                                      Array.isArray(n)
                                                          ? n[0]
                                                          : n,
                                                      r
                                                  )) ||
                                              ""
                                          );
                                      })(p.props.selected, p.props);
                        return t.cloneElement(
                            o,
                            ((n = {}),
                            (n[s] = function(e) {
                                p.input = e;
                            }),
                            (n.value = i),
                            (n.onBlur = p.handleBlur),
                            (n.onChange = p.handleChange),
                            (n.onClick = p.onInputClick),
                            (n.onFocus = p.handleFocus),
                            (n.onKeyDown = p.onInputKeyDown),
                            (n.id = p.props.id),
                            (n.name = p.props.name),
                            (n.autoFocus = p.props.autoFocus),
                            (n.placeholder = p.props.placeholderText),
                            (n.disabled = p.props.disabled),
                            (n.autoComplete = p.props.autoComplete),
                            (n.className = a),
                            (n.title = p.props.title),
                            (n.readOnly = p.props.readOnly),
                            (n.required = p.props.required),
                            (n.tabIndex = p.props.tabIndex),
                            n)
                        );
                    }),
                    (p.renderClearButton = function() {
                        return p.props.isClearable && null != p.props.selected
                            ? t.createElement("button", {
                                  type: "button",
                                  className: "react-datepicker__close-icon",
                                  onClick: p.onClearClick,
                                  title: p.props.clearButtonTitle,
                                  tabIndex: -1
                              })
                            : null;
                    }),
                    (p.state = p.calcInitialState()),
                    p
                );
            }
            return (
                Te(n, e),
                Ne(n, null, [
                    {
                        key: "defaultProps",
                        get: function() {
                            return {
                                allowSameDay: !1,
                                dateFormat: "MM/dd/yyyy",
                                dateFormatCalendar: "LLLL yyyy",
                                onChange: function() {},
                                disabled: !1,
                                disabledKeyboardNavigation: !1,
                                dropdownMode: "scroll",
                                onFocus: function() {},
                                onBlur: function() {},
                                onKeyDown: function() {},
                                onInputClick: function() {},
                                onSelect: function() {},
                                onClickOutside: function() {},
                                onMonthChange: function() {},
                                preventOpenOnFocus: !1,
                                onYearChange: function() {},
                                onInputError: function() {},
                                monthsShown: 1,
                                readOnly: !1,
                                withPortal: !1,
                                shouldCloseOnSelect: !0,
                                showTimeSelect: !1,
                                showTimeInput: !1,
                                showMonthYearPicker: !1,
                                strictParsing: !1,
                                timeIntervals: 30,
                                timeCaption: "Time",
                                previousMonthButtonLabel: "Previous Month",
                                nextMonthButtonLabel: "Next month",
                                timeInputLabel: "Time",
                                renderDayContents: function(e) {
                                    return e;
                                },
                                inlineFocusSelectedMonth: !1
                            };
                        }
                    }
                ]),
                (n.prototype.componentDidUpdate = function(e, t) {
                    e.inline &&
                        (function(e, t) {
                            return e && t
                                ? S(e) !== S(t) || M(e) !== M(t)
                                : e !== t;
                        })(e.selected, this.props.selected) &&
                        this.setPreSelection(this.props.selected),
                        void 0 !== this.state.monthSelectedIn &&
                            e.monthsShown !== this.props.monthsShown &&
                            this.setState({ monthSelectedIn: 0 }),
                        e.highlightDates !== this.props.highlightDates &&
                            this.setState({
                                highlightDates: Se(this.props.highlightDates)
                            }),
                        t.focused ||
                            de(e.selected, this.props.selected) ||
                            this.setState({ inputValue: null });
                }),
                (n.prototype.componentWillUnmount = function() {
                    this.clearPreventFocusTimeout();
                }),
                (n.prototype.render = function() {
                    var e = this.renderCalendar();
                    return this.props.inline && !this.props.withPortal
                        ? e
                        : this.props.withPortal
                        ? t.createElement(
                              "div",
                              null,
                              this.props.inline
                                  ? null
                                  : t.createElement(
                                        "div",
                                        {
                                            className:
                                                "react-datepicker__input-container"
                                        },
                                        this.renderDateInput(),
                                        this.renderClearButton()
                                    ),
                              this.state.open || this.props.inline
                                  ? t.createElement(
                                        "div",
                                        {
                                            className:
                                                "react-datepicker__portal"
                                        },
                                        e
                                    )
                                  : null
                          )
                        : t.createElement(Je, {
                              className: this.props.popperClassName,
                              hidePopper: !this.isCalendarOpen(),
                              popperModifiers: this.props.popperModifiers,
                              targetComponent: t.createElement(
                                  "div",
                                  {
                                      className:
                                          "react-datepicker__input-container"
                                  },
                                  this.renderDateInput(),
                                  this.renderClearButton()
                              ),
                              popperContainer: this.props.popperContainer,
                              popperComponent: e,
                              popperPlacement: this.props.popperPlacement,
                              popperProps: this.props.popperProps
                          });
                }),
                n
            );
        })(t.Component),
        et = "input",
        tt = "navigate";
    (e.registerLocale = function(e, t) {
        var n = "undefined" != typeof window ? window : global;
        n.__localeData__ || (n.__localeData__ = {}), (n.__localeData__[e] = t);
    }),
        (e.setDefaultLocale = function(e) {
            ("undefined" != typeof window ? window : global).__localeId__ = e;
        }),
        (e.getDefaultLocale = ue),
        (e.default = $e),
        (e.CalendarContainer = be),
        Object.defineProperty(e, "__esModule", { value: !0 });
});

(function(global, factory) {
    typeof exports === "object" && typeof module !== "undefined"
        ? factory(exports, require("react"))
        : typeof define === "function" && define.amd
        ? define(["exports", "react"], factory)
        : factory((global.ReactRouterDOM = {}), global.React);
})(this, function(exports, React) {
    "use strict";

    var React__default = "default" in React ? React["default"] : React;

    var commonjsGlobal =
        typeof globalThis !== "undefined"
            ? globalThis
            : typeof window !== "undefined"
            ? window
            : typeof global !== "undefined"
            ? global
            : typeof self !== "undefined"
            ? self
            : {};

    function unwrapExports(x) {
        return x &&
            x.__esModule &&
            Object.prototype.hasOwnProperty.call(x, "default")
            ? x["default"]
            : x;
    }

    function createCommonjsModule(fn, module) {
        return (
            (module = { exports: {} }),
            fn(module, module.exports),
            module.exports
        );
    }

    /*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;

    function toObject(val) {
        if (val === null || val === undefined) {
            throw new TypeError(
                "Object.assign cannot be called with null or undefined"
            );
        }

        return Object(val);
    }

    function shouldUseNative() {
        try {
            if (!Object.assign) {
                return false;
            }

            // Detect buggy property enumeration order in older V8 versions.

            // https://bugs.chromium.org/p/v8/issues/detail?id=4118
            var test1 = new String("abc"); // eslint-disable-line no-new-wrappers
            test1[5] = "de";
            if (Object.getOwnPropertyNames(test1)[0] === "5") {
                return false;
            }

            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test2 = {};
            for (var i = 0; i < 10; i++) {
                test2["_" + String.fromCharCode(i)] = i;
            }
            var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
                return test2[n];
            });
            if (order2.join("") !== "0123456789") {
                return false;
            }

            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test3 = {};
            "abcdefghijklmnopqrst".split("").forEach(function(letter) {
                test3[letter] = letter;
            });
            if (
                Object.keys(Object.assign({}, test3)).join("") !==
                "abcdefghijklmnopqrst"
            ) {
                return false;
            }

            return true;
        } catch (err) {
            // We don't expect any of the above to throw, but better to be safe.
            return false;
        }
    }

    var objectAssign = shouldUseNative()
        ? Object.assign
        : function(target, source) {
              var from;
              var to = toObject(target);
              var symbols;

              for (var s = 1; s < arguments.length; s++) {
                  from = Object(arguments[s]);

                  for (var key in from) {
                      if (hasOwnProperty.call(from, key)) {
                          to[key] = from[key];
                      }
                  }

                  if (getOwnPropertySymbols) {
                      symbols = getOwnPropertySymbols(from);
                      for (var i = 0; i < symbols.length; i++) {
                          if (propIsEnumerable.call(from, symbols[i])) {
                              to[symbols[i]] = from[symbols[i]];
                          }
                      }
                  }
              }

              return to;
          };

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";

    var ReactPropTypesSecret_1 = ReactPropTypesSecret;

    var printWarning = function() {};

    {
        var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
        var loggedTypeFailures = {};

        printWarning = function(text) {
            var message = "Warning: " + text;
            if (typeof console !== "undefined") {
                console.error(message);
            }
            try {
                // --- Welcome to debugging React ---
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                throw new Error(message);
            } catch (x) {}
        };
    }

    /**
     * Assert that the values match with the type specs.
     * Error messages are memorized and will only be shown once.
     *
     * @param {object} typeSpecs Map of name to a ReactPropType
     * @param {object} values Runtime values that need to be type-checked
     * @param {string} location e.g. "prop", "context", "child context"
     * @param {string} componentName Name of the component for error messages.
     * @param {?Function} getStack Returns the component stack.
     * @private
     */
    function checkPropTypes(
        typeSpecs,
        values,
        location,
        componentName,
        getStack
    ) {
        {
            for (var typeSpecName in typeSpecs) {
                if (typeSpecs.hasOwnProperty(typeSpecName)) {
                    var error;
                    // Prop type validation may throw. In case they do, we don't want to
                    // fail the render phase where it didn't fail before. So we log it.
                    // After these have been cleaned up, we'll let them throw.
                    try {
                        // This is intentionally an invariant that gets caught. It's the same
                        // behavior as without this statement except with a better message.
                        if (typeof typeSpecs[typeSpecName] !== "function") {
                            var err = Error(
                                (componentName || "React class") +
                                    ": " +
                                    location +
                                    " type `" +
                                    typeSpecName +
                                    "` is invalid; " +
                                    "it must be a function, usually from the `prop-types` package, but received `" +
                                    typeof typeSpecs[typeSpecName] +
                                    "`."
                            );
                            err.name = "Invariant Violation";
                            throw err;
                        }
                        error = typeSpecs[typeSpecName](
                            values,
                            typeSpecName,
                            componentName,
                            location,
                            null,
                            ReactPropTypesSecret$1
                        );
                    } catch (ex) {
                        error = ex;
                    }
                    if (error && !(error instanceof Error)) {
                        printWarning(
                            (componentName || "React class") +
                                ": type specification of " +
                                location +
                                " `" +
                                typeSpecName +
                                "` is invalid; the type checker " +
                                "function must return `null` or an `Error` but returned a " +
                                typeof error +
                                ". " +
                                "You may have forgotten to pass an argument to the type checker " +
                                "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " +
                                "shape all require an argument)."
                        );
                    }
                    if (
                        error instanceof Error &&
                        !(error.message in loggedTypeFailures)
                    ) {
                        // Only monitor this failure once because there tends to be a lot of the
                        // same error.
                        loggedTypeFailures[error.message] = true;

                        var stack = getStack ? getStack() : "";

                        printWarning(
                            "Failed " +
                                location +
                                " type: " +
                                error.message +
                                (stack != null ? stack : "")
                        );
                    }
                }
            }
        }
    }

    var checkPropTypes_1 = checkPropTypes;

    var printWarning$1 = function() {};

    {
        printWarning$1 = function(text) {
            var message = "Warning: " + text;
            if (typeof console !== "undefined") {
                console.error(message);
            }
            try {
                // --- Welcome to debugging React ---
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                throw new Error(message);
            } catch (x) {}
        };
    }

    function emptyFunctionThatReturnsNull() {
        return null;
    }

    var factoryWithTypeCheckers = function(
        isValidElement,
        throwOnDirectAccess
    ) {
        /* global Symbol */
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator"; // Before Symbol spec.

        /**
         * Returns the iterator method function contained on the iterable object.
         *
         * Be sure to invoke the function with the iterable as context:
         *
         *     var iteratorFn = getIteratorFn(myIterable);
         *     if (iteratorFn) {
         *       var iterator = iteratorFn.call(myIterable);
         *       ...
         *     }
         *
         * @param {?object} maybeIterable
         * @return {?function}
         */
        function getIteratorFn(maybeIterable) {
            var iteratorFn =
                maybeIterable &&
                ((ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL]) ||
                    maybeIterable[FAUX_ITERATOR_SYMBOL]);
            if (typeof iteratorFn === "function") {
                return iteratorFn;
            }
        }

        /**
         * Collection of methods that allow declaration and validation of props that are
         * supplied to React components. Example usage:
         *
         *   var Props = require('ReactPropTypes');
         *   var MyArticle = React.createClass({
         *     propTypes: {
         *       // An optional string prop named "description".
         *       description: Props.string,
         *
         *       // A required enum prop named "category".
         *       category: Props.oneOf(['News','Photos']).isRequired,
         *
         *       // A prop named "dialog" that requires an instance of Dialog.
         *       dialog: Props.instanceOf(Dialog).isRequired
         *     },
         *     render: function() { ... }
         *   });
         *
         * A more formal specification of how these methods are used:
         *
         *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
         *   decl := ReactPropTypes.{type}(.isRequired)?
         *
         * Each and every declaration produces a function with the same signature. This
         * allows the creation of custom validation functions. For example:
         *
         *  var MyLink = React.createClass({
         *    propTypes: {
         *      // An optional string or URI prop named "href".
         *      href: function(props, propName, componentName) {
         *        var propValue = props[propName];
         *        if (propValue != null && typeof propValue !== 'string' &&
         *            !(propValue instanceof URI)) {
         *          return new Error(
         *            'Expected a string or an URI for ' + propName + ' in ' +
         *            componentName
         *          );
         *        }
         *      }
         *    },
         *    render: function() {...}
         *  });
         *
         * @internal
         */

        var ANONYMOUS = "<<anonymous>>";

        // Important!
        // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
        var ReactPropTypes = {
            array: createPrimitiveTypeChecker("array"),
            bool: createPrimitiveTypeChecker("boolean"),
            func: createPrimitiveTypeChecker("function"),
            number: createPrimitiveTypeChecker("number"),
            object: createPrimitiveTypeChecker("object"),
            string: createPrimitiveTypeChecker("string"),
            symbol: createPrimitiveTypeChecker("symbol"),

            any: createAnyTypeChecker(),
            arrayOf: createArrayOfTypeChecker,
            element: createElementTypeChecker(),
            instanceOf: createInstanceTypeChecker,
            node: createNodeChecker(),
            objectOf: createObjectOfTypeChecker,
            oneOf: createEnumTypeChecker,
            oneOfType: createUnionTypeChecker,
            shape: createShapeTypeChecker,
            exact: createStrictShapeTypeChecker
        };

        /**
         * inlined Object.is polyfill to avoid requiring consumers ship their own
         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
         */
        /*eslint-disable no-self-compare*/
        function is(x, y) {
            // SameValue algorithm
            if (x === y) {
                // Steps 1-5, 7-10
                // Steps 6.b-6.e: +0 != -0
                return x !== 0 || 1 / x === 1 / y;
            } else {
                // Step 6.a: NaN == NaN
                return x !== x && y !== y;
            }
        }
        /*eslint-enable no-self-compare*/

        /**
         * We use an Error-like object for backward compatibility as people may call
         * PropTypes directly and inspect their output. However, we don't use real
         * Errors anymore. We don't inspect their stack anyway, and creating them
         * is prohibitively expensive if they are created too often, such as what
         * happens in oneOfType() for any type before the one that matched.
         */
        function PropTypeError(message) {
            this.message = message;
            this.stack = "";
        }
        // Make `instanceof Error` still work for returned errors.
        PropTypeError.prototype = Error.prototype;

        function createChainableTypeChecker(validate) {
            {
                var manualPropTypeCallCache = {};
                var manualPropTypeWarningCount = 0;
            }
            function checkType(
                isRequired,
                props,
                propName,
                componentName,
                location,
                propFullName,
                secret
            ) {
                componentName = componentName || ANONYMOUS;
                propFullName = propFullName || propName;

                if (secret !== ReactPropTypesSecret_1) {
                    if (throwOnDirectAccess) {
                        // New behavior only for users of `prop-types` package
                        var err = new Error(
                            "Calling PropTypes validators directly is not supported by the `prop-types` package. " +
                                "Use `PropTypes.checkPropTypes()` to call them. " +
                                "Read more at http://fb.me/use-check-prop-types"
                        );
                        err.name = "Invariant Violation";
                        throw err;
                    } else if (typeof console !== "undefined") {
                        // Old behavior for people using React.PropTypes
                        var cacheKey = componentName + ":" + propName;
                        if (
                            !manualPropTypeCallCache[cacheKey] &&
                            // Avoid spamming the console because they are often not actionable except for lib authors
                            manualPropTypeWarningCount < 3
                        ) {
                            printWarning$1(
                                "You are manually calling a React.PropTypes validation " +
                                    "function for the `" +
                                    propFullName +
                                    "` prop on `" +
                                    componentName +
                                    "`. This is deprecated " +
                                    "and will throw in the standalone `prop-types` package. " +
                                    "You may be seeing this warning due to a third-party PropTypes " +
                                    "library. See https://fb.me/react-warning-dont-call-proptypes " +
                                    "for details."
                            );
                            manualPropTypeCallCache[cacheKey] = true;
                            manualPropTypeWarningCount++;
                        }
                    }
                }
                if (props[propName] == null) {
                    if (isRequired) {
                        if (props[propName] === null) {
                            return new PropTypeError(
                                "The " +
                                    location +
                                    " `" +
                                    propFullName +
                                    "` is marked as required " +
                                    ("in `" +
                                        componentName +
                                        "`, but its value is `null`.")
                            );
                        }
                        return new PropTypeError(
                            "The " +
                                location +
                                " `" +
                                propFullName +
                                "` is marked as required in " +
                                ("`" +
                                    componentName +
                                    "`, but its value is `undefined`.")
                        );
                    }
                    return null;
                } else {
                    return validate(
                        props,
                        propName,
                        componentName,
                        location,
                        propFullName
                    );
                }
            }

            var chainedCheckType = checkType.bind(null, false);
            chainedCheckType.isRequired = checkType.bind(null, true);

            return chainedCheckType;
        }

        function createPrimitiveTypeChecker(expectedType) {
            function validate(
                props,
                propName,
                componentName,
                location,
                propFullName,
                secret
            ) {
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== expectedType) {
                    // `propValue` being instance of, say, date/regexp, pass the 'object'
                    // check, but we can offer a more precise error message here rather than
                    // 'of type `object`'.
                    var preciseType = getPreciseType(propValue);

                    return new PropTypeError(
                        "Invalid " +
                            location +
                            " `" +
                            propFullName +
                            "` of type " +
                            ("`" +
                                preciseType +
                                "` supplied to `" +
                                componentName +
                                "`, expected ") +
                            ("`" + expectedType + "`.")
                    );
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createAnyTypeChecker() {
            return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }

        function createArrayOfTypeChecker(typeChecker) {
            function validate(
                props,
                propName,
                componentName,
                location,
                propFullName
            ) {
                if (typeof typeChecker !== "function") {
                    return new PropTypeError(
                        "Property `" +
                            propFullName +
                            "` of component `" +
                            componentName +
                            "` has invalid PropType notation inside arrayOf."
                    );
                }
                var propValue = props[propName];
                if (!Array.isArray(propValue)) {
                    var propType = getPropType(propValue);
                    return new PropTypeError(
                        "Invalid " +
                            location +
                            " `" +
                            propFullName +
                            "` of type " +
                            ("`" +
                                propType +
                                "` supplied to `" +
                                componentName +
                                "`, expected an array.")
                    );
                }
                for (var i = 0; i < propValue.length; i++) {
                    var error = typeChecker(
                        propValue,
                        i,
                        componentName,
                        location,
                        propFullName + "[" + i + "]",
                        ReactPropTypesSecret_1
                    );
                    if (error instanceof Error) {
                        return error;
                    }
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createElementTypeChecker() {
            function validate(
                props,
                propName,
                componentName,
                location,
                propFullName
            ) {
                var propValue = props[propName];
                if (!isValidElement(propValue)) {
                    var propType = getPropType(propValue);
                    return new PropTypeError(
                        "Invalid " +
                            location +
                            " `" +
                            propFullName +
                            "` of type " +
                            ("`" +
                                propType +
                                "` supplied to `" +
                                componentName +
                                "`, expected a single ReactElement.")
                    );
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createInstanceTypeChecker(expectedClass) {
            function validate(
                props,
                propName,
                componentName,
                location,
                propFullName
            ) {
                if (!(props[propName] instanceof expectedClass)) {
                    var expectedClassName = expectedClass.name || ANONYMOUS;
                    var actualClassName = getClassName(props[propName]);
                    return new PropTypeError(
                        "Invalid " +
                            location +
                            " `" +
                            propFullName +
                            "` of type " +
                            ("`" +
                                actualClassName +
                                "` supplied to `" +
                                componentName +
                                "`, expected ") +
                            ("instance of `" + expectedClassName + "`.")
                    );
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createEnumTypeChecker(expectedValues) {
            if (!Array.isArray(expectedValues)) {
                printWarning$1(
                    "Invalid argument supplied to oneOf, expected an instance of array."
                );
                return emptyFunctionThatReturnsNull;
            }

            function validate(
                props,
                propName,
                componentName,
                location,
                propFullName
            ) {
                var propValue = props[propName];
                for (var i = 0; i < expectedValues.length; i++) {
                    if (is(propValue, expectedValues[i])) {
                        return null;
                    }
                }

                var valuesString = JSON.stringify(expectedValues);
                return new PropTypeError(
                    "Invalid " +
                        location +
                        " `" +
                        propFullName +
                        "` of value `" +
                        propValue +
                        "` " +
                        ("supplied to `" +
                            componentName +
                            "`, expected one of " +
                            valuesString +
                            ".")
                );
            }
            return createChainableTypeChecker(validate);
        }

        function createObjectOfTypeChecker(typeChecker) {
            function validate(
                props,
                propName,
                componentName,
                location,
                propFullName
            ) {
                if (typeof typeChecker !== "function") {
                    return new PropTypeError(
                        "Property `" +
                            propFullName +
                            "` of component `" +
                            componentName +
                            "` has invalid PropType notation inside objectOf."
                    );
                }
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== "object") {
                    return new PropTypeError(
                        "Invalid " +
                            location +
                            " `" +
                            propFullName +
                            "` of type " +
                            ("`" +
                                propType +
                                "` supplied to `" +
                                componentName +
                                "`, expected an object.")
                    );
                }
                for (var key in propValue) {
                    if (propValue.hasOwnProperty(key)) {
                        var error = typeChecker(
                            propValue,
                            key,
                            componentName,
                            location,
                            propFullName + "." + key,
                            ReactPropTypesSecret_1
                        );
                        if (error instanceof Error) {
                            return error;
                        }
                    }
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createUnionTypeChecker(arrayOfTypeCheckers) {
            if (!Array.isArray(arrayOfTypeCheckers)) {
                printWarning$1(
                    "Invalid argument supplied to oneOfType, expected an instance of array."
                );
                return emptyFunctionThatReturnsNull;
            }

            for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                var checker = arrayOfTypeCheckers[i];
                if (typeof checker !== "function") {
                    printWarning$1(
                        "Invalid argument supplied to oneOfType. Expected an array of check functions, but " +
                            "received " +
                            getPostfixForTypeWarning(checker) +
                            " at index " +
                            i +
                            "."
                    );
                    return emptyFunctionThatReturnsNull;
                }
            }

            function validate(
                props,
                propName,
                componentName,
                location,
                propFullName
            ) {
                for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                    var checker = arrayOfTypeCheckers[i];
                    if (
                        checker(
                            props,
                            propName,
                            componentName,
                            location,
                            propFullName,
                            ReactPropTypesSecret_1
                        ) == null
                    ) {
                        return null;
                    }
                }

                return new PropTypeError(
                    "Invalid " +
                        location +
                        " `" +
                        propFullName +
                        "` supplied to " +
                        ("`" + componentName + "`.")
                );
            }
            return createChainableTypeChecker(validate);
        }

        function createNodeChecker() {
            function validate(
                props,
                propName,
                componentName,
                location,
                propFullName
            ) {
                if (!isNode(props[propName])) {
                    return new PropTypeError(
                        "Invalid " +
                            location +
                            " `" +
                            propFullName +
                            "` supplied to " +
                            ("`" + componentName + "`, expected a ReactNode.")
                    );
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createShapeTypeChecker(shapeTypes) {
            function validate(
                props,
                propName,
                componentName,
                location,
                propFullName
            ) {
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== "object") {
                    return new PropTypeError(
                        "Invalid " +
                            location +
                            " `" +
                            propFullName +
                            "` of type `" +
                            propType +
                            "` " +
                            ("supplied to `" +
                                componentName +
                                "`, expected `object`.")
                    );
                }
                for (var key in shapeTypes) {
                    var checker = shapeTypes[key];
                    if (!checker) {
                        continue;
                    }
                    var error = checker(
                        propValue,
                        key,
                        componentName,
                        location,
                        propFullName + "." + key,
                        ReactPropTypesSecret_1
                    );
                    if (error) {
                        return error;
                    }
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createStrictShapeTypeChecker(shapeTypes) {
            function validate(
                props,
                propName,
                componentName,
                location,
                propFullName
            ) {
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== "object") {
                    return new PropTypeError(
                        "Invalid " +
                            location +
                            " `" +
                            propFullName +
                            "` of type `" +
                            propType +
                            "` " +
                            ("supplied to `" +
                                componentName +
                                "`, expected `object`.")
                    );
                }
                // We need to check all keys in case some are required but missing from
                // props.
                var allKeys = objectAssign({}, props[propName], shapeTypes);
                for (var key in allKeys) {
                    var checker = shapeTypes[key];
                    if (!checker) {
                        return new PropTypeError(
                            "Invalid " +
                                location +
                                " `" +
                                propFullName +
                                "` key `" +
                                key +
                                "` supplied to `" +
                                componentName +
                                "`." +
                                "\nBad object: " +
                                JSON.stringify(props[propName], null, "  ") +
                                "\nValid keys: " +
                                JSON.stringify(
                                    Object.keys(shapeTypes),
                                    null,
                                    "  "
                                )
                        );
                    }
                    var error = checker(
                        propValue,
                        key,
                        componentName,
                        location,
                        propFullName + "." + key,
                        ReactPropTypesSecret_1
                    );
                    if (error) {
                        return error;
                    }
                }
                return null;
            }

            return createChainableTypeChecker(validate);
        }

        function isNode(propValue) {
            switch (typeof propValue) {
                case "number":
                case "string":
                case "undefined":
                    return true;
                case "boolean":
                    return !propValue;
                case "object":
                    if (Array.isArray(propValue)) {
                        return propValue.every(isNode);
                    }
                    if (propValue === null || isValidElement(propValue)) {
                        return true;
                    }

                    var iteratorFn = getIteratorFn(propValue);
                    if (iteratorFn) {
                        var iterator = iteratorFn.call(propValue);
                        var step;
                        if (iteratorFn !== propValue.entries) {
                            while (!(step = iterator.next()).done) {
                                if (!isNode(step.value)) {
                                    return false;
                                }
                            }
                        } else {
                            // Iterator will provide entry [k,v] tuples rather than values.
                            while (!(step = iterator.next()).done) {
                                var entry = step.value;
                                if (entry) {
                                    if (!isNode(entry[1])) {
                                        return false;
                                    }
                                }
                            }
                        }
                    } else {
                        return false;
                    }

                    return true;
                default:
                    return false;
            }
        }

        function isSymbol(propType, propValue) {
            // Native Symbol.
            if (propType === "symbol") {
                return true;
            }

            // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
            if (propValue["@@toStringTag"] === "Symbol") {
                return true;
            }

            // Fallback for non-spec compliant Symbols which are polyfilled.
            if (typeof Symbol === "function" && propValue instanceof Symbol) {
                return true;
            }

            return false;
        }

        // Equivalent of `typeof` but with special handling for array and regexp.
        function getPropType(propValue) {
            var propType = typeof propValue;
            if (Array.isArray(propValue)) {
                return "array";
            }
            if (propValue instanceof RegExp) {
                // Old webkits (at least until Android 4.0) return 'function' rather than
                // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
                // passes PropTypes.object.
                return "object";
            }
            if (isSymbol(propType, propValue)) {
                return "symbol";
            }
            return propType;
        }

        // This handles more types than `getPropType`. Only used for error messages.
        // See `createPrimitiveTypeChecker`.
        function getPreciseType(propValue) {
            if (typeof propValue === "undefined" || propValue === null) {
                return "" + propValue;
            }
            var propType = getPropType(propValue);
            if (propType === "object") {
                if (propValue instanceof Date) {
                    return "date";
                } else if (propValue instanceof RegExp) {
                    return "regexp";
                }
            }
            return propType;
        }

        // Returns a string that is postfixed to a warning about an invalid type.
        // For example, "undefined" or "of type array"
        function getPostfixForTypeWarning(value) {
            var type = getPreciseType(value);
            switch (type) {
                case "array":
                case "object":
                    return "an " + type;
                case "boolean":
                case "date":
                case "regexp":
                    return "a " + type;
                default:
                    return type;
            }
        }

        // Returns class name of the object, if any.
        function getClassName(propValue) {
            if (!propValue.constructor || !propValue.constructor.name) {
                return ANONYMOUS;
            }
            return propValue.constructor.name;
        }

        ReactPropTypes.checkPropTypes = checkPropTypes_1;
        ReactPropTypes.PropTypes = ReactPropTypes;

        return ReactPropTypes;
    };

    var propTypes = createCommonjsModule(function(module) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        {
            var REACT_ELEMENT_TYPE =
                (typeof Symbol === "function" &&
                    Symbol.for &&
                    Symbol.for("react.element")) ||
                0xeac7;

            var isValidElement = function(object) {
                return (
                    typeof object === "object" &&
                    object !== null &&
                    object.$$typeof === REACT_ELEMENT_TYPE
                );
            };

            // By explicitly using `prop-types` you are opting into new development behavior.
            // http://fb.me/prop-types-in-prod
            var throwOnDirectAccess = true;
            module.exports = factoryWithTypeCheckers(
                isValidElement,
                throwOnDirectAccess
            );
        }
    });

    var key = "__global_unique_id__";

    var gud = function() {
        return (commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1);
    };

    function warning(condition, message) {
        {
            if (condition) {
                return;
            }

            var text = "Warning: " + message;

            if (typeof console !== "undefined") {
                console.warn(text);
            }

            try {
                throw Error(text);
            } catch (x) {}
        }
    }

    function _defineProperty(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }

        return obj;
    }

    function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
    }

    function _assertThisInitialized(self) {
        if (self === void 0) {
            throw new ReferenceError(
                "this hasn't been initialised - super() hasn't been called"
            );
        }

        return self;
    }

    var MAX_SIGNED_31_BIT_INT = 1073741823; // Inlined Object.is polyfill.
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is

    function objectIs(x, y) {
        if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
        } else {
            return x !== x && y !== y;
        }
    }

    function createEventEmitter(value) {
        var handlers = [];
        return {
            on: function on(handler) {
                handlers.push(handler);
            },
            off: function off(handler) {
                handlers = handlers.filter(function(h) {
                    return h !== handler;
                });
            },
            get: function get() {
                return value;
            },
            set: function set(newValue, changedBits) {
                value = newValue;
                handlers.forEach(function(handler) {
                    return handler(value, changedBits);
                });
            }
        };
    }

    function onlyChild(children) {
        return Array.isArray(children) ? children[0] : children;
    }

    function createReactContext(defaultValue, calculateChangedBits) {
        var _defineProperty2, _defineProperty3;

        var contextProp = "__create-react-context-" + gud() + "__";

        var Provider =
            /*#__PURE__*/
            (function(_Component) {
                _inheritsLoose(Provider, _Component);

                function Provider() {
                    var _this;

                    for (
                        var _len = arguments.length,
                            args = new Array(_len),
                            _key = 0;
                        _key < _len;
                        _key++
                    ) {
                        args[_key] = arguments[_key];
                    }

                    _this =
                        _Component.call.apply(
                            _Component,
                            [this].concat(args)
                        ) || this;

                    _defineProperty(
                        _assertThisInitialized(_this),
                        "emitter",
                        createEventEmitter(_this.props.value)
                    );

                    return _this;
                }

                var _proto = Provider.prototype;

                _proto.getChildContext = function getChildContext() {
                    var _ref;

                    return (
                        (_ref = {}), (_ref[contextProp] = this.emitter), _ref
                    );
                };

                _proto.componentWillReceiveProps = function componentWillReceiveProps(
                    nextProps
                ) {
                    if (this.props.value !== nextProps.value) {
                        var oldValue = this.props.value;
                        var newValue = nextProps.value;
                        var changedBits;

                        if (objectIs(oldValue, newValue)) {
                            changedBits = 0; // No change
                        } else {
                            changedBits =
                                typeof calculateChangedBits === "function"
                                    ? calculateChangedBits(oldValue, newValue)
                                    : MAX_SIGNED_31_BIT_INT;

                            {
                                warning(
                                    (changedBits & MAX_SIGNED_31_BIT_INT) ===
                                        changedBits,
                                    "calculateChangedBits: Expected the return value to be a " +
                                        "31-bit integer. Instead received: " +
                                        changedBits
                                );
                            }

                            changedBits |= 0;

                            if (changedBits !== 0) {
                                this.emitter.set(nextProps.value, changedBits);
                            }
                        }
                    }
                };

                _proto.render = function render() {
                    return this.props.children;
                };

                return Provider;
            })(React.Component);

        _defineProperty(
            Provider,
            "childContextTypes",
            ((_defineProperty2 = {}),
            (_defineProperty2[contextProp] = propTypes.object.isRequired),
            _defineProperty2)
        );

        var Consumer =
            /*#__PURE__*/
            (function(_Component2) {
                _inheritsLoose(Consumer, _Component2);

                function Consumer() {
                    var _this2;

                    for (
                        var _len2 = arguments.length,
                            args = new Array(_len2),
                            _key2 = 0;
                        _key2 < _len2;
                        _key2++
                    ) {
                        args[_key2] = arguments[_key2];
                    }

                    _this2 =
                        _Component2.call.apply(
                            _Component2,
                            [this].concat(args)
                        ) || this;

                    _defineProperty(
                        _assertThisInitialized(_this2),
                        "observedBits",
                        void 0
                    );

                    _defineProperty(_assertThisInitialized(_this2), "state", {
                        value: _this2.getValue()
                    });

                    _defineProperty(
                        _assertThisInitialized(_this2),
                        "onUpdate",
                        function(newValue, changedBits) {
                            var observedBits = _this2.observedBits | 0;

                            if ((observedBits & changedBits) !== 0) {
                                _this2.setState({
                                    value: _this2.getValue()
                                });
                            }
                        }
                    );

                    return _this2;
                }

                var _proto2 = Consumer.prototype;

                _proto2.componentWillReceiveProps = function componentWillReceiveProps(
                    nextProps
                ) {
                    var observedBits = nextProps.observedBits;
                    this.observedBits =
                        observedBits === undefined || observedBits === null
                            ? MAX_SIGNED_31_BIT_INT // Subscribe to all changes by default
                            : observedBits;
                };

                _proto2.componentDidMount = function componentDidMount() {
                    if (this.context[contextProp]) {
                        this.context[contextProp].on(this.onUpdate);
                    }

                    var observedBits = this.props.observedBits;
                    this.observedBits =
                        observedBits === undefined || observedBits === null
                            ? MAX_SIGNED_31_BIT_INT // Subscribe to all changes by default
                            : observedBits;
                };

                _proto2.componentWillUnmount = function componentWillUnmount() {
                    if (this.context[contextProp]) {
                        this.context[contextProp].off(this.onUpdate);
                    }
                };

                _proto2.getValue = function getValue() {
                    if (this.context[contextProp]) {
                        return this.context[contextProp].get();
                    } else {
                        return defaultValue;
                    }
                };

                _proto2.render = function render() {
                    return onlyChild(this.props.children)(this.state.value);
                };

                return Consumer;
            })(React.Component);

        _defineProperty(
            Consumer,
            "contextTypes",
            ((_defineProperty3 = {}),
            (_defineProperty3[contextProp] = propTypes.object),
            _defineProperty3)
        );

        return {
            Provider: Provider,
            Consumer: Consumer
        };
    }

    var index = React__default.createContext || createReactContext;

    function _inheritsLoose$1(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
    }

    function warning$1(condition, message) {
        {
            if (condition) {
                return;
            }

            console.warn(message);
        }
    }

    function _extends() {
        _extends =
            Object.assign ||
            function(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];

                    for (var key in source) {
                        if (Object.prototype.hasOwnProperty.call(source, key)) {
                            target[key] = source[key];
                        }
                    }
                }

                return target;
            };

        return _extends.apply(this, arguments);
    }

    function isAbsolute(pathname) {
        return pathname.charAt(0) === "/";
    }

    // About 1.5x faster than the two-arg version of Array#splice()
    function spliceOne(list, index) {
        for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
            list[i] = list[k];
        }

        list.pop();
    }

    // This implementation is based heavily on node's url.parse
    function resolvePathname(to) {
        var from =
            arguments.length > 1 && arguments[1] !== undefined
                ? arguments[1]
                : "";

        var toParts = (to && to.split("/")) || [];
        var fromParts = (from && from.split("/")) || [];

        var isToAbs = to && isAbsolute(to);
        var isFromAbs = from && isAbsolute(from);
        var mustEndAbs = isToAbs || isFromAbs;

        if (to && isAbsolute(to)) {
            // to is absolute
            fromParts = toParts;
        } else if (toParts.length) {
            // to is relative, drop the filename
            fromParts.pop();
            fromParts = fromParts.concat(toParts);
        }

        if (!fromParts.length) return "/";

        var hasTrailingSlash = void 0;
        if (fromParts.length) {
            var last = fromParts[fromParts.length - 1];
            hasTrailingSlash = last === "." || last === ".." || last === "";
        } else {
            hasTrailingSlash = false;
        }

        var up = 0;
        for (var i = fromParts.length; i >= 0; i--) {
            var part = fromParts[i];

            if (part === ".") {
                spliceOne(fromParts, i);
            } else if (part === "..") {
                spliceOne(fromParts, i);
                up++;
            } else if (up) {
                spliceOne(fromParts, i);
                up--;
            }
        }

        if (!mustEndAbs)
            for (; up--; up) {
                fromParts.unshift("..");
            }
        if (
            mustEndAbs &&
            fromParts[0] !== "" &&
            (!fromParts[0] || !isAbsolute(fromParts[0]))
        )
            fromParts.unshift("");

        var result = fromParts.join("/");

        if (hasTrailingSlash && result.substr(-1) !== "/") result += "/";

        return result;
    }

    var _typeof =
        typeof Symbol === "function" && typeof Symbol.iterator === "symbol"
            ? function(obj) {
                  return typeof obj;
              }
            : function(obj) {
                  return obj &&
                      typeof Symbol === "function" &&
                      obj.constructor === Symbol &&
                      obj !== Symbol.prototype
                      ? "symbol"
                      : typeof obj;
              };

    function valueEqual(a, b) {
        if (a === b) return true;

        if (a == null || b == null) return false;

        if (Array.isArray(a)) {
            return (
                Array.isArray(b) &&
                a.length === b.length &&
                a.every(function(item, index) {
                    return valueEqual(item, b[index]);
                })
            );
        }

        var aType = typeof a === "undefined" ? "undefined" : _typeof(a);
        var bType = typeof b === "undefined" ? "undefined" : _typeof(b);

        if (aType !== bType) return false;

        if (aType === "object") {
            var aValue = a.valueOf();
            var bValue = b.valueOf();

            if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

            var aKeys = Object.keys(a);
            var bKeys = Object.keys(b);

            if (aKeys.length !== bKeys.length) return false;

            return aKeys.every(function(key) {
                return valueEqual(a[key], b[key]);
            });
        }

        return false;
    }

    var prefix = "Invariant failed";
    function invariant(condition, message) {
        if (condition) {
            return;
        }

        {
            throw new Error(prefix + ": " + (message || ""));
        }
    }

    function parsePath(path) {
        var pathname = path || "/";
        var search = "";
        var hash = "";
        var hashIndex = pathname.indexOf("#");

        if (hashIndex !== -1) {
            hash = pathname.substr(hashIndex);
            pathname = pathname.substr(0, hashIndex);
        }

        var searchIndex = pathname.indexOf("?");

        if (searchIndex !== -1) {
            search = pathname.substr(searchIndex);
            pathname = pathname.substr(0, searchIndex);
        }

        return {
            pathname: pathname,
            search: search === "?" ? "" : search,
            hash: hash === "#" ? "" : hash
        };
    }
    function createPath(location) {
        var pathname = location.pathname,
            search = location.search,
            hash = location.hash;
        var path = pathname || "/";
        if (search && search !== "?")
            path += search.charAt(0) === "?" ? search : "?" + search;
        if (hash && hash !== "#")
            path += hash.charAt(0) === "#" ? hash : "#" + hash;
        return path;
    }

    function createLocation(path, state, key, currentLocation) {
        var location;

        if (typeof path === "string") {
            // Two-arg form: push(path, state)
            location = parsePath(path);
            location.state = state;
        } else {
            // One-arg form: push(location)
            location = _extends({}, path);
            if (location.pathname === undefined) location.pathname = "";

            if (location.search) {
                if (location.search.charAt(0) !== "?")
                    location.search = "?" + location.search;
            } else {
                location.search = "";
            }

            if (location.hash) {
                if (location.hash.charAt(0) !== "#")
                    location.hash = "#" + location.hash;
            } else {
                location.hash = "";
            }

            if (state !== undefined && location.state === undefined)
                location.state = state;
        }

        try {
            location.pathname = decodeURI(location.pathname);
        } catch (e) {
            if (e instanceof URIError) {
                throw new URIError(
                    'Pathname "' +
                        location.pathname +
                        '" could not be decoded. ' +
                        "This is likely caused by an invalid percent-encoding."
                );
            } else {
                throw e;
            }
        }

        if (key) location.key = key;

        if (currentLocation) {
            // Resolve incomplete/relative pathname relative to current location.
            if (!location.pathname) {
                location.pathname = currentLocation.pathname;
            } else if (location.pathname.charAt(0) !== "/") {
                location.pathname = resolvePathname(
                    location.pathname,
                    currentLocation.pathname
                );
            }
        } else {
            // When there is no prior location and pathname is empty, set it to /
            if (!location.pathname) {
                location.pathname = "/";
            }
        }

        return location;
    }
    function locationsAreEqual(a, b) {
        return (
            a.pathname === b.pathname &&
            a.search === b.search &&
            a.hash === b.hash &&
            a.key === b.key &&
            valueEqual(a.state, b.state)
        );
    }

    function createTransitionManager() {
        var prompt = null;

        function setPrompt(nextPrompt) {
            warning$1(
                prompt == null,
                "A history supports only one prompt at a time"
            );
            prompt = nextPrompt;
            return function() {
                if (prompt === nextPrompt) prompt = null;
            };
        }

        function confirmTransitionTo(
            location,
            action,
            getUserConfirmation,
            callback
        ) {
            // TODO: If another transition starts while we're still confirming
            // the previous one, we may end up in a weird state. Figure out the
            // best way to handle this.
            if (prompt != null) {
                var result =
                    typeof prompt === "function"
                        ? prompt(location, action)
                        : prompt;

                if (typeof result === "string") {
                    if (typeof getUserConfirmation === "function") {
                        getUserConfirmation(result, callback);
                    } else {
                        warning$1(
                            false,
                            "A history needs a getUserConfirmation function in order to use a prompt message"
                        );
                        callback(true);
                    }
                } else {
                    // Return false from a transition hook to cancel the transition.
                    callback(result !== false);
                }
            } else {
                callback(true);
            }
        }

        var listeners = [];

        function appendListener(fn) {
            var isActive = true;

            function listener() {
                if (isActive) fn.apply(void 0, arguments);
            }

            listeners.push(listener);
            return function() {
                isActive = false;
                listeners = listeners.filter(function(item) {
                    return item !== listener;
                });
            };
        }

        function notifyListeners() {
            for (
                var _len = arguments.length, args = new Array(_len), _key = 0;
                _key < _len;
                _key++
            ) {
                args[_key] = arguments[_key];
            }

            listeners.forEach(function(listener) {
                return listener.apply(void 0, args);
            });
        }

        return {
            setPrompt: setPrompt,
            confirmTransitionTo: confirmTransitionTo,
            appendListener: appendListener,
            notifyListeners: notifyListeners
        };
    }

    var canUseDOM = !!(
        typeof window !== "undefined" &&
        window.document &&
        window.document.createElement
    );

    function clamp(n, lowerBound, upperBound) {
        return Math.min(Math.max(n, lowerBound), upperBound);
    }
    /**
     * Creates a history object that stores locations in memory.
     */

    function createMemoryHistory(props) {
        if (props === void 0) {
            props = {};
        }

        var _props = props,
            getUserConfirmation = _props.getUserConfirmation,
            _props$initialEntries = _props.initialEntries,
            initialEntries =
                _props$initialEntries === void 0
                    ? ["/"]
                    : _props$initialEntries,
            _props$initialIndex = _props.initialIndex,
            initialIndex =
                _props$initialIndex === void 0 ? 0 : _props$initialIndex,
            _props$keyLength = _props.keyLength,
            keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
        var transitionManager = createTransitionManager();

        function setState(nextState) {
            _extends(history, nextState);

            history.length = history.entries.length;
            transitionManager.notifyListeners(history.location, history.action);
        }

        function createKey() {
            return Math.random()
                .toString(36)
                .substr(2, keyLength);
        }

        var index = clamp(initialIndex, 0, initialEntries.length - 1);
        var entries = initialEntries.map(function(entry) {
            return typeof entry === "string"
                ? createLocation(entry, undefined, createKey())
                : createLocation(entry, undefined, entry.key || createKey());
        }); // Public interface

        var createHref = createPath;

        function push(path, state) {
            warning$1(
                !(
                    typeof path === "object" &&
                    path.state !== undefined &&
                    state !== undefined
                ),
                "You should avoid providing a 2nd state argument to push when the 1st " +
                    "argument is a location-like object that already has state; it is ignored"
            );
            var action = "PUSH";
            var location = createLocation(
                path,
                state,
                createKey(),
                history.location
            );
            transitionManager.confirmTransitionTo(
                location,
                action,
                getUserConfirmation,
                function(ok) {
                    if (!ok) return;
                    var prevIndex = history.index;
                    var nextIndex = prevIndex + 1;
                    var nextEntries = history.entries.slice(0);

                    if (nextEntries.length > nextIndex) {
                        nextEntries.splice(
                            nextIndex,
                            nextEntries.length - nextIndex,
                            location
                        );
                    } else {
                        nextEntries.push(location);
                    }

                    setState({
                        action: action,
                        location: location,
                        index: nextIndex,
                        entries: nextEntries
                    });
                }
            );
        }

        function replace(path, state) {
            warning$1(
                !(
                    typeof path === "object" &&
                    path.state !== undefined &&
                    state !== undefined
                ),
                "You should avoid providing a 2nd state argument to replace when the 1st " +
                    "argument is a location-like object that already has state; it is ignored"
            );
            var action = "REPLACE";
            var location = createLocation(
                path,
                state,
                createKey(),
                history.location
            );
            transitionManager.confirmTransitionTo(
                location,
                action,
                getUserConfirmation,
                function(ok) {
                    if (!ok) return;
                    history.entries[history.index] = location;
                    setState({
                        action: action,
                        location: location
                    });
                }
            );
        }

        function go(n) {
            var nextIndex = clamp(
                history.index + n,
                0,
                history.entries.length - 1
            );
            var action = "POP";
            var location = history.entries[nextIndex];
            transitionManager.confirmTransitionTo(
                location,
                action,
                getUserConfirmation,
                function(ok) {
                    if (ok) {
                        setState({
                            action: action,
                            location: location,
                            index: nextIndex
                        });
                    } else {
                        // Mimic the behavior of DOM histories by
                        // causing a render after a cancelled POP.
                        setState();
                    }
                }
            );
        }

        function goBack() {
            go(-1);
        }

        function goForward() {
            go(1);
        }

        function canGo(n) {
            var nextIndex = history.index + n;
            return nextIndex >= 0 && nextIndex < history.entries.length;
        }

        function block(prompt) {
            if (prompt === void 0) {
                prompt = false;
            }

            return transitionManager.setPrompt(prompt);
        }

        function listen(listener) {
            return transitionManager.appendListener(listener);
        }

        var history = {
            length: entries.length,
            action: "POP",
            location: entries[index],
            index: index,
            entries: entries,
            createHref: createHref,
            push: push,
            replace: replace,
            go: go,
            goBack: goBack,
            goForward: goForward,
            canGo: canGo,
            block: block,
            listen: listen
        };
        return history;
    }

    var isarray =
        Array.isArray ||
        function(arr) {
            return Object.prototype.toString.call(arr) == "[object Array]";
        };

    /**
     * Expose `pathToRegexp`.
     */
    var pathToRegexp_1 = pathToRegexp;
    var parse_1 = parse;
    var compile_1 = compile;
    var tokensToFunction_1 = tokensToFunction;
    var tokensToRegExp_1 = tokensToRegExp;

    /**
     * The main path matching regexp utility.
     *
     * @type {RegExp}
     */
    var PATH_REGEXP = new RegExp(
        [
            // Match escaped characters that would otherwise appear in future matches.
            // This allows the user to escape special characters that won't transform.
            "(\\\\.)",
            // Match Express-style parameters and un-named parameters with a prefix
            // and optional suffixes. Matches appear as:
            //
            // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
            // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
            // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
            "([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"
        ].join("|"),
        "g"
    );

    /**
     * Parse a string for the raw tokens.
     *
     * @param  {string}  str
     * @param  {Object=} options
     * @return {!Array}
     */
    function parse(str, options) {
        var tokens = [];
        var key = 0;
        var index = 0;
        var path = "";
        var defaultDelimiter = (options && options.delimiter) || "/";
        var res;

        while ((res = PATH_REGEXP.exec(str)) != null) {
            var m = res[0];
            var escaped = res[1];
            var offset = res.index;
            path += str.slice(index, offset);
            index = offset + m.length;

            // Ignore already escaped sequences.
            if (escaped) {
                path += escaped[1];
                continue;
            }

            var next = str[index];
            var prefix = res[2];
            var name = res[3];
            var capture = res[4];
            var group = res[5];
            var modifier = res[6];
            var asterisk = res[7];

            // Push the current path onto the tokens.
            if (path) {
                tokens.push(path);
                path = "";
            }

            var partial = prefix != null && next != null && next !== prefix;
            var repeat = modifier === "+" || modifier === "*";
            var optional = modifier === "?" || modifier === "*";
            var delimiter = res[2] || defaultDelimiter;
            var pattern = capture || group;

            tokens.push({
                name: name || key++,
                prefix: prefix || "",
                delimiter: delimiter,
                optional: optional,
                repeat: repeat,
                partial: partial,
                asterisk: !!asterisk,
                pattern: pattern
                    ? escapeGroup(pattern)
                    : asterisk
                    ? ".*"
                    : "[^" + escapeString(delimiter) + "]+?"
            });
        }

        // Match any characters still remaining.
        if (index < str.length) {
            path += str.substr(index);
        }

        // If the path exists, push it onto the end.
        if (path) {
            tokens.push(path);
        }

        return tokens;
    }

    /**
     * Compile a string to a template function for the path.
     *
     * @param  {string}             str
     * @param  {Object=}            options
     * @return {!function(Object=, Object=)}
     */
    function compile(str, options) {
        return tokensToFunction(parse(str, options));
    }

    /**
     * Prettier encoding of URI path segments.
     *
     * @param  {string}
     * @return {string}
     */
    function encodeURIComponentPretty(str) {
        return encodeURI(str).replace(/[\/?#]/g, function(c) {
            return (
                "%" +
                c
                    .charCodeAt(0)
                    .toString(16)
                    .toUpperCase()
            );
        });
    }

    /**
     * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
     *
     * @param  {string}
     * @return {string}
     */
    function encodeAsterisk(str) {
        return encodeURI(str).replace(/[?#]/g, function(c) {
            return (
                "%" +
                c
                    .charCodeAt(0)
                    .toString(16)
                    .toUpperCase()
            );
        });
    }

    /**
     * Expose a method for transforming tokens into the path function.
     */
    function tokensToFunction(tokens) {
        // Compile all the tokens into regexps.
        var matches = new Array(tokens.length);

        // Compile all the patterns before compilation.
        for (var i = 0; i < tokens.length; i++) {
            if (typeof tokens[i] === "object") {
                matches[i] = new RegExp("^(?:" + tokens[i].pattern + ")$");
            }
        }

        return function(obj, opts) {
            var path = "";
            var data = obj || {};
            var options = opts || {};
            var encode = options.pretty
                ? encodeURIComponentPretty
                : encodeURIComponent;

            for (var i = 0; i < tokens.length; i++) {
                var token = tokens[i];

                if (typeof token === "string") {
                    path += token;

                    continue;
                }

                var value = data[token.name];
                var segment;

                if (value == null) {
                    if (token.optional) {
                        // Prepend partial segment prefixes.
                        if (token.partial) {
                            path += token.prefix;
                        }

                        continue;
                    } else {
                        throw new TypeError(
                            'Expected "' + token.name + '" to be defined'
                        );
                    }
                }

                if (isarray(value)) {
                    if (!token.repeat) {
                        throw new TypeError(
                            'Expected "' +
                                token.name +
                                '" to not repeat, but received `' +
                                JSON.stringify(value) +
                                "`"
                        );
                    }

                    if (value.length === 0) {
                        if (token.optional) {
                            continue;
                        } else {
                            throw new TypeError(
                                'Expected "' + token.name + '" to not be empty'
                            );
                        }
                    }

                    for (var j = 0; j < value.length; j++) {
                        segment = encode(value[j]);

                        if (!matches[i].test(segment)) {
                            throw new TypeError(
                                'Expected all "' +
                                    token.name +
                                    '" to match "' +
                                    token.pattern +
                                    '", but received `' +
                                    JSON.stringify(segment) +
                                    "`"
                            );
                        }

                        path +=
                            (j === 0 ? token.prefix : token.delimiter) +
                            segment;
                    }

                    continue;
                }

                segment = token.asterisk
                    ? encodeAsterisk(value)
                    : encode(value);

                if (!matches[i].test(segment)) {
                    throw new TypeError(
                        'Expected "' +
                            token.name +
                            '" to match "' +
                            token.pattern +
                            '", but received "' +
                            segment +
                            '"'
                    );
                }

                path += token.prefix + segment;
            }

            return path;
        };
    }

    /**
     * Escape a regular expression string.
     *
     * @param  {string} str
     * @return {string}
     */
    function escapeString(str) {
        return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, "\\$1");
    }

    /**
     * Escape the capturing group by escaping special characters and meaning.
     *
     * @param  {string} group
     * @return {string}
     */
    function escapeGroup(group) {
        return group.replace(/([=!:$\/()])/g, "\\$1");
    }

    /**
     * Attach the keys as a property of the regexp.
     *
     * @param  {!RegExp} re
     * @param  {Array}   keys
     * @return {!RegExp}
     */
    function attachKeys(re, keys) {
        re.keys = keys;
        return re;
    }

    /**
     * Get the flags for a regexp from the options.
     *
     * @param  {Object} options
     * @return {string}
     */
    function flags(options) {
        return options.sensitive ? "" : "i";
    }

    /**
     * Pull out keys from a regexp.
     *
     * @param  {!RegExp} path
     * @param  {!Array}  keys
     * @return {!RegExp}
     */
    function regexpToRegexp(path, keys) {
        // Use a negative lookahead to match only capturing groups.
        var groups = path.source.match(/\((?!\?)/g);

        if (groups) {
            for (var i = 0; i < groups.length; i++) {
                keys.push({
                    name: i,
                    prefix: null,
                    delimiter: null,
                    optional: false,
                    repeat: false,
                    partial: false,
                    asterisk: false,
                    pattern: null
                });
            }
        }

        return attachKeys(path, keys);
    }

    /**
     * Transform an array into a regexp.
     *
     * @param  {!Array}  path
     * @param  {Array}   keys
     * @param  {!Object} options
     * @return {!RegExp}
     */
    function arrayToRegexp(path, keys, options) {
        var parts = [];

        for (var i = 0; i < path.length; i++) {
            parts.push(pathToRegexp(path[i], keys, options).source);
        }

        var regexp = new RegExp("(?:" + parts.join("|") + ")", flags(options));

        return attachKeys(regexp, keys);
    }

    /**
     * Create a path regexp from string input.
     *
     * @param  {string}  path
     * @param  {!Array}  keys
     * @param  {!Object} options
     * @return {!RegExp}
     */
    function stringToRegexp(path, keys, options) {
        return tokensToRegExp(parse(path, options), keys, options);
    }

    /**
     * Expose a function for taking tokens and returning a RegExp.
     *
     * @param  {!Array}          tokens
     * @param  {(Array|Object)=} keys
     * @param  {Object=}         options
     * @return {!RegExp}
     */
    function tokensToRegExp(tokens, keys, options) {
        if (!isarray(keys)) {
            options = /** @type {!Object} */ (keys || options);
            keys = [];
        }

        options = options || {};

        var strict = options.strict;
        var end = options.end !== false;
        var route = "";

        // Iterate over the tokens and create our regexp string.
        for (var i = 0; i < tokens.length; i++) {
            var token = tokens[i];

            if (typeof token === "string") {
                route += escapeString(token);
            } else {
                var prefix = escapeString(token.prefix);
                var capture = "(?:" + token.pattern + ")";

                keys.push(token);

                if (token.repeat) {
                    capture += "(?:" + prefix + capture + ")*";
                }

                if (token.optional) {
                    if (!token.partial) {
                        capture = "(?:" + prefix + "(" + capture + "))?";
                    } else {
                        capture = prefix + "(" + capture + ")?";
                    }
                } else {
                    capture = prefix + "(" + capture + ")";
                }

                route += capture;
            }
        }

        var delimiter = escapeString(options.delimiter || "/");
        var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

        // In non-strict mode we allow a slash at the end of match. If the path to
        // match already ends with a slash, we remove it for consistency. The slash
        // is valid at the end of a path match, not in the middle. This is important
        // in non-ending mode, where "/test/" shouldn't match "/test//route".
        if (!strict) {
            route =
                (endsWithDelimiter
                    ? route.slice(0, -delimiter.length)
                    : route) +
                "(?:" +
                delimiter +
                "(?=$))?";
        }

        if (end) {
            route += "$";
        } else {
            // In non-ending mode, we need the capturing groups to match as much as
            // possible by using a positive lookahead to the end or next path segment.
            route +=
                strict && endsWithDelimiter ? "" : "(?=" + delimiter + "|$)";
        }

        return attachKeys(new RegExp("^" + route, flags(options)), keys);
    }

    /**
     * Normalize the given path string, returning a regular expression.
     *
     * An empty array can be passed in for the keys, which will hold the
     * placeholder key descriptions. For example, using `/user/:id`, `keys` will
     * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
     *
     * @param  {(string|RegExp|Array)} path
     * @param  {(Array|Object)=}       keys
     * @param  {Object=}               options
     * @return {!RegExp}
     */
    function pathToRegexp(path, keys, options) {
        if (!isarray(keys)) {
            options = /** @type {!Object} */ (keys || options);
            keys = [];
        }

        options = options || {};

        if (path instanceof RegExp) {
            return regexpToRegexp(path, /** @type {!Array} */ (keys));
        }

        if (isarray(path)) {
            return arrayToRegexp(
                /** @type {!Array} */ (path),
                /** @type {!Array} */ (keys),
                options
            );
        }

        return stringToRegexp(
            /** @type {string} */ (path),
            /** @type {!Array} */ (keys),
            options
        );
    }
    pathToRegexp_1.parse = parse_1;
    pathToRegexp_1.compile = compile_1;
    pathToRegexp_1.tokensToFunction = tokensToFunction_1;
    pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;

    var reactIs_production_min = createCommonjsModule(function(
        module,
        exports
    ) {
        Object.defineProperty(exports, "__esModule", { value: !0 });
        var b = "function" === typeof Symbol && Symbol.for,
            c = b ? Symbol.for("react.element") : 60103,
            d = b ? Symbol.for("react.portal") : 60106,
            e = b ? Symbol.for("react.fragment") : 60107,
            f = b ? Symbol.for("react.strict_mode") : 60108,
            g = b ? Symbol.for("react.profiler") : 60114,
            h = b ? Symbol.for("react.provider") : 60109,
            k = b ? Symbol.for("react.context") : 60110,
            l = b ? Symbol.for("react.concurrent_mode") : 60111,
            m = b ? Symbol.for("react.forward_ref") : 60112,
            n = b ? Symbol.for("react.suspense") : 60113,
            q = b ? Symbol.for("react.memo") : 60115,
            r = b ? Symbol.for("react.lazy") : 60116;
        function t(a) {
            if ("object" === typeof a && null !== a) {
                var p = a.$$typeof;
                switch (p) {
                    case c:
                        switch (((a = a.type), a)) {
                            case l:
                            case e:
                            case g:
                            case f:
                                return a;
                            default:
                                switch (((a = a && a.$$typeof), a)) {
                                    case k:
                                    case m:
                                    case h:
                                        return a;
                                    default:
                                        return p;
                                }
                        }
                    case d:
                        return p;
                }
            }
        }
        function u(a) {
            return t(a) === l;
        }
        exports.typeOf = t;
        exports.AsyncMode = l;
        exports.ConcurrentMode = l;
        exports.ContextConsumer = k;
        exports.ContextProvider = h;
        exports.Element = c;
        exports.ForwardRef = m;
        exports.Fragment = e;
        exports.Profiler = g;
        exports.Portal = d;
        exports.StrictMode = f;
        exports.isValidElementType = function(a) {
            return (
                "string" === typeof a ||
                "function" === typeof a ||
                a === e ||
                a === l ||
                a === g ||
                a === f ||
                a === n ||
                ("object" === typeof a &&
                    null !== a &&
                    (a.$$typeof === r ||
                        a.$$typeof === q ||
                        a.$$typeof === h ||
                        a.$$typeof === k ||
                        a.$$typeof === m))
            );
        };
        exports.isAsyncMode = function(a) {
            return u(a);
        };
        exports.isConcurrentMode = u;
        exports.isContextConsumer = function(a) {
            return t(a) === k;
        };
        exports.isContextProvider = function(a) {
            return t(a) === h;
        };
        exports.isElement = function(a) {
            return "object" === typeof a && null !== a && a.$$typeof === c;
        };
        exports.isForwardRef = function(a) {
            return t(a) === m;
        };
        exports.isFragment = function(a) {
            return t(a) === e;
        };
        exports.isProfiler = function(a) {
            return t(a) === g;
        };
        exports.isPortal = function(a) {
            return t(a) === d;
        };
        exports.isStrictMode = function(a) {
            return t(a) === f;
        };
    });

    unwrapExports(reactIs_production_min);
    var reactIs_production_min_1 = reactIs_production_min.typeOf;
    var reactIs_production_min_2 = reactIs_production_min.AsyncMode;
    var reactIs_production_min_3 = reactIs_production_min.ConcurrentMode;
    var reactIs_production_min_4 = reactIs_production_min.ContextConsumer;
    var reactIs_production_min_5 = reactIs_production_min.ContextProvider;
    var reactIs_production_min_6 = reactIs_production_min.Element;
    var reactIs_production_min_7 = reactIs_production_min.ForwardRef;
    var reactIs_production_min_8 = reactIs_production_min.Fragment;
    var reactIs_production_min_9 = reactIs_production_min.Profiler;
    var reactIs_production_min_10 = reactIs_production_min.Portal;
    var reactIs_production_min_11 = reactIs_production_min.StrictMode;
    var reactIs_production_min_12 = reactIs_production_min.isValidElementType;
    var reactIs_production_min_13 = reactIs_production_min.isAsyncMode;
    var reactIs_production_min_14 = reactIs_production_min.isConcurrentMode;
    var reactIs_production_min_15 = reactIs_production_min.isContextConsumer;
    var reactIs_production_min_16 = reactIs_production_min.isContextProvider;
    var reactIs_production_min_17 = reactIs_production_min.isElement;
    var reactIs_production_min_18 = reactIs_production_min.isForwardRef;
    var reactIs_production_min_19 = reactIs_production_min.isFragment;
    var reactIs_production_min_20 = reactIs_production_min.isProfiler;
    var reactIs_production_min_21 = reactIs_production_min.isPortal;
    var reactIs_production_min_22 = reactIs_production_min.isStrictMode;

    var reactIs_development = createCommonjsModule(function(module, exports) {
        {
            (function() {
                Object.defineProperty(exports, "__esModule", { value: true });

                // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
                // nor polyfill, then a plain number is used for performance.
                var hasSymbol = typeof Symbol === "function" && Symbol.for;

                var REACT_ELEMENT_TYPE = hasSymbol
                    ? Symbol.for("react.element")
                    : 0xeac7;
                var REACT_PORTAL_TYPE = hasSymbol
                    ? Symbol.for("react.portal")
                    : 0xeaca;
                var REACT_FRAGMENT_TYPE = hasSymbol
                    ? Symbol.for("react.fragment")
                    : 0xeacb;
                var REACT_STRICT_MODE_TYPE = hasSymbol
                    ? Symbol.for("react.strict_mode")
                    : 0xeacc;
                var REACT_PROFILER_TYPE = hasSymbol
                    ? Symbol.for("react.profiler")
                    : 0xead2;
                var REACT_PROVIDER_TYPE = hasSymbol
                    ? Symbol.for("react.provider")
                    : 0xeacd;
                var REACT_CONTEXT_TYPE = hasSymbol
                    ? Symbol.for("react.context")
                    : 0xeace;
                var REACT_CONCURRENT_MODE_TYPE = hasSymbol
                    ? Symbol.for("react.concurrent_mode")
                    : 0xeacf;
                var REACT_FORWARD_REF_TYPE = hasSymbol
                    ? Symbol.for("react.forward_ref")
                    : 0xead0;
                var REACT_SUSPENSE_TYPE = hasSymbol
                    ? Symbol.for("react.suspense")
                    : 0xead1;
                var REACT_MEMO_TYPE = hasSymbol
                    ? Symbol.for("react.memo")
                    : 0xead3;
                var REACT_LAZY_TYPE = hasSymbol
                    ? Symbol.for("react.lazy")
                    : 0xead4;

                function isValidElementType(type) {
                    return (
                        typeof type === "string" ||
                        typeof type === "function" ||
                        // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
                        type === REACT_FRAGMENT_TYPE ||
                        type === REACT_CONCURRENT_MODE_TYPE ||
                        type === REACT_PROFILER_TYPE ||
                        type === REACT_STRICT_MODE_TYPE ||
                        type === REACT_SUSPENSE_TYPE ||
                        (typeof type === "object" &&
                            type !== null &&
                            (type.$$typeof === REACT_LAZY_TYPE ||
                                type.$$typeof === REACT_MEMO_TYPE ||
                                type.$$typeof === REACT_PROVIDER_TYPE ||
                                type.$$typeof === REACT_CONTEXT_TYPE ||
                                type.$$typeof === REACT_FORWARD_REF_TYPE))
                    );
                }

                /**
                 * Forked from fbjs/warning:
                 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
                 *
                 * Only change is we use console.warn instead of console.error,
                 * and do nothing when 'console' is not supported.
                 * This really simplifies the code.
                 * ---
                 * Similar to invariant but only logs a warning if the condition is not met.
                 * This can be used to log issues in development environments in critical
                 * paths. Removing the logging code for production environments will keep the
                 * same logic and follow the same code paths.
                 */

                var lowPriorityWarning = function() {};

                {
                    var printWarning = function(format) {
                        for (
                            var _len = arguments.length,
                                args = Array(_len > 1 ? _len - 1 : 0),
                                _key = 1;
                            _key < _len;
                            _key++
                        ) {
                            args[_key - 1] = arguments[_key];
                        }

                        var argIndex = 0;
                        var message =
                            "Warning: " +
                            format.replace(/%s/g, function() {
                                return args[argIndex++];
                            });
                        if (typeof console !== "undefined") {
                            console.warn(message);
                        }
                        try {
                            // --- Welcome to debugging React ---
                            // This error was thrown as a convenience so that you can use this stack
                            // to find the callsite that caused this warning to fire.
                            throw new Error(message);
                        } catch (x) {}
                    };

                    lowPriorityWarning = function(condition, format) {
                        if (format === undefined) {
                            throw new Error(
                                "`lowPriorityWarning(condition, format, ...args)` requires a warning " +
                                    "message argument"
                            );
                        }
                        if (!condition) {
                            for (
                                var _len2 = arguments.length,
                                    args = Array(_len2 > 2 ? _len2 - 2 : 0),
                                    _key2 = 2;
                                _key2 < _len2;
                                _key2++
                            ) {
                                args[_key2 - 2] = arguments[_key2];
                            }

                            printWarning.apply(
                                undefined,
                                [format].concat(args)
                            );
                        }
                    };
                }

                var lowPriorityWarning$1 = lowPriorityWarning;

                function typeOf(object) {
                    if (typeof object === "object" && object !== null) {
                        var $$typeof = object.$$typeof;

                        switch ($$typeof) {
                            case REACT_ELEMENT_TYPE:
                                var type = object.type;

                                switch (type) {
                                    case REACT_CONCURRENT_MODE_TYPE:
                                    case REACT_FRAGMENT_TYPE:
                                    case REACT_PROFILER_TYPE:
                                    case REACT_STRICT_MODE_TYPE:
                                        return type;
                                    default:
                                        var $$typeofType =
                                            type && type.$$typeof;

                                        switch ($$typeofType) {
                                            case REACT_CONTEXT_TYPE:
                                            case REACT_FORWARD_REF_TYPE:
                                            case REACT_PROVIDER_TYPE:
                                                return $$typeofType;
                                            default:
                                                return $$typeof;
                                        }
                                }
                            case REACT_PORTAL_TYPE:
                                return $$typeof;
                        }
                    }

                    return undefined;
                }

                // AsyncMode alias is deprecated along with isAsyncMode
                var AsyncMode = REACT_CONCURRENT_MODE_TYPE;
                var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
                var ContextConsumer = REACT_CONTEXT_TYPE;
                var ContextProvider = REACT_PROVIDER_TYPE;
                var Element = REACT_ELEMENT_TYPE;
                var ForwardRef = REACT_FORWARD_REF_TYPE;
                var Fragment = REACT_FRAGMENT_TYPE;
                var Profiler = REACT_PROFILER_TYPE;
                var Portal = REACT_PORTAL_TYPE;
                var StrictMode = REACT_STRICT_MODE_TYPE;

                var hasWarnedAboutDeprecatedIsAsyncMode = false;

                // AsyncMode should be deprecated
                function isAsyncMode(object) {
                    {
                        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                            hasWarnedAboutDeprecatedIsAsyncMode = true;
                            lowPriorityWarning$1(
                                false,
                                "The ReactIs.isAsyncMode() alias has been deprecated, " +
                                    "and will be removed in React 17+. Update your code to use " +
                                    "ReactIs.isConcurrentMode() instead. It has the exact same API."
                            );
                        }
                    }
                    return isConcurrentMode(object);
                }
                function isConcurrentMode(object) {
                    return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
                }
                function isContextConsumer(object) {
                    return typeOf(object) === REACT_CONTEXT_TYPE;
                }
                function isContextProvider(object) {
                    return typeOf(object) === REACT_PROVIDER_TYPE;
                }
                function isElement(object) {
                    return (
                        typeof object === "object" &&
                        object !== null &&
                        object.$$typeof === REACT_ELEMENT_TYPE
                    );
                }
                function isForwardRef(object) {
                    return typeOf(object) === REACT_FORWARD_REF_TYPE;
                }
                function isFragment(object) {
                    return typeOf(object) === REACT_FRAGMENT_TYPE;
                }
                function isProfiler(object) {
                    return typeOf(object) === REACT_PROFILER_TYPE;
                }
                function isPortal(object) {
                    return typeOf(object) === REACT_PORTAL_TYPE;
                }
                function isStrictMode(object) {
                    return typeOf(object) === REACT_STRICT_MODE_TYPE;
                }

                exports.typeOf = typeOf;
                exports.AsyncMode = AsyncMode;
                exports.ConcurrentMode = ConcurrentMode;
                exports.ContextConsumer = ContextConsumer;
                exports.ContextProvider = ContextProvider;
                exports.Element = Element;
                exports.ForwardRef = ForwardRef;
                exports.Fragment = Fragment;
                exports.Profiler = Profiler;
                exports.Portal = Portal;
                exports.StrictMode = StrictMode;
                exports.isValidElementType = isValidElementType;
                exports.isAsyncMode = isAsyncMode;
                exports.isConcurrentMode = isConcurrentMode;
                exports.isContextConsumer = isContextConsumer;
                exports.isContextProvider = isContextProvider;
                exports.isElement = isElement;
                exports.isForwardRef = isForwardRef;
                exports.isFragment = isFragment;
                exports.isProfiler = isProfiler;
                exports.isPortal = isPortal;
                exports.isStrictMode = isStrictMode;
            })();
        }
    });

    unwrapExports(reactIs_development);
    var reactIs_development_1 = reactIs_development.typeOf;
    var reactIs_development_2 = reactIs_development.AsyncMode;
    var reactIs_development_3 = reactIs_development.ConcurrentMode;
    var reactIs_development_4 = reactIs_development.ContextConsumer;
    var reactIs_development_5 = reactIs_development.ContextProvider;
    var reactIs_development_6 = reactIs_development.Element;
    var reactIs_development_7 = reactIs_development.ForwardRef;
    var reactIs_development_8 = reactIs_development.Fragment;
    var reactIs_development_9 = reactIs_development.Profiler;
    var reactIs_development_10 = reactIs_development.Portal;
    var reactIs_development_11 = reactIs_development.StrictMode;
    var reactIs_development_12 = reactIs_development.isValidElementType;
    var reactIs_development_13 = reactIs_development.isAsyncMode;
    var reactIs_development_14 = reactIs_development.isConcurrentMode;
    var reactIs_development_15 = reactIs_development.isContextConsumer;
    var reactIs_development_16 = reactIs_development.isContextProvider;
    var reactIs_development_17 = reactIs_development.isElement;
    var reactIs_development_18 = reactIs_development.isForwardRef;
    var reactIs_development_19 = reactIs_development.isFragment;
    var reactIs_development_20 = reactIs_development.isProfiler;
    var reactIs_development_21 = reactIs_development.isPortal;
    var reactIs_development_22 = reactIs_development.isStrictMode;

    var reactIs = createCommonjsModule(function(module) {
        {
            module.exports = reactIs_development;
        }
    });
    var reactIs_1 = reactIs.isValidElementType;

    function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;

        for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
        }

        return target;
    }

    /**
     * Copyright 2015, Yahoo! Inc.
     * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
     */

    var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
    };

    var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
    };

    var FORWARD_REF_STATICS = {
        $$typeof: true,
        render: true
    };

    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;

    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;

    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
            // don't hoist over string (html) components

            if (objectPrototype) {
                var inheritedComponent = getPrototypeOf(sourceComponent);
                if (
                    inheritedComponent &&
                    inheritedComponent !== objectPrototype
                ) {
                    hoistNonReactStatics(
                        targetComponent,
                        inheritedComponent,
                        blacklist
                    );
                }
            }

            var keys = getOwnPropertyNames(sourceComponent);

            if (getOwnPropertySymbols$1) {
                keys = keys.concat(getOwnPropertySymbols$1(sourceComponent));
            }

            var targetStatics =
                TYPE_STATICS[targetComponent["$$typeof"]] || REACT_STATICS;
            var sourceStatics =
                TYPE_STATICS[sourceComponent["$$typeof"]] || REACT_STATICS;

            for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                if (
                    !KNOWN_STATICS[key] &&
                    !(blacklist && blacklist[key]) &&
                    !(sourceStatics && sourceStatics[key]) &&
                    !(targetStatics && targetStatics[key])
                ) {
                    var descriptor = getOwnPropertyDescriptor(
                        sourceComponent,
                        key
                    );
                    try {
                        // Avoid failures from read-only properties
                        defineProperty(targetComponent, key, descriptor);
                    } catch (e) {}
                }
            }

            return targetComponent;
        }

        return targetComponent;
    }

    var hoistNonReactStatics_cjs = hoistNonReactStatics;

    var createNamedContext = function createNamedContext(name) {
        var context = index();
        context.displayName = name;
        return context;
    };

    var context =
        /*#__PURE__*/
        createNamedContext("Router");
    /**
     * The public API for putting history on context.
     */

    var Router =
        /*#__PURE__*/
        (function(_React$Component) {
            _inheritsLoose$1(Router, _React$Component);

            Router.computeRootMatch = function computeRootMatch(pathname) {
                return {
                    path: "/",
                    url: "/",
                    params: {},
                    isExact: pathname === "/"
                };
            };

            function Router(props) {
                var _this;

                _this = _React$Component.call(this, props) || this;
                _this.state = {
                    location: props.history.location
                }; // This is a bit of a hack. We have to start listening for location
                // changes here in the constructor in case there are any <Redirect>s
                // on the initial render. If there are, they will replace/push when
                // they mount and since cDM fires in children before parents, we may
                // get a new location before the <Router> is mounted.

                _this._isMounted = false;
                _this._pendingLocation = null;

                if (!props.staticContext) {
                    _this.unlisten = props.history.listen(function(location) {
                        if (_this._isMounted) {
                            _this.setState({
                                location: location
                            });
                        } else {
                            _this._pendingLocation = location;
                        }
                    });
                }

                return _this;
            }

            var _proto = Router.prototype;

            _proto.componentDidMount = function componentDidMount() {
                this._isMounted = true;

                if (this._pendingLocation) {
                    this.setState({
                        location: this._pendingLocation
                    });
                }
            };

            _proto.componentWillUnmount = function componentWillUnmount() {
                if (this.unlisten) this.unlisten();
            };

            _proto.render = function render() {
                return React__default.createElement(context.Provider, {
                    children: this.props.children || null,
                    value: {
                        history: this.props.history,
                        location: this.state.location,
                        match: Router.computeRootMatch(
                            this.state.location.pathname
                        ),
                        staticContext: this.props.staticContext
                    }
                });
            };

            return Router;
        })(React__default.Component);

    {
        Router.propTypes = {
            children: propTypes.node,
            history: propTypes.object.isRequired,
            staticContext: propTypes.object
        };

        Router.prototype.componentDidUpdate = function(prevProps) {
            warning$1(
                prevProps.history === this.props.history,
                "You cannot change <Router history>"
            );
        };
    }
    /**
     * The public API for a <Router> that stores location in memory.
     */

    var MemoryRouter =
        /*#__PURE__*/
        (function(_React$Component) {
            _inheritsLoose$1(MemoryRouter, _React$Component);

            function MemoryRouter() {
                var _this;

                for (
                    var _len = arguments.length,
                        args = new Array(_len),
                        _key = 0;
                    _key < _len;
                    _key++
                ) {
                    args[_key] = arguments[_key];
                }

                _this =
                    _React$Component.call.apply(
                        _React$Component,
                        [this].concat(args)
                    ) || this;
                _this.history = createMemoryHistory(_this.props);
                return _this;
            }

            var _proto = MemoryRouter.prototype;

            _proto.render = function render() {
                return React__default.createElement(Router, {
                    history: this.history,
                    children: this.props.children
                });
            };

            return MemoryRouter;
        })(React__default.Component);

    {
        MemoryRouter.propTypes = {
            initialEntries: propTypes.array,
            initialIndex: propTypes.number,
            getUserConfirmation: propTypes.func,
            keyLength: propTypes.number,
            children: propTypes.node
        };

        MemoryRouter.prototype.componentDidMount = function() {
            warning$1(
                !this.props.history,
                "<MemoryRouter> ignores the history prop. To use a custom history, " +
                    "use `import { Router }` instead of `import { MemoryRouter as Router }`."
            );
        };
    }

    var Lifecycle =
        /*#__PURE__*/
        (function(_React$Component) {
            _inheritsLoose$1(Lifecycle, _React$Component);

            function Lifecycle() {
                return _React$Component.apply(this, arguments) || this;
            }

            var _proto = Lifecycle.prototype;

            _proto.componentDidMount = function componentDidMount() {
                if (this.props.onMount) this.props.onMount.call(this, this);
            };

            _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
                if (this.props.onUpdate)
                    this.props.onUpdate.call(this, this, prevProps);
            };

            _proto.componentWillUnmount = function componentWillUnmount() {
                if (this.props.onUnmount) this.props.onUnmount.call(this, this);
            };

            _proto.render = function render() {
                return null;
            };

            return Lifecycle;
        })(React__default.Component);
    /**
     * The public API for prompting the user before navigating away from a screen.
     */

    function Prompt(_ref) {
        var message = _ref.message,
            _ref$when = _ref.when,
            when = _ref$when === void 0 ? true : _ref$when;
        return React__default.createElement(context.Consumer, null, function(
            context$$1
        ) {
            !context$$1
                ? invariant(
                      false,
                      "You should not use <Prompt> outside a <Router>"
                  )
                : void 0;
            if (!when || context$$1.staticContext) return null;
            var method = context$$1.history.block;
            return React__default.createElement(Lifecycle, {
                onMount: function onMount(self) {
                    self.release = method(message);
                },
                onUpdate: function onUpdate(self, prevProps) {
                    if (prevProps.message !== message) {
                        self.release();
                        self.release = method(message);
                    }
                },
                onUnmount: function onUnmount(self) {
                    self.release();
                },
                message: message
            });
        });
    }

    {
        var messageType = propTypes.oneOfType([
            propTypes.func,
            propTypes.string
        ]);
        Prompt.propTypes = {
            when: propTypes.bool,
            message: messageType.isRequired
        };
    }

    var cache = {};
    var cacheLimit = 10000;
    var cacheCount = 0;

    function compilePath(path) {
        if (cache[path]) return cache[path];
        var generator = pathToRegexp_1.compile(path);

        if (cacheCount < cacheLimit) {
            cache[path] = generator;
            cacheCount++;
        }

        return generator;
    }
    /**
     * Public API for generating a URL pathname from a path and parameters.
     */

    function generatePath(path, params) {
        if (path === void 0) {
            path = "/";
        }

        if (params === void 0) {
            params = {};
        }

        return path === "/"
            ? path
            : compilePath(path)(params, {
                  pretty: true
              });
    }
    /**
     * The public API for navigating programmatically with a component.
     */

    function Redirect(_ref) {
        var computedMatch = _ref.computedMatch,
            to = _ref.to,
            _ref$push = _ref.push,
            push = _ref$push === void 0 ? false : _ref$push;
        return React__default.createElement(context.Consumer, null, function(
            context$$1
        ) {
            !context$$1
                ? invariant(
                      false,
                      "You should not use <Redirect> outside a <Router>"
                  )
                : void 0;
            var history = context$$1.history,
                staticContext = context$$1.staticContext;
            var method = push ? history.push : history.replace;
            var location = createLocation(
                computedMatch
                    ? typeof to === "string"
                        ? generatePath(to, computedMatch.params)
                        : _extends({}, to, {
                              pathname: generatePath(
                                  to.pathname,
                                  computedMatch.params
                              )
                          })
                    : to
            ); // When rendering in a static context,
            // set the new location immediately.

            if (staticContext) {
                method(location);
                return null;
            }

            return React__default.createElement(Lifecycle, {
                onMount: function onMount() {
                    method(location);
                },
                onUpdate: function onUpdate(self, prevProps) {
                    var prevLocation = createLocation(prevProps.to);

                    if (
                        !locationsAreEqual(
                            prevLocation,
                            _extends({}, location, {
                                key: prevLocation.key
                            })
                        )
                    ) {
                        method(location);
                    }
                },
                to: to
            });
        });
    }

    {
        Redirect.propTypes = {
            push: propTypes.bool,
            from: propTypes.string,
            to: propTypes.oneOfType([propTypes.string, propTypes.object])
                .isRequired
        };
    }

    var cache$1 = {};
    var cacheLimit$1 = 10000;
    var cacheCount$1 = 0;

    function compilePath$1(path, options) {
        var cacheKey = "" + options.end + options.strict + options.sensitive;
        var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});
        if (pathCache[path]) return pathCache[path];
        var keys = [];
        var regexp = pathToRegexp_1(path, keys, options);
        var result = {
            regexp: regexp,
            keys: keys
        };

        if (cacheCount$1 < cacheLimit$1) {
            pathCache[path] = result;
            cacheCount$1++;
        }

        return result;
    }
    /**
     * Public API for matching a URL pathname to a path.
     */

    function matchPath(pathname, options) {
        if (options === void 0) {
            options = {};
        }

        if (typeof options === "string")
            options = {
                path: options
            };
        var _options = options,
            path = _options.path,
            _options$exact = _options.exact,
            exact = _options$exact === void 0 ? false : _options$exact,
            _options$strict = _options.strict,
            strict = _options$strict === void 0 ? false : _options$strict,
            _options$sensitive = _options.sensitive,
            sensitive =
                _options$sensitive === void 0 ? false : _options$sensitive;
        var paths = [].concat(path);
        return paths.reduce(function(matched, path) {
            if (!path) return null;
            if (matched) return matched;

            var _compilePath = compilePath$1(path, {
                    end: exact,
                    strict: strict,
                    sensitive: sensitive
                }),
                regexp = _compilePath.regexp,
                keys = _compilePath.keys;

            var match = regexp.exec(pathname);
            if (!match) return null;
            var url = match[0],
                values = match.slice(1);
            var isExact = pathname === url;
            if (exact && !isExact) return null;
            return {
                path: path,
                // the path used to match
                url: path === "/" && url === "" ? "/" : url,
                // the matched portion of the URL
                isExact: isExact,
                // whether or not we matched exactly
                params: keys.reduce(function(memo, key, index$$1) {
                    memo[key.name] = values[index$$1];
                    return memo;
                }, {})
            };
        }, null);
    }

    function isEmptyChildren(children) {
        return React__default.Children.count(children) === 0;
    }
    /**
     * The public API for matching a single path and rendering.
     */

    var Route =
        /*#__PURE__*/
        (function(_React$Component) {
            _inheritsLoose$1(Route, _React$Component);

            function Route() {
                return _React$Component.apply(this, arguments) || this;
            }

            var _proto = Route.prototype;

            _proto.render = function render() {
                var _this = this;

                return React__default.createElement(
                    context.Consumer,
                    null,
                    function(context$$1) {
                        !context$$1
                            ? invariant(
                                  false,
                                  "You should not use <Route> outside a <Router>"
                              )
                            : void 0;
                        var location =
                            _this.props.location || context$$1.location;
                        var match = _this.props.computedMatch
                            ? _this.props.computedMatch // <Switch> already computed the match for us
                            : _this.props.path
                            ? matchPath(location.pathname, _this.props)
                            : context$$1.match;

                        var props = _extends({}, context$$1, {
                            location: location,
                            match: match
                        });

                        var _this$props = _this.props,
                            children = _this$props.children,
                            component = _this$props.component,
                            render = _this$props.render; // Preact uses an empty array as children by
                        // default, so use null if that's the case.

                        if (Array.isArray(children) && children.length === 0) {
                            children = null;
                        }

                        if (typeof children === "function") {
                            children = children(props);

                            if (children === undefined) {
                                {
                                    var path = _this.props.path;
                                    warning$1(
                                        false,
                                        "You returned `undefined` from the `children` function of " +
                                            ("<Route" +
                                                (path
                                                    ? ' path="' + path + '"'
                                                    : "") +
                                                ">, but you ") +
                                            "should have returned a React element or `null`"
                                    );
                                }

                                children = null;
                            }
                        }

                        return React__default.createElement(
                            context.Provider,
                            {
                                value: props
                            },
                            children && !isEmptyChildren(children)
                                ? children
                                : props.match
                                ? component
                                    ? React__default.createElement(
                                          component,
                                          props
                                      )
                                    : render
                                    ? render(props)
                                    : null
                                : null
                        );
                    }
                );
            };

            return Route;
        })(React__default.Component);

    {
        Route.propTypes = {
            children: propTypes.oneOfType([propTypes.func, propTypes.node]),
            component: function component(props, propName) {
                if (props[propName] && !reactIs_1(props[propName])) {
                    return new Error(
                        "Invalid prop 'component' supplied to 'Route': the prop is not a valid React component"
                    );
                }
            },
            exact: propTypes.bool,
            location: propTypes.object,
            path: propTypes.oneOfType([
                propTypes.string,
                propTypes.arrayOf(propTypes.string)
            ]),
            render: propTypes.func,
            sensitive: propTypes.bool,
            strict: propTypes.bool
        };

        Route.prototype.componentDidMount = function() {
            warning$1(
                !(
                    this.props.children &&
                    !isEmptyChildren(this.props.children) &&
                    this.props.component
                ),
                "You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored"
            );
            warning$1(
                !(
                    this.props.children &&
                    !isEmptyChildren(this.props.children) &&
                    this.props.render
                ),
                "You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored"
            );
            warning$1(
                !(this.props.component && this.props.render),
                "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"
            );
        };

        Route.prototype.componentDidUpdate = function(prevProps) {
            warning$1(
                !(this.props.location && !prevProps.location),
                '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'
            );
            warning$1(
                !(!this.props.location && prevProps.location),
                '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'
            );
        };
    }

    function addLeadingSlash$1(path) {
        return path.charAt(0) === "/" ? path : "/" + path;
    }

    function addBasename(basename, location) {
        if (!basename) return location;
        return _extends({}, location, {
            pathname: addLeadingSlash$1(basename) + location.pathname
        });
    }

    function stripBasename$1(basename, location) {
        if (!basename) return location;
        var base = addLeadingSlash$1(basename);
        if (location.pathname.indexOf(base) !== 0) return location;
        return _extends({}, location, {
            pathname: location.pathname.substr(base.length)
        });
    }

    function createURL(location) {
        return typeof location === "string" ? location : createPath(location);
    }

    function staticHandler(methodName) {
        return function() {
            invariant(false, "You cannot %s with <StaticRouter>", methodName);
        };
    }

    function noop() {}
    /**
     * The public top-level API for a "static" <Router>, so-called because it
     * can't actually change the current location. Instead, it just records
     * location changes in a context object. Useful mainly in testing and
     * server-rendering scenarios.
     */

    var StaticRouter =
        /*#__PURE__*/
        (function(_React$Component) {
            _inheritsLoose$1(StaticRouter, _React$Component);

            function StaticRouter() {
                var _this;

                for (
                    var _len = arguments.length,
                        args = new Array(_len),
                        _key = 0;
                    _key < _len;
                    _key++
                ) {
                    args[_key] = arguments[_key];
                }

                _this =
                    _React$Component.call.apply(
                        _React$Component,
                        [this].concat(args)
                    ) || this;

                _this.handlePush = function(location) {
                    return _this.navigateTo(location, "PUSH");
                };

                _this.handleReplace = function(location) {
                    return _this.navigateTo(location, "REPLACE");
                };

                _this.handleListen = function() {
                    return noop;
                };

                _this.handleBlock = function() {
                    return noop;
                };

                return _this;
            }

            var _proto = StaticRouter.prototype;

            _proto.navigateTo = function navigateTo(location, action) {
                var _this$props = this.props,
                    _this$props$basename = _this$props.basename,
                    basename =
                        _this$props$basename === void 0
                            ? ""
                            : _this$props$basename,
                    _this$props$context = _this$props.context,
                    context =
                        _this$props$context === void 0
                            ? {}
                            : _this$props$context;
                context.action = action;
                context.location = addBasename(
                    basename,
                    createLocation(location)
                );
                context.url = createURL(context.location);
            };

            _proto.render = function render() {
                var _this$props2 = this.props,
                    _this$props2$basename = _this$props2.basename,
                    basename =
                        _this$props2$basename === void 0
                            ? ""
                            : _this$props2$basename,
                    _this$props2$context = _this$props2.context,
                    context =
                        _this$props2$context === void 0
                            ? {}
                            : _this$props2$context,
                    _this$props2$location = _this$props2.location,
                    location =
                        _this$props2$location === void 0
                            ? "/"
                            : _this$props2$location,
                    rest = _objectWithoutPropertiesLoose(_this$props2, [
                        "basename",
                        "context",
                        "location"
                    ]);

                var history = {
                    createHref: function createHref(path) {
                        return addLeadingSlash$1(basename + createURL(path));
                    },
                    action: "POP",
                    location: stripBasename$1(
                        basename,
                        createLocation(location)
                    ),
                    push: this.handlePush,
                    replace: this.handleReplace,
                    go: staticHandler("go"),
                    goBack: staticHandler("goBack"),
                    goForward: staticHandler("goForward"),
                    listen: this.handleListen,
                    block: this.handleBlock
                };
                return React__default.createElement(
                    Router,
                    _extends({}, rest, {
                        history: history,
                        staticContext: context
                    })
                );
            };

            return StaticRouter;
        })(React__default.Component);

    {
        StaticRouter.propTypes = {
            basename: propTypes.string,
            context: propTypes.object,
            location: propTypes.oneOfType([propTypes.string, propTypes.object])
        };

        StaticRouter.prototype.componentDidMount = function() {
            warning$1(
                !this.props.history,
                "<StaticRouter> ignores the history prop. To use a custom history, " +
                    "use `import { Router }` instead of `import { StaticRouter as Router }`."
            );
        };
    }
    /**
     * The public API for rendering the first <Route> that matches.
     */

    var Switch =
        /*#__PURE__*/
        (function(_React$Component) {
            _inheritsLoose$1(Switch, _React$Component);

            function Switch() {
                return _React$Component.apply(this, arguments) || this;
            }

            var _proto = Switch.prototype;

            _proto.render = function render() {
                var _this = this;

                return React__default.createElement(
                    context.Consumer,
                    null,
                    function(context$$1) {
                        !context$$1
                            ? invariant(
                                  false,
                                  "You should not use <Switch> outside a <Router>"
                              )
                            : void 0;
                        var location =
                            _this.props.location || context$$1.location;
                        var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()
                        // here because toArray adds keys to all child elements and we do not want
                        // to trigger an unmount/remount for two <Route>s that render the same
                        // component at different URLs.

                        React__default.Children.forEach(
                            _this.props.children,
                            function(child) {
                                if (
                                    match == null &&
                                    React__default.isValidElement(child)
                                ) {
                                    element = child;
                                    var path =
                                        child.props.path || child.props.from;
                                    match = path
                                        ? matchPath(
                                              location.pathname,
                                              _extends({}, child.props, {
                                                  path: path
                                              })
                                          )
                                        : context$$1.match;
                                }
                            }
                        );
                        return match
                            ? React__default.cloneElement(element, {
                                  location: location,
                                  computedMatch: match
                              })
                            : null;
                    }
                );
            };

            return Switch;
        })(React__default.Component);

    {
        Switch.propTypes = {
            children: propTypes.node,
            location: propTypes.object
        };

        Switch.prototype.componentDidUpdate = function(prevProps) {
            warning$1(
                !(this.props.location && !prevProps.location),
                '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'
            );
            warning$1(
                !(!this.props.location && prevProps.location),
                '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'
            );
        };
    }
    /**
     * A public higher-order component to access the imperative API
     */

    function withRouter(Component) {
        var displayName =
            "withRouter(" + (Component.displayName || Component.name) + ")";

        var C = function C(props) {
            var wrappedComponentRef = props.wrappedComponentRef,
                remainingProps = _objectWithoutPropertiesLoose(props, [
                    "wrappedComponentRef"
                ]);

            return React__default.createElement(
                context.Consumer,
                null,
                function(context$$1) {
                    !context$$1
                        ? invariant(
                              false,
                              "You should not use <" +
                                  displayName +
                                  " /> outside a <Router>"
                          )
                        : void 0;
                    return React__default.createElement(
                        Component,
                        _extends({}, remainingProps, context$$1, {
                            ref: wrappedComponentRef
                        })
                    );
                }
            );
        };

        C.displayName = displayName;
        C.WrappedComponent = Component;

        {
            C.propTypes = {
                wrappedComponentRef: propTypes.oneOfType([
                    propTypes.string,
                    propTypes.func,
                    propTypes.object
                ])
            };
        }

        return hoistNonReactStatics_cjs(C, Component);
    }

    {
        if (typeof window !== "undefined") {
            var global$1 = window;
            var key$1 = "__react_router_build__";
            var buildNames = {
                cjs: "CommonJS",
                esm: "ES modules",
                umd: "UMD"
            };

            if (global$1[key$1] && global$1[key$1] !== "esm") {
                var initialBuildName = buildNames[global$1[key$1]];
                var secondaryBuildName = buildNames["esm"]; // TODO: Add link to article that explains in detail how to avoid
                // loading 2 different builds.

                throw new Error(
                    "You are loading the " +
                        secondaryBuildName +
                        " build of React Router " +
                        ("on a page that is already running the " +
                            initialBuildName +
                            " ") +
                        "build, so things won't work right."
                );
            }

            global$1[key$1] = "esm";
        }
    }

    function _inheritsLoose$2(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
    }

    function _extends$1() {
        _extends$1 =
            Object.assign ||
            function(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];

                    for (var key in source) {
                        if (Object.prototype.hasOwnProperty.call(source, key)) {
                            target[key] = source[key];
                        }
                    }
                }

                return target;
            };

        return _extends$1.apply(this, arguments);
    }

    function isAbsolute$1(pathname) {
        return pathname.charAt(0) === "/";
    }

    // About 1.5x faster than the two-arg version of Array#splice()
    function spliceOne$1(list, index) {
        for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
            list[i] = list[k];
        }

        list.pop();
    }

    // This implementation is based heavily on node's url.parse
    function resolvePathname$1(to) {
        var from =
            arguments.length > 1 && arguments[1] !== undefined
                ? arguments[1]
                : "";

        var toParts = (to && to.split("/")) || [];
        var fromParts = (from && from.split("/")) || [];

        var isToAbs = to && isAbsolute$1(to);
        var isFromAbs = from && isAbsolute$1(from);
        var mustEndAbs = isToAbs || isFromAbs;

        if (to && isAbsolute$1(to)) {
            // to is absolute
            fromParts = toParts;
        } else if (toParts.length) {
            // to is relative, drop the filename
            fromParts.pop();
            fromParts = fromParts.concat(toParts);
        }

        if (!fromParts.length) return "/";

        var hasTrailingSlash = void 0;
        if (fromParts.length) {
            var last = fromParts[fromParts.length - 1];
            hasTrailingSlash = last === "." || last === ".." || last === "";
        } else {
            hasTrailingSlash = false;
        }

        var up = 0;
        for (var i = fromParts.length; i >= 0; i--) {
            var part = fromParts[i];

            if (part === ".") {
                spliceOne$1(fromParts, i);
            } else if (part === "..") {
                spliceOne$1(fromParts, i);
                up++;
            } else if (up) {
                spliceOne$1(fromParts, i);
                up--;
            }
        }

        if (!mustEndAbs)
            for (; up--; up) {
                fromParts.unshift("..");
            }
        if (
            mustEndAbs &&
            fromParts[0] !== "" &&
            (!fromParts[0] || !isAbsolute$1(fromParts[0]))
        )
            fromParts.unshift("");

        var result = fromParts.join("/");

        if (hasTrailingSlash && result.substr(-1) !== "/") result += "/";

        return result;
    }

    var _typeof$1 =
        typeof Symbol === "function" && typeof Symbol.iterator === "symbol"
            ? function(obj) {
                  return typeof obj;
              }
            : function(obj) {
                  return obj &&
                      typeof Symbol === "function" &&
                      obj.constructor === Symbol &&
                      obj !== Symbol.prototype
                      ? "symbol"
                      : typeof obj;
              };

    function valueEqual$1(a, b) {
        if (a === b) return true;

        if (a == null || b == null) return false;

        if (Array.isArray(a)) {
            return (
                Array.isArray(b) &&
                a.length === b.length &&
                a.every(function(item, index) {
                    return valueEqual$1(item, b[index]);
                })
            );
        }

        var aType = typeof a === "undefined" ? "undefined" : _typeof$1(a);
        var bType = typeof b === "undefined" ? "undefined" : _typeof$1(b);

        if (aType !== bType) return false;

        if (aType === "object") {
            var aValue = a.valueOf();
            var bValue = b.valueOf();

            if (aValue !== a || bValue !== b)
                return valueEqual$1(aValue, bValue);

            var aKeys = Object.keys(a);
            var bKeys = Object.keys(b);

            if (aKeys.length !== bKeys.length) return false;

            return aKeys.every(function(key) {
                return valueEqual$1(a[key], b[key]);
            });
        }

        return false;
    }

    function warning$2(condition, message) {
        {
            if (condition) {
                return;
            }

            console.warn(message);
        }
    }

    var prefix$1 = "Invariant failed";
    function invariant$1(condition, message) {
        if (condition) {
            return;
        }

        {
            throw new Error(prefix$1 + ": " + (message || ""));
        }
    }

    function addLeadingSlash$2(path) {
        return path.charAt(0) === "/" ? path : "/" + path;
    }
    function stripLeadingSlash$1(path) {
        return path.charAt(0) === "/" ? path.substr(1) : path;
    }
    function hasBasename$1(path, prefix) {
        return new RegExp("^" + prefix + "(\\/|\\?|#|$)", "i").test(path);
    }
    function stripBasename$2(path, prefix) {
        return hasBasename$1(path, prefix) ? path.substr(prefix.length) : path;
    }
    function stripTrailingSlash$1(path) {
        return path.charAt(path.length - 1) === "/" ? path.slice(0, -1) : path;
    }
    function parsePath$1(path) {
        var pathname = path || "/";
        var search = "";
        var hash = "";
        var hashIndex = pathname.indexOf("#");

        if (hashIndex !== -1) {
            hash = pathname.substr(hashIndex);
            pathname = pathname.substr(0, hashIndex);
        }

        var searchIndex = pathname.indexOf("?");

        if (searchIndex !== -1) {
            search = pathname.substr(searchIndex);
            pathname = pathname.substr(0, searchIndex);
        }

        return {
            pathname: pathname,
            search: search === "?" ? "" : search,
            hash: hash === "#" ? "" : hash
        };
    }
    function createPath$1(location) {
        var pathname = location.pathname,
            search = location.search,
            hash = location.hash;
        var path = pathname || "/";
        if (search && search !== "?")
            path += search.charAt(0) === "?" ? search : "?" + search;
        if (hash && hash !== "#")
            path += hash.charAt(0) === "#" ? hash : "#" + hash;
        return path;
    }

    function createLocation$1(path, state, key, currentLocation) {
        var location;

        if (typeof path === "string") {
            // Two-arg form: push(path, state)
            location = parsePath$1(path);
            location.state = state;
        } else {
            // One-arg form: push(location)
            location = _extends$1({}, path);
            if (location.pathname === undefined) location.pathname = "";

            if (location.search) {
                if (location.search.charAt(0) !== "?")
                    location.search = "?" + location.search;
            } else {
                location.search = "";
            }

            if (location.hash) {
                if (location.hash.charAt(0) !== "#")
                    location.hash = "#" + location.hash;
            } else {
                location.hash = "";
            }

            if (state !== undefined && location.state === undefined)
                location.state = state;
        }

        try {
            location.pathname = decodeURI(location.pathname);
        } catch (e) {
            if (e instanceof URIError) {
                throw new URIError(
                    'Pathname "' +
                        location.pathname +
                        '" could not be decoded. ' +
                        "This is likely caused by an invalid percent-encoding."
                );
            } else {
                throw e;
            }
        }

        if (key) location.key = key;

        if (currentLocation) {
            // Resolve incomplete/relative pathname relative to current location.
            if (!location.pathname) {
                location.pathname = currentLocation.pathname;
            } else if (location.pathname.charAt(0) !== "/") {
                location.pathname = resolvePathname$1(
                    location.pathname,
                    currentLocation.pathname
                );
            }
        } else {
            // When there is no prior location and pathname is empty, set it to /
            if (!location.pathname) {
                location.pathname = "/";
            }
        }

        return location;
    }
    function locationsAreEqual$1(a, b) {
        return (
            a.pathname === b.pathname &&
            a.search === b.search &&
            a.hash === b.hash &&
            a.key === b.key &&
            valueEqual$1(a.state, b.state)
        );
    }

    function createTransitionManager$1() {
        var prompt = null;

        function setPrompt(nextPrompt) {
            warning$2(
                prompt == null,
                "A history supports only one prompt at a time"
            );
            prompt = nextPrompt;
            return function() {
                if (prompt === nextPrompt) prompt = null;
            };
        }

        function confirmTransitionTo(
            location,
            action,
            getUserConfirmation,
            callback
        ) {
            // TODO: If another transition starts while we're still confirming
            // the previous one, we may end up in a weird state. Figure out the
            // best way to handle this.
            if (prompt != null) {
                var result =
                    typeof prompt === "function"
                        ? prompt(location, action)
                        : prompt;

                if (typeof result === "string") {
                    if (typeof getUserConfirmation === "function") {
                        getUserConfirmation(result, callback);
                    } else {
                        warning$2(
                            false,
                            "A history needs a getUserConfirmation function in order to use a prompt message"
                        );
                        callback(true);
                    }
                } else {
                    // Return false from a transition hook to cancel the transition.
                    callback(result !== false);
                }
            } else {
                callback(true);
            }
        }

        var listeners = [];

        function appendListener(fn) {
            var isActive = true;

            function listener() {
                if (isActive) fn.apply(void 0, arguments);
            }

            listeners.push(listener);
            return function() {
                isActive = false;
                listeners = listeners.filter(function(item) {
                    return item !== listener;
                });
            };
        }

        function notifyListeners() {
            for (
                var _len = arguments.length, args = new Array(_len), _key = 0;
                _key < _len;
                _key++
            ) {
                args[_key] = arguments[_key];
            }

            listeners.forEach(function(listener) {
                return listener.apply(void 0, args);
            });
        }

        return {
            setPrompt: setPrompt,
            confirmTransitionTo: confirmTransitionTo,
            appendListener: appendListener,
            notifyListeners: notifyListeners
        };
    }

    var canUseDOM$1 = !!(
        typeof window !== "undefined" &&
        window.document &&
        window.document.createElement
    );
    function getConfirmation$1(message, callback) {
        callback(window.confirm(message)); // eslint-disable-line no-alert
    }
    /**
     * Returns true if the HTML5 history API is supported. Taken from Modernizr.
     *
     * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
     * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
     * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
     */

    function supportsHistory$1() {
        var ua = window.navigator.userAgent;
        if (
            (ua.indexOf("Android 2.") !== -1 ||
                ua.indexOf("Android 4.0") !== -1) &&
            ua.indexOf("Mobile Safari") !== -1 &&
            ua.indexOf("Chrome") === -1 &&
            ua.indexOf("Windows Phone") === -1
        )
            return false;
        return window.history && "pushState" in window.history;
    }
    /**
     * Returns true if browser fires popstate on hash change.
     * IE10 and IE11 do not.
     */

    function supportsPopStateOnHashChange$1() {
        return window.navigator.userAgent.indexOf("Trident") === -1;
    }
    /**
     * Returns false if using go(n) with hash history causes a full page reload.
     */

    function supportsGoWithoutReloadUsingHash$1() {
        return window.navigator.userAgent.indexOf("Firefox") === -1;
    }
    /**
     * Returns true if a given popstate event is an extraneous WebKit event.
     * Accounts for the fact that Chrome on iOS fires real popstate events
     * containing undefined state when pressing the back button.
     */

    function isExtraneousPopstateEvent$1(event) {
        event.state === undefined &&
            navigator.userAgent.indexOf("CriOS") === -1;
    }

    var PopStateEvent$1 = "popstate";
    var HashChangeEvent$2 = "hashchange";

    function getHistoryState$1() {
        try {
            return window.history.state || {};
        } catch (e) {
            // IE 11 sometimes throws when accessing window.history.state
            // See https://github.com/ReactTraining/history/pull/289
            return {};
        }
    }
    /**
     * Creates a history object that uses the HTML5 history API including
     * pushState, replaceState, and the popstate event.
     */

    function createBrowserHistory$1(props) {
        if (props === void 0) {
            props = {};
        }

        !canUseDOM$1
            ? invariant$1(false, "Browser history needs a DOM")
            : void 0;
        var globalHistory = window.history;
        var canUseHistory = supportsHistory$1();
        var needsHashChangeListener = !supportsPopStateOnHashChange$1();
        var _props = props,
            _props$forceRefresh = _props.forceRefresh,
            forceRefresh =
                _props$forceRefresh === void 0 ? false : _props$forceRefresh,
            _props$getUserConfirm = _props.getUserConfirmation,
            getUserConfirmation =
                _props$getUserConfirm === void 0
                    ? getConfirmation$1
                    : _props$getUserConfirm,
            _props$keyLength = _props.keyLength,
            keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
        var basename = props.basename
            ? stripTrailingSlash$1(addLeadingSlash$2(props.basename))
            : "";

        function getDOMLocation(historyState) {
            var _ref = historyState || {},
                key = _ref.key,
                state = _ref.state;

            var _window$location = window.location,
                pathname = _window$location.pathname,
                search = _window$location.search,
                hash = _window$location.hash;
            var path = pathname + search + hash;
            warning$2(
                !basename || hasBasename$1(path, basename),
                "You are attempting to use a basename on a page whose URL path does not begin " +
                    'with the basename. Expected path "' +
                    path +
                    '" to begin with "' +
                    basename +
                    '".'
            );
            if (basename) path = stripBasename$2(path, basename);
            return createLocation$1(path, state, key);
        }

        function createKey() {
            return Math.random()
                .toString(36)
                .substr(2, keyLength);
        }

        var transitionManager = createTransitionManager$1();

        function setState(nextState) {
            _extends$1(history, nextState);

            history.length = globalHistory.length;
            transitionManager.notifyListeners(history.location, history.action);
        }

        function handlePopState(event) {
            // Ignore extraneous popstate events in WebKit.
            if (isExtraneousPopstateEvent$1(event)) return;
            handlePop(getDOMLocation(event.state));
        }

        function handleHashChange() {
            handlePop(getDOMLocation(getHistoryState$1()));
        }

        var forceNextPop = false;

        function handlePop(location) {
            if (forceNextPop) {
                forceNextPop = false;
                setState();
            } else {
                var action = "POP";
                transitionManager.confirmTransitionTo(
                    location,
                    action,
                    getUserConfirmation,
                    function(ok) {
                        if (ok) {
                            setState({
                                action: action,
                                location: location
                            });
                        } else {
                            revertPop(location);
                        }
                    }
                );
            }
        }

        function revertPop(fromLocation) {
            var toLocation = history.location; // TODO: We could probably make this more reliable by
            // keeping a list of keys we've seen in sessionStorage.
            // Instead, we just default to 0 for keys we don't know.

            var toIndex = allKeys.indexOf(toLocation.key);
            if (toIndex === -1) toIndex = 0;
            var fromIndex = allKeys.indexOf(fromLocation.key);
            if (fromIndex === -1) fromIndex = 0;
            var delta = toIndex - fromIndex;

            if (delta) {
                forceNextPop = true;
                go(delta);
            }
        }

        var initialLocation = getDOMLocation(getHistoryState$1());
        var allKeys = [initialLocation.key]; // Public interface

        function createHref(location) {
            return basename + createPath$1(location);
        }

        function push(path, state) {
            warning$2(
                !(
                    typeof path === "object" &&
                    path.state !== undefined &&
                    state !== undefined
                ),
                "You should avoid providing a 2nd state argument to push when the 1st " +
                    "argument is a location-like object that already has state; it is ignored"
            );
            var action = "PUSH";
            var location = createLocation$1(
                path,
                state,
                createKey(),
                history.location
            );
            transitionManager.confirmTransitionTo(
                location,
                action,
                getUserConfirmation,
                function(ok) {
                    if (!ok) return;
                    var href = createHref(location);
                    var key = location.key,
                        state = location.state;

                    if (canUseHistory) {
                        globalHistory.pushState(
                            {
                                key: key,
                                state: state
                            },
                            null,
                            href
                        );

                        if (forceRefresh) {
                            window.location.href = href;
                        } else {
                            var prevIndex = allKeys.indexOf(
                                history.location.key
                            );
                            var nextKeys = allKeys.slice(
                                0,
                                prevIndex === -1 ? 0 : prevIndex + 1
                            );
                            nextKeys.push(location.key);
                            allKeys = nextKeys;
                            setState({
                                action: action,
                                location: location
                            });
                        }
                    } else {
                        warning$2(
                            state === undefined,
                            "Browser history cannot push state in browsers that do not support HTML5 history"
                        );
                        window.location.href = href;
                    }
                }
            );
        }

        function replace(path, state) {
            warning$2(
                !(
                    typeof path === "object" &&
                    path.state !== undefined &&
                    state !== undefined
                ),
                "You should avoid providing a 2nd state argument to replace when the 1st " +
                    "argument is a location-like object that already has state; it is ignored"
            );
            var action = "REPLACE";
            var location = createLocation$1(
                path,
                state,
                createKey(),
                history.location
            );
            transitionManager.confirmTransitionTo(
                location,
                action,
                getUserConfirmation,
                function(ok) {
                    if (!ok) return;
                    var href = createHref(location);
                    var key = location.key,
                        state = location.state;

                    if (canUseHistory) {
                        globalHistory.replaceState(
                            {
                                key: key,
                                state: state
                            },
                            null,
                            href
                        );

                        if (forceRefresh) {
                            window.location.replace(href);
                        } else {
                            var prevIndex = allKeys.indexOf(
                                history.location.key
                            );
                            if (prevIndex !== -1)
                                allKeys[prevIndex] = location.key;
                            setState({
                                action: action,
                                location: location
                            });
                        }
                    } else {
                        warning$2(
                            state === undefined,
                            "Browser history cannot replace state in browsers that do not support HTML5 history"
                        );
                        window.location.replace(href);
                    }
                }
            );
        }

        function go(n) {
            globalHistory.go(n);
        }

        function goBack() {
            go(-1);
        }

        function goForward() {
            go(1);
        }

        var listenerCount = 0;

        function checkDOMListeners(delta) {
            listenerCount += delta;

            if (listenerCount === 1 && delta === 1) {
                window.addEventListener(PopStateEvent$1, handlePopState);
                if (needsHashChangeListener)
                    window.addEventListener(
                        HashChangeEvent$2,
                        handleHashChange
                    );
            } else if (listenerCount === 0) {
                window.removeEventListener(PopStateEvent$1, handlePopState);
                if (needsHashChangeListener)
                    window.removeEventListener(
                        HashChangeEvent$2,
                        handleHashChange
                    );
            }
        }

        var isBlocked = false;

        function block(prompt) {
            if (prompt === void 0) {
                prompt = false;
            }

            var unblock = transitionManager.setPrompt(prompt);

            if (!isBlocked) {
                checkDOMListeners(1);
                isBlocked = true;
            }

            return function() {
                if (isBlocked) {
                    isBlocked = false;
                    checkDOMListeners(-1);
                }

                return unblock();
            };
        }

        function listen(listener) {
            var unlisten = transitionManager.appendListener(listener);
            checkDOMListeners(1);
            return function() {
                checkDOMListeners(-1);
                unlisten();
            };
        }

        var history = {
            length: globalHistory.length,
            action: "POP",
            location: initialLocation,
            createHref: createHref,
            push: push,
            replace: replace,
            go: go,
            goBack: goBack,
            goForward: goForward,
            block: block,
            listen: listen
        };
        return history;
    }

    var HashChangeEvent$1$1 = "hashchange";
    var HashPathCoders$1 = {
        hashbang: {
            encodePath: function encodePath(path) {
                return path.charAt(0) === "!"
                    ? path
                    : "!/" + stripLeadingSlash$1(path);
            },
            decodePath: function decodePath(path) {
                return path.charAt(0) === "!" ? path.substr(1) : path;
            }
        },
        noslash: {
            encodePath: stripLeadingSlash$1,
            decodePath: addLeadingSlash$2
        },
        slash: {
            encodePath: addLeadingSlash$2,
            decodePath: addLeadingSlash$2
        }
    };

    function getHashPath$1() {
        // We can't use window.location.hash here because it's not
        // consistent across browsers - Firefox will pre-decode it!
        var href = window.location.href;
        var hashIndex = href.indexOf("#");
        return hashIndex === -1 ? "" : href.substring(hashIndex + 1);
    }

    function pushHashPath$1(path) {
        window.location.hash = path;
    }

    function replaceHashPath$1(path) {
        var hashIndex = window.location.href.indexOf("#");
        window.location.replace(
            window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) +
                "#" +
                path
        );
    }

    function createHashHistory$1(props) {
        if (props === void 0) {
            props = {};
        }

        !canUseDOM$1 ? invariant$1(false, "Hash history needs a DOM") : void 0;
        var globalHistory = window.history;
        var canGoWithoutReload = supportsGoWithoutReloadUsingHash$1();
        var _props = props,
            _props$getUserConfirm = _props.getUserConfirmation,
            getUserConfirmation =
                _props$getUserConfirm === void 0
                    ? getConfirmation$1
                    : _props$getUserConfirm,
            _props$hashType = _props.hashType,
            hashType = _props$hashType === void 0 ? "slash" : _props$hashType;
        var basename = props.basename
            ? stripTrailingSlash$1(addLeadingSlash$2(props.basename))
            : "";
        var _HashPathCoders$hashT = HashPathCoders$1[hashType],
            encodePath = _HashPathCoders$hashT.encodePath,
            decodePath = _HashPathCoders$hashT.decodePath;

        function getDOMLocation() {
            var path = decodePath(getHashPath$1());
            warning$2(
                !basename || hasBasename$1(path, basename),
                "You are attempting to use a basename on a page whose URL path does not begin " +
                    'with the basename. Expected path "' +
                    path +
                    '" to begin with "' +
                    basename +
                    '".'
            );
            if (basename) path = stripBasename$2(path, basename);
            return createLocation$1(path);
        }

        var transitionManager = createTransitionManager$1();

        function setState(nextState) {
            _extends$1(history, nextState);

            history.length = globalHistory.length;
            transitionManager.notifyListeners(history.location, history.action);
        }

        var forceNextPop = false;
        var ignorePath = null;

        function handleHashChange() {
            var path = getHashPath$1();
            var encodedPath = encodePath(path);

            if (path !== encodedPath) {
                // Ensure we always have a properly-encoded hash.
                replaceHashPath$1(encodedPath);
            } else {
                var location = getDOMLocation();
                var prevLocation = history.location;
                if (
                    !forceNextPop &&
                    locationsAreEqual$1(prevLocation, location)
                )
                    return; // A hashchange doesn't always == location change.

                if (ignorePath === createPath$1(location)) return; // Ignore this change; we already setState in push/replace.

                ignorePath = null;
                handlePop(location);
            }
        }

        function handlePop(location) {
            if (forceNextPop) {
                forceNextPop = false;
                setState();
            } else {
                var action = "POP";
                transitionManager.confirmTransitionTo(
                    location,
                    action,
                    getUserConfirmation,
                    function(ok) {
                        if (ok) {
                            setState({
                                action: action,
                                location: location
                            });
                        } else {
                            revertPop(location);
                        }
                    }
                );
            }
        }

        function revertPop(fromLocation) {
            var toLocation = history.location; // TODO: We could probably make this more reliable by
            // keeping a list of paths we've seen in sessionStorage.
            // Instead, we just default to 0 for paths we don't know.

            var toIndex = allPaths.lastIndexOf(createPath$1(toLocation));
            if (toIndex === -1) toIndex = 0;
            var fromIndex = allPaths.lastIndexOf(createPath$1(fromLocation));
            if (fromIndex === -1) fromIndex = 0;
            var delta = toIndex - fromIndex;

            if (delta) {
                forceNextPop = true;
                go(delta);
            }
        } // Ensure the hash is encoded properly before doing anything else.

        var path = getHashPath$1();
        var encodedPath = encodePath(path);
        if (path !== encodedPath) replaceHashPath$1(encodedPath);
        var initialLocation = getDOMLocation();
        var allPaths = [createPath$1(initialLocation)]; // Public interface

        function createHref(location) {
            return "#" + encodePath(basename + createPath$1(location));
        }

        function push(path, state) {
            warning$2(
                state === undefined,
                "Hash history cannot push state; it is ignored"
            );
            var action = "PUSH";
            var location = createLocation$1(
                path,
                undefined,
                undefined,
                history.location
            );
            transitionManager.confirmTransitionTo(
                location,
                action,
                getUserConfirmation,
                function(ok) {
                    if (!ok) return;
                    var path = createPath$1(location);
                    var encodedPath = encodePath(basename + path);
                    var hashChanged = getHashPath$1() !== encodedPath;

                    if (hashChanged) {
                        // We cannot tell if a hashchange was caused by a PUSH, so we'd
                        // rather setState here and ignore the hashchange. The caveat here
                        // is that other hash histories in the page will consider it a POP.
                        ignorePath = path;
                        pushHashPath$1(encodedPath);
                        var prevIndex = allPaths.lastIndexOf(
                            createPath$1(history.location)
                        );
                        var nextPaths = allPaths.slice(
                            0,
                            prevIndex === -1 ? 0 : prevIndex + 1
                        );
                        nextPaths.push(path);
                        allPaths = nextPaths;
                        setState({
                            action: action,
                            location: location
                        });
                    } else {
                        warning$2(
                            false,
                            "Hash history cannot PUSH the same path; a new entry will not be added to the history stack"
                        );
                        setState();
                    }
                }
            );
        }

        function replace(path, state) {
            warning$2(
                state === undefined,
                "Hash history cannot replace state; it is ignored"
            );
            var action = "REPLACE";
            var location = createLocation$1(
                path,
                undefined,
                undefined,
                history.location
            );
            transitionManager.confirmTransitionTo(
                location,
                action,
                getUserConfirmation,
                function(ok) {
                    if (!ok) return;
                    var path = createPath$1(location);
                    var encodedPath = encodePath(basename + path);
                    var hashChanged = getHashPath$1() !== encodedPath;

                    if (hashChanged) {
                        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
                        // rather setState here and ignore the hashchange. The caveat here
                        // is that other hash histories in the page will consider it a POP.
                        ignorePath = path;
                        replaceHashPath$1(encodedPath);
                    }

                    var prevIndex = allPaths.indexOf(
                        createPath$1(history.location)
                    );
                    if (prevIndex !== -1) allPaths[prevIndex] = path;
                    setState({
                        action: action,
                        location: location
                    });
                }
            );
        }

        function go(n) {
            warning$2(
                canGoWithoutReload,
                "Hash history go(n) causes a full page reload in this browser"
            );
            globalHistory.go(n);
        }

        function goBack() {
            go(-1);
        }

        function goForward() {
            go(1);
        }

        var listenerCount = 0;

        function checkDOMListeners(delta) {
            listenerCount += delta;

            if (listenerCount === 1 && delta === 1) {
                window.addEventListener(HashChangeEvent$1$1, handleHashChange);
            } else if (listenerCount === 0) {
                window.removeEventListener(
                    HashChangeEvent$1$1,
                    handleHashChange
                );
            }
        }

        var isBlocked = false;

        function block(prompt) {
            if (prompt === void 0) {
                prompt = false;
            }

            var unblock = transitionManager.setPrompt(prompt);

            if (!isBlocked) {
                checkDOMListeners(1);
                isBlocked = true;
            }

            return function() {
                if (isBlocked) {
                    isBlocked = false;
                    checkDOMListeners(-1);
                }

                return unblock();
            };
        }

        function listen(listener) {
            var unlisten = transitionManager.appendListener(listener);
            checkDOMListeners(1);
            return function() {
                checkDOMListeners(-1);
                unlisten();
            };
        }

        var history = {
            length: globalHistory.length,
            action: "POP",
            location: initialLocation,
            createHref: createHref,
            push: push,
            replace: replace,
            go: go,
            goBack: goBack,
            goForward: goForward,
            block: block,
            listen: listen
        };
        return history;
    }

    /*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols$2 = Object.getOwnPropertySymbols;
    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    var propIsEnumerable$1 = Object.prototype.propertyIsEnumerable;

    function toObject$1(val) {
        if (val === null || val === undefined) {
            throw new TypeError(
                "Object.assign cannot be called with null or undefined"
            );
        }

        return Object(val);
    }

    function shouldUseNative$1() {
        try {
            if (!Object.assign) {
                return false;
            }

            // Detect buggy property enumeration order in older V8 versions.

            // https://bugs.chromium.org/p/v8/issues/detail?id=4118
            var test1 = new String("abc"); // eslint-disable-line no-new-wrappers
            test1[5] = "de";
            if (Object.getOwnPropertyNames(test1)[0] === "5") {
                return false;
            }

            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test2 = {};
            for (var i = 0; i < 10; i++) {
                test2["_" + String.fromCharCode(i)] = i;
            }
            var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
                return test2[n];
            });
            if (order2.join("") !== "0123456789") {
                return false;
            }

            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test3 = {};
            "abcdefghijklmnopqrst".split("").forEach(function(letter) {
                test3[letter] = letter;
            });
            if (
                Object.keys(Object.assign({}, test3)).join("") !==
                "abcdefghijklmnopqrst"
            ) {
                return false;
            }

            return true;
        } catch (err) {
            // We don't expect any of the above to throw, but better to be safe.
            return false;
        }
    }

    var objectAssign$1 = shouldUseNative$1()
        ? Object.assign
        : function(target, source) {
              var from;
              var to = toObject$1(target);
              var symbols;

              for (var s = 1; s < arguments.length; s++) {
                  from = Object(arguments[s]);

                  for (var key in from) {
                      if (hasOwnProperty$1.call(from, key)) {
                          to[key] = from[key];
                      }
                  }

                  if (getOwnPropertySymbols$2) {
                      symbols = getOwnPropertySymbols$2(from);
                      for (var i = 0; i < symbols.length; i++) {
                          if (propIsEnumerable$1.call(from, symbols[i])) {
                              to[symbols[i]] = from[symbols[i]];
                          }
                      }
                  }
              }

              return to;
          };

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var ReactPropTypesSecret$2 = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";

    var ReactPropTypesSecret_1$1 = ReactPropTypesSecret$2;

    var printWarning$2 = function() {};

    {
        var ReactPropTypesSecret$3 = ReactPropTypesSecret_1$1;
        var loggedTypeFailures$1 = {};

        printWarning$2 = function(text) {
            var message = "Warning: " + text;
            if (typeof console !== "undefined") {
                console.error(message);
            }
            try {
                // --- Welcome to debugging React ---
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                throw new Error(message);
            } catch (x) {}
        };
    }

    /**
     * Assert that the values match with the type specs.
     * Error messages are memorized and will only be shown once.
     *
     * @param {object} typeSpecs Map of name to a ReactPropType
     * @param {object} values Runtime values that need to be type-checked
     * @param {string} location e.g. "prop", "context", "child context"
     * @param {string} componentName Name of the component for error messages.
     * @param {?Function} getStack Returns the component stack.
     * @private
     */
    function checkPropTypes$1(
        typeSpecs,
        values,
        location,
        componentName,
        getStack
    ) {
        {
            for (var typeSpecName in typeSpecs) {
                if (typeSpecs.hasOwnProperty(typeSpecName)) {
                    var error;
                    // Prop type validation may throw. In case they do, we don't want to
                    // fail the render phase where it didn't fail before. So we log it.
                    // After these have been cleaned up, we'll let them throw.
                    try {
                        // This is intentionally an invariant that gets caught. It's the same
                        // behavior as without this statement except with a better message.
                        if (typeof typeSpecs[typeSpecName] !== "function") {
                            var err = Error(
                                (componentName || "React class") +
                                    ": " +
                                    location +
                                    " type `" +
                                    typeSpecName +
                                    "` is invalid; " +
                                    "it must be a function, usually from the `prop-types` package, but received `" +
                                    typeof typeSpecs[typeSpecName] +
                                    "`."
                            );
                            err.name = "Invariant Violation";
                            throw err;
                        }
                        error = typeSpecs[typeSpecName](
                            values,
                            typeSpecName,
                            componentName,
                            location,
                            null,
                            ReactPropTypesSecret$3
                        );
                    } catch (ex) {
                        error = ex;
                    }
                    if (error && !(error instanceof Error)) {
                        printWarning$2(
                            (componentName || "React class") +
                                ": type specification of " +
                                location +
                                " `" +
                                typeSpecName +
                                "` is invalid; the type checker " +
                                "function must return `null` or an `Error` but returned a " +
                                typeof error +
                                ". " +
                                "You may have forgotten to pass an argument to the type checker " +
                                "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " +
                                "shape all require an argument)."
                        );
                    }
                    if (
                        error instanceof Error &&
                        !(error.message in loggedTypeFailures$1)
                    ) {
                        // Only monitor this failure once because there tends to be a lot of the
                        // same error.
                        loggedTypeFailures$1[error.message] = true;

                        var stack = getStack ? getStack() : "";

                        printWarning$2(
                            "Failed " +
                                location +
                                " type: " +
                                error.message +
                                (stack != null ? stack : "")
                        );
                    }
                }
            }
        }
    }

    var checkPropTypes_1$1 = checkPropTypes$1;

    var printWarning$3 = function() {};

    {
        printWarning$3 = function(text) {
            var message = "Warning: " + text;
            if (typeof console !== "undefined") {
                console.error(message);
            }
            try {
                // --- Welcome to debugging React ---
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                throw new Error(message);
            } catch (x) {}
        };
    }

    function emptyFunctionThatReturnsNull$1() {
        return null;
    }

    var factoryWithTypeCheckers$1 = function(
        isValidElement,
        throwOnDirectAccess
    ) {
        /* global Symbol */
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator"; // Before Symbol spec.

        /**
         * Returns the iterator method function contained on the iterable object.
         *
         * Be sure to invoke the function with the iterable as context:
         *
         *     var iteratorFn = getIteratorFn(myIterable);
         *     if (iteratorFn) {
         *       var iterator = iteratorFn.call(myIterable);
         *       ...
         *     }
         *
         * @param {?object} maybeIterable
         * @return {?function}
         */
        function getIteratorFn(maybeIterable) {
            var iteratorFn =
                maybeIterable &&
                ((ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL]) ||
                    maybeIterable[FAUX_ITERATOR_SYMBOL]);
            if (typeof iteratorFn === "function") {
                return iteratorFn;
            }
        }

        /**
         * Collection of methods that allow declaration and validation of props that are
         * supplied to React components. Example usage:
         *
         *   var Props = require('ReactPropTypes');
         *   var MyArticle = React.createClass({
         *     propTypes: {
         *       // An optional string prop named "description".
         *       description: Props.string,
         *
         *       // A required enum prop named "category".
         *       category: Props.oneOf(['News','Photos']).isRequired,
         *
         *       // A prop named "dialog" that requires an instance of Dialog.
         *       dialog: Props.instanceOf(Dialog).isRequired
         *     },
         *     render: function() { ... }
         *   });
         *
         * A more formal specification of how these methods are used:
         *
         *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
         *   decl := ReactPropTypes.{type}(.isRequired)?
         *
         * Each and every declaration produces a function with the same signature. This
         * allows the creation of custom validation functions. For example:
         *
         *  var MyLink = React.createClass({
         *    propTypes: {
         *      // An optional string or URI prop named "href".
         *      href: function(props, propName, componentName) {
         *        var propValue = props[propName];
         *        if (propValue != null && typeof propValue !== 'string' &&
         *            !(propValue instanceof URI)) {
         *          return new Error(
         *            'Expected a string or an URI for ' + propName + ' in ' +
         *            componentName
         *          );
         *        }
         *      }
         *    },
         *    render: function() {...}
         *  });
         *
         * @internal
         */

        var ANONYMOUS = "<<anonymous>>";

        // Important!
        // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
        var ReactPropTypes = {
            array: createPrimitiveTypeChecker("array"),
            bool: createPrimitiveTypeChecker("boolean"),
            func: createPrimitiveTypeChecker("function"),
            number: createPrimitiveTypeChecker("number"),
            object: createPrimitiveTypeChecker("object"),
            string: createPrimitiveTypeChecker("string"),
            symbol: createPrimitiveTypeChecker("symbol"),

            any: createAnyTypeChecker(),
            arrayOf: createArrayOfTypeChecker,
            element: createElementTypeChecker(),
            instanceOf: createInstanceTypeChecker,
            node: createNodeChecker(),
            objectOf: createObjectOfTypeChecker,
            oneOf: createEnumTypeChecker,
            oneOfType: createUnionTypeChecker,
            shape: createShapeTypeChecker,
            exact: createStrictShapeTypeChecker
        };

        /**
         * inlined Object.is polyfill to avoid requiring consumers ship their own
         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
         */
        /*eslint-disable no-self-compare*/
        function is(x, y) {
            // SameValue algorithm
            if (x === y) {
                // Steps 1-5, 7-10
                // Steps 6.b-6.e: +0 != -0
                return x !== 0 || 1 / x === 1 / y;
            } else {
                // Step 6.a: NaN == NaN
                return x !== x && y !== y;
            }
        }
        /*eslint-enable no-self-compare*/

        /**
         * We use an Error-like object for backward compatibility as people may call
         * PropTypes directly and inspect their output. However, we don't use real
         * Errors anymore. We don't inspect their stack anyway, and creating them
         * is prohibitively expensive if they are created too often, such as what
         * happens in oneOfType() for any type before the one that matched.
         */
        function PropTypeError(message) {
            this.message = message;
            this.stack = "";
        }
        // Make `instanceof Error` still work for returned errors.
        PropTypeError.prototype = Error.prototype;

        function createChainableTypeChecker(validate) {
            {
                var manualPropTypeCallCache = {};
                var manualPropTypeWarningCount = 0;
            }
            function checkType(
                isRequired,
                props,
                propName,
                componentName,
                location,
                propFullName,
                secret
            ) {
                componentName = componentName || ANONYMOUS;
                propFullName = propFullName || propName;

                if (secret !== ReactPropTypesSecret_1$1) {
                    if (throwOnDirectAccess) {
                        // New behavior only for users of `prop-types` package
                        var err = new Error(
                            "Calling PropTypes validators directly is not supported by the `prop-types` package. " +
                                "Use `PropTypes.checkPropTypes()` to call them. " +
                                "Read more at http://fb.me/use-check-prop-types"
                        );
                        err.name = "Invariant Violation";
                        throw err;
                    } else if (typeof console !== "undefined") {
                        // Old behavior for people using React.PropTypes
                        var cacheKey = componentName + ":" + propName;
                        if (
                            !manualPropTypeCallCache[cacheKey] &&
                            // Avoid spamming the console because they are often not actionable except for lib authors
                            manualPropTypeWarningCount < 3
                        ) {
                            printWarning$3(
                                "You are manually calling a React.PropTypes validation " +
                                    "function for the `" +
                                    propFullName +
                                    "` prop on `" +
                                    componentName +
                                    "`. This is deprecated " +
                                    "and will throw in the standalone `prop-types` package. " +
                                    "You may be seeing this warning due to a third-party PropTypes " +
                                    "library. See https://fb.me/react-warning-dont-call-proptypes " +
                                    "for details."
                            );
                            manualPropTypeCallCache[cacheKey] = true;
                            manualPropTypeWarningCount++;
                        }
                    }
                }
                if (props[propName] == null) {
                    if (isRequired) {
                        if (props[propName] === null) {
                            return new PropTypeError(
                                "The " +
                                    location +
                                    " `" +
                                    propFullName +
                                    "` is marked as required " +
                                    ("in `" +
                                        componentName +
                                        "`, but its value is `null`.")
                            );
                        }
                        return new PropTypeError(
                            "The " +
                                location +
                                " `" +
                                propFullName +
                                "` is marked as required in " +
                                ("`" +
                                    componentName +
                                    "`, but its value is `undefined`.")
                        );
                    }
                    return null;
                } else {
                    return validate(
                        props,
                        propName,
                        componentName,
                        location,
                        propFullName
                    );
                }
            }

            var chainedCheckType = checkType.bind(null, false);
            chainedCheckType.isRequired = checkType.bind(null, true);

            return chainedCheckType;
        }

        function createPrimitiveTypeChecker(expectedType) {
            function validate(
                props,
                propName,
                componentName,
                location,
                propFullName,
                secret
            ) {
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== expectedType) {
                    // `propValue` being instance of, say, date/regexp, pass the 'object'
                    // check, but we can offer a more precise error message here rather than
                    // 'of type `object`'.
                    var preciseType = getPreciseType(propValue);

                    return new PropTypeError(
                        "Invalid " +
                            location +
                            " `" +
                            propFullName +
                            "` of type " +
                            ("`" +
                                preciseType +
                                "` supplied to `" +
                                componentName +
                                "`, expected ") +
                            ("`" + expectedType + "`.")
                    );
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createAnyTypeChecker() {
            return createChainableTypeChecker(emptyFunctionThatReturnsNull$1);
        }

        function createArrayOfTypeChecker(typeChecker) {
            function validate(
                props,
                propName,
                componentName,
                location,
                propFullName
            ) {
                if (typeof typeChecker !== "function") {
                    return new PropTypeError(
                        "Property `" +
                            propFullName +
                            "` of component `" +
                            componentName +
                            "` has invalid PropType notation inside arrayOf."
                    );
                }
                var propValue = props[propName];
                if (!Array.isArray(propValue)) {
                    var propType = getPropType(propValue);
                    return new PropTypeError(
                        "Invalid " +
                            location +
                            " `" +
                            propFullName +
                            "` of type " +
                            ("`" +
                                propType +
                                "` supplied to `" +
                                componentName +
                                "`, expected an array.")
                    );
                }
                for (var i = 0; i < propValue.length; i++) {
                    var error = typeChecker(
                        propValue,
                        i,
                        componentName,
                        location,
                        propFullName + "[" + i + "]",
                        ReactPropTypesSecret_1$1
                    );
                    if (error instanceof Error) {
                        return error;
                    }
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createElementTypeChecker() {
            function validate(
                props,
                propName,
                componentName,
                location,
                propFullName
            ) {
                var propValue = props[propName];
                if (!isValidElement(propValue)) {
                    var propType = getPropType(propValue);
                    return new PropTypeError(
                        "Invalid " +
                            location +
                            " `" +
                            propFullName +
                            "` of type " +
                            ("`" +
                                propType +
                                "` supplied to `" +
                                componentName +
                                "`, expected a single ReactElement.")
                    );
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createInstanceTypeChecker(expectedClass) {
            function validate(
                props,
                propName,
                componentName,
                location,
                propFullName
            ) {
                if (!(props[propName] instanceof expectedClass)) {
                    var expectedClassName = expectedClass.name || ANONYMOUS;
                    var actualClassName = getClassName(props[propName]);
                    return new PropTypeError(
                        "Invalid " +
                            location +
                            " `" +
                            propFullName +
                            "` of type " +
                            ("`" +
                                actualClassName +
                                "` supplied to `" +
                                componentName +
                                "`, expected ") +
                            ("instance of `" + expectedClassName + "`.")
                    );
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createEnumTypeChecker(expectedValues) {
            if (!Array.isArray(expectedValues)) {
                printWarning$3(
                    "Invalid argument supplied to oneOf, expected an instance of array."
                );
                return emptyFunctionThatReturnsNull$1;
            }

            function validate(
                props,
                propName,
                componentName,
                location,
                propFullName
            ) {
                var propValue = props[propName];
                for (var i = 0; i < expectedValues.length; i++) {
                    if (is(propValue, expectedValues[i])) {
                        return null;
                    }
                }

                var valuesString = JSON.stringify(expectedValues);
                return new PropTypeError(
                    "Invalid " +
                        location +
                        " `" +
                        propFullName +
                        "` of value `" +
                        propValue +
                        "` " +
                        ("supplied to `" +
                            componentName +
                            "`, expected one of " +
                            valuesString +
                            ".")
                );
            }
            return createChainableTypeChecker(validate);
        }

        function createObjectOfTypeChecker(typeChecker) {
            function validate(
                props,
                propName,
                componentName,
                location,
                propFullName
            ) {
                if (typeof typeChecker !== "function") {
                    return new PropTypeError(
                        "Property `" +
                            propFullName +
                            "` of component `" +
                            componentName +
                            "` has invalid PropType notation inside objectOf."
                    );
                }
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== "object") {
                    return new PropTypeError(
                        "Invalid " +
                            location +
                            " `" +
                            propFullName +
                            "` of type " +
                            ("`" +
                                propType +
                                "` supplied to `" +
                                componentName +
                                "`, expected an object.")
                    );
                }
                for (var key in propValue) {
                    if (propValue.hasOwnProperty(key)) {
                        var error = typeChecker(
                            propValue,
                            key,
                            componentName,
                            location,
                            propFullName + "." + key,
                            ReactPropTypesSecret_1$1
                        );
                        if (error instanceof Error) {
                            return error;
                        }
                    }
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createUnionTypeChecker(arrayOfTypeCheckers) {
            if (!Array.isArray(arrayOfTypeCheckers)) {
                printWarning$3(
                    "Invalid argument supplied to oneOfType, expected an instance of array."
                );
                return emptyFunctionThatReturnsNull$1;
            }

            for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                var checker = arrayOfTypeCheckers[i];
                if (typeof checker !== "function") {
                    printWarning$3(
                        "Invalid argument supplied to oneOfType. Expected an array of check functions, but " +
                            "received " +
                            getPostfixForTypeWarning(checker) +
                            " at index " +
                            i +
                            "."
                    );
                    return emptyFunctionThatReturnsNull$1;
                }
            }

            function validate(
                props,
                propName,
                componentName,
                location,
                propFullName
            ) {
                for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                    var checker = arrayOfTypeCheckers[i];
                    if (
                        checker(
                            props,
                            propName,
                            componentName,
                            location,
                            propFullName,
                            ReactPropTypesSecret_1$1
                        ) == null
                    ) {
                        return null;
                    }
                }

                return new PropTypeError(
                    "Invalid " +
                        location +
                        " `" +
                        propFullName +
                        "` supplied to " +
                        ("`" + componentName + "`.")
                );
            }
            return createChainableTypeChecker(validate);
        }

        function createNodeChecker() {
            function validate(
                props,
                propName,
                componentName,
                location,
                propFullName
            ) {
                if (!isNode(props[propName])) {
                    return new PropTypeError(
                        "Invalid " +
                            location +
                            " `" +
                            propFullName +
                            "` supplied to " +
                            ("`" + componentName + "`, expected a ReactNode.")
                    );
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createShapeTypeChecker(shapeTypes) {
            function validate(
                props,
                propName,
                componentName,
                location,
                propFullName
            ) {
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== "object") {
                    return new PropTypeError(
                        "Invalid " +
                            location +
                            " `" +
                            propFullName +
                            "` of type `" +
                            propType +
                            "` " +
                            ("supplied to `" +
                                componentName +
                                "`, expected `object`.")
                    );
                }
                for (var key in shapeTypes) {
                    var checker = shapeTypes[key];
                    if (!checker) {
                        continue;
                    }
                    var error = checker(
                        propValue,
                        key,
                        componentName,
                        location,
                        propFullName + "." + key,
                        ReactPropTypesSecret_1$1
                    );
                    if (error) {
                        return error;
                    }
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createStrictShapeTypeChecker(shapeTypes) {
            function validate(
                props,
                propName,
                componentName,
                location,
                propFullName
            ) {
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== "object") {
                    return new PropTypeError(
                        "Invalid " +
                            location +
                            " `" +
                            propFullName +
                            "` of type `" +
                            propType +
                            "` " +
                            ("supplied to `" +
                                componentName +
                                "`, expected `object`.")
                    );
                }
                // We need to check all keys in case some are required but missing from
                // props.
                var allKeys = objectAssign$1({}, props[propName], shapeTypes);
                for (var key in allKeys) {
                    var checker = shapeTypes[key];
                    if (!checker) {
                        return new PropTypeError(
                            "Invalid " +
                                location +
                                " `" +
                                propFullName +
                                "` key `" +
                                key +
                                "` supplied to `" +
                                componentName +
                                "`." +
                                "\nBad object: " +
                                JSON.stringify(props[propName], null, "  ") +
                                "\nValid keys: " +
                                JSON.stringify(
                                    Object.keys(shapeTypes),
                                    null,
                                    "  "
                                )
                        );
                    }
                    var error = checker(
                        propValue,
                        key,
                        componentName,
                        location,
                        propFullName + "." + key,
                        ReactPropTypesSecret_1$1
                    );
                    if (error) {
                        return error;
                    }
                }
                return null;
            }

            return createChainableTypeChecker(validate);
        }

        function isNode(propValue) {
            switch (typeof propValue) {
                case "number":
                case "string":
                case "undefined":
                    return true;
                case "boolean":
                    return !propValue;
                case "object":
                    if (Array.isArray(propValue)) {
                        return propValue.every(isNode);
                    }
                    if (propValue === null || isValidElement(propValue)) {
                        return true;
                    }

                    var iteratorFn = getIteratorFn(propValue);
                    if (iteratorFn) {
                        var iterator = iteratorFn.call(propValue);
                        var step;
                        if (iteratorFn !== propValue.entries) {
                            while (!(step = iterator.next()).done) {
                                if (!isNode(step.value)) {
                                    return false;
                                }
                            }
                        } else {
                            // Iterator will provide entry [k,v] tuples rather than values.
                            while (!(step = iterator.next()).done) {
                                var entry = step.value;
                                if (entry) {
                                    if (!isNode(entry[1])) {
                                        return false;
                                    }
                                }
                            }
                        }
                    } else {
                        return false;
                    }

                    return true;
                default:
                    return false;
            }
        }

        function isSymbol(propType, propValue) {
            // Native Symbol.
            if (propType === "symbol") {
                return true;
            }

            // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
            if (propValue["@@toStringTag"] === "Symbol") {
                return true;
            }

            // Fallback for non-spec compliant Symbols which are polyfilled.
            if (typeof Symbol === "function" && propValue instanceof Symbol) {
                return true;
            }

            return false;
        }

        // Equivalent of `typeof` but with special handling for array and regexp.
        function getPropType(propValue) {
            var propType = typeof propValue;
            if (Array.isArray(propValue)) {
                return "array";
            }
            if (propValue instanceof RegExp) {
                // Old webkits (at least until Android 4.0) return 'function' rather than
                // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
                // passes PropTypes.object.
                return "object";
            }
            if (isSymbol(propType, propValue)) {
                return "symbol";
            }
            return propType;
        }

        // This handles more types than `getPropType`. Only used for error messages.
        // See `createPrimitiveTypeChecker`.
        function getPreciseType(propValue) {
            if (typeof propValue === "undefined" || propValue === null) {
                return "" + propValue;
            }
            var propType = getPropType(propValue);
            if (propType === "object") {
                if (propValue instanceof Date) {
                    return "date";
                } else if (propValue instanceof RegExp) {
                    return "regexp";
                }
            }
            return propType;
        }

        // Returns a string that is postfixed to a warning about an invalid type.
        // For example, "undefined" or "of type array"
        function getPostfixForTypeWarning(value) {
            var type = getPreciseType(value);
            switch (type) {
                case "array":
                case "object":
                    return "an " + type;
                case "boolean":
                case "date":
                case "regexp":
                    return "a " + type;
                default:
                    return type;
            }
        }

        // Returns class name of the object, if any.
        function getClassName(propValue) {
            if (!propValue.constructor || !propValue.constructor.name) {
                return ANONYMOUS;
            }
            return propValue.constructor.name;
        }

        ReactPropTypes.checkPropTypes = checkPropTypes_1$1;
        ReactPropTypes.PropTypes = ReactPropTypes;

        return ReactPropTypes;
    };

    var propTypes$1 = createCommonjsModule(function(module) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        {
            var REACT_ELEMENT_TYPE =
                (typeof Symbol === "function" &&
                    Symbol.for &&
                    Symbol.for("react.element")) ||
                0xeac7;

            var isValidElement = function(object) {
                return (
                    typeof object === "object" &&
                    object !== null &&
                    object.$$typeof === REACT_ELEMENT_TYPE
                );
            };

            // By explicitly using `prop-types` you are opting into new development behavior.
            // http://fb.me/prop-types-in-prod
            var throwOnDirectAccess = true;
            module.exports = factoryWithTypeCheckers$1(
                isValidElement,
                throwOnDirectAccess
            );
        }
    });

    /**
     * The public API for a <Router> that uses HTML5 history.
     */

    var BrowserRouter =
        /*#__PURE__*/
        (function(_React$Component) {
            _inheritsLoose$2(BrowserRouter, _React$Component);

            function BrowserRouter() {
                var _this;

                for (
                    var _len = arguments.length,
                        args = new Array(_len),
                        _key = 0;
                    _key < _len;
                    _key++
                ) {
                    args[_key] = arguments[_key];
                }

                _this =
                    _React$Component.call.apply(
                        _React$Component,
                        [this].concat(args)
                    ) || this;
                _this.history = createBrowserHistory$1(_this.props);
                return _this;
            }

            var _proto = BrowserRouter.prototype;

            _proto.render = function render() {
                return React__default.createElement(Router, {
                    history: this.history,
                    children: this.props.children
                });
            };

            return BrowserRouter;
        })(React__default.Component);

    {
        BrowserRouter.propTypes = {
            basename: propTypes$1.string,
            children: propTypes$1.node,
            forceRefresh: propTypes$1.bool,
            getUserConfirmation: propTypes$1.func,
            keyLength: propTypes$1.number
        };

        BrowserRouter.prototype.componentDidMount = function() {
            warning$2(
                !this.props.history,
                "<BrowserRouter> ignores the history prop. To use a custom history, " +
                    "use `import { Router }` instead of `import { BrowserRouter as Router }`."
            );
        };
    }

    /**
     * The public API for a <Router> that uses window.location.hash.
     */

    var HashRouter =
        /*#__PURE__*/
        (function(_React$Component) {
            _inheritsLoose$2(HashRouter, _React$Component);

            function HashRouter() {
                var _this;

                for (
                    var _len = arguments.length,
                        args = new Array(_len),
                        _key = 0;
                    _key < _len;
                    _key++
                ) {
                    args[_key] = arguments[_key];
                }

                _this =
                    _React$Component.call.apply(
                        _React$Component,
                        [this].concat(args)
                    ) || this;
                _this.history = createHashHistory$1(_this.props);
                return _this;
            }

            var _proto = HashRouter.prototype;

            _proto.render = function render() {
                return React__default.createElement(Router, {
                    history: this.history,
                    children: this.props.children
                });
            };

            return HashRouter;
        })(React__default.Component);

    {
        HashRouter.propTypes = {
            basename: propTypes$1.string,
            children: propTypes$1.node,
            getUserConfirmation: propTypes$1.func,
            hashType: propTypes$1.oneOf(["hashbang", "noslash", "slash"])
        };

        HashRouter.prototype.componentDidMount = function() {
            warning$2(
                !this.props.history,
                "<HashRouter> ignores the history prop. To use a custom history, " +
                    "use `import { Router }` instead of `import { HashRouter as Router }`."
            );
        };
    }

    function _objectWithoutPropertiesLoose$1(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;

        for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
        }

        return target;
    }

    function isModifiedEvent(event) {
        return !!(
            event.metaKey ||
            event.altKey ||
            event.ctrlKey ||
            event.shiftKey
        );
    }
    /**
     * The public API for rendering a history-aware <a>.
     */

    var Link =
        /*#__PURE__*/
        (function(_React$Component) {
            _inheritsLoose$2(Link, _React$Component);

            function Link() {
                return _React$Component.apply(this, arguments) || this;
            }

            var _proto = Link.prototype;

            _proto.handleClick = function handleClick(event, history) {
                try {
                    if (this.props.onClick) this.props.onClick(event);
                } catch (ex) {
                    event.preventDefault();
                    throw ex;
                }

                if (
                    !event.defaultPrevented && // onClick prevented default
                    event.button === 0 && // ignore everything but left clicks
                    (!this.props.target || this.props.target === "_self") && // let browser handle "target=_blank" etc.
                    !isModifiedEvent(event) // ignore clicks with modifier keys
                ) {
                    event.preventDefault();
                    var method = this.props.replace
                        ? history.replace
                        : history.push;
                    method(this.props.to);
                }
            };

            _proto.render = function render() {
                var _this = this;

                var _this$props = this.props,
                    innerRef = _this$props.innerRef,
                    replace = _this$props.replace,
                    to = _this$props.to,
                    rest = _objectWithoutPropertiesLoose$1(_this$props, [
                        "innerRef",
                        "replace",
                        "to"
                    ]); // eslint-disable-line no-unused-vars

                return React__default.createElement(
                    context.Consumer,
                    null,
                    function(context$$1) {
                        !context$$1
                            ? invariant$1(
                                  false,
                                  "You should not use <Link> outside a <Router>"
                              )
                            : void 0;
                        var location =
                            typeof to === "string"
                                ? createLocation$1(
                                      to,
                                      null,
                                      null,
                                      context$$1.location
                                  )
                                : to;
                        var href = location
                            ? context$$1.history.createHref(location)
                            : "";
                        return React__default.createElement(
                            "a",
                            _extends$1({}, rest, {
                                onClick: function onClick(event) {
                                    return _this.handleClick(
                                        event,
                                        context$$1.history
                                    );
                                },
                                href: href,
                                ref: innerRef
                            })
                        );
                    }
                );
            };

            return Link;
        })(React__default.Component);

    {
        var toType = propTypes$1.oneOfType([
            propTypes$1.string,
            propTypes$1.object
        ]);
        var innerRefType = propTypes$1.oneOfType([
            propTypes$1.string,
            propTypes$1.func,
            propTypes$1.shape({
                current: propTypes$1.any
            })
        ]);
        Link.propTypes = {
            innerRef: innerRefType,
            onClick: propTypes$1.func,
            replace: propTypes$1.bool,
            target: propTypes$1.string,
            to: toType.isRequired
        };
    }

    function joinClassnames() {
        for (
            var _len = arguments.length, classnames = new Array(_len), _key = 0;
            _key < _len;
            _key++
        ) {
            classnames[_key] = arguments[_key];
        }

        return classnames
            .filter(function(i) {
                return i;
            })
            .join(" ");
    }
    /**
     * A <Link> wrapper that knows if it's "active" or not.
     */

    function NavLink(_ref) {
        var _ref$ariaCurrent = _ref["aria-current"],
            ariaCurrent =
                _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent,
            _ref$activeClassName = _ref.activeClassName,
            activeClassName =
                _ref$activeClassName === void 0
                    ? "active"
                    : _ref$activeClassName,
            activeStyle = _ref.activeStyle,
            classNameProp = _ref.className,
            exact = _ref.exact,
            isActiveProp = _ref.isActive,
            locationProp = _ref.location,
            strict = _ref.strict,
            styleProp = _ref.style,
            to = _ref.to,
            rest = _objectWithoutPropertiesLoose$1(_ref, [
                "aria-current",
                "activeClassName",
                "activeStyle",
                "className",
                "exact",
                "isActive",
                "location",
                "strict",
                "style",
                "to"
            ]);

        var path = typeof to === "object" ? to.pathname : to; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202

        var escapedPath =
            path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
        return React__default.createElement(context.Consumer, null, function(
            context$$1
        ) {
            !context$$1
                ? invariant$1(
                      false,
                      "You should not use <NavLink> outside a <Router>"
                  )
                : void 0;
            var pathToMatch = locationProp
                ? locationProp.pathname
                : context$$1.location.pathname;
            var match = escapedPath
                ? matchPath(pathToMatch, {
                      path: escapedPath,
                      exact: exact,
                      strict: strict
                  })
                : null;
            var isActive = !!(isActiveProp
                ? isActiveProp(match, context$$1.location)
                : match);
            var className = isActive
                ? joinClassnames(classNameProp, activeClassName)
                : classNameProp;
            var style = isActive
                ? _extends$1({}, styleProp, activeStyle)
                : styleProp;
            return React__default.createElement(
                Link,
                _extends$1(
                    {
                        "aria-current": (isActive && ariaCurrent) || null,
                        className: className,
                        style: style,
                        to: to
                    },
                    rest
                )
            );
        });
    }

    {
        var ariaCurrentType = propTypes$1.oneOf([
            "page",
            "step",
            "location",
            "date",
            "time",
            "true"
        ]);
        NavLink.propTypes = _extends$1({}, Link.propTypes, {
            "aria-current": ariaCurrentType,
            activeClassName: propTypes$1.string,
            activeStyle: propTypes$1.object,
            className: propTypes$1.string,
            exact: propTypes$1.bool,
            isActive: propTypes$1.func,
            location: propTypes$1.object,
            strict: propTypes$1.bool,
            style: propTypes$1.object
        });
    }

    exports.BrowserRouter = BrowserRouter;
    exports.HashRouter = HashRouter;
    exports.Link = Link;
    exports.NavLink = NavLink;
    exports.MemoryRouter = MemoryRouter;
    exports.Prompt = Prompt;
    exports.Redirect = Redirect;
    exports.Route = Route;
    exports.Router = Router;
    exports.StaticRouter = StaticRouter;
    exports.Switch = Switch;
    exports.generatePath = generatePath;
    exports.matchPath = matchPath;
    exports.withRouter = withRouter;
    exports.__RouterContext = context;

    Object.defineProperty(exports, "__esModule", { value: true });
});

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));

var _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement("path", {
  d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
}), _react.default.createElement("path", {
  fill: "none",
  d: "M0 0h24v24H0z"
}), _react.default.createElement("path", {
  d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
})), 'AccessTime');

exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));

var _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement("path", {
  d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z"
}), _react.default.createElement("path", {
  fill: "none",
  d: "M0 0h24v24H0z"
})), 'AccountCircle');

exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));

var _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement("path", {
  d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
}), _react.default.createElement("path", {
  fill: "none",
  d: "M0 0h24v24H0z"
})), 'Add');

exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));

var _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement("path", {
  fill: "none",
  d: "M0 0h24v24H0zm10 5h4v2h-4zm0 0h4v2h-4z"
}), _react.default.createElement("path", {
  d: "M10 16v-1H3.01L3 19c0 1.11.89 2 2 2h14c1.11 0 2-.89 2-2v-4h-7v1h-4zm10-9h-4.01V5l-2-2h-4l-2 2v2H4c-1.1 0-2 .9-2 2v3c0 1.11.89 2 2 2h6v-2h4v2h6c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2zm-6 0h-4V5h4v2z"
})), 'BusinessCenter');

exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));

var _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement("path", {
  d: "M20 3h-1V1h-2v2H7V1H5v2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 18H4V8h16v13z"
}), _react.default.createElement("path", {
  fill: "none",
  d: "M0 0h24v24H0z"
})), 'CalendarToday');

exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));

var _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement("path", {
  d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
}), _react.default.createElement("path", {
  fill: "none",
  d: "M0 0h24v24H0z"
})), 'ChevronRight');

exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));

var _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement("path", {
  d: "M21.99 4c0-1.1-.89-2-1.99-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4-.01-18zM18 14H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"
}), _react.default.createElement("path", {
  fill: "none",
  d: "M0 0h24v24H0z"
})), 'Comment');

exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));

var _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement("path", {
  d: "M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z"
}), _react.default.createElement("path", {
  fill: "none",
  d: "M0 0h24v24H0z"
})), 'FilterList');

exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));

var _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement("path", {
  d: "M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"
}), _react.default.createElement("path", {
  fill: "none",
  d: "M0 0h24v24H0z"
})), 'Home');

exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));

var _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement("path", {
  d: "M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z"
}), _react.default.createElement("path", {
  fill: "none",
  d: "M0 0h24v24H0z"
})), 'List');

exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));

var _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement("path", {
  fill: "none",
  d: "M0 0h24v24H0z"
}), _react.default.createElement("path", {
  d: "M12 22c1.1 0 2-.9 2-2h-4c0 1.1.9 2 2 2zm6-6v-5c0-3.07-1.63-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.64 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2zm-2 1H8v-6c0-2.48 1.51-4.5 4-4.5s4 2.02 4 4.5v6z"
})), 'NotificationsNone');

exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));

var _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement("path", {
  d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
}), _react.default.createElement("path", {
  fill: "none",
  d: "M0 0h24v24H0z"
})), 'Person');

exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));

var _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement("path", {
  d: "M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"
}), _react.default.createElement("path", {
  fill: "none",
  d: "M0 0h24v24H0z"
})), 'Refresh');

exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));

var _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement("path", {
  fill: "none",
  d: "M0 0h24v24H0z"
}), _react.default.createElement("path", {
  d: "M16.24 7.76C15.07 6.59 13.54 6 12 6v6l-4.24 4.24c2.34 2.34 6.14 2.34 8.49 0 2.34-2.34 2.34-6.14-.01-8.48zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
})), 'Timelapse');

exports.default = _default;
/** @license React v16.8.6
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

"use strict";

(function(global, factory) {
    typeof exports === "object" && typeof module !== "undefined"
        ? (module.exports = factory())
        : typeof define === "function" && define.amd
        ? define(factory)
        : (global.React = factory());
})(this, function() {
    "use strict";

    // TODO: this is special because it gets imported during build.

    var ReactVersion = "16.8.6";

    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === "function" && Symbol.for;

    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol
        ? Symbol.for("react.strict_mode")
        : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 0xeace;

    var REACT_CONCURRENT_MODE_TYPE = hasSymbol
        ? Symbol.for("react.concurrent_mode")
        : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol
        ? Symbol.for("react.forward_ref")
        : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 0xead4;

    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";

    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
        }
        var maybeIterator =
            (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
            maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
            return maybeIterator;
        }
        return null;
    }

    /*
object-assign
(c) Sindre Sorhus
@license MIT
*/

    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;

    function toObject(val) {
        if (val === null || val === undefined) {
            throw new TypeError(
                "Object.assign cannot be called with null or undefined"
            );
        }

        return Object(val);
    }

    function shouldUseNative() {
        try {
            if (!Object.assign) {
                return false;
            }

            // Detect buggy property enumeration order in older V8 versions.

            // https://bugs.chromium.org/p/v8/issues/detail?id=4118
            var test1 = new String("abc"); // eslint-disable-line no-new-wrappers
            test1[5] = "de";
            if (Object.getOwnPropertyNames(test1)[0] === "5") {
                return false;
            }

            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test2 = {};
            for (var i = 0; i < 10; i++) {
                test2["_" + String.fromCharCode(i)] = i;
            }
            var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
                return test2[n];
            });
            if (order2.join("") !== "0123456789") {
                return false;
            }

            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test3 = {};
            "abcdefghijklmnopqrst".split("").forEach(function(letter) {
                test3[letter] = letter;
            });
            if (
                Object.keys(Object.assign({}, test3)).join("") !==
                "abcdefghijklmnopqrst"
            ) {
                return false;
            }

            return true;
        } catch (err) {
            // We don't expect any of the above to throw, but better to be safe.
            return false;
        }
    }

    var objectAssign = shouldUseNative()
        ? Object.assign
        : function(target, source) {
              var from;
              var to = toObject(target);
              var symbols;

              for (var s = 1; s < arguments.length; s++) {
                  from = Object(arguments[s]);

                  for (var key in from) {
                      if (hasOwnProperty.call(from, key)) {
                          to[key] = from[key];
                      }
                  }

                  if (getOwnPropertySymbols) {
                      symbols = getOwnPropertySymbols(from);
                      for (var i = 0; i < symbols.length; i++) {
                          if (propIsEnumerable.call(from, symbols[i])) {
                              to[symbols[i]] = from[symbols[i]];
                          }
                      }
                  }
              }

              return to;
          };

    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */

    var validateFormat = function() {};

    {
        validateFormat = function(format) {
            if (format === undefined) {
                throw new Error("invariant requires an error message argument");
            }
        };
    }

    function invariant(condition, format, a, b, c, d, e, f) {
        validateFormat(format);

        if (!condition) {
            var error = void 0;
            if (format === undefined) {
                error = new Error(
                    "Minified exception occurred; use the non-minified dev environment " +
                        "for the full error message and additional helpful warnings."
                );
            } else {
                var args = [a, b, c, d, e, f];
                var argIndex = 0;
                error = new Error(
                    format.replace(/%s/g, function() {
                        return args[argIndex++];
                    })
                );
                error.name = "Invariant Violation";
            }

            error.framesToPop = 1; // we don't care about invariant's own frame
            throw error;
        }
    }

    // Relying on the `invariant()` implementation lets us
    // preserve the format and params in the www builds.

    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var lowPriorityWarning = function() {};

    {
        var printWarning = function(format) {
            for (
                var _len = arguments.length,
                    args = Array(_len > 1 ? _len - 1 : 0),
                    _key = 1;
                _key < _len;
                _key++
            ) {
                args[_key - 1] = arguments[_key];
            }

            var argIndex = 0;
            var message =
                "Warning: " +
                format.replace(/%s/g, function() {
                    return args[argIndex++];
                });
            if (typeof console !== "undefined") {
                console.warn(message);
            }
            try {
                // --- Welcome to debugging React ---
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                throw new Error(message);
            } catch (x) {}
        };

        lowPriorityWarning = function(condition, format) {
            if (format === undefined) {
                throw new Error(
                    "`lowPriorityWarning(condition, format, ...args)` requires a warning " +
                        "message argument"
                );
            }
            if (!condition) {
                for (
                    var _len2 = arguments.length,
                        args = Array(_len2 > 2 ? _len2 - 2 : 0),
                        _key2 = 2;
                    _key2 < _len2;
                    _key2++
                ) {
                    args[_key2 - 2] = arguments[_key2];
                }

                printWarning.apply(undefined, [format].concat(args));
            }
        };
    }

    var lowPriorityWarning$1 = lowPriorityWarning;

    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warningWithoutStack = function() {};

    {
        warningWithoutStack = function(condition, format) {
            for (
                var _len = arguments.length,
                    args = Array(_len > 2 ? _len - 2 : 0),
                    _key = 2;
                _key < _len;
                _key++
            ) {
                args[_key - 2] = arguments[_key];
            }

            if (format === undefined) {
                throw new Error(
                    "`warningWithoutStack(condition, format, ...args)` requires a warning " +
                        "message argument"
                );
            }
            if (args.length > 8) {
                // Check before the condition to catch violations early.
                throw new Error(
                    "warningWithoutStack() currently supports at most 8 arguments."
                );
            }
            if (condition) {
                return;
            }
            if (typeof console !== "undefined") {
                var argsWithFormat = args.map(function(item) {
                    return "" + item;
                });
                argsWithFormat.unshift("Warning: " + format);

                // We intentionally don't use spread (or .apply) directly because it
                // breaks IE9: https://github.com/facebook/react/issues/13610
                Function.prototype.apply.call(
                    console.error,
                    console,
                    argsWithFormat
                );
            }
            try {
                // --- Welcome to debugging React ---
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                var argIndex = 0;
                var message =
                    "Warning: " +
                    format.replace(/%s/g, function() {
                        return args[argIndex++];
                    });
                throw new Error(message);
            } catch (x) {}
        };
    }

    var warningWithoutStack$1 = warningWithoutStack;

    var didWarnStateUpdateForUnmountedComponent = {};

    function warnNoop(publicInstance, callerName) {
        {
            var _constructor = publicInstance.constructor;
            var componentName =
                (_constructor &&
                    (_constructor.displayName || _constructor.name)) ||
                "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
            }
            warningWithoutStack$1(
                false,
                "Can't call %s on a component that is not yet mounted. " +
                    "This is a no-op, but it might indicate a bug in your application. " +
                    "Instead, assign to `this.state` directly or define a `state = {};` " +
                    "class property with the desired state in the %s component.",
                callerName,
                componentName
            );
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
    }

    /**
     * This is the abstract API for an update queue.
     */
    var ReactNoopUpdateQueue = {
        /**
         * Checks whether or not this composite component is mounted.
         * @param {ReactClass} publicInstance The instance we want to test.
         * @return {boolean} True if mounted, false otherwise.
         * @protected
         * @final
         */
        isMounted: function(publicInstance) {
            return false;
        },

        /**
         * Forces an update. This should only be invoked when it is known with
         * certainty that we are **not** in a DOM transaction.
         *
         * You may want to call this when you know that some deeper aspect of the
         * component's state has changed but `setState` was not called.
         *
         * This will not invoke `shouldComponentUpdate`, but it will invoke
         * `componentWillUpdate` and `componentDidUpdate`.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
        },

        /**
         * Replaces all of the state. Always use this or `setState` to mutate state.
         * You should treat `this.state` as immutable.
         *
         * There is no guarantee that `this.state` will be immediately updated, so
         * accessing `this.state` after calling this method may return the old value.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} completeState Next state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueReplaceState: function(
            publicInstance,
            completeState,
            callback,
            callerName
        ) {
            warnNoop(publicInstance, "replaceState");
        },

        /**
         * Sets a subset of the state. This only exists because _pendingState is
         * internal. This provides a merging strategy that is not available to deep
         * properties which is confusing. TODO: Expose pendingState or don't use it
         * during the merge.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} partialState Next partial state to be merged with state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} Name of the calling function in the public API.
         * @internal
         */
        enqueueSetState: function(
            publicInstance,
            partialState,
            callback,
            callerName
        ) {
            warnNoop(publicInstance, "setState");
        }
    };

    var emptyObject = {};
    {
        Object.freeze(emptyObject);
    }

    /**
     * Base class helpers for the updating state of a component.
     */
    function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        // We initialize the default updater but the real one gets injected by the
        // renderer.
        this.updater = updater || ReactNoopUpdateQueue;
    }

    Component.prototype.isReactComponent = {};

    /**
     * Sets a subset of the state. Always use this to mutate
     * state. You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * There is no guarantee that calls to `setState` will run synchronously,
     * as they may eventually be batched together.  You can provide an optional
     * callback that will be executed when the call to setState is actually
     * completed.
     *
     * When a function is provided to setState, it will be called at some point in
     * the future (not synchronously). It will be called with the up to date
     * component arguments (state, props, context). These values can be different
     * from this.* because your function may be called after receiveProps but before
     * shouldComponentUpdate, and this new state, props, and context will not yet be
     * assigned to this.
     *
     * @param {object|function} partialState Next partial state or function to
     *        produce next partial state to be merged with current state.
     * @param {?function} callback Called after state is updated.
     * @final
     * @protected
     */
    Component.prototype.setState = function(partialState, callback) {
        !(
            typeof partialState === "object" ||
            typeof partialState === "function" ||
            partialState == null
        )
            ? invariant(
                  false,
                  "setState(...): takes an object of state variables to update or a function which returns an object of state variables."
              )
            : void 0;
        this.updater.enqueueSetState(this, partialState, callback, "setState");
    };

    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {?function} callback Called after update is complete.
     * @final
     * @protected
     */
    Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
    };

    /**
     * Deprecated APIs. These APIs used to exist on classic React classes but since
     * we would like to deprecate them, we're not going to move them over to this
     * modern base class. Instead, we define a getter that warns if it's accessed.
     */
    {
        var deprecatedAPIs = {
            isMounted: [
                "isMounted",
                "Instead, make sure to clean up subscriptions and pending requests in " +
                    "componentWillUnmount to prevent memory leaks."
            ],
            replaceState: [
                "replaceState",
                "Refactor your code to use setState instead (see " +
                    "https://github.com/facebook/react/issues/3236)."
            ]
        };
        var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                    lowPriorityWarning$1(
                        false,
                        "%s(...) is deprecated in plain JavaScript React classes. %s",
                        info[0],
                        info[1]
                    );
                    return undefined;
                }
            });
        };
        for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
        }
    }

    function ComponentDummy() {}
    ComponentDummy.prototype = Component.prototype;

    /**
     * Convenience component with default shallow equality check for sCU.
     */
    function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }

    var pureComponentPrototype = (PureComponent.prototype = new ComponentDummy());
    pureComponentPrototype.constructor = PureComponent;
    // Avoid an extra prototype jump for these methods.
    objectAssign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;

    // an immutable object with a single mutable value
    function createRef() {
        var refObject = {
            current: null
        };
        {
            Object.seal(refObject);
        }
        return refObject;
    }

    var enableSchedulerDebugging = false;

    /* eslint-disable no-var */

    // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;

    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823;

    // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1;
    // Eventually times out
    var USER_BLOCKING_PRIORITY = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000;
    // Never times out
    var IDLE_PRIORITY = maxSigned31BitInt;

    // Callbacks are stored as a circular, doubly linked list.
    var firstCallbackNode = null;

    var currentDidTimeout = false;
    // Pausing the scheduler is useful for debugging.
    var isSchedulerPaused = false;

    var currentPriorityLevel = NormalPriority;
    var currentEventStartTime = -1;
    var currentExpirationTime = -1;

    // This is set when a callback is being executed, to prevent re-entrancy.
    var isExecutingCallback = false;

    var isHostCallbackScheduled = false;

    var hasNativePerformanceNow =
        typeof performance === "object" &&
        typeof performance.now === "function";

    function ensureHostCallbackIsScheduled() {
        if (isExecutingCallback) {
            // Don't schedule work yet; wait until the next time we yield.
            return;
        }
        // Schedule the host callback using the earliest expiration in the list.
        var expirationTime = firstCallbackNode.expirationTime;
        if (!isHostCallbackScheduled) {
            isHostCallbackScheduled = true;
        } else {
            // Cancel the existing host callback.
            cancelHostCallback();
        }
        requestHostCallback(flushWork, expirationTime);
    }

    function flushFirstCallback() {
        var flushedNode = firstCallbackNode;

        // Remove the node from the list before calling the callback. That way the
        // list is in a consistent state even if the callback throws.
        var next = firstCallbackNode.next;
        if (firstCallbackNode === next) {
            // This is the last callback in the list.
            firstCallbackNode = null;
            next = null;
        } else {
            var lastCallbackNode = firstCallbackNode.previous;
            firstCallbackNode = lastCallbackNode.next = next;
            next.previous = lastCallbackNode;
        }

        flushedNode.next = flushedNode.previous = null;

        // Now it's safe to call the callback.
        var callback = flushedNode.callback;
        var expirationTime = flushedNode.expirationTime;
        var priorityLevel = flushedNode.priorityLevel;
        var previousPriorityLevel = currentPriorityLevel;
        var previousExpirationTime = currentExpirationTime;
        currentPriorityLevel = priorityLevel;
        currentExpirationTime = expirationTime;
        var continuationCallback;
        try {
            continuationCallback = callback();
        } finally {
            currentPriorityLevel = previousPriorityLevel;
            currentExpirationTime = previousExpirationTime;
        }

        // A callback may return a continuation. The continuation should be scheduled
        // with the same priority and expiration as the just-finished callback.
        if (typeof continuationCallback === "function") {
            var continuationNode = {
                callback: continuationCallback,
                priorityLevel: priorityLevel,
                expirationTime: expirationTime,
                next: null,
                previous: null
            };

            // Insert the new callback into the list, sorted by its expiration. This is
            // almost the same as the code in `scheduleCallback`, except the callback
            // is inserted into the list *before* callbacks of equal expiration instead
            // of after.
            if (firstCallbackNode === null) {
                // This is the first callback in the list.
                firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;
            } else {
                var nextAfterContinuation = null;
                var node = firstCallbackNode;
                do {
                    if (node.expirationTime >= expirationTime) {
                        // This callback expires at or after the continuation. We will insert
                        // the continuation *before* this callback.
                        nextAfterContinuation = node;
                        break;
                    }
                    node = node.next;
                } while (node !== firstCallbackNode);

                if (nextAfterContinuation === null) {
                    // No equal or lower priority callback was found, which means the new
                    // callback is the lowest priority callback in the list.
                    nextAfterContinuation = firstCallbackNode;
                } else if (nextAfterContinuation === firstCallbackNode) {
                    // The new callback is the highest priority callback in the list.
                    firstCallbackNode = continuationNode;
                    ensureHostCallbackIsScheduled();
                }

                var previous = nextAfterContinuation.previous;
                previous.next = nextAfterContinuation.previous = continuationNode;
                continuationNode.next = nextAfterContinuation;
                continuationNode.previous = previous;
            }
        }
    }

    function flushImmediateWork() {
        if (
            // Confirm we've exited the outer most event handler
            currentEventStartTime === -1 &&
            firstCallbackNode !== null &&
            firstCallbackNode.priorityLevel === ImmediatePriority
        ) {
            isExecutingCallback = true;
            try {
                do {
                    flushFirstCallback();
                } while (
                    // Keep flushing until there are no more immediate callbacks
                    firstCallbackNode !== null &&
                    firstCallbackNode.priorityLevel === ImmediatePriority
                );
            } finally {
                isExecutingCallback = false;
                if (firstCallbackNode !== null) {
                    // There's still work remaining. Request another callback.
                    ensureHostCallbackIsScheduled();
                } else {
                    isHostCallbackScheduled = false;
                }
            }
        }
    }

    function flushWork(didTimeout) {
        // Exit right away if we're currently paused

        if (enableSchedulerDebugging && isSchedulerPaused) {
            return;
        }

        isExecutingCallback = true;
        var previousDidTimeout = currentDidTimeout;
        currentDidTimeout = didTimeout;
        try {
            if (didTimeout) {
                // Flush all the expired callbacks without yielding.
                while (
                    firstCallbackNode !== null &&
                    !(enableSchedulerDebugging && isSchedulerPaused)
                ) {
                    // TODO Wrap in feature flag
                    // Read the current time. Flush all the callbacks that expire at or
                    // earlier than that time. Then read the current time again and repeat.
                    // This optimizes for as few performance.now calls as possible.
                    var currentTime = getCurrentTime();
                    if (firstCallbackNode.expirationTime <= currentTime) {
                        do {
                            flushFirstCallback();
                        } while (
                            firstCallbackNode !== null &&
                            firstCallbackNode.expirationTime <= currentTime &&
                            !(enableSchedulerDebugging && isSchedulerPaused)
                        );
                        continue;
                    }
                    break;
                }
            } else {
                // Keep flushing callbacks until we run out of time in the frame.
                if (firstCallbackNode !== null) {
                    do {
                        if (enableSchedulerDebugging && isSchedulerPaused) {
                            break;
                        }
                        flushFirstCallback();
                    } while (
                        firstCallbackNode !== null &&
                        !shouldYieldToHost()
                    );
                }
            }
        } finally {
            isExecutingCallback = false;
            currentDidTimeout = previousDidTimeout;
            if (firstCallbackNode !== null) {
                // There's still work remaining. Request another callback.
                ensureHostCallbackIsScheduled();
            } else {
                isHostCallbackScheduled = false;
            }
            // Before exiting, flush all the immediate work that was scheduled.
            flushImmediateWork();
        }
    }

    function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
                break;
            default:
                priorityLevel = NormalPriority;
        }

        var previousPriorityLevel = currentPriorityLevel;
        var previousEventStartTime = currentEventStartTime;
        currentPriorityLevel = priorityLevel;
        currentEventStartTime = getCurrentTime();

        try {
            return eventHandler();
        } finally {
            currentPriorityLevel = previousPriorityLevel;
            currentEventStartTime = previousEventStartTime;

            // Before exiting, flush all the immediate work that was scheduled.
            flushImmediateWork();
        }
    }

    function unstable_next(eventHandler) {
        var priorityLevel = void 0;
        switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
                // Shift down to normal priority
                priorityLevel = NormalPriority;
                break;
            default:
                // Anything lower than normal priority should remain at the current level.
                priorityLevel = currentPriorityLevel;
                break;
        }

        var previousPriorityLevel = currentPriorityLevel;
        var previousEventStartTime = currentEventStartTime;
        currentPriorityLevel = priorityLevel;
        currentEventStartTime = getCurrentTime();

        try {
            return eventHandler();
        } finally {
            currentPriorityLevel = previousPriorityLevel;
            currentEventStartTime = previousEventStartTime;

            // Before exiting, flush all the immediate work that was scheduled.
            flushImmediateWork();
        }
    }

    function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel;
            var previousEventStartTime = currentEventStartTime;
            currentPriorityLevel = parentPriorityLevel;
            currentEventStartTime = getCurrentTime();

            try {
                return callback.apply(this, arguments);
            } finally {
                currentPriorityLevel = previousPriorityLevel;
                currentEventStartTime = previousEventStartTime;
                flushImmediateWork();
            }
        };
    }

    function unstable_scheduleCallback(callback, deprecated_options) {
        var startTime =
            currentEventStartTime !== -1
                ? currentEventStartTime
                : getCurrentTime();

        var expirationTime;
        if (
            typeof deprecated_options === "object" &&
            deprecated_options !== null &&
            typeof deprecated_options.timeout === "number"
        ) {
            // FIXME: Remove this branch once we lift expiration times out of React.
            expirationTime = startTime + deprecated_options.timeout;
        } else {
            switch (currentPriorityLevel) {
                case ImmediatePriority:
                    expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;
                    break;
                case UserBlockingPriority:
                    expirationTime = startTime + USER_BLOCKING_PRIORITY;
                    break;
                case IdlePriority:
                    expirationTime = startTime + IDLE_PRIORITY;
                    break;
                case LowPriority:
                    expirationTime = startTime + LOW_PRIORITY_TIMEOUT;
                    break;
                case NormalPriority:
                default:
                    expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;
            }
        }

        var newNode = {
            callback: callback,
            priorityLevel: currentPriorityLevel,
            expirationTime: expirationTime,
            next: null,
            previous: null
        };

        // Insert the new callback into the list, ordered first by expiration, then
        // by insertion. So the new callback is inserted any other callback with
        // equal expiration.
        if (firstCallbackNode === null) {
            // This is the first callback in the list.
            firstCallbackNode = newNode.next = newNode.previous = newNode;
            ensureHostCallbackIsScheduled();
        } else {
            var next = null;
            var node = firstCallbackNode;
            do {
                if (node.expirationTime > expirationTime) {
                    // The new callback expires before this one.
                    next = node;
                    break;
                }
                node = node.next;
            } while (node !== firstCallbackNode);

            if (next === null) {
                // No callback with a later expiration was found, which means the new
                // callback has the latest expiration in the list.
                next = firstCallbackNode;
            } else if (next === firstCallbackNode) {
                // The new callback has the earliest expiration in the entire list.
                firstCallbackNode = newNode;
                ensureHostCallbackIsScheduled();
            }

            var previous = next.previous;
            previous.next = next.previous = newNode;
            newNode.next = next;
            newNode.previous = previous;
        }

        return newNode;
    }

    function unstable_pauseExecution() {
        isSchedulerPaused = true;
    }

    function unstable_continueExecution() {
        isSchedulerPaused = false;
        if (firstCallbackNode !== null) {
            ensureHostCallbackIsScheduled();
        }
    }

    function unstable_getFirstCallbackNode() {
        return firstCallbackNode;
    }

    function unstable_cancelCallback(callbackNode) {
        var next = callbackNode.next;
        if (next === null) {
            // Already cancelled.
            return;
        }

        if (next === callbackNode) {
            // This is the only scheduled callback. Clear the list.
            firstCallbackNode = null;
        } else {
            // Remove the callback from its position in the list.
            if (callbackNode === firstCallbackNode) {
                firstCallbackNode = next;
            }
            var previous = callbackNode.previous;
            previous.next = next;
            next.previous = previous;
        }

        callbackNode.next = callbackNode.previous = null;
    }

    function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
    }

    function unstable_shouldYield() {
        return (
            !currentDidTimeout &&
            ((firstCallbackNode !== null &&
                firstCallbackNode.expirationTime < currentExpirationTime) ||
                shouldYieldToHost())
        );
    }

    // The remaining code is essentially a polyfill for requestIdleCallback. It
    // works by scheduling a requestAnimationFrame, storing the time for the start
    // of the frame, then scheduling a postMessage which gets scheduled after paint.
    // Within the postMessage handler do as much work as possible until time + frame
    // rate. By separating the idle call into a separate event tick we ensure that
    // layout, paint and other browser work is counted against the available time.
    // The frame rate is dynamically adjusted.

    // We capture a local reference to any global, in case it gets polyfilled after
    // this module is initially evaluated. We want to be using a
    // consistent implementation.
    var localDate = Date;

    // This initialization code may run even on server environments if a component
    // just imports ReactDOM (e.g. for findDOMNode). Some environments might not
    // have setTimeout or clearTimeout. However, we always expect them to be defined
    // on the client. https://github.com/facebook/react/pull/13088
    var localSetTimeout =
        typeof setTimeout === "function" ? setTimeout : undefined;
    var localClearTimeout =
        typeof clearTimeout === "function" ? clearTimeout : undefined;

    // We don't expect either of these to necessarily be defined, but we will error
    // later if they are missing on the client.
    var localRequestAnimationFrame =
        typeof requestAnimationFrame === "function"
            ? requestAnimationFrame
            : undefined;
    var localCancelAnimationFrame =
        typeof cancelAnimationFrame === "function"
            ? cancelAnimationFrame
            : undefined;

    var getCurrentTime;

    // requestAnimationFrame does not run when the tab is in the background. If
    // we're backgrounded we prefer for that work to happen so that the page
    // continues to load in the background. So we also schedule a 'setTimeout' as
    // a fallback.
    // TODO: Need a better heuristic for backgrounded work.
    var ANIMATION_FRAME_TIMEOUT = 100;
    var rAFID;
    var rAFTimeoutID;
    var requestAnimationFrameWithTimeout = function(callback) {
        // schedule rAF and also a setTimeout
        rAFID = localRequestAnimationFrame(function(timestamp) {
            // cancel the setTimeout
            localClearTimeout(rAFTimeoutID);
            callback(timestamp);
        });
        rAFTimeoutID = localSetTimeout(function() {
            // cancel the requestAnimationFrame
            localCancelAnimationFrame(rAFID);
            callback(getCurrentTime());
        }, ANIMATION_FRAME_TIMEOUT);
    };

    if (hasNativePerformanceNow) {
        var Performance = performance;
        getCurrentTime = function() {
            return Performance.now();
        };
    } else {
        getCurrentTime = function() {
            return localDate.now();
        };
    }

    var requestHostCallback;
    var cancelHostCallback;
    var shouldYieldToHost;

    var globalValue = null;
    if (typeof window !== "undefined") {
        globalValue = window;
    } else if (typeof global !== "undefined") {
        globalValue = global;
    }

    if (globalValue && globalValue._schedMock) {
        // Dynamic injection, only for testing purposes.
        var globalImpl = globalValue._schedMock;
        requestHostCallback = globalImpl[0];
        cancelHostCallback = globalImpl[1];
        shouldYieldToHost = globalImpl[2];
        getCurrentTime = globalImpl[3];
    } else if (
        // If Scheduler runs in a non-DOM environment, it falls back to a naive
        // implementation using setTimeout.
        typeof window === "undefined" ||
        // Check if MessageChannel is supported, too.
        typeof MessageChannel !== "function"
    ) {
        // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
        // fallback to a naive implementation.
        var _callback = null;
        var _flushCallback = function(didTimeout) {
            if (_callback !== null) {
                try {
                    _callback(didTimeout);
                } finally {
                    _callback = null;
                }
            }
        };
        requestHostCallback = function(cb, ms) {
            if (_callback !== null) {
                // Protect against re-entrancy.
                setTimeout(requestHostCallback, 0, cb);
            } else {
                _callback = cb;
                setTimeout(_flushCallback, 0, false);
            }
        };
        cancelHostCallback = function() {
            _callback = null;
        };
        shouldYieldToHost = function() {
            return false;
        };
    } else {
        if (typeof console !== "undefined") {
            // TODO: Remove fb.me link
            if (typeof localRequestAnimationFrame !== "function") {
                console.error(
                    "This browser doesn't support requestAnimationFrame. " +
                        "Make sure that you load a " +
                        "polyfill in older browsers. https://fb.me/react-polyfills"
                );
            }
            if (typeof localCancelAnimationFrame !== "function") {
                console.error(
                    "This browser doesn't support cancelAnimationFrame. " +
                        "Make sure that you load a " +
                        "polyfill in older browsers. https://fb.me/react-polyfills"
                );
            }
        }

        var scheduledHostCallback = null;
        var isMessageEventScheduled = false;
        var timeoutTime = -1;

        var isAnimationFrameScheduled = false;

        var isFlushingHostCallback = false;

        var frameDeadline = 0;
        // We start out assuming that we run at 30fps but then the heuristic tracking
        // will adjust this value to a faster fps if we get more frequent animation
        // frames.
        var previousFrameTime = 33;
        var activeFrameTime = 33;

        shouldYieldToHost = function() {
            return frameDeadline <= getCurrentTime();
        };

        // We use the postMessage trick to defer idle work until after the repaint.
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = function(event) {
            isMessageEventScheduled = false;

            var prevScheduledCallback = scheduledHostCallback;
            var prevTimeoutTime = timeoutTime;
            scheduledHostCallback = null;
            timeoutTime = -1;

            var currentTime = getCurrentTime();

            var didTimeout = false;
            if (frameDeadline - currentTime <= 0) {
                // There's no time left in this idle period. Check if the callback has
                // a timeout and whether it's been exceeded.
                if (prevTimeoutTime !== -1 && prevTimeoutTime <= currentTime) {
                    // Exceeded the timeout. Invoke the callback even though there's no
                    // time left.
                    didTimeout = true;
                } else {
                    // No timeout.
                    if (!isAnimationFrameScheduled) {
                        // Schedule another animation callback so we retry later.
                        isAnimationFrameScheduled = true;
                        requestAnimationFrameWithTimeout(animationTick);
                    }
                    // Exit without invoking the callback.
                    scheduledHostCallback = prevScheduledCallback;
                    timeoutTime = prevTimeoutTime;
                    return;
                }
            }

            if (prevScheduledCallback !== null) {
                isFlushingHostCallback = true;
                try {
                    prevScheduledCallback(didTimeout);
                } finally {
                    isFlushingHostCallback = false;
                }
            }
        };

        var animationTick = function(rafTime) {
            if (scheduledHostCallback !== null) {
                // Eagerly schedule the next animation callback at the beginning of the
                // frame. If the scheduler queue is not empty at the end of the frame, it
                // will continue flushing inside that callback. If the queue *is* empty,
                // then it will exit immediately. Posting the callback at the start of the
                // frame ensures it's fired within the earliest possible frame. If we
                // waited until the end of the frame to post the callback, we risk the
                // browser skipping a frame and not firing the callback until the frame
                // after that.
                requestAnimationFrameWithTimeout(animationTick);
            } else {
                // No pending work. Exit.
                isAnimationFrameScheduled = false;
                return;
            }

            var nextFrameTime = rafTime - frameDeadline + activeFrameTime;
            if (
                nextFrameTime < activeFrameTime &&
                previousFrameTime < activeFrameTime
            ) {
                if (nextFrameTime < 8) {
                    // Defensive coding. We don't support higher frame rates than 120hz.
                    // If the calculated frame time gets lower than 8, it is probably a bug.
                    nextFrameTime = 8;
                }
                // If one frame goes long, then the next one can be short to catch up.
                // If two frames are short in a row, then that's an indication that we
                // actually have a higher frame rate than what we're currently optimizing.
                // We adjust our heuristic dynamically accordingly. For example, if we're
                // running on 120hz display or 90hz VR display.
                // Take the max of the two in case one of them was an anomaly due to
                // missed frame deadlines.
                activeFrameTime =
                    nextFrameTime < previousFrameTime
                        ? previousFrameTime
                        : nextFrameTime;
            } else {
                previousFrameTime = nextFrameTime;
            }
            frameDeadline = rafTime + activeFrameTime;
            if (!isMessageEventScheduled) {
                isMessageEventScheduled = true;
                port.postMessage(undefined);
            }
        };

        requestHostCallback = function(callback, absoluteTimeout) {
            scheduledHostCallback = callback;
            timeoutTime = absoluteTimeout;
            if (isFlushingHostCallback || absoluteTimeout < 0) {
                // Don't wait for the next frame. Continue working ASAP, in a new event.
                port.postMessage(undefined);
            } else if (!isAnimationFrameScheduled) {
                // If rAF didn't already schedule one, we need to schedule a frame.
                // TODO: If this rAF doesn't materialize because the browser throttles, we
                // might want to still have setTimeout trigger rIC as a backup to ensure
                // that we keep performing work.
                isAnimationFrameScheduled = true;
                requestAnimationFrameWithTimeout(animationTick);
            }
        };

        cancelHostCallback = function() {
            scheduledHostCallback = null;
            isMessageEventScheduled = false;
            timeoutTime = -1;
        };
    }

    // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:

    // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:

    // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.

    // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:

    // Gather advanced timing metrics for Profiler subtrees.

    // Trace which interactions trigger each commit.
    var enableSchedulerTracing = true;

    // Only used in www builds.
    // TODO: true? Here it might just be false.

    // Only used in www builds.

    // Only used in www builds.

    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties

    // These APIs will no longer be "unstable" in the upcoming 16.7 release,
    // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.
    var enableStableConcurrentModeAPIs = false;

    var DEFAULT_THREAD_ID = 0;

    // Counters used to generate unique IDs.
    var interactionIDCounter = 0;
    var threadIDCounter = 0;

    // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.
    var interactionsRef = null;

    // Listener(s) to notify when interactions begin and end.
    var subscriberRef = null;

    if (enableSchedulerTracing) {
        interactionsRef = {
            current: new Set()
        };
        subscriberRef = {
            current: null
        };
    }

    function unstable_clear(callback) {
        if (!enableSchedulerTracing) {
            return callback();
        }

        var prevInteractions = interactionsRef.current;
        interactionsRef.current = new Set();

        try {
            return callback();
        } finally {
            interactionsRef.current = prevInteractions;
        }
    }

    function unstable_getCurrent() {
        if (!enableSchedulerTracing) {
            return null;
        } else {
            return interactionsRef.current;
        }
    }

    function unstable_getThreadID() {
        return ++threadIDCounter;
    }

    function unstable_trace(name, timestamp, callback) {
        var threadID =
            arguments.length > 3 && arguments[3] !== undefined
                ? arguments[3]
                : DEFAULT_THREAD_ID;

        if (!enableSchedulerTracing) {
            return callback();
        }

        var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name: name,
            timestamp: timestamp
        };

        var prevInteractions = interactionsRef.current;

        // Traced interactions should stack/accumulate.
        // To do that, clone the current interactions.
        // The previous set will be restored upon completion.
        var interactions = new Set(prevInteractions);
        interactions.add(interaction);
        interactionsRef.current = interactions;

        var subscriber = subscriberRef.current;
        var returnValue = void 0;

        try {
            if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction);
            }
        } finally {
            try {
                if (subscriber !== null) {
                    subscriber.onWorkStarted(interactions, threadID);
                }
            } finally {
                try {
                    returnValue = callback();
                } finally {
                    interactionsRef.current = prevInteractions;

                    try {
                        if (subscriber !== null) {
                            subscriber.onWorkStopped(interactions, threadID);
                        }
                    } finally {
                        interaction.__count--;

                        // If no async work was scheduled for this interaction,
                        // Notify subscribers that it's completed.
                        if (subscriber !== null && interaction.__count === 0) {
                            subscriber.onInteractionScheduledWorkCompleted(
                                interaction
                            );
                        }
                    }
                }
            }
        }

        return returnValue;
    }

    function unstable_wrap(callback) {
        var threadID =
            arguments.length > 1 && arguments[1] !== undefined
                ? arguments[1]
                : DEFAULT_THREAD_ID;

        if (!enableSchedulerTracing) {
            return callback;
        }

        var wrappedInteractions = interactionsRef.current;

        var subscriber = subscriberRef.current;
        if (subscriber !== null) {
            subscriber.onWorkScheduled(wrappedInteractions, threadID);
        }

        // Update the pending async work count for the current interactions.
        // Update after calling subscribers in case of error.
        wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
        });

        var hasRun = false;

        function wrapped() {
            var prevInteractions = interactionsRef.current;
            interactionsRef.current = wrappedInteractions;

            subscriber = subscriberRef.current;

            try {
                var returnValue = void 0;

                try {
                    if (subscriber !== null) {
                        subscriber.onWorkStarted(wrappedInteractions, threadID);
                    }
                } finally {
                    try {
                        returnValue = callback.apply(undefined, arguments);
                    } finally {
                        interactionsRef.current = prevInteractions;

                        if (subscriber !== null) {
                            subscriber.onWorkStopped(
                                wrappedInteractions,
                                threadID
                            );
                        }
                    }
                }

                return returnValue;
            } finally {
                if (!hasRun) {
                    // We only expect a wrapped function to be executed once,
                    // But in the event that it's executed more than once–
                    // Only decrement the outstanding interaction counts once.
                    hasRun = true;

                    // Update pending async counts for all wrapped interactions.
                    // If this was the last scheduled async work for any of them,
                    // Mark them as completed.
                    wrappedInteractions.forEach(function(interaction) {
                        interaction.__count--;

                        if (subscriber !== null && interaction.__count === 0) {
                            subscriber.onInteractionScheduledWorkCompleted(
                                interaction
                            );
                        }
                    });
                }
            }
        }

        wrapped.cancel = function cancel() {
            subscriber = subscriberRef.current;

            try {
                if (subscriber !== null) {
                    subscriber.onWorkCanceled(wrappedInteractions, threadID);
                }
            } finally {
                // Update pending async counts for all wrapped interactions.
                // If this was the last scheduled async work for any of them,
                // Mark them as completed.
                wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;

                    if (subscriber && interaction.__count === 0) {
                        subscriber.onInteractionScheduledWorkCompleted(
                            interaction
                        );
                    }
                });
            }
        };

        return wrapped;
    }

    var subscribers = null;
    if (enableSchedulerTracing) {
        subscribers = new Set();
    }

    function unstable_subscribe(subscriber) {
        if (enableSchedulerTracing) {
            subscribers.add(subscriber);

            if (subscribers.size === 1) {
                subscriberRef.current = {
                    onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
                    onInteractionTraced: onInteractionTraced,
                    onWorkCanceled: onWorkCanceled,
                    onWorkScheduled: onWorkScheduled,
                    onWorkStarted: onWorkStarted,
                    onWorkStopped: onWorkStopped
                };
            }
        }
    }

    function unstable_unsubscribe(subscriber) {
        if (enableSchedulerTracing) {
            subscribers.delete(subscriber);

            if (subscribers.size === 0) {
                subscriberRef.current = null;
            }
        }
    }

    function onInteractionTraced(interaction) {
        var didCatchError = false;
        var caughtError = null;

        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionTraced(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });

        if (didCatchError) {
            throw caughtError;
        }
    }

    function onInteractionScheduledWorkCompleted(interaction) {
        var didCatchError = false;
        var caughtError = null;

        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });

        if (didCatchError) {
            throw caughtError;
        }
    }

    function onWorkScheduled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;

        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });

        if (didCatchError) {
            throw caughtError;
        }
    }

    function onWorkStarted(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;

        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });

        if (didCatchError) {
            throw caughtError;
        }
    }

    function onWorkStopped(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;

        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });

        if (didCatchError) {
            throw caughtError;
        }
    }

    function onWorkCanceled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;

        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });

        if (didCatchError) {
            throw caughtError;
        }
    }

    /**
     * Keeps track of the current dispatcher.
     */
    var ReactCurrentDispatcher = {
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
    };

    /**
     * Keeps track of the current owner.
     *
     * The current owner is the component who should own any components that are
     * currently being constructed.
     */
    var ReactCurrentOwner = {
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
    };

    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

    var describeComponentFrame = function(name, source, ownerName) {
        var sourceInfo = "";
        if (source) {
            var path = source.fileName;
            var fileName = path.replace(BEFORE_SLASH_RE, "");
            {
                // In DEV, include code for a common special case:
                // prefer "folder/index.js" instead of just "index.js".
                if (/^index\./.test(fileName)) {
                    var match = path.match(BEFORE_SLASH_RE);
                    if (match) {
                        var pathBeforeSlash = match[1];
                        if (pathBeforeSlash) {
                            var folderName = pathBeforeSlash.replace(
                                BEFORE_SLASH_RE,
                                ""
                            );
                            fileName = folderName + "/" + fileName;
                        }
                    }
                }
            }
            sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
        } else if (ownerName) {
            sourceInfo = " (created by " + ownerName + ")";
        }
        return "\n    in " + (name || "Unknown") + sourceInfo;
    };

    var Resolved = 1;

    function refineResolvedLazyComponent(lazyComponent) {
        return lazyComponent._status === Resolved
            ? lazyComponent._result
            : null;
    }

    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return (
            outerType.displayName ||
            (functionName !== ""
                ? wrapperName + "(" + functionName + ")"
                : wrapperName)
        );
    }

    function getComponentName(type) {
        if (type == null) {
            // Host root, text node or just invalid type.
            return null;
        }
        {
            if (typeof type.tag === "number") {
                warningWithoutStack$1(
                    false,
                    "Received an unexpected object in getComponentName(). " +
                        "This is likely a bug in React. Please file an issue."
                );
            }
        }
        if (typeof type === "function") {
            return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
            return type;
        }
        switch (type) {
            case REACT_CONCURRENT_MODE_TYPE:
                return "ConcurrentMode";
            case REACT_FRAGMENT_TYPE:
                return "Fragment";
            case REACT_PORTAL_TYPE:
                return "Portal";
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
            case REACT_SUSPENSE_TYPE:
                return "Suspense";
        }
        if (typeof type === "object") {
            switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                    return "Context.Consumer";
                case REACT_PROVIDER_TYPE:
                    return "Context.Provider";
                case REACT_FORWARD_REF_TYPE:
                    return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                    return getComponentName(type.type);
                case REACT_LAZY_TYPE: {
                    var thenable = type;
                    var resolvedThenable = refineResolvedLazyComponent(
                        thenable
                    );
                    if (resolvedThenable) {
                        return getComponentName(resolvedThenable);
                    }
                }
            }
        }
        return null;
    }

    var ReactDebugCurrentFrame = {};

    var currentlyValidatingElement = null;

    function setCurrentlyValidatingElement(element) {
        {
            currentlyValidatingElement = element;
        }
    }

    {
        // Stack implementation injected by the current renderer.
        ReactDebugCurrentFrame.getCurrentStack = null;

        ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";

            // Add an extra top frame while an element is being validated
            if (currentlyValidatingElement) {
                var name = getComponentName(currentlyValidatingElement.type);
                var owner = currentlyValidatingElement._owner;
                stack += describeComponentFrame(
                    name,
                    currentlyValidatingElement._source,
                    owner && getComponentName(owner.type)
                );
            }

            // Delegate to the injected renderer-specific implementation
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
                stack += impl() || "";
            }

            return stack;
        };
    }

    var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentOwner: ReactCurrentOwner,
        // Used by renderers to avoid bundling object-assign twice in UMD bundles:
        assign: objectAssign
    };

    {
        // Re-export the schedule API(s) for UMD bundles.
        // This avoids introducing a dependency on a new UMD global in a minor update,
        // Since that would be a breaking change (e.g. for all existing CodeSandboxes).
        // This re-export is only required for UMD bundles;
        // CJS bundles use the shared NPM package.
        objectAssign(ReactSharedInternals, {
            Scheduler: {
                unstable_cancelCallback: unstable_cancelCallback,
                unstable_shouldYield: unstable_shouldYield,
                unstable_now: getCurrentTime,
                unstable_scheduleCallback: unstable_scheduleCallback,
                unstable_runWithPriority: unstable_runWithPriority,
                unstable_next: unstable_next,
                unstable_wrapCallback: unstable_wrapCallback,
                unstable_getFirstCallbackNode: unstable_getFirstCallbackNode,
                unstable_pauseExecution: unstable_pauseExecution,
                unstable_continueExecution: unstable_continueExecution,
                unstable_getCurrentPriorityLevel: unstable_getCurrentPriorityLevel,
                unstable_IdlePriority: IdlePriority,
                unstable_ImmediatePriority: ImmediatePriority,
                unstable_LowPriority: LowPriority,
                unstable_NormalPriority: NormalPriority,
                unstable_UserBlockingPriority: UserBlockingPriority
            },
            SchedulerTracing: {
                __interactionsRef: interactionsRef,
                __subscriberRef: subscriberRef,
                unstable_clear: unstable_clear,
                unstable_getCurrent: unstable_getCurrent,
                unstable_getThreadID: unstable_getThreadID,
                unstable_subscribe: unstable_subscribe,
                unstable_trace: unstable_trace,
                unstable_unsubscribe: unstable_unsubscribe,
                unstable_wrap: unstable_wrap
            }
        });
    }

    {
        objectAssign(ReactSharedInternals, {
            // These should not be included in production.
            ReactDebugCurrentFrame: ReactDebugCurrentFrame,
            // Shim for React DOM 16.0.0 which still destructured (but not used) this.
            // TODO: remove in React 17.0.
            ReactComponentTreeHook: {}
        });
    }

    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warning = warningWithoutStack$1;

    {
        warning = function(condition, format) {
            if (condition) {
                return;
            }
            var ReactDebugCurrentFrame =
                ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            // eslint-disable-next-line react-internal/warning-and-invariant-args

            for (
                var _len = arguments.length,
                    args = Array(_len > 2 ? _len - 2 : 0),
                    _key = 2;
                _key < _len;
                _key++
            ) {
                args[_key - 2] = arguments[_key];
            }

            warningWithoutStack$1.apply(
                undefined,
                [false, format + "%s"].concat(args, [stack])
            );
        };
    }

    var warning$1 = warning;

    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };

    var specialPropKeyWarningShown = void 0;
    var specialPropRefWarningShown = void 0;

    function hasValidRef(config) {
        {
            if (hasOwnProperty$1.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                    return false;
                }
            }
        }
        return config.ref !== undefined;
    }

    function hasValidKey(config) {
        {
            if (hasOwnProperty$1.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                    return false;
                }
            }
        }
        return config.key !== undefined;
    }

    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                warningWithoutStack$1(
                    false,
                    "%s: `key` is not a prop. Trying to access it will result " +
                        "in `undefined` being returned. If you need to access the same " +
                        "value within the child component, you should pass it as a different " +
                        "prop. (https://fb.me/react-special-props)",
                    displayName
                );
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }

    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                warningWithoutStack$1(
                    false,
                    "%s: `ref` is not a prop. Trying to access it will result " +
                        "in `undefined` being returned. If you need to access the same " +
                        "value within the child component, you should pass it as a different " +
                        "prop. (https://fb.me/react-special-props)",
                    displayName
                );
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }

    /**
     * Factory method to create a new React element. This no longer adheres to
     * the class pattern, so do not use new to call it. Also, no instanceof check
     * will work. Instead test $$typeof field against Symbol.for('react.element') to check
     * if something is a React Element.
     *
     * @param {*} type
     * @param {*} key
     * @param {string|object} ref
     * @param {*} self A *temporary* helper to detect places where `this` is
     * different from the `owner` when React.createElement is called, so that we
     * can warn. We want to get rid of owner and replace string `ref`s with arrow
     * functions, and as long as `this` and owner are the same, there will be no
     * change in behavior.
     * @param {*} source An annotation object (added by a transpiler or otherwise)
     * indicating filename, line number, and/or other information.
     * @param {*} owner
     * @param {*} props
     * @internal
     */
    var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,

            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,

            // Record the component responsible for creating this element.
            _owner: owner
        };

        {
            // The validation flag is currently mutative. We put it on
            // an external backing store so that we can freeze the whole object.
            // This can be replaced with a WeakMap once they are implemented in
            // commonly used development environments.
            element._store = {};

            // To make comparing ReactElements easier for testing purposes, we make
            // the validation flag non-enumerable (where possible, which should
            // include every environment we run tests in), so the test framework
            // ignores it.
            Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
            });
            // self and source are DEV only properties.
            Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self
            });
            // Two elements created in two different places should be considered
            // equal for testing purposes and therefore we hide it from enumeration.
            Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
            });
            if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
            }
        }

        return element;
    };

    /**
     * Create and return a new ReactElement of the given type.
     * See https://reactjs.org/docs/react-api.html#createelement
     */
    function createElement(type, config, children) {
        var propName = void 0;

        // Reserved names are extracted
        var props = {};

        var key = null;
        var ref = null;
        var self = null;
        var source = null;

        if (config != null) {
            if (hasValidRef(config)) {
                ref = config.ref;
            }
            if (hasValidKey(config)) {
                key = "" + config.key;
            }

            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source;
            // Remaining properties are added to a new props object
            for (propName in config) {
                if (
                    hasOwnProperty$1.call(config, propName) &&
                    !RESERVED_PROPS.hasOwnProperty(propName)
                ) {
                    props[propName] = config[propName];
                }
            }
        }

        // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
            props.children = children;
        } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
            }
            {
                if (Object.freeze) {
                    Object.freeze(childArray);
                }
            }
            props.children = childArray;
        }

        // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
                if (props[propName] === undefined) {
                    props[propName] = defaultProps[propName];
                }
            }
        }
        {
            if (key || ref) {
                var displayName =
                    typeof type === "function"
                        ? type.displayName || type.name || "Unknown"
                        : type;
                if (key) {
                    defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                    defineRefPropWarningGetter(props, displayName);
                }
            }
        }
        return ReactElement(
            type,
            key,
            ref,
            self,
            source,
            ReactCurrentOwner.current,
            props
        );
    }

    /**
     * Return a function that produces ReactElements of a given type.
     * See https://reactjs.org/docs/react-api.html#createfactory
     */

    function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(
            oldElement.type,
            newKey,
            oldElement.ref,
            oldElement._self,
            oldElement._source,
            oldElement._owner,
            oldElement.props
        );

        return newElement;
    }

    /**
     * Clone and return a new ReactElement using element as the starting point.
     * See https://reactjs.org/docs/react-api.html#cloneelement
     */
    function cloneElement(element, config, children) {
        !!(element === null || element === undefined)
            ? invariant(
                  false,
                  "React.cloneElement(...): The argument must be a React element, but you passed %s.",
                  element
              )
            : void 0;

        var propName = void 0;

        // Original props are copied
        var props = objectAssign({}, element.props);

        // Reserved names are extracted
        var key = element.key;
        var ref = element.ref;
        // Self is preserved since the owner is preserved.
        var self = element._self;
        // Source is preserved since cloneElement is unlikely to be targeted by a
        // transpiler, and the original source is probably a better indicator of the
        // true owner.
        var source = element._source;

        // Owner will be preserved, unless ref is overridden
        var owner = element._owner;

        if (config != null) {
            if (hasValidRef(config)) {
                // Silently steal the ref from the parent.
                ref = config.ref;
                owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
                key = "" + config.key;
            }

            // Remaining properties override existing props
            var defaultProps = void 0;
            if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
                if (
                    hasOwnProperty$1.call(config, propName) &&
                    !RESERVED_PROPS.hasOwnProperty(propName)
                ) {
                    if (
                        config[propName] === undefined &&
                        defaultProps !== undefined
                    ) {
                        // Resolve default props
                        props[propName] = defaultProps[propName];
                    } else {
                        props[propName] = config[propName];
                    }
                }
            }
        }

        // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
            props.children = children;
        } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
        }

        return ReactElement(element.type, key, ref, self, source, owner, props);
    }

    /**
     * Verifies the object is a ReactElement.
     * See https://reactjs.org/docs/react-api.html#isvalidelement
     * @param {?object} object
     * @return {boolean} True if `object` is a ReactElement.
     * @final
     */
    function isValidElement(object) {
        return (
            typeof object === "object" &&
            object !== null &&
            object.$$typeof === REACT_ELEMENT_TYPE
        );
    }

    var SEPARATOR = ".";
    var SUBSEPARATOR = ":";

    /**
     * Escape and wrap key so it is safe to use as a reactid
     *
     * @param {string} key to be escaped.
     * @return {string} the escaped key.
     */
    function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
            "=": "=0",
            ":": "=2"
        };
        var escapedString = ("" + key).replace(escapeRegex, function(match) {
            return escaperLookup[match];
        });

        return "$" + escapedString;
    }

    /**
     * TODO: Test that a single child and an array with one item have the same key
     * pattern.
     */

    var didWarnAboutMaps = false;

    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
        return ("" + text).replace(userProvidedKeyEscapeRegex, "$&/");
    }

    var POOL_SIZE = 10;
    var traverseContextPool = [];
    function getPooledTraverseContext(
        mapResult,
        keyPrefix,
        mapFunction,
        mapContext
    ) {
        if (traverseContextPool.length) {
            var traverseContext = traverseContextPool.pop();
            traverseContext.result = mapResult;
            traverseContext.keyPrefix = keyPrefix;
            traverseContext.func = mapFunction;
            traverseContext.context = mapContext;
            traverseContext.count = 0;
            return traverseContext;
        } else {
            return {
                result: mapResult,
                keyPrefix: keyPrefix,
                func: mapFunction,
                context: mapContext,
                count: 0
            };
        }
    }

    function releaseTraverseContext(traverseContext) {
        traverseContext.result = null;
        traverseContext.keyPrefix = null;
        traverseContext.func = null;
        traverseContext.context = null;
        traverseContext.count = 0;
        if (traverseContextPool.length < POOL_SIZE) {
            traverseContextPool.push(traverseContext);
        }
    }

    /**
     * @param {?*} children Children tree container.
     * @param {!string} nameSoFar Name of the key path so far.
     * @param {!function} callback Callback to invoke with each child found.
     * @param {?*} traverseContext Used to pass information throughout the traversal
     * process.
     * @return {!number} The number of children in this subtree.
     */
    function traverseAllChildrenImpl(
        children,
        nameSoFar,
        callback,
        traverseContext
    ) {
        var type = typeof children;

        if (type === "undefined" || type === "boolean") {
            // All of the above are perceived as null.
            children = null;
        }

        var invokeCallback = false;

        if (children === null) {
            invokeCallback = true;
        } else {
            switch (type) {
                case "string":
                case "number":
                    invokeCallback = true;
                    break;
                case "object":
                    switch (children.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                        case REACT_PORTAL_TYPE:
                            invokeCallback = true;
                    }
            }
        }

        if (invokeCallback) {
            callback(
                traverseContext,
                children,
                // If it's the only child, treat the name as if it was wrapped in an array
                // so that it's consistent if the number of children grows.
                nameSoFar === ""
                    ? SEPARATOR + getComponentKey(children, 0)
                    : nameSoFar
            );
            return 1;
        }

        var child = void 0;
        var nextName = void 0;
        var subtreeCount = 0; // Count of children found in the current subtree.
        var nextNamePrefix =
            nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;

        if (Array.isArray(children)) {
            for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getComponentKey(child, i);
                subtreeCount += traverseAllChildrenImpl(
                    child,
                    nextName,
                    callback,
                    traverseContext
                );
            }
        } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
                {
                    // Warn about using Maps as children
                    if (iteratorFn === children.entries) {
                        !didWarnAboutMaps
                            ? warning$1(
                                  false,
                                  "Using Maps as children is unsupported and will likely yield " +
                                      "unexpected results. Convert it to a sequence/iterable of keyed " +
                                      "ReactElements instead."
                              )
                            : void 0;
                        didWarnAboutMaps = true;
                    }
                }

                var iterator = iteratorFn.call(children);
                var step = void 0;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                    child = step.value;
                    nextName = nextNamePrefix + getComponentKey(child, ii++);
                    subtreeCount += traverseAllChildrenImpl(
                        child,
                        nextName,
                        callback,
                        traverseContext
                    );
                }
            } else if (type === "object") {
                var addendum = "";
                {
                    addendum =
                        " If you meant to render a collection of children, use an array " +
                        "instead." +
                        ReactDebugCurrentFrame.getStackAddendum();
                }
                var childrenString = "" + children;
                invariant(
                    false,
                    "Objects are not valid as a React child (found: %s).%s",
                    childrenString === "[object Object]"
                        ? "object with keys {" +
                              Object.keys(children).join(", ") +
                              "}"
                        : childrenString,
                    addendum
                );
            }
        }

        return subtreeCount;
    }

    /**
     * Traverses children that are typically specified as `props.children`, but
     * might also be specified through attributes:
     *
     * - `traverseAllChildren(this.props.children, ...)`
     * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
     *
     * The `traverseContext` is an optional argument that is passed through the
     * entire traversal. It can be used to store accumulations or anything else that
     * the callback might find relevant.
     *
     * @param {?*} children Children tree object.
     * @param {!function} callback To invoke upon traversing each child.
     * @param {?*} traverseContext Context for traversal.
     * @return {!number} The number of children in this subtree.
     */
    function traverseAllChildren(children, callback, traverseContext) {
        if (children == null) {
            return 0;
        }

        return traverseAllChildrenImpl(children, "", callback, traverseContext);
    }

    /**
     * Generate a key string that identifies a component within a set.
     *
     * @param {*} component A component that could contain a manual key.
     * @param {number} index Index that is used if a manual key is not provided.
     * @return {string}
     */
    function getComponentKey(component, index) {
        // Do some typechecking here since we call this blindly. We want to ensure
        // that we don't block potential future ES APIs.
        if (
            typeof component === "object" &&
            component !== null &&
            component.key != null
        ) {
            // Explicit key
            return escape(component.key);
        }
        // Implicit key determined by the index in the set
        return index.toString(36);
    }

    function forEachSingleChild(bookKeeping, child, name) {
        var func = bookKeeping.func,
            context = bookKeeping.context;

        func.call(context, child, bookKeeping.count++);
    }

    /**
     * Iterates through children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
     *
     * The provided forEachFunc(child, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} forEachFunc
     * @param {*} forEachContext Context for forEachContext.
     */
    function forEachChildren(children, forEachFunc, forEachContext) {
        if (children == null) {
            return children;
        }
        var traverseContext = getPooledTraverseContext(
            null,
            null,
            forEachFunc,
            forEachContext
        );
        traverseAllChildren(children, forEachSingleChild, traverseContext);
        releaseTraverseContext(traverseContext);
    }

    function mapSingleChildIntoContext(bookKeeping, child, childKey) {
        var result = bookKeeping.result,
            keyPrefix = bookKeeping.keyPrefix,
            func = bookKeeping.func,
            context = bookKeeping.context;

        var mappedChild = func.call(context, child, bookKeeping.count++);
        if (Array.isArray(mappedChild)) {
            mapIntoWithKeyPrefixInternal(
                mappedChild,
                result,
                childKey,
                function(c) {
                    return c;
                }
            );
        } else if (mappedChild != null) {
            if (isValidElement(mappedChild)) {
                mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    keyPrefix +
                        (mappedChild.key &&
                        (!child || child.key !== mappedChild.key)
                            ? escapeUserProvidedKey(mappedChild.key) + "/"
                            : "") +
                        childKey
                );
            }
            result.push(mappedChild);
        }
    }

    function mapIntoWithKeyPrefixInternal(
        children,
        array,
        prefix,
        func,
        context
    ) {
        var escapedPrefix = "";
        if (prefix != null) {
            escapedPrefix = escapeUserProvidedKey(prefix) + "/";
        }
        var traverseContext = getPooledTraverseContext(
            array,
            escapedPrefix,
            func,
            context
        );
        traverseAllChildren(
            children,
            mapSingleChildIntoContext,
            traverseContext
        );
        releaseTraverseContext(traverseContext);
    }

    /**
     * Maps children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenmap
     *
     * The provided mapFunction(child, key, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} func The map function.
     * @param {*} context Context for mapFunction.
     * @return {object} Object containing the ordered map of results.
     */
    function mapChildren(children, func, context) {
        if (children == null) {
            return children;
        }
        var result = [];
        mapIntoWithKeyPrefixInternal(children, result, null, func, context);
        return result;
    }

    /**
     * Count the number of children that are typically specified as
     * `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrencount
     *
     * @param {?*} children Children tree container.
     * @return {number} The number of children.
     */
    function countChildren(children) {
        return traverseAllChildren(
            children,
            function() {
                return null;
            },
            null
        );
    }

    /**
     * Flatten a children object (typically specified as `props.children`) and
     * return an array with appropriately re-keyed children.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
     */
    function toArray(children) {
        var result = [];
        mapIntoWithKeyPrefixInternal(children, result, null, function(child) {
            return child;
        });
        return result;
    }

    /**
     * Returns the first child in a collection of children and verifies that there
     * is only one child in the collection.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenonly
     *
     * The current implementation of this function assumes that a single child gets
     * passed without a wrapper, but the purpose of this helper function is to
     * abstract away the particular structure of children.
     *
     * @param {?object} children Child collection structure.
     * @return {ReactElement} The first and only `ReactElement` contained in the
     * structure.
     */
    function onlyChild(children) {
        !isValidElement(children)
            ? invariant(
                  false,
                  "React.Children.only expected to receive a single React element child."
              )
            : void 0;
        return children;
    }

    function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === undefined) {
            calculateChangedBits = null;
        } else {
            {
                !(
                    calculateChangedBits === null ||
                    typeof calculateChangedBits === "function"
                )
                    ? warningWithoutStack$1(
                          false,
                          "createContext: Expected the optional second argument to be a " +
                              "function. Instead received: %s",
                          calculateChangedBits
                      )
                    : void 0;
            }
        }

        var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null
        };

        context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
        };

        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;

        {
            // A separate object, but proxies back to the original context object for
            // backwards compatibility. It has a different $$typeof, so we can properly
            // warn for the incorrect usage of Context as a Consumer.
            var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context,
                _calculateChangedBits: context._calculateChangedBits
            };
            // $FlowFixMe: Flow complains about not setting a value, which is intentional here
            Object.defineProperties(Consumer, {
                Provider: {
                    get: function() {
                        if (!hasWarnedAboutUsingConsumerProvider) {
                            hasWarnedAboutUsingConsumerProvider = true;
                            warning$1(
                                false,
                                "Rendering <Context.Consumer.Provider> is not supported and will be removed in " +
                                    "a future major release. Did you mean to render <Context.Provider> instead?"
                            );
                        }
                        return context.Provider;
                    },
                    set: function(_Provider) {
                        context.Provider = _Provider;
                    }
                },
                _currentValue: {
                    get: function() {
                        return context._currentValue;
                    },
                    set: function(_currentValue) {
                        context._currentValue = _currentValue;
                    }
                },
                _currentValue2: {
                    get: function() {
                        return context._currentValue2;
                    },
                    set: function(_currentValue2) {
                        context._currentValue2 = _currentValue2;
                    }
                },
                _threadCount: {
                    get: function() {
                        return context._threadCount;
                    },
                    set: function(_threadCount) {
                        context._threadCount = _threadCount;
                    }
                },
                Consumer: {
                    get: function() {
                        if (!hasWarnedAboutUsingNestedContextConsumers) {
                            hasWarnedAboutUsingNestedContextConsumers = true;
                            warning$1(
                                false,
                                "Rendering <Context.Consumer.Consumer> is not supported and will be removed in " +
                                    "a future major release. Did you mean to render <Context.Consumer> instead?"
                            );
                        }
                        return context.Consumer;
                    }
                }
            });
            // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
            context.Consumer = Consumer;
        }

        {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
        }

        return context;
    }

    function lazy(ctor) {
        var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _ctor: ctor,
            // React uses these fields to store the result.
            _status: -1,
            _result: null
        };

        {
            // In production, this would just set it on the object.
            var defaultProps = void 0;
            var propTypes = void 0;
            Object.defineProperties(lazyType, {
                defaultProps: {
                    configurable: true,
                    get: function() {
                        return defaultProps;
                    },
                    set: function(newDefaultProps) {
                        warning$1(
                            false,
                            "React.lazy(...): It is not supported to assign `defaultProps` to " +
                                "a lazy component import. Either specify them where the component " +
                                "is defined, or create a wrapping component around it."
                        );
                        defaultProps = newDefaultProps;
                        // Match production behavior more closely:
                        Object.defineProperty(lazyType, "defaultProps", {
                            enumerable: true
                        });
                    }
                },
                propTypes: {
                    configurable: true,
                    get: function() {
                        return propTypes;
                    },
                    set: function(newPropTypes) {
                        warning$1(
                            false,
                            "React.lazy(...): It is not supported to assign `propTypes` to " +
                                "a lazy component import. Either specify them where the component " +
                                "is defined, or create a wrapping component around it."
                        );
                        propTypes = newPropTypes;
                        // Match production behavior more closely:
                        Object.defineProperty(lazyType, "propTypes", {
                            enumerable: true
                        });
                    }
                }
            });
        }

        return lazyType;
    }

    function forwardRef(render) {
        {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                warningWithoutStack$1(
                    false,
                    "forwardRef requires a render function but received a `memo` " +
                        "component. Instead of forwardRef(memo(...)), use " +
                        "memo(forwardRef(...))."
                );
            } else if (typeof render !== "function") {
                warningWithoutStack$1(
                    false,
                    "forwardRef requires a render function but was given %s.",
                    render === null ? "null" : typeof render
                );
            } else {
                !// Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
                (render.length === 0 || render.length === 2)
                    ? warningWithoutStack$1(
                          false,
                          "forwardRef render functions accept exactly two parameters: props and ref. %s",
                          render.length === 1
                              ? "Did you forget to use the ref parameter?"
                              : "Any additional parameter will be undefined."
                      )
                    : void 0;
            }

            if (render != null) {
                !(render.defaultProps == null && render.propTypes == null)
                    ? warningWithoutStack$1(
                          false,
                          "forwardRef render functions do not support propTypes or defaultProps. " +
                              "Did you accidentally pass a React component?"
                      )
                    : void 0;
            }
        }

        return {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        };
    }

    function isValidElementType(type) {
        return (
            typeof type === "string" ||
            typeof type === "function" ||
            // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE ||
            type === REACT_CONCURRENT_MODE_TYPE ||
            type === REACT_PROFILER_TYPE ||
            type === REACT_STRICT_MODE_TYPE ||
            type === REACT_SUSPENSE_TYPE ||
            (typeof type === "object" &&
                type !== null &&
                (type.$$typeof === REACT_LAZY_TYPE ||
                    type.$$typeof === REACT_MEMO_TYPE ||
                    type.$$typeof === REACT_PROVIDER_TYPE ||
                    type.$$typeof === REACT_CONTEXT_TYPE ||
                    type.$$typeof === REACT_FORWARD_REF_TYPE))
        );
    }

    function memo(type, compare) {
        {
            if (!isValidElementType(type)) {
                warningWithoutStack$1(
                    false,
                    "memo: The first argument must be a component. Instead " +
                        "received: %s",
                    type === null ? "null" : typeof type
                );
            }
        }
        return {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare
        };
    }

    function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        !(dispatcher !== null)
            ? invariant(
                  false,
                  "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem."
              )
            : void 0;
        return dispatcher;
    }

    function useContext(Context, unstable_observedBits) {
        var dispatcher = resolveDispatcher();
        {
            !(unstable_observedBits === undefined)
                ? warning$1(
                      false,
                      "useContext() second argument is reserved for future " +
                          "use in React. Passing it is not supported. " +
                          "You passed: %s.%s",
                      unstable_observedBits,
                      typeof unstable_observedBits === "number" &&
                          Array.isArray(arguments[2])
                          ? "\n\nDid you call array.map(useContext)? " +
                                "Calling Hooks inside a loop is not supported. " +
                                "Learn more at https://fb.me/rules-of-hooks"
                          : ""
                  )
                : void 0;

            // TODO: add a more generic warning for invalid values.
            if (Context._context !== undefined) {
                var realContext = Context._context;
                // Don't deduplicate because this legitimately causes bugs
                // and nobody should be using this in existing code.
                if (realContext.Consumer === Context) {
                    warning$1(
                        false,
                        "Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be " +
                            "removed in a future major release. Did you mean to call useContext(Context) instead?"
                    );
                } else if (realContext.Provider === Context) {
                    warning$1(
                        false,
                        "Calling useContext(Context.Provider) is not supported. " +
                            "Did you mean to call useContext(Context) instead?"
                    );
                }
            }
        }
        return dispatcher.useContext(Context, unstable_observedBits);
    }

    function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    }

    function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
    }

    function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
    }

    function useEffect(create, inputs) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, inputs);
    }

    function useLayoutEffect(create, inputs) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, inputs);
    }

    function useCallback(callback, inputs) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, inputs);
    }

    function useMemo(create, inputs) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, inputs);
    }

    function useImperativeHandle(ref, create, inputs) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, inputs);
    }

    function useDebugValue(value, formatterFn) {
        {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
        }
    }

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var ReactPropTypesSecret$1 = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";

    var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var printWarning$1 = function() {};

    {
        var ReactPropTypesSecret = ReactPropTypesSecret_1;
        var loggedTypeFailures = {};

        printWarning$1 = function(text) {
            var message = "Warning: " + text;
            if (typeof console !== "undefined") {
                console.error(message);
            }
            try {
                // --- Welcome to debugging React ---
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                throw new Error(message);
            } catch (x) {}
        };
    }

    /**
     * Assert that the values match with the type specs.
     * Error messages are memorized and will only be shown once.
     *
     * @param {object} typeSpecs Map of name to a ReactPropType
     * @param {object} values Runtime values that need to be type-checked
     * @param {string} location e.g. "prop", "context", "child context"
     * @param {string} componentName Name of the component for error messages.
     * @param {?Function} getStack Returns the component stack.
     * @private
     */
    function checkPropTypes(
        typeSpecs,
        values,
        location,
        componentName,
        getStack
    ) {
        {
            for (var typeSpecName in typeSpecs) {
                if (typeSpecs.hasOwnProperty(typeSpecName)) {
                    var error;
                    // Prop type validation may throw. In case they do, we don't want to
                    // fail the render phase where it didn't fail before. So we log it.
                    // After these have been cleaned up, we'll let them throw.
                    try {
                        // This is intentionally an invariant that gets caught. It's the same
                        // behavior as without this statement except with a better message.
                        if (typeof typeSpecs[typeSpecName] !== "function") {
                            var err = Error(
                                (componentName || "React class") +
                                    ": " +
                                    location +
                                    " type `" +
                                    typeSpecName +
                                    "` is invalid; " +
                                    "it must be a function, usually from the `prop-types` package, but received `" +
                                    typeof typeSpecs[typeSpecName] +
                                    "`."
                            );
                            err.name = "Invariant Violation";
                            throw err;
                        }
                        error = typeSpecs[typeSpecName](
                            values,
                            typeSpecName,
                            componentName,
                            location,
                            null,
                            ReactPropTypesSecret
                        );
                    } catch (ex) {
                        error = ex;
                    }
                    if (error && !(error instanceof Error)) {
                        printWarning$1(
                            (componentName || "React class") +
                                ": type specification of " +
                                location +
                                " `" +
                                typeSpecName +
                                "` is invalid; the type checker " +
                                "function must return `null` or an `Error` but returned a " +
                                typeof error +
                                ". " +
                                "You may have forgotten to pass an argument to the type checker " +
                                "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " +
                                "shape all require an argument)."
                        );
                    }
                    if (
                        error instanceof Error &&
                        !(error.message in loggedTypeFailures)
                    ) {
                        // Only monitor this failure once because there tends to be a lot of the
                        // same error.
                        loggedTypeFailures[error.message] = true;

                        var stack = getStack ? getStack() : "";

                        printWarning$1(
                            "Failed " +
                                location +
                                " type: " +
                                error.message +
                                (stack != null ? stack : "")
                        );
                    }
                }
            }
        }
    }

    var checkPropTypes_1 = checkPropTypes;

    /**
     * ReactElementValidator provides a wrapper around a element factory
     * which validates the props passed to the element. This is intended to be
     * used only in DEV and could be replaced by a static type checker for languages
     * that support it.
     */

    var propTypesMisspellWarningShown = void 0;

    {
        propTypesMisspellWarningShown = false;
    }

    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
            }
        }
        return "";
    }

    function getSourceInfoErrorAddendum(elementProps) {
        if (
            elementProps !== null &&
            elementProps !== undefined &&
            elementProps.__source !== undefined
        ) {
            var source = elementProps.__source;
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return (
                "\n\nCheck your code at " + fileName + ":" + lineNumber + "."
            );
        }
        return "";
    }

    /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */
    var ownerHasKeyUseWarning = {};

    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();

        if (!info) {
            var parentName =
                typeof parentType === "string"
                    ? parentType
                    : parentType.displayName || parentType.name;
            if (parentName) {
                info =
                    "\n\nCheck the top-level render call using <" +
                    parentName +
                    ">.";
            }
        }
        return info;
    }

    /**
     * Warn if the element doesn't have an explicit key assigned to it.
     * This element is in an array. The array could grow and shrink or be
     * reordered. All children that haven't already been validated are required to
     * have a "key" property assigned to it. Error statuses are cached so a warning
     * will only be shown once.
     *
     * @internal
     * @param {ReactElement} element Element that requires a key.
     * @param {*} parentType element's parent's type.
     */
    function validateExplicitKey(element, parentType) {
        if (
            !element._store ||
            element._store.validated ||
            element.key != null
        ) {
            return;
        }
        element._store.validated = true;

        var currentComponentErrorInfo = getCurrentComponentErrorInfo(
            parentType
        );
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

        // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = "";
        if (
            element &&
            element._owner &&
            element._owner !== ReactCurrentOwner.current
        ) {
            // Give the component that originally created this child.
            childOwner =
                " It was passed a child from " +
                getComponentName(element._owner.type) +
                ".";
        }

        setCurrentlyValidatingElement(element);
        {
            warning$1(
                false,
                'Each child in a list should have a unique "key" prop.' +
                    "%s%s See https://fb.me/react-warning-keys for more information.",
                currentComponentErrorInfo,
                childOwner
            );
        }
        setCurrentlyValidatingElement(null);
    }

    /**
     * Ensure that every element either is passed in a static location, in an
     * array with an explicit keys property defined, or in an object literal
     * with valid key property.
     *
     * @internal
     * @param {ReactNode} node Statically passed child of any type.
     * @param {*} parentType node's parent's type.
     */
    function validateChildKeys(node, parentType) {
        if (typeof node !== "object") {
            return;
        }
        if (Array.isArray(node)) {
            for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                    validateExplicitKey(child, parentType);
                }
            }
        } else if (isValidElement(node)) {
            // This element was passed in a valid location.
            if (node._store) {
                node._store.validated = true;
            }
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
                // Entry iterators used to provide implicit keys,
                // but now we print a separate warning for them later.
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step = void 0;
                    while (!(step = iterator.next()).done) {
                        if (isValidElement(step.value)) {
                            validateExplicitKey(step.value, parentType);
                        }
                    }
                }
            }
        }
    }

    /**
     * Given an element, validate that its props follow the propTypes definition,
     * provided by the type.
     *
     * @param {ReactElement} element
     */
    function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === "string") {
            return;
        }
        var name = getComponentName(type);
        var propTypes = void 0;
        if (typeof type === "function") {
            propTypes = type.propTypes;
        } else if (
            typeof type === "object" &&
            (type.$$typeof === REACT_FORWARD_REF_TYPE ||
                // Note: Memo only checks outer props here.
                // Inner props are checked in the reconciler.
                type.$$typeof === REACT_MEMO_TYPE)
        ) {
            propTypes = type.propTypes;
        } else {
            return;
        }
        if (propTypes) {
            setCurrentlyValidatingElement(element);
            checkPropTypes_1(
                propTypes,
                element.props,
                "prop",
                name,
                ReactDebugCurrentFrame.getStackAddendum
            );
            setCurrentlyValidatingElement(null);
        } else if (
            type.PropTypes !== undefined &&
            !propTypesMisspellWarningShown
        ) {
            propTypesMisspellWarningShown = true;
            warningWithoutStack$1(
                false,
                "Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",
                name || "Unknown"
            );
        }
        if (typeof type.getDefaultProps === "function") {
            !type.getDefaultProps.isReactClassApproved
                ? warningWithoutStack$1(
                      false,
                      "getDefaultProps is only used on classic React.createClass " +
                          "definitions. Use a static property named `defaultProps` instead."
                  )
                : void 0;
        }
    }

    /**
     * Given a fragment, validate that it can only be provided with fragment props
     * @param {ReactElement} fragment
     */
    function validateFragmentProps(fragment) {
        setCurrentlyValidatingElement(fragment);

        var keys = Object.keys(fragment.props);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (key !== "children" && key !== "key") {
                warning$1(
                    false,
                    "Invalid prop `%s` supplied to `React.Fragment`. " +
                        "React.Fragment can only have `key` and `children` props.",
                    key
                );
                break;
            }
        }

        if (fragment.ref !== null) {
            warning$1(
                false,
                "Invalid attribute `ref` supplied to `React.Fragment`."
            );
        }

        setCurrentlyValidatingElement(null);
    }

    function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);

        // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = "";
            if (
                type === undefined ||
                (typeof type === "object" &&
                    type !== null &&
                    Object.keys(type).length === 0)
            ) {
                info +=
                    " You likely forgot to export your component from the file " +
                    "it's defined in, or you might have mixed up default and named imports.";
            }

            var sourceInfo = getSourceInfoErrorAddendum(props);
            if (sourceInfo) {
                info += sourceInfo;
            } else {
                info += getDeclarationErrorAddendum();
            }

            var typeString = void 0;
            if (type === null) {
                typeString = "null";
            } else if (Array.isArray(type)) {
                typeString = "array";
            } else if (
                type !== undefined &&
                type.$$typeof === REACT_ELEMENT_TYPE
            ) {
                typeString =
                    "<" + (getComponentName(type.type) || "Unknown") + " />";
                info =
                    " Did you accidentally export a JSX literal instead of a component?";
            } else {
                typeString = typeof type;
            }

            warning$1(
                false,
                "React.createElement: type is invalid -- expected a string (for " +
                    "built-in components) or a class/function (for composite " +
                    "components) but got: %s.%s",
                typeString,
                info
            );
        }

        var element = createElement.apply(this, arguments);

        // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) {
            return element;
        }

        // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) {
            for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
            }
        }

        if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
        } else {
            validatePropTypes(element);
        }

        return element;
    }

    function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        // Legacy hook: remove it
        {
            Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                    lowPriorityWarning$1(
                        false,
                        "Factory.type is deprecated. Access the class directly " +
                            "before passing it to createFactory."
                    );
                    Object.defineProperty(this, "type", {
                        value: type
                    });
                    return type;
                }
            });
        }

        return validatedFactory;
    }

    function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
        }
        validatePropTypes(newElement);
        return newElement;
    }

    var React = {
        Children: {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray,
            only: onlyChild
        },

        createRef: createRef,
        Component: Component,
        PureComponent: PureComponent,

        createContext: createContext,
        forwardRef: forwardRef,
        lazy: lazy,
        memo: memo,

        useCallback: useCallback,
        useContext: useContext,
        useEffect: useEffect,
        useImperativeHandle: useImperativeHandle,
        useDebugValue: useDebugValue,
        useLayoutEffect: useLayoutEffect,
        useMemo: useMemo,
        useReducer: useReducer,
        useRef: useRef,
        useState: useState,

        Fragment: REACT_FRAGMENT_TYPE,
        StrictMode: REACT_STRICT_MODE_TYPE,
        Suspense: REACT_SUSPENSE_TYPE,

        createElement: createElementWithValidation,
        cloneElement: cloneElementWithValidation,
        createFactory: createFactoryWithValidation,
        isValidElement: isValidElement,

        version: ReactVersion,

        unstable_ConcurrentMode: REACT_CONCURRENT_MODE_TYPE,
        unstable_Profiler: REACT_PROFILER_TYPE,

        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals
    };

    // Note: some APIs are added with feature flags.
    // Make sure that stable builds for open source
    // don't modify the React object to avoid deopts.
    // Also let's not expose their names in stable builds.

    if (enableStableConcurrentModeAPIs) {
        React.ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        React.Profiler = REACT_PROFILER_TYPE;
        React.unstable_ConcurrentMode = undefined;
        React.unstable_Profiler = undefined;
    }

    var React$2 = Object.freeze({
        default: React
    });

    var React$3 = (React$2 && React) || React$2;

    // TODO: decide on the top-level export form.
    // This is hacky but makes it work with both Rollup and Jest.
    var react = React$3.default || React$3;

    return react;
});

/** @license React v16.8.6
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
	typeof define === 'function' && define.amd ? define(['react'], factory) :
	(global.ReactDOM = factory(global.React));
}(this, (function (React) { 'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function () {};

{
  validateFormat = function (format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error = void 0;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

// Relying on the `invariant()` implementation lets us
// preserve the format and params in the www builds.

!React ? invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;

var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
  var funcArgs = Array.prototype.slice.call(arguments, 3);
  try {
    func.apply(context, funcArgs);
  } catch (error) {
    this.onError(error);
  }
};

{
  // In DEV mode, we swap out invokeGuardedCallback for a special version
  // that plays more nicely with the browser's DevTools. The idea is to preserve
  // "Pause on exceptions" behavior. Because React wraps all user-provided
  // functions in invokeGuardedCallback, and the production version of
  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
  // like caught exceptions, and the DevTools won't pause unless the developer
  // takes the extra step of enabling pause on caught exceptions. This is
  // unintuitive, though, because even though React has caught the error, from
  // the developer's perspective, the error is uncaught.
  //
  // To preserve the expected "Pause on exceptions" behavior, we don't use a
  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
  // DOM node, and call the user-provided callback from inside an event handler
  // for that fake event. If the callback throws, the error is "captured" using
  // a global event handler. But because the error happens in a different
  // event loop context, it does not interrupt the normal program flow.
  // Effectively, this gives us try-catch behavior without actually using
  // try-catch. Neat!

  // Check that the browser supports the APIs we need to implement our special
  // DEV version of invokeGuardedCallback
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');

    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
      // If document doesn't exist we know for sure we will crash in this method
      // when we call document.createEvent(). However this can cause confusing
      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
      // So we preemptively throw with a better message instead.
      !(typeof document !== 'undefined') ? invariant(false, 'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.') : void 0;
      var evt = document.createEvent('Event');

      // Keeps track of whether the user-provided callback threw an error. We
      // set this to true at the beginning, then set it to false right after
      // calling the function. If the function errors, `didError` will never be
      // set to false. This strategy works even if the browser is flaky and
      // fails to call our global error handler, because it doesn't rely on
      // the error event at all.
      var didError = true;

      // Keeps track of the value of window.event so that we can reset it
      // during the callback to let user code access window.event in the
      // browsers that support it.
      var windowEvent = window.event;

      // Keeps track of the descriptor of window.event to restore it after event
      // dispatching: https://github.com/facebook/react/issues/13688
      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

      // Create an event handler for our fake event. We will synchronously
      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
      // call the user-provided callback.
      var funcArgs = Array.prototype.slice.call(arguments, 3);
      function callCallback() {
        // We immediately remove the callback from event listeners so that
        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
        // nested call would trigger the fake event handlers of any call higher
        // in the stack.
        fakeNode.removeEventListener(evtType, callCallback, false);

        // We check for window.hasOwnProperty('event') to prevent the
        // window.event assignment in both IE <= 10 as they throw an error
        // "Member not found" in strict mode, and in Firefox which does not
        // support window.event.
        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
          window.event = windowEvent;
        }

        func.apply(context, funcArgs);
        didError = false;
      }

      // Create a global error event handler. We use this to capture the value
      // that was thrown. It's possible that this error handler will fire more
      // than once; for example, if non-React code also calls `dispatchEvent`
      // and a handler for that event throws. We should be resilient to most of
      // those cases. Even if our error event handler fires more than once, the
      // last error event is always used. If the callback actually does error,
      // we know that the last error event is the correct one, because it's not
      // possible for anything else to have happened in between our callback
      // erroring and the code that follows the `dispatchEvent` call below. If
      // the callback doesn't error, but the error event was fired, we know to
      // ignore it because `didError` will be false, as described above.
      var error = void 0;
      // Use this to track whether the error event is ever called.
      var didSetError = false;
      var isCrossOriginError = false;

      function handleWindowError(event) {
        error = event.error;
        didSetError = true;
        if (error === null && event.colno === 0 && event.lineno === 0) {
          isCrossOriginError = true;
        }
        if (event.defaultPrevented) {
          // Some other error handler has prevented default.
          // Browsers silence the error report if this happens.
          // We'll remember this to later decide whether to log it or not.
          if (error != null && typeof error === 'object') {
            try {
              error._suppressLogging = true;
            } catch (inner) {
              // Ignore.
            }
          }
        }
      }

      // Create a fake event type.
      var evtType = 'react-' + (name ? name : 'invokeguardedcallback');

      // Attach our event handlers
      window.addEventListener('error', handleWindowError);
      fakeNode.addEventListener(evtType, callCallback, false);

      // Synchronously dispatch our fake event. If the user-provided function
      // errors, it will trigger our global error handler.
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);

      if (windowEventDescriptor) {
        Object.defineProperty(window, 'event', windowEventDescriptor);
      }

      if (didError) {
        if (!didSetError) {
          // The callback errored, but the error event never fired.
          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
        } else if (isCrossOriginError) {
          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
        }
        this.onError(error);
      }

      // Remove our event listeners
      window.removeEventListener('error', handleWindowError);
    };

    invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
  }
}

var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

// Used by Fiber to simulate a try-catch.
var hasError = false;
var caughtError = null;

// Used by event system to capture/rethrow the first error.
var hasRethrowError = false;
var rethrowError = null;

var reporter = {
  onError: function (error) {
    hasError = true;
    caughtError = error;
  }
};

/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */
function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
  hasError = false;
  caughtError = null;
  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
}

/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */
function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
  invokeGuardedCallback.apply(this, arguments);
  if (hasError) {
    var error = clearCaughtError();
    if (!hasRethrowError) {
      hasRethrowError = true;
      rethrowError = error;
    }
  }
}

/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */
function rethrowCaughtError() {
  if (hasRethrowError) {
    var error = rethrowError;
    hasRethrowError = false;
    rethrowError = null;
    throw error;
  }
}

function hasCaughtError() {
  return hasError;
}

function clearCaughtError() {
  if (hasError) {
    var error = caughtError;
    hasError = false;
    caughtError = null;
    return error;
  } else {
    invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
  }
}

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;
    if (plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
    plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
  eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!registrationNameModules[registrationName] ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
  registrationNameModules[registrationName] = pluginModule;
  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  {
    var lowerCasedName = registrationName.toLowerCase();
    possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */

/**
 * Ordered list of injected plugins.
 */
var plugins = [];

/**
 * Mapping from event name to dispatch config
 */
var eventNameDispatchConfigs = {};

/**
 * Mapping from registration name to plugin module
 */
var registrationNameModules = {};

/**
 * Mapping from registration name to event name
 */
var registrationNameDependencies = {};

/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */
var possibleRegistrationNames = {};
// Trust the developer to only use possibleRegistrationNames in true

/**
 * Injects an ordering of plugins (by plugin name). This allows the ordering
 * to be decoupled from injection of the actual plugins so that ordering is
 * always deterministic regardless of packaging, on-the-fly injection, etc.
 *
 * @param {array} InjectedEventPluginOrder
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginOrder}
 */
function injectEventPluginOrder(injectedEventPluginOrder) {
  !!eventPluginOrder ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0;
  // Clone the ordering so it cannot be dynamically mutated.
  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
  recomputePluginOrdering();
}

/**
 * Injects plugins to be used by `EventPluginHub`. The plugin names must be
 * in the ordering injected by `injectEventPluginOrder`.
 *
 * Plugins can be injected as part of page initialization or on-the-fly.
 *
 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginsByName}
 */
function injectEventPluginsByName(injectedNamesToPlugins) {
  var isOrderingDirty = false;
  for (var pluginName in injectedNamesToPlugins) {
    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
      continue;
    }
    var pluginModule = injectedNamesToPlugins[pluginName];
    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
      !!namesToPlugins[pluginName] ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
      namesToPlugins[pluginName] = pluginModule;
      isOrderingDirty = true;
    }
  }
  if (isOrderingDirty) {
    recomputePluginOrdering();
  }
}

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warningWithoutStack = function () {};

{
  warningWithoutStack = function (condition, format) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (format === undefined) {
      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (args.length > 8) {
      // Check before the condition to catch violations early.
      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
    }
    if (condition) {
      return;
    }
    if (typeof console !== 'undefined') {
      var argsWithFormat = args.map(function (item) {
        return '' + item;
      });
      argsWithFormat.unshift('Warning: ' + format);

      // We intentionally don't use spread (or .apply) directly because it
      // breaks IE9: https://github.com/facebook/react/issues/13610
      Function.prototype.apply.call(console.error, console, argsWithFormat);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      throw new Error(message);
    } catch (x) {}
  };
}

var warningWithoutStack$1 = warningWithoutStack;

var getFiberCurrentPropsFromNode = null;
var getInstanceFromNode = null;
var getNodeFromInstance = null;

function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
  getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
  getInstanceFromNode = getInstanceFromNodeImpl;
  getNodeFromInstance = getNodeFromInstanceImpl;
  {
    !(getNodeFromInstance && getInstanceFromNode) ? warningWithoutStack$1(false, 'EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
  }
}

var validateEventDispatches = void 0;
{
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    !(instancesIsArr === listenersIsArr && instancesLen === listenersLen) ? warningWithoutStack$1(false, 'EventPluginUtils: Invalid `event`.') : void 0;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = getNodeFromInstance(inst);
  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */


/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */


/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 * @param {function} cb Callback invoked with each element or a collection.
 * @param {?} [scope] Scope used as `this` in a callback.
 */
function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function (event) {
  if (event) {
    executeDispatchesInOrder(event);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e);
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */

/**
 * Methods for injecting dependencies.
 */
var injection = {
  /**
   * @param {array} InjectedEventPluginOrder
   * @public
   */
  injectEventPluginOrder: injectEventPluginOrder,

  /**
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   */
  injectEventPluginsByName: injectEventPluginsByName
};

/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */
function getListener(inst, registrationName) {
  var listener = void 0;

  // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
  // live here; needs to be moved to a better place soon
  var stateNode = inst.stateNode;
  if (!stateNode) {
    // Work in progress (ex: onload events in incremental mode).
    return null;
  }
  var props = getFiberCurrentPropsFromNode(stateNode);
  if (!props) {
    // Work in progress.
    return null;
  }
  listener = props[registrationName];
  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
    return null;
  }
  !(!listener || typeof listener === 'function') ? invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;
  return listener;
}

/**
 * Allows registered plugins an opportunity to extract events from top-level
 * native browser events.
 *
 * @return {*} An accumulation of synthetic events.
 * @internal
 */
function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var events = null;
  for (var i = 0; i < plugins.length; i++) {
    // Not every plugin in the ordering may be loaded at runtime.
    var possiblePlugin = plugins[i];
    if (possiblePlugin) {
      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
      if (extractedEvents) {
        events = accumulateInto(events, extractedEvents);
      }
    }
  }
  return events;
}

function runEventsInBatch(events) {
  if (events !== null) {
    eventQueue = accumulateInto(eventQueue, events);
  }

  // Set `eventQueue` to null before processing it so that we can tell if more
  // events get enqueued while processing.
  var processingEventQueue = eventQueue;
  eventQueue = null;

  if (!processingEventQueue) {
    return;
  }

  forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
  !!eventQueue ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0;
  // This would be a good time to rethrow if any of the event handlers threw.
  rethrowCaughtError();
}

function runExtractedEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
  runEventsInBatch(events);
}

var FunctionComponent = 0;
var ClassComponent = 1;
var IndeterminateComponent = 2; // Before we know whether it is function or class
var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
var HostComponent = 5;
var HostText = 6;
var Fragment = 7;
var Mode = 8;
var ContextConsumer = 9;
var ContextProvider = 10;
var ForwardRef = 11;
var Profiler = 12;
var SuspenseComponent = 13;
var MemoComponent = 14;
var SimpleMemoComponent = 15;
var LazyComponent = 16;
var IncompleteClassComponent = 17;
var DehydratedSuspenseComponent = 18;

var randomKey = Math.random().toString(36).slice(2);
var internalInstanceKey = '__reactInternalInstance$' + randomKey;
var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;

function precacheFiberNode(hostInst, node) {
  node[internalInstanceKey] = hostInst;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  while (!node[internalInstanceKey]) {
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var inst = node[internalInstanceKey];
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber, this will always be the deepest root.
    return inst;
  }

  return null;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode$1(node) {
  var inst = node[internalInstanceKey];
  if (inst) {
    if (inst.tag === HostComponent || inst.tag === HostText) {
      return inst;
    } else {
      return null;
    }
  }
  return null;
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance$1(inst) {
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber this, is just the state node right now. We assume it will be
    // a host component or host text.
    return inst.stateNode;
  }

  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  invariant(false, 'getNodeFromInstance: Invalid argument.');
}

function getFiberCurrentPropsFromNode$1(node) {
  return node[internalEventHandlersKey] || null;
}

function updateFiberProps(node, props) {
  node[internalEventHandlersKey] = props;
}

function getParent(inst) {
  do {
    inst = inst.return;
    // TODO: If this is a HostRoot we might want to bail out.
    // That is depending on if we want nested subtrees (layers) to bubble
    // events to their parent. We could also go through parentNode on the
    // host node but that wouldn't work for React Native and doesn't let us
    // do the portal feature.
  } while (inst && inst.tag !== HostComponent);
  if (inst) {
    return inst;
  }
  return null;
}

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  var depthA = 0;
  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = getParent(instA);
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = getParent(instB);
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB || instA === instB.alternate) {
      return instA;
    }
    instA = getParent(instA);
    instB = getParent(instB);
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */


/**
 * Return the parent instance of the passed-in instance.
 */


/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = getParent(inst);
  }
  var i = void 0;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (true) {
    if (!from) {
      break;
    }
    if (from === common) {
      break;
    }
    var alternate = from.alternate;
    if (alternate !== null && alternate === common) {
      break;
    }
    pathFrom.push(from);
    from = getParent(from);
  }
  var pathTo = [];
  while (true) {
    if (!to) {
      break;
    }
    if (to === common) {
      break;
    }
    var _alternate = to.alternate;
    if (_alternate !== null && _alternate === common) {
      break;
    }
    pathTo.push(to);
    to = getParent(to);
  }
  for (var i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (var _i = pathTo.length; _i-- > 0;) {
    fn(pathTo[_i], 'captured', argTo);
  }
}

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing even a
 * single one.
 */

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  {
    !inst ? warningWithoutStack$1(false, 'Dispatching inst must not be null') : void 0;
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (inst && event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}



function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

// Do not uses the below two methods directly!
// Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
// (It is the only module that is allowed to access these methods.)

function unsafeCastStringToDOMTopLevelType(topLevelType) {
  return topLevelType;
}

function unsafeCastDOMTopLevelTypeToString(topLevelType) {
  return topLevelType;
}

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return eventName;
}

/**
 * To identify top level events in ReactDOM, we use constants defined by this
 * module. This is the only module that uses the unsafe* methods to express
 * that the constants actually correspond to the browser event names. This lets
 * us save some bundle size by avoiding a top level type -> event name map.
 * The rest of ReactDOM code should import top level types from this file.
 */
var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');


var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel');

// List of events that need to be individually attached to media elements.
// Note that events in this list will *not* be listened to at the top level
// unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.
var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];

function getRawEventName(topLevelType) {
  return unsafeCastDOMTopLevelTypeToString(topLevelType);
}

/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */

var root = null;
var startText = null;
var fallbackText = null;

function initialize(nativeEventTarget) {
  root = nativeEventTarget;
  startText = getText();
  return true;
}

function reset() {
  root = null;
  startText = null;
  fallbackText = null;
}

function getData() {
  if (fallbackText) {
    return fallbackText;
  }

  var start = void 0;
  var startValue = startText;
  var startLength = startValue.length;
  var end = void 0;
  var endValue = getText();
  var endLength = endValue.length;

  for (start = 0; start < startLength; start++) {
    if (startValue[start] !== endValue[start]) {
      break;
    }
  }

  var minEnd = startLength - start;
  for (end = 1; end <= minEnd; end++) {
    if (startValue[startLength - end] !== endValue[endLength - end]) {
      break;
    }
  }

  var sliceTail = end > 1 ? 1 - end : undefined;
  fallbackText = endValue.slice(start, sliceTail);
  return fallbackText;
}

function getText() {
  if ('value' in root) {
    return root.value;
  }
  return root.textContent;
}

var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

var _assign = ReactInternals.assign;

/* eslint valid-typeof: 0 */

var EVENT_POOL_SIZE = 10;

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: function () {
    return null;
  },
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

function functionThatReturnsTrue() {
  return true;
}

function functionThatReturnsFalse() {
  return false;
}

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
    delete this.isDefaultPrevented;
    delete this.isPropagationStopped;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = functionThatReturnsTrue;
  } else {
    this.isDefaultPrevented = functionThatReturnsFalse;
  }
  this.isPropagationStopped = functionThatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {
  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }
    this.isDefaultPrevented = functionThatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = functionThatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = functionThatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: functionThatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      }
    }
    this.dispatchConfig = null;
    this._targetInst = null;
    this.nativeEvent = null;
    this.isDefaultPrevented = functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    this._dispatchListeners = null;
    this._dispatchInstances = null;
    {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
      Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
    }
  }
});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 */
SyntheticEvent.extend = function (Interface) {
  var Super = this;

  var E = function () {};
  E.prototype = Super.prototype;
  var prototype = new E();

  function Class() {
    return Super.apply(this, arguments);
  }
  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.extend = Super.extend;
  addEventPoolingTo(Class);

  return Class;
};

addEventPoolingTo(SyntheticEvent);

/**
 * Helper to nullify syntheticEvent instance properties when destructing
 *
 * @param {String} propName
 * @param {?object} getVal
 * @return {object} defineProperty object
 */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    !warningCondition ? warningWithoutStack$1(false, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }
}

function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
  var EventConstructor = this;
  if (EventConstructor.eventPool.length) {
    var instance = EventConstructor.eventPool.pop();
    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
    return instance;
  }
  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
}

function releasePooledEvent(event) {
  var EventConstructor = this;
  !(event instanceof EventConstructor) ? invariant(false, 'Trying to release an event instance into a pool of a different type.') : void 0;
  event.destructor();
  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
    EventConstructor.eventPool.push(event);
  }
}

function addEventPoolingTo(EventConstructor) {
  EventConstructor.eventPool = [];
  EventConstructor.getPooled = getPooledEvent;
  EventConstructor.release = releasePooledEvent;
}

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var SyntheticCompositionEvent = SyntheticEvent.extend({
  data: null
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var SyntheticInputEvent = SyntheticEvent.extend({
  data: null
});

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode;

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case TOP_COMPOSITION_START:
      return eventTypes.compositionStart;
    case TOP_COMPOSITION_END:
      return eventTypes.compositionEnd;
    case TOP_COMPOSITION_UPDATE:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_KEY_UP:
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case TOP_KEY_DOWN:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case TOP_KEY_PRESS:
    case TOP_MOUSE_DOWN:
    case TOP_BLUR:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isUsingKoreanIME(nativeEvent) {
  return nativeEvent.locale === 'ko';
}

// Track the current IME composition status, if any.
var isComposing = false;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType = void 0;
  var fallbackData = void 0;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!isComposing) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!isComposing && eventType === eventTypes.compositionStart) {
      isComposing = initialize(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (isComposing) {
        fallbackData = getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_COMPOSITION_END:
      return getDataFromCustomEvent(nativeEvent);
    case TOP_KEY_PRESS:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case TOP_TEXT_INPUT:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to ignore it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (isComposing) {
    if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = getData();
      reset();
      isComposing = false;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case TOP_PASTE:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case TOP_KEY_PRESS:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (!isKeypressCommand(nativeEvent)) {
        // IE fires the `keypress` event when a user types an emoji via
        // Touch keyboard of Windows.  In such a case, the `char` property
        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
        // is 2, the property `which` does not represent an emoji correctly.
        // In such a case, we directly return the `char` property instead of
        // using `which`.
        if (nativeEvent.char && nativeEvent.char.length > 1) {
          return nativeEvent.char;
        } else if (nativeEvent.which) {
          return String.fromCharCode(nativeEvent.which);
        }
      }
      return null;
    case TOP_COMPOSITION_END:
      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars = void 0;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

    var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

    if (composition === null) {
      return beforeInput;
    }

    if (beforeInput === null) {
      return composition;
    }

    return [composition, beforeInput];
  }
};

// Use to restore controlled state after a change event has fired.

var restoreImpl = null;
var restoreTarget = null;
var restoreQueue = null;

function restoreStateOfTarget(target) {
  // We perform this translation at the end of the event loop so that we
  // always receive the correct fiber here
  var internalInstance = getInstanceFromNode(target);
  if (!internalInstance) {
    // Unmounted
    return;
  }
  !(typeof restoreImpl === 'function') ? invariant(false, 'setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
  restoreImpl(internalInstance.stateNode, internalInstance.type, props);
}

function setRestoreImplementation(impl) {
  restoreImpl = impl;
}

function enqueueStateRestore(target) {
  if (restoreTarget) {
    if (restoreQueue) {
      restoreQueue.push(target);
    } else {
      restoreQueue = [target];
    }
  } else {
    restoreTarget = target;
  }
}

function needsStateRestore() {
  return restoreTarget !== null || restoreQueue !== null;
}

function restoreStateIfNeeded() {
  if (!restoreTarget) {
    return;
  }
  var target = restoreTarget;
  var queuedTargets = restoreQueue;
  restoreTarget = null;
  restoreQueue = null;

  restoreStateOfTarget(target);
  if (queuedTargets) {
    for (var i = 0; i < queuedTargets.length; i++) {
      restoreStateOfTarget(queuedTargets[i]);
    }
  }
}

// Used as a way to call batchedUpdates when we don't have a reference to
// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.

// Defaults
var _batchedUpdatesImpl = function (fn, bookkeeping) {
  return fn(bookkeeping);
};
var _interactiveUpdatesImpl = function (fn, a, b) {
  return fn(a, b);
};
var _flushInteractiveUpdatesImpl = function () {};

var isBatching = false;
function batchedUpdates(fn, bookkeeping) {
  if (isBatching) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(bookkeeping);
  }
  isBatching = true;
  try {
    return _batchedUpdatesImpl(fn, bookkeeping);
  } finally {
    // Here we wait until all updates have propagated, which is important
    // when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    // Then we restore state of any controlled component.
    isBatching = false;
    var controlledComponentsHavePendingUpdates = needsStateRestore();
    if (controlledComponentsHavePendingUpdates) {
      // If a controlled event was fired, we may need to restore the state of
      // the DOM node back to the controlled value. This is necessary when React
      // bails out of the update without touching the DOM.
      _flushInteractiveUpdatesImpl();
      restoreStateIfNeeded();
    }
  }
}

function interactiveUpdates(fn, a, b) {
  return _interactiveUpdatesImpl(fn, a, b);
}



function setBatchingImplementation(batchedUpdatesImpl, interactiveUpdatesImpl, flushInteractiveUpdatesImpl) {
  _batchedUpdatesImpl = batchedUpdatesImpl;
  _interactiveUpdatesImpl = interactiveUpdatesImpl;
  _flushInteractiveUpdatesImpl = flushInteractiveUpdatesImpl;
}

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

/**
 * HTML nodeType values that represent the type of the node
 */

var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var DOCUMENT_NODE = 9;
var DOCUMENT_FRAGMENT_NODE = 11;

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  // Fallback to nativeEvent.srcElement for IE9
  // https://github.com/facebook/react/issues/12506
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === TEXT_NODE ? target.parentNode : target;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix) {
  if (!canUseDOM) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  return isSupported;
}

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(node) {
  return node._valueTracker;
}

function detachTracker(node) {
  node._valueTracker = null;
}

function getValueFromNode(node) {
  var value = '';
  if (!node) {
    return value;
  }

  if (isCheckable(node)) {
    value = node.checked ? 'true' : 'false';
  } else {
    value = node.value;
  }

  return value;
}

function trackValueOnNode(node) {
  var valueField = isCheckable(node) ? 'checked' : 'value';
  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

  var currentValue = '' + node[valueField];

  // if someone has already defined a value or Safari, then bail
  // and don't track value will cause over reporting of changes,
  // but it's better then a hard failure
  // (needed for certain tests that spyOn input values and Safari)
  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
    return;
  }
  var get = descriptor.get,
      set = descriptor.set;

  Object.defineProperty(node, valueField, {
    configurable: true,
    get: function () {
      return get.call(this);
    },
    set: function (value) {
      currentValue = '' + value;
      set.call(this, value);
    }
  });
  // We could've passed this the first time
  // but it triggers a bug in IE11 and Edge 14/15.
  // Calling defineProperty() again should be equivalent.
  // https://github.com/facebook/react/issues/11768
  Object.defineProperty(node, valueField, {
    enumerable: descriptor.enumerable
  });

  var tracker = {
    getValue: function () {
      return currentValue;
    },
    setValue: function (value) {
      currentValue = '' + value;
    },
    stopTracking: function () {
      detachTracker(node);
      delete node[valueField];
    }
  };
  return tracker;
}

function track(node) {
  if (getTracker(node)) {
    return;
  }

  // TODO: Once it's just Fiber we can move this to node._wrapperState
  node._valueTracker = trackValueOnNode(node);
}

function updateValueIfChanged(node) {
  if (!node) {
    return false;
  }

  var tracker = getTracker(node);
  // if there is no tracker at this point it's unlikely
  // that trying again will succeed
  if (!tracker) {
    return true;
  }

  var lastValue = tracker.getValue();
  var nextValue = getValueFromNode(node);
  if (nextValue !== lastValue) {
    tracker.setValue(nextValue);
    return true;
  }
  return false;
}

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

// Prevent newer renderers from RTE when used with older react package versions.
// Current owner and dispatcher used to share the same ref,
// but PR #14548 split them out to better support the react-debug-tools package.
if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
  ReactSharedInternals.ReactCurrentDispatcher = {
    current: null
  };
}

var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

var describeComponentFrame = function (name, source, ownerName) {
  var sourceInfo = '';
  if (source) {
    var path = source.fileName;
    var fileName = path.replace(BEFORE_SLASH_RE, '');
    {
      // In DEV, include code for a common special case:
      // prefer "folder/index.js" instead of just "index.js".
      if (/^index\./.test(fileName)) {
        var match = path.match(BEFORE_SLASH_RE);
        if (match) {
          var pathBeforeSlash = match[1];
          if (pathBeforeSlash) {
            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
            fileName = folderName + '/' + fileName;
          }
        }
      }
    }
    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
  } else if (ownerName) {
    sourceInfo = ' (created by ' + ownerName + ')';
  }
  return '\n    in ' + (name || 'Unknown') + sourceInfo;
};

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;

var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;

var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';

function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }
  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }
  return null;
}

var Pending = 0;
var Resolved = 1;
var Rejected = 2;

function refineResolvedLazyComponent(lazyComponent) {
  return lazyComponent._status === Resolved ? lazyComponent._result : null;
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }
  {
    if (typeof type.tag === 'number') {
      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }
  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }
  if (typeof type === 'string') {
    return type;
  }
  switch (type) {
    case REACT_CONCURRENT_MODE_TYPE:
      return 'ConcurrentMode';
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';
    case REACT_PORTAL_TYPE:
      return 'Portal';
    case REACT_PROFILER_TYPE:
      return 'Profiler';
    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';
    case REACT_SUSPENSE_TYPE:
      return 'Suspense';
  }
  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';
      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';
      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');
      case REACT_MEMO_TYPE:
        return getComponentName(type.type);
      case REACT_LAZY_TYPE:
        {
          var thenable = type;
          var resolvedThenable = refineResolvedLazyComponent(thenable);
          if (resolvedThenable) {
            return getComponentName(resolvedThenable);
          }
        }
    }
  }
  return null;
}

var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

function describeFiber(fiber) {
  switch (fiber.tag) {
    case HostRoot:
    case HostPortal:
    case HostText:
    case Fragment:
    case ContextProvider:
    case ContextConsumer:
      return '';
    default:
      var owner = fiber._debugOwner;
      var source = fiber._debugSource;
      var name = getComponentName(fiber.type);
      var ownerName = null;
      if (owner) {
        ownerName = getComponentName(owner.type);
      }
      return describeComponentFrame(name, source, ownerName);
  }
}

function getStackByFiberInDevAndProd(workInProgress) {
  var info = '';
  var node = workInProgress;
  do {
    info += describeFiber(node);
    node = node.return;
  } while (node);
  return info;
}

var current = null;
var phase = null;

function getCurrentFiberOwnerNameInDevOrNull() {
  {
    if (current === null) {
      return null;
    }
    var owner = current._debugOwner;
    if (owner !== null && typeof owner !== 'undefined') {
      return getComponentName(owner.type);
    }
  }
  return null;
}

function getCurrentFiberStackInDev() {
  {
    if (current === null) {
      return '';
    }
    // Safe because if current fiber exists, we are reconciling,
    // and it is guaranteed to be the work-in-progress version.
    return getStackByFiberInDevAndProd(current);
  }
  return '';
}

function resetCurrentFiber() {
  {
    ReactDebugCurrentFrame.getCurrentStack = null;
    current = null;
    phase = null;
  }
}

function setCurrentFiber(fiber) {
  {
    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
    current = fiber;
    phase = null;
  }
}

function setCurrentPhase(lifeCyclePhase) {
  {
    phase = lifeCyclePhase;
  }
}

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = warningWithoutStack$1;

{
  warning = function (condition, format) {
    if (condition) {
      return;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();
    // eslint-disable-next-line react-internal/warning-and-invariant-args

    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
  };
}

var warning$1 = warning;

// A reserved attribute.
// It is handled by React separately and shouldn't be written to the DOM.
var RESERVED = 0;

// A simple string attribute.
// Attributes that aren't in the whitelist are presumed to have this type.
var STRING = 1;

// A string attribute that accepts booleans in React. In HTML, these are called
// "enumerated" attributes with "true" and "false" as possible values.
// When true, it should be set to a "true" string.
// When false, it should be set to a "false" string.
var BOOLEANISH_STRING = 2;

// A real boolean attribute.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
var BOOLEAN = 3;

// An attribute that can be used as a flag as well as with a value.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
// For any other value, should be present with that value.
var OVERLOADED_BOOLEAN = 4;

// An attribute that must be numeric or parse as a numeric.
// When falsy, it should be removed.
var NUMERIC = 5;

// An attribute that must be positive numeric or parse as a positive numeric.
// When falsy, it should be removed.
var POSITIVE_NUMERIC = 6;

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */
var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';


var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');

var hasOwnProperty = Object.prototype.hasOwnProperty;
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
    return true;
  }
  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  {
    warning$1(false, 'Invalid attribute name: `%s`', attributeName);
  }
  return false;
}

function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null) {
    return propertyInfo.type === RESERVED;
  }
  if (isCustomComponentTag) {
    return false;
  }
  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
    return true;
  }
  return false;
}

function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
    return false;
  }
  switch (typeof value) {
    case 'function':
    // $FlowIssue symbol is perfectly valid here
    case 'symbol':
      // eslint-disable-line
      return true;
    case 'boolean':
      {
        if (isCustomComponentTag) {
          return false;
        }
        if (propertyInfo !== null) {
          return !propertyInfo.acceptsBooleans;
        } else {
          var prefix = name.toLowerCase().slice(0, 5);
          return prefix !== 'data-' && prefix !== 'aria-';
        }
      }
    default:
      return false;
  }
}

function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
  if (value === null || typeof value === 'undefined') {
    return true;
  }
  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
    return true;
  }
  if (isCustomComponentTag) {
    return false;
  }
  if (propertyInfo !== null) {
    switch (propertyInfo.type) {
      case BOOLEAN:
        return !value;
      case OVERLOADED_BOOLEAN:
        return value === false;
      case NUMERIC:
        return isNaN(value);
      case POSITIVE_NUMERIC:
        return isNaN(value) || value < 1;
    }
  }
  return false;
}

function getPropertyInfo(name) {
  return properties.hasOwnProperty(name) ? properties[name] : null;
}

function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace) {
  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
  this.attributeName = attributeName;
  this.attributeNamespace = attributeNamespace;
  this.mustUseProperty = mustUseProperty;
  this.propertyName = name;
  this.type = type;
}

// When adding attributes to this list, be sure to also add them to
// the `possibleStandardNames` module to ensure casing and incorrect
// name warnings.
var properties = {};

// These props are reserved by React. They shouldn't be written to the DOM.
['children', 'dangerouslySetInnerHTML',
// TODO: This prevents the assignment of defaultValue to regular
// elements (not just inputs). Now that ReactDOMInput assigns to the
// defaultValue property -- do we need this?
'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
  name, // attributeName
  null);
} // attributeNamespace
);

// A few React string attributes have a different name.
// This is a mapping from React prop names to the attribute names.
[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
  var name = _ref[0],
      attributeName = _ref[1];

  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, // attributeName
  null);
} // attributeNamespace
);

// These are "enumerated" HTML attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null);
} // attributeNamespace
);

// These are "enumerated" SVG attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
// Since these are SVG attributes, their attribute names are case-sensitive.
['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name, // attributeName
  null);
} // attributeNamespace
);

// These are HTML boolean attributes.
['allowFullScreen', 'async',
// Note: there is a special case that prevents it from being written to the DOM
// on the client side because the browsers are inconsistent. Instead we call focus().
'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless',
// Microdata
'itemScope'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null);
} // attributeNamespace
);

// These are the few React props that we set as DOM properties
// rather than attributes. These are all booleans.
['checked',
// Note: `option.selected` is not updated if `select.multiple` is
// disabled with `removeAttribute`. We have special logic for handling this.
'multiple', 'muted', 'selected'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
  name, // attributeName
  null);
} // attributeNamespace
);

// These are HTML attributes that are "overloaded booleans": they behave like
// booleans, but can also accept a string value.
['capture', 'download'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
  name, // attributeName
  null);
} // attributeNamespace
);

// These are HTML attributes that must be positive numbers.
['cols', 'rows', 'size', 'span'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
  name, // attributeName
  null);
} // attributeNamespace
);

// These are HTML attributes that must be numbers.
['rowSpan', 'start'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null);
} // attributeNamespace
);

var CAMELIZE = /[\-\:]([a-z])/g;
var capitalize = function (token) {
  return token[1].toUpperCase();
};

// This is a list of all SVG attributes that need special casing, namespacing,
// or boolean value assignment. Regular attributes that just accept strings
// and have the same names are omitted, just like in the HTML whitelist.
// Some of these attributes can be hard to find. This list was created by
// scrapping the MDN documentation.
['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, null);
} // attributeNamespace
);

// String SVG attributes with the xlink namespace.
['xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/1999/xlink');
});

// String SVG attributes with the xml namespace.
['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/XML/1998/namespace');
});

// These attribute exists both in HTML and SVG.
// The attribute name is case-sensitive in SVG so we can't just use
// the React name like we do for attributes that exist only in HTML.
['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null);
} // attributeNamespace
);

/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */
function getValueForProperty(node, name, expected, propertyInfo) {
  {
    if (propertyInfo.mustUseProperty) {
      var propertyName = propertyInfo.propertyName;

      return node[propertyName];
    } else {
      var attributeName = propertyInfo.attributeName;

      var stringValue = null;

      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
        if (node.hasAttribute(attributeName)) {
          var value = node.getAttribute(attributeName);
          if (value === '') {
            return true;
          }
          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return value;
          }
          if (value === '' + expected) {
            return expected;
          }
          return value;
        }
      } else if (node.hasAttribute(attributeName)) {
        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
          // We had an attribute but shouldn't have had one, so read it
          // for the error message.
          return node.getAttribute(attributeName);
        }
        if (propertyInfo.type === BOOLEAN) {
          // If this was a boolean, it doesn't matter what the value is
          // the fact that we have it is the same as the expected.
          return expected;
        }
        // Even if this property uses a namespace we use getAttribute
        // because we assume its namespaced name is the same as our config.
        // To use getAttributeNS we need the local name which we don't have
        // in our config atm.
        stringValue = node.getAttribute(attributeName);
      }

      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
        return stringValue === null ? expected : stringValue;
      } else if (stringValue === '' + expected) {
        return expected;
      } else {
        return stringValue;
      }
    }
  }
}

/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */
function getValueForAttribute(node, name, expected) {
  {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (!node.hasAttribute(name)) {
      return expected === undefined ? undefined : null;
    }
    var value = node.getAttribute(name);
    if (value === '' + expected) {
      return expected;
    }
    return value;
  }
}

/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */
function setValueForProperty(node, name, value, isCustomComponentTag) {
  var propertyInfo = getPropertyInfo(name);
  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
    return;
  }
  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
    value = null;
  }
  // If the prop isn't in the special list, treat it as a simple attribute.
  if (isCustomComponentTag || propertyInfo === null) {
    if (isAttributeNameSafe(name)) {
      var _attributeName = name;
      if (value === null) {
        node.removeAttribute(_attributeName);
      } else {
        node.setAttribute(_attributeName, '' + value);
      }
    }
    return;
  }
  var mustUseProperty = propertyInfo.mustUseProperty;

  if (mustUseProperty) {
    var propertyName = propertyInfo.propertyName;

    if (value === null) {
      var type = propertyInfo.type;

      node[propertyName] = type === BOOLEAN ? false : '';
    } else {
      // Contrary to `setAttribute`, object properties are properly
      // `toString`ed by IE8/9.
      node[propertyName] = value;
    }
    return;
  }
  // The rest are treated as attributes with special cases.
  var attributeName = propertyInfo.attributeName,
      attributeNamespace = propertyInfo.attributeNamespace;

  if (value === null) {
    node.removeAttribute(attributeName);
  } else {
    var _type = propertyInfo.type;

    var attributeValue = void 0;
    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
      attributeValue = '';
    } else {
      // `setAttribute` with objects becomes only `[object]` in IE8/9,
      // ('' + value) makes it output the correct toString()-value.
      attributeValue = '' + value;
    }
    if (attributeNamespace) {
      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
    } else {
      node.setAttribute(attributeName, attributeValue);
    }
  }
}

// Flow does not allow string concatenation of most non-string types. To work
// around this limitation, we use an opaque type that can only be obtained by
// passing the value through getToStringValue first.
function toString(value) {
  return '' + value;
}

function getToStringValue(value) {
  switch (typeof value) {
    case 'boolean':
    case 'number':
    case 'object':
    case 'string':
    case 'undefined':
      return value;
    default:
      // function, symbol are assigned as empty strings
      return '';
  }
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret$1 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var printWarning = function() {};

{
  var ReactPropTypesSecret = ReactPropTypesSecret_1;
  var loggedTypeFailures = {};

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );

        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

var checkPropTypes_1 = checkPropTypes;

var ReactDebugCurrentFrame$1 = null;

var ReactControlledValuePropTypes = {
  checkPropTypes: null
};

{
  ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

  var hasReadOnlyValue = {
    button: true,
    checkbox: true,
    image: true,
    hidden: true,
    radio: true,
    reset: true,
    submit: true
  };

  var propTypes = {
    value: function (props, propName, componentName) {
      if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null) {
        return null;
      }
      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    },
    checked: function (props, propName, componentName) {
      if (props.onChange || props.readOnly || props.disabled || props[propName] == null) {
        return null;
      }
      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }
  };

  /**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */
  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
    checkPropTypes_1(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$1.getStackAddendum);
  };
}

var enableUserTimingAPI = true;

// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
var debugRenderPhaseSideEffects = false;

// In some cases, StrictMode should also double-render lifecycles.
// This can be confusing for tests though,
// And it can be bad for performance in production.
// This feature flag can be used to control the behavior:
var debugRenderPhaseSideEffectsForStrictMode = true;

// To preserve the "Pause on caught exceptions" behavior of the debugger, we
// replay the begin phase of a failed component inside invokeGuardedCallback.
var replayFailedUnitOfWorkWithInvokeGuardedCallback = true;

// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
var warnAboutDeprecatedLifecycles = false;

// Gather advanced timing metrics for Profiler subtrees.
var enableProfilerTimer = true;

// Trace which interactions trigger each commit.
var enableSchedulerTracing = true;

// Only used in www builds.
var enableSuspenseServerRenderer = false; // TODO: true? Here it might just be false.

// Only used in www builds.


// Only used in www builds.


// React Fire: prevent the value and checked attributes from syncing
// with their related DOM properties
var disableInputAttributeSyncing = false;

// These APIs will no longer be "unstable" in the upcoming 16.7 release,
// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.
var enableStableConcurrentModeAPIs = false;

var warnAboutShorthandPropertyCollision = false;

// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */

function getHostProps(element, props) {
  var node = element;
  var checked = props.checked;

  var hostProps = _assign({}, props, {
    defaultChecked: undefined,
    defaultValue: undefined,
    value: undefined,
    checked: checked != null ? checked : node._wrapperState.initialChecked
  });

  return hostProps;
}

function initWrapperState(element, props) {
  {
    ReactControlledValuePropTypes.checkPropTypes('input', props);

    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
      warning$1(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
      didWarnCheckedDefaultChecked = true;
    }
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      warning$1(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
      didWarnValueDefaultValue = true;
    }
  }

  var node = element;
  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;

  node._wrapperState = {
    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
    controlled: isControlled(props)
  };
}

function updateChecked(element, props) {
  var node = element;
  var checked = props.checked;
  if (checked != null) {
    setValueForProperty(node, 'checked', checked, false);
  }
}

function updateWrapper(element, props) {
  var node = element;
  {
    var _controlled = isControlled(props);

    if (!node._wrapperState.controlled && _controlled && !didWarnUncontrolledToControlled) {
      warning$1(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
      didWarnUncontrolledToControlled = true;
    }
    if (node._wrapperState.controlled && !_controlled && !didWarnControlledToUncontrolled) {
      warning$1(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
      didWarnControlledToUncontrolled = true;
    }
  }

  updateChecked(element, props);

  var value = getToStringValue(props.value);
  var type = props.type;

  if (value != null) {
    if (type === 'number') {
      if (value === 0 && node.value === '' ||
      // We explicitly want to coerce to number here if possible.
      // eslint-disable-next-line
      node.value != value) {
        node.value = toString(value);
      }
    } else if (node.value !== toString(value)) {
      node.value = toString(value);
    }
  } else if (type === 'submit' || type === 'reset') {
    // Submit/reset inputs need the attribute removed completely to avoid
    // blank-text buttons.
    node.removeAttribute('value');
    return;
  }

  if (disableInputAttributeSyncing) {
    // When not syncing the value attribute, React only assigns a new value
    // whenever the defaultValue React prop has changed. When not present,
    // React does nothing
    if (props.hasOwnProperty('defaultValue')) {
      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
    }
  } else {
    // When syncing the value attribute, the value comes from a cascade of
    // properties:
    //  1. The value React property
    //  2. The defaultValue React property
    //  3. Otherwise there should be no change
    if (props.hasOwnProperty('value')) {
      setDefaultValue(node, props.type, value);
    } else if (props.hasOwnProperty('defaultValue')) {
      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
    }
  }

  if (disableInputAttributeSyncing) {
    // When not syncing the checked attribute, the attribute is directly
    // controllable from the defaultValue React property. It needs to be
    // updated as new props come in.
    if (props.defaultChecked == null) {
      node.removeAttribute('checked');
    } else {
      node.defaultChecked = !!props.defaultChecked;
    }
  } else {
    // When syncing the checked attribute, it only changes when it needs
    // to be removed, such as transitioning from a checkbox into a text input
    if (props.checked == null && props.defaultChecked != null) {
      node.defaultChecked = !!props.defaultChecked;
    }
  }
}

function postMountWrapper(element, props, isHydrating) {
  var node = element;

  // Do not assign value if it is already set. This prevents user text input
  // from being lost during SSR hydration.
  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
    var type = props.type;
    var isButton = type === 'submit' || type === 'reset';

    // Avoid setting value attribute on submit/reset inputs as it overrides the
    // default value provided by the browser. See: #12872
    if (isButton && (props.value === undefined || props.value === null)) {
      return;
    }

    var _initialValue = toString(node._wrapperState.initialValue);

    // Do not assign value if it is already set. This prevents user text input
    // from being lost during SSR hydration.
    if (!isHydrating) {
      if (disableInputAttributeSyncing) {
        var value = getToStringValue(props.value);

        // When not syncing the value attribute, the value property points
        // directly to the React prop. Only assign it if it exists.
        if (value != null) {
          // Always assign on buttons so that it is possible to assign an
          // empty string to clear button text.
          //
          // Otherwise, do not re-assign the value property if is empty. This
          // potentially avoids a DOM write and prevents Firefox (~60.0.1) from
          // prematurely marking required inputs as invalid. Equality is compared
          // to the current value in case the browser provided value is not an
          // empty string.
          if (isButton || value !== node.value) {
            node.value = toString(value);
          }
        }
      } else {
        // When syncing the value attribute, the value property should use
        // the wrapperState._initialValue property. This uses:
        //
        //   1. The value React property when present
        //   2. The defaultValue React property when present
        //   3. An empty string
        if (_initialValue !== node.value) {
          node.value = _initialValue;
        }
      }
    }

    if (disableInputAttributeSyncing) {
      // When not syncing the value attribute, assign the value attribute
      // directly from the defaultValue React property (when present)
      var defaultValue = getToStringValue(props.defaultValue);
      if (defaultValue != null) {
        node.defaultValue = toString(defaultValue);
      }
    } else {
      // Otherwise, the value attribute is synchronized to the property,
      // so we assign defaultValue to the same thing as the value property
      // assignment step above.
      node.defaultValue = _initialValue;
    }
  }

  // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
  // this is needed to work around a chrome bug where setting defaultChecked
  // will sometimes influence the value of checked (even after detachment).
  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
  // We need to temporarily unset name to avoid disrupting radio button groups.
  var name = node.name;
  if (name !== '') {
    node.name = '';
  }

  if (disableInputAttributeSyncing) {
    // When not syncing the checked attribute, the checked property
    // never gets assigned. It must be manually set. We don't want
    // to do this when hydrating so that existing user input isn't
    // modified
    if (!isHydrating) {
      updateChecked(element, props);
    }

    // Only assign the checked attribute if it is defined. This saves
    // a DOM write when controlling the checked attribute isn't needed
    // (text inputs, submit/reset)
    if (props.hasOwnProperty('defaultChecked')) {
      node.defaultChecked = !node.defaultChecked;
      node.defaultChecked = !!props.defaultChecked;
    }
  } else {
    // When syncing the checked attribute, both the checked property and
    // attribute are assigned at the same time using defaultChecked. This uses:
    //
    //   1. The checked React property when present
    //   2. The defaultChecked React property when present
    //   3. Otherwise, false
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !!node._wrapperState.initialChecked;
  }

  if (name !== '') {
    node.name = name;
  }
}

function restoreControlledState(element, props) {
  var node = element;
  updateWrapper(node, props);
  updateNamedCousins(node, props);
}

function updateNamedCousins(rootNode, props) {
  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form. It might not even be in the
    // document. Let's just use the local `querySelectorAll` to ensure we don't
    // miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
      !otherProps ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0;

      // We need update the tracked value on the named cousin since the value
      // was changed but the input saw no event or value set
      updateValueIfChanged(otherNode);

      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      updateWrapper(otherNode, otherProps);
    }
  }
}

// In Chrome, assigning defaultValue to certain input types triggers input validation.
// For number inputs, the display value loses trailing decimal points. For email inputs,
// Chrome raises "The specified value <x> is not a valid email address".
//
// Here we check to see if the defaultValue has actually changed, avoiding these problems
// when the user is inputting text
//
// https://github.com/facebook/react/issues/7253
function setDefaultValue(node, type, value) {
  if (
  // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
  type !== 'number' || node.ownerDocument.activeElement !== node) {
    if (value == null) {
      node.defaultValue = toString(node._wrapperState.initialValue);
    } else if (node.defaultValue !== toString(value)) {
      node.defaultValue = toString(value);
    }
  }
}

var eventTypes$1 = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
  }
};

function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
  event.type = 'change';
  // Flag this event loop as needing state restore.
  enqueueStateRestore(target);
  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  runEventsInBatch(event);
}

function getInstIfValueChanged(targetInst) {
  var targetNode = getNodeFromInstance$1(targetInst);
  if (updateValueIfChanged(targetNode)) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_CHANGE) {
    return targetInst;
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
}

/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onpropertychange', handlePropertyChange);
  activeElement = null;
  activeElementInst = null;
}

/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  if (getInstIfValueChanged(activeElementInst)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
  if (topLevelType === TOP_FOCUS) {
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === TOP_BLUR) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
  if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst);
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_CLICK) {
    return getInstIfValueChanged(targetInst);
  }
}

function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
    return getInstIfValueChanged(targetInst);
  }
}

function handleControlledInputBlur(node) {
  var state = node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  if (!disableInputAttributeSyncing) {
    // If controlled, assign the value attribute to the current value on blur
    setDefaultValue(node, 'number', node.value);
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {
  eventTypes: eventTypes$1,

  _isInputEventSupported: isInputEventSupported,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

    var getTargetInstFunc = void 0,
        handleEventFunc = void 0;
    if (shouldUseChangeEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForChangeEvent;
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst);
      if (inst) {
        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }

    // When blurring, set the value attribute for number inputs
    if (topLevelType === TOP_BLUR) {
      handleControlledInputBlur(targetNode);
    }
  }
};

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

var SyntheticUIEvent = SyntheticEvent.extend({
  view: null,
  detail: null
});

var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
};

// Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
// getModifierState. If getModifierState is not supported, we map it to a set of
// modifier keys exposed by the event. In this case, Lock-keys are not supported.
/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

var previousScreenX = 0;
var previousScreenY = 0;
// Use flags to signal movementX/Y has already been set
var isMovementXSet = false;
var isMovementYSet = false;

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var SyntheticMouseEvent = SyntheticUIEvent.extend({
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  pageX: null,
  pageY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: null,
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  movementX: function (event) {
    if ('movementX' in event) {
      return event.movementX;
    }

    var screenX = previousScreenX;
    previousScreenX = event.screenX;

    if (!isMovementXSet) {
      isMovementXSet = true;
      return 0;
    }

    return event.type === 'mousemove' ? event.screenX - screenX : 0;
  },
  movementY: function (event) {
    if ('movementY' in event) {
      return event.movementY;
    }

    var screenY = previousScreenY;
    previousScreenY = event.screenY;

    if (!isMovementYSet) {
      isMovementYSet = true;
      return 0;
    }

    return event.type === 'mousemove' ? event.screenY - screenY : 0;
  }
});

/**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */
var SyntheticPointerEvent = SyntheticMouseEvent.extend({
  pointerId: null,
  width: null,
  height: null,
  pressure: null,
  tangentialPressure: null,
  tiltX: null,
  tiltY: null,
  twist: null,
  pointerType: null,
  isPrimary: null
});

var eventTypes$2 = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
  },
  pointerEnter: {
    registrationName: 'onPointerEnter',
    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
  },
  pointerLeave: {
    registrationName: 'onPointerLeave',
    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
  }
};

var EnterLeaveEventPlugin = {
  eventTypes: eventTypes$2,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
    var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

    if (isOverEvent && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }

    if (!isOutEvent && !isOverEvent) {
      // Must not be a mouse or pointer in or out - ignoring.
      return null;
    }

    var win = void 0;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from = void 0;
    var to = void 0;
    if (isOutEvent) {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var eventInterface = void 0,
        leaveEventType = void 0,
        enterEventType = void 0,
        eventTypePrefix = void 0;

    if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
      eventInterface = SyntheticMouseEvent;
      leaveEventType = eventTypes$2.mouseLeave;
      enterEventType = eventTypes$2.mouseEnter;
      eventTypePrefix = 'mouse';
    } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
      eventInterface = SyntheticPointerEvent;
      leaveEventType = eventTypes$2.pointerLeave;
      enterEventType = eventTypes$2.pointerEnter;
      eventTypePrefix = 'pointer';
    }

    var fromNode = from == null ? win : getNodeFromInstance$1(from);
    var toNode = to == null ? win : getNodeFromInstance$1(to);

    var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
    leave.type = eventTypePrefix + 'leave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
    enter.type = eventTypePrefix + 'enter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }
};

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
  ;
}

var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty$1.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */

/**
 * This API should be called `delete` but we'd have to make sure to always
 * transform these to strings for IE support. When this transform is fully
 * supported we can rename it.
 */


function get(key) {
  return key._reactInternalFiber;
}

function has(key) {
  return key._reactInternalFiber !== undefined;
}

function set(key, value) {
  key._reactInternalFiber = value;
}

// Don't change these two values. They're used by React Dev Tools.
var NoEffect = /*              */0;
var PerformedWork = /*         */1;

// You can change the rest (and add more).
var Placement = /*             */2;
var Update = /*                */4;
var PlacementAndUpdate = /*    */6;
var Deletion = /*              */8;
var ContentReset = /*          */16;
var Callback = /*              */32;
var DidCapture = /*            */64;
var Ref = /*                   */128;
var Snapshot = /*              */256;
var Passive = /*               */512;

// Passive & Update & Callback & Ref & Snapshot
var LifecycleEffectMask = /*   */932;

// Union of all host effects
var HostEffectMask = /*        */1023;

var Incomplete = /*            */1024;
var ShouldCapture = /*         */2048;

var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;

var MOUNTING = 1;
var MOUNTED = 2;
var UNMOUNTED = 3;

function isFiberMountedImpl(fiber) {
  var node = fiber;
  if (!fiber.alternate) {
    // If there is no alternate, this might be a new tree that isn't inserted
    // yet. If it is, then it will have a pending insertion effect on it.
    if ((node.effectTag & Placement) !== NoEffect) {
      return MOUNTING;
    }
    while (node.return) {
      node = node.return;
      if ((node.effectTag & Placement) !== NoEffect) {
        return MOUNTING;
      }
    }
  } else {
    while (node.return) {
      node = node.return;
    }
  }
  if (node.tag === HostRoot) {
    // TODO: Check if this was a nested HostRoot when used with
    // renderContainerIntoSubtree.
    return MOUNTED;
  }
  // If we didn't hit the root, that means that we're in an disconnected tree
  // that has been unmounted.
  return UNMOUNTED;
}

function isFiberMounted(fiber) {
  return isFiberMountedImpl(fiber) === MOUNTED;
}

function isMounted(component) {
  {
    var owner = ReactCurrentOwner$1.current;
    if (owner !== null && owner.tag === ClassComponent) {
      var ownerFiber = owner;
      var instance = ownerFiber.stateNode;
      !instance._warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component') : void 0;
      instance._warnedAboutRefsInRender = true;
    }
  }

  var fiber = get(component);
  if (!fiber) {
    return false;
  }
  return isFiberMountedImpl(fiber) === MOUNTED;
}

function assertIsMounted(fiber) {
  !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
}

function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;
  if (!alternate) {
    // If there is no alternate, then we only need to check if it is mounted.
    var state = isFiberMountedImpl(fiber);
    !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
    if (state === MOUNTING) {
      return null;
    }
    return fiber;
  }
  // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.
  var a = fiber;
  var b = alternate;
  while (true) {
    var parentA = a.return;
    var parentB = parentA ? parentA.alternate : null;
    if (!parentA || !parentB) {
      // We're at the root.
      break;
    }

    // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.
    if (parentA.child === parentB.child) {
      var child = parentA.child;
      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          assertIsMounted(parentA);
          return fiber;
        }
        if (child === b) {
          // We've determined that B is the current branch.
          assertIsMounted(parentA);
          return alternate;
        }
        child = child.sibling;
      }
      // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.
      invariant(false, 'Unable to find node on an unmounted component.');
    }

    if (a.return !== b.return) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;
      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }
        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }
        _child = _child.sibling;
      }
      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;
        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }
          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }
          _child = _child.sibling;
        }
        !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
      }
    }

    !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  }
  // If the root is not a host container, we're in a disconnected tree. I.e.
  // unmounted.
  !(a.tag === HostRoot) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  }
  // Otherwise B has to be current branch.
  return alternate;
}

function findCurrentHostFiber(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);
  if (!currentParent) {
    return null;
  }

  // Next we'll drill down this component to find the first HostComponent/Text.
  var node = currentParent;
  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child) {
      node.child.return = node;
      node = node.child;
      continue;
    }
    if (node === currentParent) {
      return null;
    }
    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
  // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable
  return null;
}

function findCurrentHostFiberWithNoPortals(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);
  if (!currentParent) {
    return null;
  }

  // Next we'll drill down this component to find the first HostComponent/Text.
  var node = currentParent;
  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child && node.tag !== HostPortal) {
      node.child.return = node;
      node = node.child;
      continue;
    }
    if (node === currentParent) {
      return null;
    }
    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
  // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable
  return null;
}

function addEventBubbleListener(element, eventType, listener) {
  element.addEventListener(eventType, listener, false);
}

function addEventCaptureListener(element, eventType, listener) {
  element.addEventListener(eventType, listener, true);
}

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var SyntheticAnimationEvent = SyntheticEvent.extend({
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var SyntheticClipboardEvent = SyntheticEvent.extend({
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
});

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var SyntheticFocusEvent = SyntheticUIEvent.extend({
  relatedTarget: null
});

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode = void 0;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
  // report Enter as charCode 10 when ctrl is pressed.
  if (charCode === 10) {
    charCode = 13;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  '8': 'Backspace',
  '9': 'Tab',
  '12': 'Clear',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '19': 'Pause',
  '20': 'CapsLock',
  '27': 'Escape',
  '32': ' ',
  '33': 'PageUp',
  '34': 'PageDown',
  '35': 'End',
  '36': 'Home',
  '37': 'ArrowLeft',
  '38': 'ArrowUp',
  '39': 'ArrowRight',
  '40': 'ArrowDown',
  '45': 'Insert',
  '46': 'Delete',
  '112': 'F1',
  '113': 'F2',
  '114': 'F3',
  '115': 'F4',
  '116': 'F5',
  '117': 'F6',
  '118': 'F7',
  '119': 'F8',
  '120': 'F9',
  '121': 'F10',
  '122': 'F11',
  '123': 'F12',
  '144': 'NumLock',
  '145': 'ScrollLock',
  '224': 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
});

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var SyntheticDragEvent = SyntheticMouseEvent.extend({
  dataTransfer: null
});

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var SyntheticTouchEvent = SyntheticUIEvent.extend({
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var SyntheticTransitionEvent = SyntheticEvent.extend({
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
});

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var SyntheticWheelEvent = SyntheticMouseEvent.extend({
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },

  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
});

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: [TOP_ABORT],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = new Map([
 *   [TOP_ABORT, { sameConfig }],
 * ]);
 */

var interactiveEventTypeNames = [[TOP_BLUR, 'blur'], [TOP_CANCEL, 'cancel'], [TOP_CLICK, 'click'], [TOP_CLOSE, 'close'], [TOP_CONTEXT_MENU, 'contextMenu'], [TOP_COPY, 'copy'], [TOP_CUT, 'cut'], [TOP_AUX_CLICK, 'auxClick'], [TOP_DOUBLE_CLICK, 'doubleClick'], [TOP_DRAG_END, 'dragEnd'], [TOP_DRAG_START, 'dragStart'], [TOP_DROP, 'drop'], [TOP_FOCUS, 'focus'], [TOP_INPUT, 'input'], [TOP_INVALID, 'invalid'], [TOP_KEY_DOWN, 'keyDown'], [TOP_KEY_PRESS, 'keyPress'], [TOP_KEY_UP, 'keyUp'], [TOP_MOUSE_DOWN, 'mouseDown'], [TOP_MOUSE_UP, 'mouseUp'], [TOP_PASTE, 'paste'], [TOP_PAUSE, 'pause'], [TOP_PLAY, 'play'], [TOP_POINTER_CANCEL, 'pointerCancel'], [TOP_POINTER_DOWN, 'pointerDown'], [TOP_POINTER_UP, 'pointerUp'], [TOP_RATE_CHANGE, 'rateChange'], [TOP_RESET, 'reset'], [TOP_SEEKED, 'seeked'], [TOP_SUBMIT, 'submit'], [TOP_TOUCH_CANCEL, 'touchCancel'], [TOP_TOUCH_END, 'touchEnd'], [TOP_TOUCH_START, 'touchStart'], [TOP_VOLUME_CHANGE, 'volumeChange']];
var nonInteractiveEventTypeNames = [[TOP_ABORT, 'abort'], [TOP_ANIMATION_END, 'animationEnd'], [TOP_ANIMATION_ITERATION, 'animationIteration'], [TOP_ANIMATION_START, 'animationStart'], [TOP_CAN_PLAY, 'canPlay'], [TOP_CAN_PLAY_THROUGH, 'canPlayThrough'], [TOP_DRAG, 'drag'], [TOP_DRAG_ENTER, 'dragEnter'], [TOP_DRAG_EXIT, 'dragExit'], [TOP_DRAG_LEAVE, 'dragLeave'], [TOP_DRAG_OVER, 'dragOver'], [TOP_DURATION_CHANGE, 'durationChange'], [TOP_EMPTIED, 'emptied'], [TOP_ENCRYPTED, 'encrypted'], [TOP_ENDED, 'ended'], [TOP_ERROR, 'error'], [TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture'], [TOP_LOAD, 'load'], [TOP_LOADED_DATA, 'loadedData'], [TOP_LOADED_METADATA, 'loadedMetadata'], [TOP_LOAD_START, 'loadStart'], [TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture'], [TOP_MOUSE_MOVE, 'mouseMove'], [TOP_MOUSE_OUT, 'mouseOut'], [TOP_MOUSE_OVER, 'mouseOver'], [TOP_PLAYING, 'playing'], [TOP_POINTER_MOVE, 'pointerMove'], [TOP_POINTER_OUT, 'pointerOut'], [TOP_POINTER_OVER, 'pointerOver'], [TOP_PROGRESS, 'progress'], [TOP_SCROLL, 'scroll'], [TOP_SEEKING, 'seeking'], [TOP_STALLED, 'stalled'], [TOP_SUSPEND, 'suspend'], [TOP_TIME_UPDATE, 'timeUpdate'], [TOP_TOGGLE, 'toggle'], [TOP_TOUCH_MOVE, 'touchMove'], [TOP_TRANSITION_END, 'transitionEnd'], [TOP_WAITING, 'waiting'], [TOP_WHEEL, 'wheel']];

var eventTypes$4 = {};
var topLevelEventsToDispatchConfig = {};

function addEventTypeNameToConfig(_ref, isInteractive) {
  var topEvent = _ref[0],
      event = _ref[1];

  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent],
    isInteractive: isInteractive
  };
  eventTypes$4[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
}

interactiveEventTypeNames.forEach(function (eventTuple) {
  addEventTypeNameToConfig(eventTuple, true);
});
nonInteractiveEventTypeNames.forEach(function (eventTuple) {
  addEventTypeNameToConfig(eventTuple, false);
});

// Only used in DEV for exhaustiveness validation.
var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];

var SimpleEventPlugin = {
  eventTypes: eventTypes$4,

  isInteractiveTopLevelEventType: function (topLevelType) {
    var config = topLevelEventsToDispatchConfig[topLevelType];
    return config !== undefined && config.isInteractive === true;
  },


  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor = void 0;
    switch (topLevelType) {
      case TOP_KEY_PRESS:
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case TOP_KEY_DOWN:
      case TOP_KEY_UP:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case TOP_BLUR:
      case TOP_FOCUS:
        EventConstructor = SyntheticFocusEvent;
        break;
      case TOP_CLICK:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case TOP_AUX_CLICK:
      case TOP_DOUBLE_CLICK:
      case TOP_MOUSE_DOWN:
      case TOP_MOUSE_MOVE:
      case TOP_MOUSE_UP:
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case TOP_MOUSE_OUT:
      case TOP_MOUSE_OVER:
      case TOP_CONTEXT_MENU:
        EventConstructor = SyntheticMouseEvent;
        break;
      case TOP_DRAG:
      case TOP_DRAG_END:
      case TOP_DRAG_ENTER:
      case TOP_DRAG_EXIT:
      case TOP_DRAG_LEAVE:
      case TOP_DRAG_OVER:
      case TOP_DRAG_START:
      case TOP_DROP:
        EventConstructor = SyntheticDragEvent;
        break;
      case TOP_TOUCH_CANCEL:
      case TOP_TOUCH_END:
      case TOP_TOUCH_MOVE:
      case TOP_TOUCH_START:
        EventConstructor = SyntheticTouchEvent;
        break;
      case TOP_ANIMATION_END:
      case TOP_ANIMATION_ITERATION:
      case TOP_ANIMATION_START:
        EventConstructor = SyntheticAnimationEvent;
        break;
      case TOP_TRANSITION_END:
        EventConstructor = SyntheticTransitionEvent;
        break;
      case TOP_SCROLL:
        EventConstructor = SyntheticUIEvent;
        break;
      case TOP_WHEEL:
        EventConstructor = SyntheticWheelEvent;
        break;
      case TOP_COPY:
      case TOP_CUT:
      case TOP_PASTE:
        EventConstructor = SyntheticClipboardEvent;
        break;
      case TOP_GOT_POINTER_CAPTURE:
      case TOP_LOST_POINTER_CAPTURE:
      case TOP_POINTER_CANCEL:
      case TOP_POINTER_DOWN:
      case TOP_POINTER_MOVE:
      case TOP_POINTER_OUT:
      case TOP_POINTER_OVER:
      case TOP_POINTER_UP:
        EventConstructor = SyntheticPointerEvent;
        break;
      default:
        {
          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
            warningWithoutStack$1(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
          }
        }
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
    }
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    accumulateTwoPhaseDispatches(event);
    return event;
  }
};

var isInteractiveTopLevelEventType = SimpleEventPlugin.isInteractiveTopLevelEventType;


var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
var callbackBookkeepingPool = [];

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findRootContainerNode(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst.return) {
    inst = inst.return;
  }
  if (inst.tag !== HostRoot) {
    // This can happen if we're in a detached tree.
    return null;
  }
  return inst.stateNode.containerInfo;
}

// Used to store ancestor hierarchy in top level callback
function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
  if (callbackBookkeepingPool.length) {
    var instance = callbackBookkeepingPool.pop();
    instance.topLevelType = topLevelType;
    instance.nativeEvent = nativeEvent;
    instance.targetInst = targetInst;
    return instance;
  }
  return {
    topLevelType: topLevelType,
    nativeEvent: nativeEvent,
    targetInst: targetInst,
    ancestors: []
  };
}

function releaseTopLevelCallbackBookKeeping(instance) {
  instance.topLevelType = null;
  instance.nativeEvent = null;
  instance.targetInst = null;
  instance.ancestors.length = 0;
  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
    callbackBookkeepingPool.push(instance);
  }
}

function handleTopLevel(bookKeeping) {
  var targetInst = bookKeeping.targetInst;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    if (!ancestor) {
      bookKeeping.ancestors.push(ancestor);
      break;
    }
    var root = findRootContainerNode(ancestor);
    if (!root) {
      break;
    }
    bookKeeping.ancestors.push(ancestor);
    ancestor = getClosestInstanceFromNode(root);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    runExtractedEventsInBatch(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

// TODO: can we stop exporting these?
var _enabled = true;

function setEnabled(enabled) {
  _enabled = !!enabled;
}

function isEnabled() {
  return _enabled;
}

/**
 * Traps top-level events by using event bubbling.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */
function trapBubbledEvent(topLevelType, element) {
  if (!element) {
    return null;
  }
  var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;

  addEventBubbleListener(element, getRawEventName(topLevelType),
  // Check if interactive and wrap in interactiveUpdates
  dispatch.bind(null, topLevelType));
}

/**
 * Traps a top-level event by using event capturing.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */
function trapCapturedEvent(topLevelType, element) {
  if (!element) {
    return null;
  }
  var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;

  addEventCaptureListener(element, getRawEventName(topLevelType),
  // Check if interactive and wrap in interactiveUpdates
  dispatch.bind(null, topLevelType));
}

function dispatchInteractiveEvent(topLevelType, nativeEvent) {
  interactiveUpdates(dispatchEvent, topLevelType, nativeEvent);
}

function dispatchEvent(topLevelType, nativeEvent) {
  if (!_enabled) {
    return;
  }

  var nativeEventTarget = getEventTarget(nativeEvent);
  var targetInst = getClosestInstanceFromNode(nativeEventTarget);
  if (targetInst !== null && typeof targetInst.tag === 'number' && !isFiberMounted(targetInst)) {
    // If we get an event (ex: img onload) before committing that
    // component's mount, ignore it for now (that is, treat it as if it was an
    // event on a non-React tree). We might also consider queueing events and
    // dispatching them after the mount.
    targetInst = null;
  }

  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);

  try {
    // Event queue being processed in the same cycle allows
    // `preventDefault`.
    batchedUpdates(handleTopLevel, bookKeeping);
  } finally {
    releaseTopLevelCallbackBookKeeping(bookKeeping);
  }
}

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactDOMEventListener, which is injected and can therefore support
 *    pluggable event sources. This is the only work that occurs in the main
 *    thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var reactTopListenersCounter = 0;

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * We listen for bubbled touch events on the document object.
 *
 * Firefox v8.01 (and possibly others) exhibited strange behavior when
 * mounting `onmousemove` events at some node that was not the document
 * element. The symptoms were that if your mouse is not moving over something
 * contained within that mount point (for example on the background) the
 * top-level listeners for `onmousemove` won't be called. However, if you
 * register the `mousemove` on the document object, then it will of course
 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
 * top-level listeners to the document object only, at least for these
 * movement types of events and possibly all events.
 *
 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
 *
 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
 * they bubble to document.
 *
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @param {object} mountAt Container where to mount the listener
 */
function listenTo(registrationName, mountAt) {
  var isListening = getListeningForDocument(mountAt);
  var dependencies = registrationNameDependencies[registrationName];

  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];
    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
      switch (dependency) {
        case TOP_SCROLL:
          trapCapturedEvent(TOP_SCROLL, mountAt);
          break;
        case TOP_FOCUS:
        case TOP_BLUR:
          trapCapturedEvent(TOP_FOCUS, mountAt);
          trapCapturedEvent(TOP_BLUR, mountAt);
          // We set the flag for a single dependency later in this function,
          // but this ensures we mark both as attached rather than just one.
          isListening[TOP_BLUR] = true;
          isListening[TOP_FOCUS] = true;
          break;
        case TOP_CANCEL:
        case TOP_CLOSE:
          if (isEventSupported(getRawEventName(dependency))) {
            trapCapturedEvent(dependency, mountAt);
          }
          break;
        case TOP_INVALID:
        case TOP_SUBMIT:
        case TOP_RESET:
          // We listen to them on the target DOM elements.
          // Some of them bubble so we don't want them to fire twice.
          break;
        default:
          // By default, listen on the top level to all non-media events.
          // Media events don't bubble so adding the listener wouldn't do anything.
          var isMediaEvent = mediaEventTypes.indexOf(dependency) !== -1;
          if (!isMediaEvent) {
            trapBubbledEvent(dependency, mountAt);
          }
          break;
      }
      isListening[dependency] = true;
    }
  }
}

function isListeningToAllDependencies(registrationName, mountAt) {
  var isListening = getListeningForDocument(mountAt);
  var dependencies = registrationNameDependencies[registrationName];
  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];
    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
      return false;
    }
  }
  return true;
}

function getActiveElement(doc) {
  doc = doc || (typeof document !== 'undefined' ? document : undefined);
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === TEXT_NODE) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */
function getOffsets(outerNode) {
  var ownerDocument = outerNode.ownerDocument;

  var win = ownerDocument && ownerDocument.defaultView || window;
  var selection = win.getSelection && win.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode,
      anchorOffset = selection.anchorOffset,
      focusNode = selection.focusNode,
      focusOffset = selection.focusOffset;

  // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
  // expose properties, triggering a "Permission denied error" if any of its
  // properties are accessed. The only seemingly possible way to avoid erroring
  // is to access a property that typically works for non-anonymous divs and
  // catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

  try {
    /* eslint-disable no-unused-expressions */
    anchorNode.nodeType;
    focusNode.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
}

/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */
function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
  var length = 0;
  var start = -1;
  var end = -1;
  var indexWithinAnchor = 0;
  var indexWithinFocus = 0;
  var node = outerNode;
  var parentNode = null;

  outer: while (true) {
    var next = null;

    while (true) {
      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
        start = length + anchorOffset;
      }
      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
        end = length + focusOffset;
      }

      if (node.nodeType === TEXT_NODE) {
        length += node.nodeValue.length;
      }

      if ((next = node.firstChild) === null) {
        break;
      }
      // Moving from `node` to its first child `next`.
      parentNode = node;
      node = next;
    }

    while (true) {
      if (node === outerNode) {
        // If `outerNode` has children, this is always the second time visiting
        // it. If it has no children, this is still the first loop, and the only
        // valid selection is anchorNode and focusNode both equal to this node
        // and both offsets 0, in which case we will have handled above.
        break outer;
      }
      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
        start = length;
      }
      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
        end = length;
      }
      if ((next = node.nextSibling) !== null) {
        break;
      }
      node = parentNode;
      parentNode = node.parentNode;
    }

    // Moving from `node` to its next sibling `next`.
    node = next;
  }

  if (start === -1 || end === -1) {
    // This should never happen. (Would happen if the anchor/focus nodes aren't
    // actually inside the passed-in node.)
    return null;
  }

  return {
    start: start,
    end: end
  };
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setOffsets(node, offsets) {
  var doc = node.ownerDocument || document;
  var win = doc && doc.defaultView || window;

  // Edge fails with "Object expected" in some scenarios.
  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
  // fails when pasting 100+ items)
  if (!win.getSelection) {
    return;
  }

  var selection = win.getSelection();
  var length = node.textContent.length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
      return;
    }
    var range = doc.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

function isTextNode(node) {
  return node && node.nodeType === TEXT_NODE;
}

function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

function isInDocument(node) {
  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
}

function isSameOriginFrame(iframe) {
  try {
    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
    // to throw, e.g. if it has a cross-origin src attribute.
    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
    // iframe.contentDocument.defaultView;
    // A safety way is to access one of the cross origin properties: Window or Location
    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl

    return typeof iframe.contentWindow.location.href === 'string';
  } catch (err) {
    return false;
  }
}

function getActiveElementDeep() {
  var win = window;
  var element = getActiveElement();
  while (element instanceof win.HTMLIFrameElement) {
    if (isSameOriginFrame(element)) {
      win = element.contentWindow;
    } else {
      return element;
    }
    element = getActiveElement(win.document);
  }
  return element;
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

/**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */
function hasSelectionCapabilities(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
}

function getSelectionInformation() {
  var focusedElem = getActiveElementDeep();
  return {
    focusedElem: focusedElem,
    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
  };
}

/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */
function restoreSelection(priorSelectionInformation) {
  var curFocusedElem = getActiveElementDeep();
  var priorFocusedElem = priorSelectionInformation.focusedElem;
  var priorSelectionRange = priorSelectionInformation.selectionRange;
  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
      setSelection(priorFocusedElem, priorSelectionRange);
    }

    // Focusing a node can change the scroll position, which is undesirable
    var ancestors = [];
    var ancestor = priorFocusedElem;
    while (ancestor = ancestor.parentNode) {
      if (ancestor.nodeType === ELEMENT_NODE) {
        ancestors.push({
          element: ancestor,
          left: ancestor.scrollLeft,
          top: ancestor.scrollTop
        });
      }
    }

    if (typeof priorFocusedElem.focus === 'function') {
      priorFocusedElem.focus();
    }

    for (var i = 0; i < ancestors.length; i++) {
      var info = ancestors[i];
      info.element.scrollLeft = info.left;
      info.element.scrollTop = info.top;
    }
  }
}

/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */
function getSelection$1(input) {
  var selection = void 0;

  if ('selectionStart' in input) {
    // Modern browser with input or textarea.
    selection = {
      start: input.selectionStart,
      end: input.selectionEnd
    };
  } else {
    // Content editable or old IE textarea.
    selection = getOffsets(input);
  }

  return selection || { start: 0, end: 0 };
}

/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */
function setSelection(input, offsets) {
  var start = offsets.start,
      end = offsets.end;

  if (end === undefined) {
    end = start;
  }

  if ('selectionStart' in input) {
    input.selectionStart = start;
    input.selectionEnd = Math.min(end, input.value.length);
  } else {
    setOffsets(input, offsets);
  }
}

var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes$3 = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
  }
};

var activeElement$1 = null;
var activeElementInst$1 = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else {
    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
    var selection = win.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  }
}

/**
 * Get document associated with the event target.
 *
 * @param {object} nativeEventTarget
 * @return {Document}
 */
function getEventTargetDocument(eventTarget) {
  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  var doc = getEventTargetDocument(nativeEventTarget);

  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement$1);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement$1;

    accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {
  eventTypes: eventTypes$3,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var doc = getEventTargetDocument(nativeEventTarget);
    // Track whether all listeners exists for this plugin. If none exist, we do
    // not extract events. See #3639.
    if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
      return null;
    }

    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case TOP_FOCUS:
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement$1 = targetNode;
          activeElementInst$1 = targetInst;
          lastSelection = null;
        }
        break;
      case TOP_BLUR:
        activeElement$1 = null;
        activeElementInst$1 = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case TOP_MOUSE_DOWN:
        mouseDown = true;
        break;
      case TOP_CONTEXT_MENU:
      case TOP_MOUSE_UP:
      case TOP_DRAG_END:
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case TOP_SELECTION_CHANGE:
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case TOP_KEY_DOWN:
      case TOP_KEY_UP:
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  }
};

/**
 * Inject modules for resolving DOM hierarchy and plugin ordering.
 */
injection.injectEventPluginOrder(DOMEventPluginOrder);
setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);

/**
 * Some important event plugins included by default (without having to require
 * them).
 */
injection.injectEventPluginsByName({
  SimpleEventPlugin: SimpleEventPlugin,
  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
  ChangeEventPlugin: ChangeEventPlugin,
  SelectEventPlugin: SelectEventPlugin,
  BeforeInputEventPlugin: BeforeInputEventPlugin
});

var didWarnSelectedSetOnOption = false;
var didWarnInvalidChild = false;

function flattenChildren(children) {
  var content = '';

  // Flatten children. We'll warn if they are invalid
  // during validateProps() which runs for hydration too.
  // Note that this would throw on non-element objects.
  // Elements are stringified (which is normally irrelevant
  // but matters for <fbt>).
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    content += child;
    // Note: we don't warn about invalid children here.
    // Instead, this is done separately below so that
    // it happens during the hydration codepath too.
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */

function validateProps(element, props) {
  {
    // This mirrors the codepath above, but runs for hydration too.
    // Warn about invalid children here so that client and hydration are consistent.
    // TODO: this seems like it could cause a DEV-only throw for hydration
    // if children contains a non-element object. We should try to avoid that.
    if (typeof props.children === 'object' && props.children !== null) {
      React.Children.forEach(props.children, function (child) {
        if (child == null) {
          return;
        }
        if (typeof child === 'string' || typeof child === 'number') {
          return;
        }
        if (typeof child.type !== 'string') {
          return;
        }
        if (!didWarnInvalidChild) {
          didWarnInvalidChild = true;
          warning$1(false, 'Only strings and numbers are supported as <option> children.');
        }
      });
    }

    // TODO: Remove support for `selected` in <option>.
    if (props.selected != null && !didWarnSelectedSetOnOption) {
      warning$1(false, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
      didWarnSelectedSetOnOption = true;
    }
  }
}

function postMountWrapper$1(element, props) {
  // value="" should make a value attribute (#6219)
  if (props.value != null) {
    element.setAttribute('value', toString(getToStringValue(props.value)));
  }
}

function getHostProps$1(element, props) {
  var hostProps = _assign({ children: undefined }, props);
  var content = flattenChildren(props.children);

  if (content) {
    hostProps.children = content;
  }

  return hostProps;
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnValueDefaultValue$1 = void 0;

{
  didWarnValueDefaultValue$1 = false;
}

function getDeclarationErrorAddendum() {
  var ownerName = getCurrentFiberOwnerNameInDevOrNull();
  if (ownerName) {
    return '\n\nCheck the render method of `' + ownerName + '`.';
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 */
function checkSelectPropTypes(props) {
  ReactControlledValuePropTypes.checkPropTypes('select', props);

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
      warning$1(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
    } else if (!props.multiple && isArray) {
      warning$1(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
    }
  }
}

function updateOptions(node, multiple, propValue, setDefaultSelected) {
  var options = node.options;

  if (multiple) {
    var selectedValues = propValue;
    var selectedValue = {};
    for (var i = 0; i < selectedValues.length; i++) {
      // Prefix to avoid chaos with special keys.
      selectedValue['$' + selectedValues[i]] = true;
    }
    for (var _i = 0; _i < options.length; _i++) {
      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
      if (options[_i].selected !== selected) {
        options[_i].selected = selected;
      }
      if (selected && setDefaultSelected) {
        options[_i].defaultSelected = true;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    var _selectedValue = toString(getToStringValue(propValue));
    var defaultSelected = null;
    for (var _i2 = 0; _i2 < options.length; _i2++) {
      if (options[_i2].value === _selectedValue) {
        options[_i2].selected = true;
        if (setDefaultSelected) {
          options[_i2].defaultSelected = true;
        }
        return;
      }
      if (defaultSelected === null && !options[_i2].disabled) {
        defaultSelected = options[_i2];
      }
    }
    if (defaultSelected !== null) {
      defaultSelected.selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */

function getHostProps$2(element, props) {
  return _assign({}, props, {
    value: undefined
  });
}

function initWrapperState$1(element, props) {
  var node = element;
  {
    checkSelectPropTypes(props);
  }

  node._wrapperState = {
    wasMultiple: !!props.multiple
  };

  {
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
      warning$1(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
      didWarnValueDefaultValue$1 = true;
    }
  }
}

function postMountWrapper$2(element, props) {
  var node = element;
  node.multiple = !!props.multiple;
  var value = props.value;
  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (props.defaultValue != null) {
    updateOptions(node, !!props.multiple, props.defaultValue, true);
  }
}

function postUpdateWrapper(element, props) {
  var node = element;
  var wasMultiple = node._wrapperState.wasMultiple;
  node._wrapperState.wasMultiple = !!props.multiple;

  var value = props.value;
  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (wasMultiple !== !!props.multiple) {
    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
    if (props.defaultValue != null) {
      updateOptions(node, !!props.multiple, props.defaultValue, true);
    } else {
      // Revert the select back to its default unselected state.
      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
    }
  }
}

function restoreControlledState$2(element, props) {
  var node = element;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  }
}

var didWarnValDefaultVal = false;

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */

function getHostProps$3(element, props) {
  var node = element;
  !(props.dangerouslySetInnerHTML == null) ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0;

  // Always set children to the same thing. In IE9, the selection range will
  // get reset if `textContent` is mutated.  We could add a check in setTextContent
  // to only set the value if/when the value differs from the node value (which would
  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
  // solution. The value can be a boolean or object so that's why it's forced
  // to be a string.
  var hostProps = _assign({}, props, {
    value: undefined,
    defaultValue: undefined,
    children: toString(node._wrapperState.initialValue)
  });

  return hostProps;
}

function initWrapperState$2(element, props) {
  var node = element;
  {
    ReactControlledValuePropTypes.checkPropTypes('textarea', props);
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
      warning$1(false, '%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
      didWarnValDefaultVal = true;
    }
  }

  var initialValue = props.value;

  // Only bother fetching default value if we're going to use it
  if (initialValue == null) {
    var defaultValue = props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = props.children;
    if (children != null) {
      {
        warning$1(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
      }
      !(defaultValue == null) ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;
      if (Array.isArray(children)) {
        !(children.length <= 1) ? invariant(false, '<textarea> can only have at most one child.') : void 0;
        children = children[0];
      }

      defaultValue = children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    initialValue = defaultValue;
  }

  node._wrapperState = {
    initialValue: getToStringValue(initialValue)
  };
}

function updateWrapper$1(element, props) {
  var node = element;
  var value = getToStringValue(props.value);
  var defaultValue = getToStringValue(props.defaultValue);
  if (value != null) {
    // Cast `value` to a string to ensure the value is set correctly. While
    // browsers typically do this as necessary, jsdom doesn't.
    var newValue = toString(value);
    // To avoid side effects (such as losing text selection), only set value if changed
    if (newValue !== node.value) {
      node.value = newValue;
    }
    if (props.defaultValue == null && node.defaultValue !== newValue) {
      node.defaultValue = newValue;
    }
  }
  if (defaultValue != null) {
    node.defaultValue = toString(defaultValue);
  }
}

function postMountWrapper$3(element, props) {
  var node = element;
  // This is in postMount because we need access to the DOM node, which is not
  // available until after the component has mounted.
  var textContent = node.textContent;

  // Only set node.value if textContent is equal to the expected
  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
  // will populate textContent as well.
  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
  if (textContent === node._wrapperState.initialValue) {
    node.value = textContent;
  }
}

function restoreControlledState$3(element, props) {
  // DOM component is still mounted; update
  updateWrapper$1(element, props);
}

var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';

var Namespaces = {
  html: HTML_NAMESPACE$1,
  mathml: MATH_NAMESPACE,
  svg: SVG_NAMESPACE
};

// Assumes there is no parent namespace.
function getIntrinsicNamespace(type) {
  switch (type) {
    case 'svg':
      return SVG_NAMESPACE;
    case 'math':
      return MATH_NAMESPACE;
    default:
      return HTML_NAMESPACE$1;
  }
}

function getChildNamespace(parentNamespace, type) {
  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
    // No (or default) parent namespace: potential entry point.
    return getIntrinsicNamespace(type);
  }
  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
    // We're leaving SVG.
    return HTML_NAMESPACE$1;
  }
  // By default, pass namespace below.
  return parentNamespace;
}

/* globals MSApp */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */
var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer = void 0;

/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node

  if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

/**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

// List derived from Gecko source code:
// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
var shorthandToLonghand = {
  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
  columns: ['columnCount', 'columnWidth'],
  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
  flexFlow: ['flexDirection', 'flexWrap'],
  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
  gap: ['columnGap', 'rowGap'],
  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
  gridColumnGap: ['columnGap'],
  gridGap: ['columnGap', 'rowGap'],
  gridRow: ['gridRowEnd', 'gridRowStart'],
  gridRowGap: ['rowGap'],
  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
  marker: ['markerEnd', 'markerMid', 'markerStart'],
  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
  maskPosition: ['maskPositionX', 'maskPositionY'],
  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
  overflow: ['overflowX', 'overflowY'],
  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
  placeContent: ['alignContent', 'justifyContent'],
  placeItems: ['alignItems', 'justifyItems'],
  placeSelf: ['alignSelf', 'justifySelf'],
  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
  wordWrap: ['overflowWrap']
};

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
  }

  return ('' + value).trim();
}

var uppercasePattern = /([A-Z])/g;
var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */
function hyphenateStyleName(name) {
  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
}

var warnValidStyle = function () {};

{
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
  var msPattern$1 = /^-ms-/;
  var hyphenPattern = /-(.)/g;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;
  var warnedForInfinityValue = false;

  var camelize = function (string) {
    return string.replace(hyphenPattern, function (_, character) {
      return character.toUpperCase();
    });
  };

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    warning$1(false, 'Unsupported style property %s. Did you mean %s?', name,
    // As Andi Smith suggests
    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
    // is converted to lowercase `ms`.
    camelize(name.replace(msPattern$1, 'ms-')));
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    warning$1(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    warning$1(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
  };

  var warnStyleValueIsNaN = function (name, value) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    warning$1(false, '`NaN` is an invalid value for the `%s` css style property.', name);
  };

  var warnStyleValueIsInfinity = function (name, value) {
    if (warnedForInfinityValue) {
      return;
    }

    warnedForInfinityValue = true;
    warning$1(false, '`Infinity` is an invalid value for the `%s` css style property.', name);
  };

  warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }

    if (typeof value === 'number') {
      if (isNaN(value)) {
        warnStyleValueIsNaN(name, value);
      } else if (!isFinite(value)) {
        warnStyleValueIsInfinity(name, value);
      }
    }
  };
}

var warnValidStyle$1 = warnValidStyle;

/**
 * Operations for dealing with CSS properties.
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */
function createDangerousStringForStyles(styles) {
  {
    var serialized = '';
    var delimiter = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        var isCustomProperty = styleName.indexOf('--') === 0;
        serialized += delimiter + hyphenateStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);

        delimiter = ';';
      }
    }
    return serialized || null;
  }
}

/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */
function setValueForStyles(node, styles) {
  var style = node.style;
  for (var styleName in styles) {
    if (!styles.hasOwnProperty(styleName)) {
      continue;
    }
    var isCustomProperty = styleName.indexOf('--') === 0;
    {
      if (!isCustomProperty) {
        warnValidStyle$1(styleName, styles[styleName]);
      }
    }
    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
    if (styleName === 'float') {
      styleName = 'cssFloat';
    }
    if (isCustomProperty) {
      style.setProperty(styleName, styleValue);
    } else {
      style[styleName] = styleValue;
    }
  }
}

function isValueEmpty(value) {
  return value == null || typeof value === 'boolean' || value === '';
}

/**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */
function expandShorthandMap(styles) {
  var expanded = {};
  for (var key in styles) {
    var longhands = shorthandToLonghand[key] || [key];
    for (var i = 0; i < longhands.length; i++) {
      expanded[longhands[i]] = key;
    }
  }
  return expanded;
}

/**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */
function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
  if (!warnAboutShorthandPropertyCollision) {
    return;
  }

  if (!nextStyles) {
    return;
  }

  var expandedUpdates = expandShorthandMap(styleUpdates);
  var expandedStyles = expandShorthandMap(nextStyles);
  var warnedAbout = {};
  for (var key in expandedUpdates) {
    var originalKey = expandedUpdates[key];
    var correctOriginalKey = expandedStyles[key];
    if (correctOriginalKey && originalKey !== correctOriginalKey) {
      var warningKey = originalKey + ',' + correctOriginalKey;
      if (warnedAbout[warningKey]) {
        continue;
      }
      warnedAbout[warningKey] = true;
      warning$1(false, '%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
    }
  }
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

// TODO: We can remove this if we add invariantWithStack()
// or add stack by default to invariants where possible.
var HTML$1 = '__html';

var ReactDebugCurrentFrame$2 = null;
{
  ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
}

function assertValidProps(tag, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
  }
  {
    !(props.suppressContentEditableWarning || !props.contentEditable || props.children == null) ? warning$1(false, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
  }
  !(props.style == null || typeof props.style === 'object') ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
}

function isCustomComponent(tagName, props) {
  if (tagName.indexOf('-') === -1) {
    return typeof props.is === 'string';
  }
  switch (tagName) {
    // These are reserved SVG and MathML elements.
    // We don't mind this whitelist too much because we expect it to never grow.
    // The alternative is to track the namespace in a few places which is convoluted.
    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
    case 'annotation-xml':
    case 'color-profile':
    case 'font-face':
    case 'font-face-src':
    case 'font-face-uri':
    case 'font-face-format':
    case 'font-face-name':
    case 'missing-glyph':
      return false;
    default:
      return true;
  }
}

// When adding attributes to the HTML or SVG whitelist, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames = {
  // HTML
  accept: 'accept',
  acceptcharset: 'acceptCharset',
  'accept-charset': 'acceptCharset',
  accesskey: 'accessKey',
  action: 'action',
  allowfullscreen: 'allowFullScreen',
  alt: 'alt',
  as: 'as',
  async: 'async',
  autocapitalize: 'autoCapitalize',
  autocomplete: 'autoComplete',
  autocorrect: 'autoCorrect',
  autofocus: 'autoFocus',
  autoplay: 'autoPlay',
  autosave: 'autoSave',
  capture: 'capture',
  cellpadding: 'cellPadding',
  cellspacing: 'cellSpacing',
  challenge: 'challenge',
  charset: 'charSet',
  checked: 'checked',
  children: 'children',
  cite: 'cite',
  class: 'className',
  classid: 'classID',
  classname: 'className',
  cols: 'cols',
  colspan: 'colSpan',
  content: 'content',
  contenteditable: 'contentEditable',
  contextmenu: 'contextMenu',
  controls: 'controls',
  controlslist: 'controlsList',
  coords: 'coords',
  crossorigin: 'crossOrigin',
  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
  data: 'data',
  datetime: 'dateTime',
  default: 'default',
  defaultchecked: 'defaultChecked',
  defaultvalue: 'defaultValue',
  defer: 'defer',
  dir: 'dir',
  disabled: 'disabled',
  download: 'download',
  draggable: 'draggable',
  enctype: 'encType',
  for: 'htmlFor',
  form: 'form',
  formmethod: 'formMethod',
  formaction: 'formAction',
  formenctype: 'formEncType',
  formnovalidate: 'formNoValidate',
  formtarget: 'formTarget',
  frameborder: 'frameBorder',
  headers: 'headers',
  height: 'height',
  hidden: 'hidden',
  high: 'high',
  href: 'href',
  hreflang: 'hrefLang',
  htmlfor: 'htmlFor',
  httpequiv: 'httpEquiv',
  'http-equiv': 'httpEquiv',
  icon: 'icon',
  id: 'id',
  innerhtml: 'innerHTML',
  inputmode: 'inputMode',
  integrity: 'integrity',
  is: 'is',
  itemid: 'itemID',
  itemprop: 'itemProp',
  itemref: 'itemRef',
  itemscope: 'itemScope',
  itemtype: 'itemType',
  keyparams: 'keyParams',
  keytype: 'keyType',
  kind: 'kind',
  label: 'label',
  lang: 'lang',
  list: 'list',
  loop: 'loop',
  low: 'low',
  manifest: 'manifest',
  marginwidth: 'marginWidth',
  marginheight: 'marginHeight',
  max: 'max',
  maxlength: 'maxLength',
  media: 'media',
  mediagroup: 'mediaGroup',
  method: 'method',
  min: 'min',
  minlength: 'minLength',
  multiple: 'multiple',
  muted: 'muted',
  name: 'name',
  nomodule: 'noModule',
  nonce: 'nonce',
  novalidate: 'noValidate',
  open: 'open',
  optimum: 'optimum',
  pattern: 'pattern',
  placeholder: 'placeholder',
  playsinline: 'playsInline',
  poster: 'poster',
  preload: 'preload',
  profile: 'profile',
  radiogroup: 'radioGroup',
  readonly: 'readOnly',
  referrerpolicy: 'referrerPolicy',
  rel: 'rel',
  required: 'required',
  reversed: 'reversed',
  role: 'role',
  rows: 'rows',
  rowspan: 'rowSpan',
  sandbox: 'sandbox',
  scope: 'scope',
  scoped: 'scoped',
  scrolling: 'scrolling',
  seamless: 'seamless',
  selected: 'selected',
  shape: 'shape',
  size: 'size',
  sizes: 'sizes',
  span: 'span',
  spellcheck: 'spellCheck',
  src: 'src',
  srcdoc: 'srcDoc',
  srclang: 'srcLang',
  srcset: 'srcSet',
  start: 'start',
  step: 'step',
  style: 'style',
  summary: 'summary',
  tabindex: 'tabIndex',
  target: 'target',
  title: 'title',
  type: 'type',
  usemap: 'useMap',
  value: 'value',
  width: 'width',
  wmode: 'wmode',
  wrap: 'wrap',

  // SVG
  about: 'about',
  accentheight: 'accentHeight',
  'accent-height': 'accentHeight',
  accumulate: 'accumulate',
  additive: 'additive',
  alignmentbaseline: 'alignmentBaseline',
  'alignment-baseline': 'alignmentBaseline',
  allowreorder: 'allowReorder',
  alphabetic: 'alphabetic',
  amplitude: 'amplitude',
  arabicform: 'arabicForm',
  'arabic-form': 'arabicForm',
  ascent: 'ascent',
  attributename: 'attributeName',
  attributetype: 'attributeType',
  autoreverse: 'autoReverse',
  azimuth: 'azimuth',
  basefrequency: 'baseFrequency',
  baselineshift: 'baselineShift',
  'baseline-shift': 'baselineShift',
  baseprofile: 'baseProfile',
  bbox: 'bbox',
  begin: 'begin',
  bias: 'bias',
  by: 'by',
  calcmode: 'calcMode',
  capheight: 'capHeight',
  'cap-height': 'capHeight',
  clip: 'clip',
  clippath: 'clipPath',
  'clip-path': 'clipPath',
  clippathunits: 'clipPathUnits',
  cliprule: 'clipRule',
  'clip-rule': 'clipRule',
  color: 'color',
  colorinterpolation: 'colorInterpolation',
  'color-interpolation': 'colorInterpolation',
  colorinterpolationfilters: 'colorInterpolationFilters',
  'color-interpolation-filters': 'colorInterpolationFilters',
  colorprofile: 'colorProfile',
  'color-profile': 'colorProfile',
  colorrendering: 'colorRendering',
  'color-rendering': 'colorRendering',
  contentscripttype: 'contentScriptType',
  contentstyletype: 'contentStyleType',
  cursor: 'cursor',
  cx: 'cx',
  cy: 'cy',
  d: 'd',
  datatype: 'datatype',
  decelerate: 'decelerate',
  descent: 'descent',
  diffuseconstant: 'diffuseConstant',
  direction: 'direction',
  display: 'display',
  divisor: 'divisor',
  dominantbaseline: 'dominantBaseline',
  'dominant-baseline': 'dominantBaseline',
  dur: 'dur',
  dx: 'dx',
  dy: 'dy',
  edgemode: 'edgeMode',
  elevation: 'elevation',
  enablebackground: 'enableBackground',
  'enable-background': 'enableBackground',
  end: 'end',
  exponent: 'exponent',
  externalresourcesrequired: 'externalResourcesRequired',
  fill: 'fill',
  fillopacity: 'fillOpacity',
  'fill-opacity': 'fillOpacity',
  fillrule: 'fillRule',
  'fill-rule': 'fillRule',
  filter: 'filter',
  filterres: 'filterRes',
  filterunits: 'filterUnits',
  floodopacity: 'floodOpacity',
  'flood-opacity': 'floodOpacity',
  floodcolor: 'floodColor',
  'flood-color': 'floodColor',
  focusable: 'focusable',
  fontfamily: 'fontFamily',
  'font-family': 'fontFamily',
  fontsize: 'fontSize',
  'font-size': 'fontSize',
  fontsizeadjust: 'fontSizeAdjust',
  'font-size-adjust': 'fontSizeAdjust',
  fontstretch: 'fontStretch',
  'font-stretch': 'fontStretch',
  fontstyle: 'fontStyle',
  'font-style': 'fontStyle',
  fontvariant: 'fontVariant',
  'font-variant': 'fontVariant',
  fontweight: 'fontWeight',
  'font-weight': 'fontWeight',
  format: 'format',
  from: 'from',
  fx: 'fx',
  fy: 'fy',
  g1: 'g1',
  g2: 'g2',
  glyphname: 'glyphName',
  'glyph-name': 'glyphName',
  glyphorientationhorizontal: 'glyphOrientationHorizontal',
  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
  glyphorientationvertical: 'glyphOrientationVertical',
  'glyph-orientation-vertical': 'glyphOrientationVertical',
  glyphref: 'glyphRef',
  gradienttransform: 'gradientTransform',
  gradientunits: 'gradientUnits',
  hanging: 'hanging',
  horizadvx: 'horizAdvX',
  'horiz-adv-x': 'horizAdvX',
  horizoriginx: 'horizOriginX',
  'horiz-origin-x': 'horizOriginX',
  ideographic: 'ideographic',
  imagerendering: 'imageRendering',
  'image-rendering': 'imageRendering',
  in2: 'in2',
  in: 'in',
  inlist: 'inlist',
  intercept: 'intercept',
  k1: 'k1',
  k2: 'k2',
  k3: 'k3',
  k4: 'k4',
  k: 'k',
  kernelmatrix: 'kernelMatrix',
  kernelunitlength: 'kernelUnitLength',
  kerning: 'kerning',
  keypoints: 'keyPoints',
  keysplines: 'keySplines',
  keytimes: 'keyTimes',
  lengthadjust: 'lengthAdjust',
  letterspacing: 'letterSpacing',
  'letter-spacing': 'letterSpacing',
  lightingcolor: 'lightingColor',
  'lighting-color': 'lightingColor',
  limitingconeangle: 'limitingConeAngle',
  local: 'local',
  markerend: 'markerEnd',
  'marker-end': 'markerEnd',
  markerheight: 'markerHeight',
  markermid: 'markerMid',
  'marker-mid': 'markerMid',
  markerstart: 'markerStart',
  'marker-start': 'markerStart',
  markerunits: 'markerUnits',
  markerwidth: 'markerWidth',
  mask: 'mask',
  maskcontentunits: 'maskContentUnits',
  maskunits: 'maskUnits',
  mathematical: 'mathematical',
  mode: 'mode',
  numoctaves: 'numOctaves',
  offset: 'offset',
  opacity: 'opacity',
  operator: 'operator',
  order: 'order',
  orient: 'orient',
  orientation: 'orientation',
  origin: 'origin',
  overflow: 'overflow',
  overlineposition: 'overlinePosition',
  'overline-position': 'overlinePosition',
  overlinethickness: 'overlineThickness',
  'overline-thickness': 'overlineThickness',
  paintorder: 'paintOrder',
  'paint-order': 'paintOrder',
  panose1: 'panose1',
  'panose-1': 'panose1',
  pathlength: 'pathLength',
  patterncontentunits: 'patternContentUnits',
  patterntransform: 'patternTransform',
  patternunits: 'patternUnits',
  pointerevents: 'pointerEvents',
  'pointer-events': 'pointerEvents',
  points: 'points',
  pointsatx: 'pointsAtX',
  pointsaty: 'pointsAtY',
  pointsatz: 'pointsAtZ',
  prefix: 'prefix',
  preservealpha: 'preserveAlpha',
  preserveaspectratio: 'preserveAspectRatio',
  primitiveunits: 'primitiveUnits',
  property: 'property',
  r: 'r',
  radius: 'radius',
  refx: 'refX',
  refy: 'refY',
  renderingintent: 'renderingIntent',
  'rendering-intent': 'renderingIntent',
  repeatcount: 'repeatCount',
  repeatdur: 'repeatDur',
  requiredextensions: 'requiredExtensions',
  requiredfeatures: 'requiredFeatures',
  resource: 'resource',
  restart: 'restart',
  result: 'result',
  results: 'results',
  rotate: 'rotate',
  rx: 'rx',
  ry: 'ry',
  scale: 'scale',
  security: 'security',
  seed: 'seed',
  shaperendering: 'shapeRendering',
  'shape-rendering': 'shapeRendering',
  slope: 'slope',
  spacing: 'spacing',
  specularconstant: 'specularConstant',
  specularexponent: 'specularExponent',
  speed: 'speed',
  spreadmethod: 'spreadMethod',
  startoffset: 'startOffset',
  stddeviation: 'stdDeviation',
  stemh: 'stemh',
  stemv: 'stemv',
  stitchtiles: 'stitchTiles',
  stopcolor: 'stopColor',
  'stop-color': 'stopColor',
  stopopacity: 'stopOpacity',
  'stop-opacity': 'stopOpacity',
  strikethroughposition: 'strikethroughPosition',
  'strikethrough-position': 'strikethroughPosition',
  strikethroughthickness: 'strikethroughThickness',
  'strikethrough-thickness': 'strikethroughThickness',
  string: 'string',
  stroke: 'stroke',
  strokedasharray: 'strokeDasharray',
  'stroke-dasharray': 'strokeDasharray',
  strokedashoffset: 'strokeDashoffset',
  'stroke-dashoffset': 'strokeDashoffset',
  strokelinecap: 'strokeLinecap',
  'stroke-linecap': 'strokeLinecap',
  strokelinejoin: 'strokeLinejoin',
  'stroke-linejoin': 'strokeLinejoin',
  strokemiterlimit: 'strokeMiterlimit',
  'stroke-miterlimit': 'strokeMiterlimit',
  strokewidth: 'strokeWidth',
  'stroke-width': 'strokeWidth',
  strokeopacity: 'strokeOpacity',
  'stroke-opacity': 'strokeOpacity',
  suppresscontenteditablewarning: 'suppressContentEditableWarning',
  suppresshydrationwarning: 'suppressHydrationWarning',
  surfacescale: 'surfaceScale',
  systemlanguage: 'systemLanguage',
  tablevalues: 'tableValues',
  targetx: 'targetX',
  targety: 'targetY',
  textanchor: 'textAnchor',
  'text-anchor': 'textAnchor',
  textdecoration: 'textDecoration',
  'text-decoration': 'textDecoration',
  textlength: 'textLength',
  textrendering: 'textRendering',
  'text-rendering': 'textRendering',
  to: 'to',
  transform: 'transform',
  typeof: 'typeof',
  u1: 'u1',
  u2: 'u2',
  underlineposition: 'underlinePosition',
  'underline-position': 'underlinePosition',
  underlinethickness: 'underlineThickness',
  'underline-thickness': 'underlineThickness',
  unicode: 'unicode',
  unicodebidi: 'unicodeBidi',
  'unicode-bidi': 'unicodeBidi',
  unicoderange: 'unicodeRange',
  'unicode-range': 'unicodeRange',
  unitsperem: 'unitsPerEm',
  'units-per-em': 'unitsPerEm',
  unselectable: 'unselectable',
  valphabetic: 'vAlphabetic',
  'v-alphabetic': 'vAlphabetic',
  values: 'values',
  vectoreffect: 'vectorEffect',
  'vector-effect': 'vectorEffect',
  version: 'version',
  vertadvy: 'vertAdvY',
  'vert-adv-y': 'vertAdvY',
  vertoriginx: 'vertOriginX',
  'vert-origin-x': 'vertOriginX',
  vertoriginy: 'vertOriginY',
  'vert-origin-y': 'vertOriginY',
  vhanging: 'vHanging',
  'v-hanging': 'vHanging',
  videographic: 'vIdeographic',
  'v-ideographic': 'vIdeographic',
  viewbox: 'viewBox',
  viewtarget: 'viewTarget',
  visibility: 'visibility',
  vmathematical: 'vMathematical',
  'v-mathematical': 'vMathematical',
  vocab: 'vocab',
  widths: 'widths',
  wordspacing: 'wordSpacing',
  'word-spacing': 'wordSpacing',
  writingmode: 'writingMode',
  'writing-mode': 'writingMode',
  x1: 'x1',
  x2: 'x2',
  x: 'x',
  xchannelselector: 'xChannelSelector',
  xheight: 'xHeight',
  'x-height': 'xHeight',
  xlinkactuate: 'xlinkActuate',
  'xlink:actuate': 'xlinkActuate',
  xlinkarcrole: 'xlinkArcrole',
  'xlink:arcrole': 'xlinkArcrole',
  xlinkhref: 'xlinkHref',
  'xlink:href': 'xlinkHref',
  xlinkrole: 'xlinkRole',
  'xlink:role': 'xlinkRole',
  xlinkshow: 'xlinkShow',
  'xlink:show': 'xlinkShow',
  xlinktitle: 'xlinkTitle',
  'xlink:title': 'xlinkTitle',
  xlinktype: 'xlinkType',
  'xlink:type': 'xlinkType',
  xmlbase: 'xmlBase',
  'xml:base': 'xmlBase',
  xmllang: 'xmlLang',
  'xml:lang': 'xmlLang',
  xmlns: 'xmlns',
  'xml:space': 'xmlSpace',
  xmlnsxlink: 'xmlnsXlink',
  'xmlns:xlink': 'xmlnsXlink',
  xmlspace: 'xmlSpace',
  y1: 'y1',
  y2: 'y2',
  y: 'y',
  ychannelselector: 'yChannelSelector',
  z: 'z',
  zoomandpan: 'zoomAndPan'
};

var ariaProperties = {
  'aria-current': 0, // state
  'aria-details': 0,
  'aria-disabled': 0, // state
  'aria-hidden': 0, // state
  'aria-invalid': 0, // state
  'aria-keyshortcuts': 0,
  'aria-label': 0,
  'aria-roledescription': 0,
  // Widget Attributes
  'aria-autocomplete': 0,
  'aria-checked': 0,
  'aria-expanded': 0,
  'aria-haspopup': 0,
  'aria-level': 0,
  'aria-modal': 0,
  'aria-multiline': 0,
  'aria-multiselectable': 0,
  'aria-orientation': 0,
  'aria-placeholder': 0,
  'aria-pressed': 0,
  'aria-readonly': 0,
  'aria-required': 0,
  'aria-selected': 0,
  'aria-sort': 0,
  'aria-valuemax': 0,
  'aria-valuemin': 0,
  'aria-valuenow': 0,
  'aria-valuetext': 0,
  // Live Region Attributes
  'aria-atomic': 0,
  'aria-busy': 0,
  'aria-live': 0,
  'aria-relevant': 0,
  // Drag-and-Drop Attributes
  'aria-dropeffect': 0,
  'aria-grabbed': 0,
  // Relationship Attributes
  'aria-activedescendant': 0,
  'aria-colcount': 0,
  'aria-colindex': 0,
  'aria-colspan': 0,
  'aria-controls': 0,
  'aria-describedby': 0,
  'aria-errormessage': 0,
  'aria-flowto': 0,
  'aria-labelledby': 0,
  'aria-owns': 0,
  'aria-posinset': 0,
  'aria-rowcount': 0,
  'aria-rowindex': 0,
  'aria-rowspan': 0,
  'aria-setsize': 0
};

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

var hasOwnProperty$2 = Object.prototype.hasOwnProperty;

function validateProperty(tagName, name) {
  if (hasOwnProperty$2.call(warnedProperties, name) && warnedProperties[name]) {
    return true;
  }

  if (rARIACamel.test(name)) {
    var ariaName = 'aria-' + name.slice(4).toLowerCase();
    var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (correctName == null) {
      warning$1(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
      warnedProperties[name] = true;
      return true;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== correctName) {
      warning$1(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
      warnedProperties[name] = true;
      return true;
    }
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== standardName) {
      warning$1(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(type, props) {
  var invalidProps = [];

  for (var key in props) {
    var isValid = validateProperty(type, key);
    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
    warning$1(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
  } else if (invalidProps.length > 1) {
    warning$1(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
  }
}

function validateProperties(type, props) {
  if (isCustomComponent(type, props)) {
    return;
  }
  warnInvalidARIAProps(type, props);
}

var didWarnValueNull = false;

function validateProperties$1(type, props) {
  if (type !== 'input' && type !== 'textarea' && type !== 'select') {
    return;
  }

  if (props != null && props.value === null && !didWarnValueNull) {
    didWarnValueNull = true;
    if (type === 'select' && props.multiple) {
      warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
    } else {
      warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
    }
  }
}

var validateProperty$1 = function () {};

{
  var warnedProperties$1 = {};
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  var EVENT_NAME_REGEX = /^on./;
  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

  validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
      return true;
    }

    var lowerCasedName = name.toLowerCase();
    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
      warning$1(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
      warnedProperties$1[name] = true;
      return true;
    }

    // We can't rely on the event system being injected on the server.
    if (canUseEventSystem) {
      if (registrationNameModules.hasOwnProperty(name)) {
        return true;
      }
      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
      if (registrationName != null) {
        warning$1(false, 'Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
        warnedProperties$1[name] = true;
        return true;
      }
      if (EVENT_NAME_REGEX.test(name)) {
        warning$1(false, 'Unknown event handler property `%s`. It will be ignored.', name);
        warnedProperties$1[name] = true;
        return true;
      }
    } else if (EVENT_NAME_REGEX.test(name)) {
      // If no event plugins have been injected, we are in a server environment.
      // So we can't tell if the event name is correct for sure, but we can filter
      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
      if (INVALID_EVENT_NAME_REGEX.test(name)) {
        warning$1(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
      }
      warnedProperties$1[name] = true;
      return true;
    }

    // Let the ARIA attribute hook validate ARIA attributes
    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
      return true;
    }

    if (lowerCasedName === 'innerhtml') {
      warning$1(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'aria') {
      warning$1(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
      warning$1(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);
      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'number' && isNaN(value)) {
      warning$1(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
      warnedProperties$1[name] = true;
      return true;
    }

    var propertyInfo = getPropertyInfo(name);
    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;

    // Known attributes should match the casing specified in the property config.
    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      var standardName = possibleStandardNames[lowerCasedName];
      if (standardName !== name) {
        warning$1(false, 'Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
        warnedProperties$1[name] = true;
        return true;
      }
    } else if (!isReserved && name !== lowerCasedName) {
      // Unknown attributes should have lowercase casing since that's how they
      // will be cased anyway with server rendering.
      warning$1(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      if (value) {
        warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
      } else {
        warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
      }
      warnedProperties$1[name] = true;
      return true;
    }

    // Now that we've validated casing, do not validate
    // data types for reserved props
    if (isReserved) {
      return true;
    }

    // Warn when a known attribute is a bad type
    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      warnedProperties$1[name] = true;
      return false;
    }

    // Warn when passing the strings 'false' or 'true' into a boolean prop
    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
      warning$1(false, 'Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
      warnedProperties$1[name] = true;
      return true;
    }

    return true;
  };
}

var warnUnknownProperties = function (type, props, canUseEventSystem) {
  var unknownProps = [];
  for (var key in props) {
    var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');
  if (unknownProps.length === 1) {
    warning$1(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
  } else if (unknownProps.length > 1) {
    warning$1(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
  }
};

function validateProperties$2(type, props, canUseEventSystem) {
  if (isCustomComponent(type, props)) {
    return;
  }
  warnUnknownProperties(type, props, canUseEventSystem);
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnInvalidHydration = false;
var didWarnShadyDOM = false;

var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
var AUTOFOCUS = 'autoFocus';
var CHILDREN = 'children';
var STYLE$1 = 'style';
var HTML = '__html';

var HTML_NAMESPACE = Namespaces.html;


var warnedUnknownTags = void 0;
var suppressHydrationWarning = void 0;

var validatePropertiesInDevelopment = void 0;
var warnForTextDifference = void 0;
var warnForPropDifference = void 0;
var warnForExtraAttributes = void 0;
var warnForInvalidEventListener = void 0;
var canDiffStyleForHydrationWarning = void 0;

var normalizeMarkupForTextOrAttribute = void 0;
var normalizeHTML = void 0;

{
  warnedUnknownTags = {
    // Chrome is the only major browser not shipping <time>. But as of July
    // 2017 it intends to ship it due to widespread usage. We intentionally
    // *don't* warn for <time> even if it's unrecognized by Chrome because
    // it soon will be, and many apps have been using it anyway.
    time: true,
    // There are working polyfills for <dialog>. Let people use it.
    dialog: true,
    // Electron ships a custom <webview> tag to display external web content in
    // an isolated frame and process.
    // This tag is not present in non Electron environments such as JSDom which
    // is often used for testing purposes.
    // @see https://electronjs.org/docs/api/webview-tag
    webview: true
  };

  validatePropertiesInDevelopment = function (type, props) {
    validateProperties(type, props);
    validateProperties$1(type, props);
    validateProperties$2(type, props, /* canUseEventSystem */true);
  };

  // IE 11 parses & normalizes the style attribute as opposed to other
  // browsers. It adds spaces and sorts the properties in some
  // non-alphabetical order. Handling that would require sorting CSS
  // properties in the client & server versions or applying
  // `expectedStyle` to a temporary DOM node to read its `style` attribute
  // normalized. Since it only affects IE, we're skipping style warnings
  // in that browser completely in favor of doing all that work.
  // See https://github.com/facebook/react/issues/11807
  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;

  // HTML parsing normalizes CR and CRLF to LF.
  // It also can turn \u0000 into \uFFFD inside attributes.
  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
  // If we have a mismatch, it might be caused by that.
  // We will still patch up in this case but not fire the warning.
  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

  normalizeMarkupForTextOrAttribute = function (markup) {
    var markupString = typeof markup === 'string' ? markup : '' + markup;
    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
  };

  warnForTextDifference = function (serverText, clientText) {
    if (didWarnInvalidHydration) {
      return;
    }
    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
    if (normalizedServerText === normalizedClientText) {
      return;
    }
    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
  };

  warnForPropDifference = function (propName, serverValue, clientValue) {
    if (didWarnInvalidHydration) {
      return;
    }
    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
    if (normalizedServerValue === normalizedClientValue) {
      return;
    }
    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
  };

  warnForExtraAttributes = function (attributeNames) {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    var names = [];
    attributeNames.forEach(function (name) {
      names.push(name);
    });
    warningWithoutStack$1(false, 'Extra attributes from the server: %s', names);
  };

  warnForInvalidEventListener = function (registrationName, listener) {
    if (listener === false) {
      warning$1(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
    } else {
      warning$1(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }
  };

  // Parse the HTML and read it back to normalize the HTML string so that it
  // can be used for comparison.
  normalizeHTML = function (parent, html) {
    // We could have created a separate document here to avoid
    // re-initializing custom elements if they exist. But this breaks
    // how <noscript> is being handled. So we use the same document.
    // See the discussion in https://github.com/facebook/react/pull/11157.
    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
    testElement.innerHTML = html;
    return testElement.innerHTML;
  };
}

function ensureListeningTo(rootContainerElement, registrationName) {
  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
  listenTo(registrationName, doc);
}

function getOwnerDocumentFromRootContainer(rootContainerElement) {
  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
}

function noop() {}

function trapClickOnNonInteractiveElement(node) {
  // Mobile Safari does not fire properly bubble click events on
  // non-interactive elements, which means delegated click listeners do not
  // fire. The workaround for this bug involves attaching an empty click
  // listener on the target node.
  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
  // Just set it using the onclick property so that we don't have to manage any
  // bookkeeping for it. Not sure if we need to clear it when the listener is
  // removed.
  // TODO: Only do this for the relevant Safaris maybe?
  node.onclick = noop;
}

function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
  for (var propKey in nextProps) {
    if (!nextProps.hasOwnProperty(propKey)) {
      continue;
    }
    var nextProp = nextProps[propKey];
    if (propKey === STYLE$1) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }
      // Relies on `updateStylesByID` not mutating `styleUpdates`.
      setValueForStyles(domElement, nextProp);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML] : undefined;
      if (nextHtml != null) {
        setInnerHTML(domElement, nextHtml);
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string') {
        // Avoid setting initial textContent when the text is empty. In IE11 setting
        // textContent on a <textarea> will cause the placeholder to not
        // show within the <textarea> until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        var canSetTextContent = tag !== 'textarea' || nextProp !== '';
        if (canSetTextContent) {
          setTextContent(domElement, nextProp);
        }
      } else if (typeof nextProp === 'number') {
        setTextContent(domElement, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
      // Noop
    } else if (propKey === AUTOFOCUS) {
      // We polyfill it separately on the client during commit.
      // We could have excluded it in the property list instead of
      // adding a special case here, but then it wouldn't be emitted
      // on server rendering (but we *do* want to emit it in SSR).
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }
        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if (nextProp != null) {
      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
    }
  }
}

function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
  // TODO: Handle wasCustomComponentTag
  for (var i = 0; i < updatePayload.length; i += 2) {
    var propKey = updatePayload[i];
    var propValue = updatePayload[i + 1];
    if (propKey === STYLE$1) {
      setValueForStyles(domElement, propValue);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      setInnerHTML(domElement, propValue);
    } else if (propKey === CHILDREN) {
      setTextContent(domElement, propValue);
    } else {
      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
    }
  }
}

function createElement(type, props, rootContainerElement, parentNamespace) {
  var isCustomComponentTag = void 0;

  // We create tags in the namespace of their parent container, except HTML
  // tags get no namespace.
  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
  var domElement = void 0;
  var namespaceURI = parentNamespace;
  if (namespaceURI === HTML_NAMESPACE) {
    namespaceURI = getIntrinsicNamespace(type);
  }
  if (namespaceURI === HTML_NAMESPACE) {
    {
      isCustomComponentTag = isCustomComponent(type, props);
      // Should this check be gated by parent namespace? Not sure we want to
      // allow <SVG> or <mATH>.
      !(isCustomComponentTag || type === type.toLowerCase()) ? warning$1(false, '<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type) : void 0;
    }

    if (type === 'script') {
      // Create the script via .innerHTML so its "parser-inserted" flag is
      // set to true and it does not execute
      var div = ownerDocument.createElement('div');
      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
      // This is guaranteed to yield a script element.
      var firstChild = div.firstChild;
      domElement = div.removeChild(firstChild);
    } else if (typeof props.is === 'string') {
      // $FlowIssue `createElement` should be updated for Web Components
      domElement = ownerDocument.createElement(type, { is: props.is });
    } else {
      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
      // See discussion in https://github.com/facebook/react/pull/6896
      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
      domElement = ownerDocument.createElement(type);
      // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
      // attributes on `select`s needs to be added before `option`s are inserted.
      // This prevents:
      // - a bug where the `select` does not scroll to the correct option because singular
      //  `select` elements automatically pick the first item #13222
      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
      // See https://github.com/facebook/react/issues/13222
      // and https://github.com/facebook/react/issues/14239
      if (type === 'select') {
        var node = domElement;
        if (props.multiple) {
          node.multiple = true;
        } else if (props.size) {
          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
          // it is possible that no option is selected.
          //
          // This is only necessary when a select in "single selection mode".
          node.size = props.size;
        }
      }
    }
  } else {
    domElement = ownerDocument.createElementNS(namespaceURI, type);
  }

  {
    if (namespaceURI === HTML_NAMESPACE) {
      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
        warnedUnknownTags[type] = true;
        warning$1(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
      }
    }
  }

  return domElement;
}

function createTextNode(text, rootContainerElement) {
  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
}

function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
  var isCustomComponentTag = isCustomComponent(tag, rawProps);
  {
    validatePropertiesInDevelopment(tag, rawProps);
    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
      warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
      didWarnShadyDOM = true;
    }
  }

  // TODO: Make sure that we check isMounted before firing any of these events.
  var props = void 0;
  switch (tag) {
    case 'iframe':
    case 'object':
      trapBubbledEvent(TOP_LOAD, domElement);
      props = rawProps;
      break;
    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var i = 0; i < mediaEventTypes.length; i++) {
        trapBubbledEvent(mediaEventTypes[i], domElement);
      }
      props = rawProps;
      break;
    case 'source':
      trapBubbledEvent(TOP_ERROR, domElement);
      props = rawProps;
      break;
    case 'img':
    case 'image':
    case 'link':
      trapBubbledEvent(TOP_ERROR, domElement);
      trapBubbledEvent(TOP_LOAD, domElement);
      props = rawProps;
      break;
    case 'form':
      trapBubbledEvent(TOP_RESET, domElement);
      trapBubbledEvent(TOP_SUBMIT, domElement);
      props = rawProps;
      break;
    case 'details':
      trapBubbledEvent(TOP_TOGGLE, domElement);
      props = rawProps;
      break;
    case 'input':
      initWrapperState(domElement, rawProps);
      props = getHostProps(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'option':
      validateProps(domElement, rawProps);
      props = getHostProps$1(domElement, rawProps);
      break;
    case 'select':
      initWrapperState$1(domElement, rawProps);
      props = getHostProps$2(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      props = getHostProps$3(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    default:
      props = rawProps;
  }

  assertValidProps(tag, props);

  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, false);
      break;
    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement, rawProps);
      break;
    case 'option':
      postMountWrapper$1(domElement, rawProps);
      break;
    case 'select':
      postMountWrapper$2(domElement, rawProps);
      break;
    default:
      if (typeof props.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }
      break;
  }
}

// Calculate the diff between the two objects.
function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
  {
    validatePropertiesInDevelopment(tag, nextRawProps);
  }

  var updatePayload = null;

  var lastProps = void 0;
  var nextProps = void 0;
  switch (tag) {
    case 'input':
      lastProps = getHostProps(domElement, lastRawProps);
      nextProps = getHostProps(domElement, nextRawProps);
      updatePayload = [];
      break;
    case 'option':
      lastProps = getHostProps$1(domElement, lastRawProps);
      nextProps = getHostProps$1(domElement, nextRawProps);
      updatePayload = [];
      break;
    case 'select':
      lastProps = getHostProps$2(domElement, lastRawProps);
      nextProps = getHostProps$2(domElement, nextRawProps);
      updatePayload = [];
      break;
    case 'textarea':
      lastProps = getHostProps$3(domElement, lastRawProps);
      nextProps = getHostProps$3(domElement, nextRawProps);
      updatePayload = [];
      break;
    default:
      lastProps = lastRawProps;
      nextProps = nextRawProps;
      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }
      break;
  }

  assertValidProps(tag, nextProps);

  var propKey = void 0;
  var styleName = void 0;
  var styleUpdates = null;
  for (propKey in lastProps) {
    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
      continue;
    }
    if (propKey === STYLE$1) {
      var lastStyle = lastProps[propKey];
      for (styleName in lastStyle) {
        if (lastStyle.hasOwnProperty(styleName)) {
          if (!styleUpdates) {
            styleUpdates = {};
          }
          styleUpdates[styleName] = '';
        }
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {
      // Noop. This is handled by the clear text mechanism.
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
      // Noop
    } else if (propKey === AUTOFOCUS) {
      // Noop. It doesn't work on updates anyway.
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      // This is a special case. If any listener updates we need to ensure
      // that the "current" fiber pointer gets updated so we need a commit
      // to update this element.
      if (!updatePayload) {
        updatePayload = [];
      }
    } else {
      // For all other deleted properties we add it to the queue. We use
      // the whitelist in the commit phase instead.
      (updatePayload = updatePayload || []).push(propKey, null);
    }
  }
  for (propKey in nextProps) {
    var nextProp = nextProps[propKey];
    var lastProp = lastProps != null ? lastProps[propKey] : undefined;
    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
      continue;
    }
    if (propKey === STYLE$1) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }
      if (lastProp) {
        // Unset styles on `lastProp` but not on `nextProp`.
        for (styleName in lastProp) {
          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
            if (!styleUpdates) {
              styleUpdates = {};
            }
            styleUpdates[styleName] = '';
          }
        }
        // Update styles that changed since `lastProp`.
        for (styleName in nextProp) {
          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
            if (!styleUpdates) {
              styleUpdates = {};
            }
            styleUpdates[styleName] = nextProp[styleName];
          }
        }
      } else {
        // Relies on `updateStylesByID` not mutating `styleUpdates`.
        if (!styleUpdates) {
          if (!updatePayload) {
            updatePayload = [];
          }
          updatePayload.push(propKey, styleUpdates);
        }
        styleUpdates = nextProp;
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML] : undefined;
      var lastHtml = lastProp ? lastProp[HTML] : undefined;
      if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
        }
      } else {
        // TODO: It might be too late to clear this if we have children
        // inserted already.
      }
    } else if (propKey === CHILDREN) {
      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
      // Noop
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        // We eagerly listen to this even though we haven't committed yet.
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }
        ensureListeningTo(rootContainerElement, propKey);
      }
      if (!updatePayload && lastProp !== nextProp) {
        // This is a special case. If any listener updates we need to ensure
        // that the "current" props pointer gets updated so we need a commit
        // to update this element.
        updatePayload = [];
      }
    } else {
      // For any other property we always add it to the queue and then we
      // filter it out using the whitelist during the commit.
      (updatePayload = updatePayload || []).push(propKey, nextProp);
    }
  }
  if (styleUpdates) {
    {
      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE$1]);
    }
    (updatePayload = updatePayload || []).push(STYLE$1, styleUpdates);
  }
  return updatePayload;
}

// Apply the diff.
function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
  // Update checked *before* name.
  // In the middle of an update, it is possible to have multiple checked.
  // When a checked radio tries to change name, browser makes another radio's checked false.
  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
    updateChecked(domElement, nextRawProps);
  }

  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
  var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
  // Apply the diff.
  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);

  // TODO: Ensure that an update gets scheduled if any of the special props
  // changed.
  switch (tag) {
    case 'input':
      // Update the wrapper around inputs *after* updating props. This has to
      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
      // raise warnings and prevent the new value from being assigned.
      updateWrapper(domElement, nextRawProps);
      break;
    case 'textarea':
      updateWrapper$1(domElement, nextRawProps);
      break;
    case 'select':
      // <select> value update needs to occur after <option> children
      // reconciliation
      postUpdateWrapper(domElement, nextRawProps);
      break;
  }
}

function getPossibleStandardName(propName) {
  {
    var lowerCasedName = propName.toLowerCase();
    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      return null;
    }
    return possibleStandardNames[lowerCasedName] || null;
  }
  return null;
}

function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
  var isCustomComponentTag = void 0;
  var extraAttributeNames = void 0;

  {
    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
    isCustomComponentTag = isCustomComponent(tag, rawProps);
    validatePropertiesInDevelopment(tag, rawProps);
    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
      warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
      didWarnShadyDOM = true;
    }
  }

  // TODO: Make sure that we check isMounted before firing any of these events.
  switch (tag) {
    case 'iframe':
    case 'object':
      trapBubbledEvent(TOP_LOAD, domElement);
      break;
    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var i = 0; i < mediaEventTypes.length; i++) {
        trapBubbledEvent(mediaEventTypes[i], domElement);
      }
      break;
    case 'source':
      trapBubbledEvent(TOP_ERROR, domElement);
      break;
    case 'img':
    case 'image':
    case 'link':
      trapBubbledEvent(TOP_ERROR, domElement);
      trapBubbledEvent(TOP_LOAD, domElement);
      break;
    case 'form':
      trapBubbledEvent(TOP_RESET, domElement);
      trapBubbledEvent(TOP_SUBMIT, domElement);
      break;
    case 'details':
      trapBubbledEvent(TOP_TOGGLE, domElement);
      break;
    case 'input':
      initWrapperState(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'option':
      validateProps(domElement, rawProps);
      break;
    case 'select':
      initWrapperState$1(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
  }

  assertValidProps(tag, rawProps);

  {
    extraAttributeNames = new Set();
    var attributes = domElement.attributes;
    for (var _i = 0; _i < attributes.length; _i++) {
      var name = attributes[_i].name.toLowerCase();
      switch (name) {
        // Built-in SSR attribute is whitelisted
        case 'data-reactroot':
          break;
        // Controlled attributes are not validated
        // TODO: Only ignore them on controlled tags.
        case 'value':
          break;
        case 'checked':
          break;
        case 'selected':
          break;
        default:
          // Intentionally use the original name.
          // See discussion in https://github.com/facebook/react/pull/10676.
          extraAttributeNames.add(attributes[_i].name);
      }
    }
  }

  var updatePayload = null;
  for (var propKey in rawProps) {
    if (!rawProps.hasOwnProperty(propKey)) {
      continue;
    }
    var nextProp = rawProps[propKey];
    if (propKey === CHILDREN) {
      // For text content children we compare against textContent. This
      // might match additional HTML that is hidden when we read it using
      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
      // satisfies our requirement. Our requirement is not to produce perfect
      // HTML and attributes. Ideally we should preserve structure but it's
      // ok not to if the visible content is still enough to indicate what
      // even listeners these nodes might be wired up to.
      // TODO: Warn if there is more than a single textNode as a child.
      // TODO: Should we use domElement.firstChild.nodeValue to compare?
      if (typeof nextProp === 'string') {
        if (domElement.textContent !== nextProp) {
          if (true && !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }
          updatePayload = [CHILDREN, nextProp];
        }
      } else if (typeof nextProp === 'number') {
        if (domElement.textContent !== '' + nextProp) {
          if (true && !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }
          updatePayload = [CHILDREN, '' + nextProp];
        }
      }
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }
        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if (true &&
    // Convince Flow we've calculated it (it's DEV-only in this method.)
    typeof isCustomComponentTag === 'boolean') {
      // Validate that the properties correspond to their expected values.
      var serverValue = void 0;
      var propertyInfo = getPropertyInfo(propKey);
      if (suppressHydrationWarning) {
        // Don't bother comparing. We're ignoring all these warnings.
      } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 ||
      // Controlled attributes are not validated
      // TODO: Only ignore them on controlled tags.
      propKey === 'value' || propKey === 'checked' || propKey === 'selected') {
        // Noop
      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var serverHTML = domElement.innerHTML;
        var nextHtml = nextProp ? nextProp[HTML] : undefined;
        var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');
        if (expectedHTML !== serverHTML) {
          warnForPropDifference(propKey, serverHTML, expectedHTML);
        }
      } else if (propKey === STYLE$1) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey);

        if (canDiffStyleForHydrationWarning) {
          var expectedStyle = createDangerousStringForStyles(nextProp);
          serverValue = domElement.getAttribute('style');
          if (expectedStyle !== serverValue) {
            warnForPropDifference(propKey, serverValue, expectedStyle);
          }
        }
      } else if (isCustomComponentTag) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey.toLowerCase());
        serverValue = getValueForAttribute(domElement, propKey, nextProp);

        if (nextProp !== serverValue) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
        var isMismatchDueToBadCasing = false;
        if (propertyInfo !== null) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames.delete(propertyInfo.attributeName);
          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
        } else {
          var ownNamespace = parentNamespace;
          if (ownNamespace === HTML_NAMESPACE) {
            ownNamespace = getIntrinsicNamespace(tag);
          }
          if (ownNamespace === HTML_NAMESPACE) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
          } else {
            var standardName = getPossibleStandardName(propKey);
            if (standardName !== null && standardName !== propKey) {
              // If an SVG prop is supplied with bad casing, it will
              // be successfully parsed from HTML, but will produce a mismatch
              // (and would be incorrectly rendered on the client).
              // However, we already warn about bad casing elsewhere.
              // So we'll skip the misleading extra mismatch warning in this case.
              isMismatchDueToBadCasing = true;
              // $FlowFixMe - Should be inferred as not undefined.
              extraAttributeNames.delete(standardName);
            }
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey);
          }
          serverValue = getValueForAttribute(domElement, propKey, nextProp);
        }

        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      }
    }
  }

  {
    // $FlowFixMe - Should be inferred as not undefined.
    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
      // $FlowFixMe - Should be inferred as not undefined.
      warnForExtraAttributes(extraAttributeNames);
    }
  }

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, true);
      break;
    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement, rawProps);
      break;
    case 'select':
    case 'option':
      // For input and textarea we current always set the value property at
      // post mount to force it to diverge from attributes. However, for
      // option and select we don't quite do the same thing and select
      // is not resilient to the DOM state changing so we don't do that here.
      // TODO: Consider not doing this for input and textarea.
      break;
    default:
      if (typeof rawProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }
      break;
  }

  return updatePayload;
}

function diffHydratedText(textNode, text) {
  var isDifferent = textNode.nodeValue !== text;
  return isDifferent;
}

function warnForUnmatchedText(textNode, text) {
  {
    warnForTextDifference(textNode.nodeValue, text);
  }
}

function warnForDeletedHydratableElement(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
  }
}

function warnForDeletedHydratableText(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
  }
}

function warnForInsertedHydratedElement(parentNode, tag, props) {
  {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
  }
}

function warnForInsertedHydratedText(parentNode, text) {
  {
    if (text === '') {
      // We expect to insert empty text nodes since they're not represented in
      // the HTML.
      // TODO: Remove this special case if we can just avoid inserting empty
      // text nodes.
      return;
    }
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
  }
}

function restoreControlledState$1(domElement, tag, props) {
  switch (tag) {
    case 'input':
      restoreControlledState(domElement, props);
      return;
    case 'textarea':
      restoreControlledState$3(domElement, props);
      return;
    case 'select':
      restoreControlledState$2(domElement, props);
      return;
  }
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var validateDOMNesting = function () {};
var updatedAncestorInfo = function () {};

{
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  updatedAncestorInfo = function (oldInfo, tag) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childText, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      !(childTag == null) ? warningWithoutStack$1(false, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var invalidParentOrAncestor = invalidParent || invalidAncestor;
    if (!invalidParentOrAncestor) {
      return;
    }

    var ancestorTag = invalidParentOrAncestor.tag;
    var addendum = getCurrentFiberStackInDev();

    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
    if (didWarn[warnKey]) {
      return;
    }
    didWarn[warnKey] = true;

    var tagDisplayName = childTag;
    var whitespaceInfo = '';
    if (childTag === '#text') {
      if (/\S/.test(childText)) {
        tagDisplayName = 'Text nodes';
      } else {
        tagDisplayName = 'Whitespace text nodes';
        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
      }
    } else {
      tagDisplayName = '<' + childTag + '>';
    }

    if (invalidParent) {
      var info = '';
      if (ancestorTag === 'table' && childTag === 'tr') {
        info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
      }
      warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
    } else {
      warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
    }
  };
}

var ReactInternals$1 = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

var _ReactInternals$Sched = ReactInternals$1.Scheduler;
var unstable_cancelCallback = _ReactInternals$Sched.unstable_cancelCallback;
var unstable_now = _ReactInternals$Sched.unstable_now;
var unstable_scheduleCallback = _ReactInternals$Sched.unstable_scheduleCallback;
var unstable_shouldYield = _ReactInternals$Sched.unstable_shouldYield;
var unstable_getFirstCallbackNode = _ReactInternals$Sched.unstable_getFirstCallbackNode;
var unstable_runWithPriority = _ReactInternals$Sched.unstable_runWithPriority;
var unstable_next = _ReactInternals$Sched.unstable_next;
var unstable_continueExecution = _ReactInternals$Sched.unstable_continueExecution;
var unstable_pauseExecution = _ReactInternals$Sched.unstable_pauseExecution;
var unstable_getCurrentPriorityLevel = _ReactInternals$Sched.unstable_getCurrentPriorityLevel;
var unstable_ImmediatePriority = _ReactInternals$Sched.unstable_ImmediatePriority;
var unstable_UserBlockingPriority = _ReactInternals$Sched.unstable_UserBlockingPriority;
var unstable_NormalPriority = _ReactInternals$Sched.unstable_NormalPriority;
var unstable_LowPriority = _ReactInternals$Sched.unstable_LowPriority;
var unstable_IdlePriority = _ReactInternals$Sched.unstable_IdlePriority;

// Renderers that don't support persistence
// can re-export everything from this module.

function shim() {
  invariant(false, 'The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.');
}

// Persistence (when unsupported)
var supportsPersistence = false;
var cloneInstance = shim;
var createContainerChildSet = shim;
var appendChildToContainerChildSet = shim;
var finalizeContainerChildren = shim;
var replaceContainerChildren = shim;
var cloneHiddenInstance = shim;
var cloneUnhiddenInstance = shim;
var createHiddenTextInstance = shim;

var SUPPRESS_HYDRATION_WARNING = void 0;
{
  SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
}

var SUSPENSE_START_DATA = '$';
var SUSPENSE_END_DATA = '/$';

var STYLE = 'style';

var eventsEnabled = null;
var selectionInformation = null;

function shouldAutoFocusHostComponent(type, props) {
  switch (type) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      return !!props.autoFocus;
  }
  return false;
}

function getRootHostContext(rootContainerInstance) {
  var type = void 0;
  var namespace = void 0;
  var nodeType = rootContainerInstance.nodeType;
  switch (nodeType) {
    case DOCUMENT_NODE:
    case DOCUMENT_FRAGMENT_NODE:
      {
        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
        var root = rootContainerInstance.documentElement;
        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
        break;
      }
    default:
      {
        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
        var ownNamespace = container.namespaceURI || null;
        type = container.tagName;
        namespace = getChildNamespace(ownNamespace, type);
        break;
      }
  }
  {
    var validatedTag = type.toLowerCase();
    var _ancestorInfo = updatedAncestorInfo(null, validatedTag);
    return { namespace: namespace, ancestorInfo: _ancestorInfo };
  }
  return namespace;
}

function getChildHostContext(parentHostContext, type, rootContainerInstance) {
  {
    var parentHostContextDev = parentHostContext;
    var _namespace = getChildNamespace(parentHostContextDev.namespace, type);
    var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
    return { namespace: _namespace, ancestorInfo: _ancestorInfo2 };
  }
  var parentNamespace = parentHostContext;
  return getChildNamespace(parentNamespace, type);
}

function getPublicInstance(instance) {
  return instance;
}

function prepareForCommit(containerInfo) {
  eventsEnabled = isEnabled();
  selectionInformation = getSelectionInformation();
  setEnabled(false);
}

function resetAfterCommit(containerInfo) {
  restoreSelection(selectionInformation);
  selectionInformation = null;
  setEnabled(eventsEnabled);
  eventsEnabled = null;
}

function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  var parentNamespace = void 0;
  {
    // TODO: take namespace into account when validating.
    var hostContextDev = hostContext;
    validateDOMNesting(type, null, hostContextDev.ancestorInfo);
    if (typeof props.children === 'string' || typeof props.children === 'number') {
      var string = '' + props.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }
    parentNamespace = hostContextDev.namespace;
  }
  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
  precacheFiberNode(internalInstanceHandle, domElement);
  updateFiberProps(domElement, props);
  return domElement;
}

function appendInitialChild(parentInstance, child) {
  parentInstance.appendChild(child);
}

function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
  setInitialProperties(domElement, type, props, rootContainerInstance);
  return shouldAutoFocusHostComponent(type, props);
}

function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
  {
    var hostContextDev = hostContext;
    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
      var string = '' + newProps.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }
  }
  return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
}

function shouldSetTextContent(type, props) {
  return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
}

function shouldDeprioritizeSubtree(type, props) {
  return !!props.hidden;
}

function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
  {
    var hostContextDev = hostContext;
    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
  }
  var textNode = createTextNode(text, rootContainerInstance);
  precacheFiberNode(internalInstanceHandle, textNode);
  return textNode;
}

var isPrimaryRenderer = true;
// This initialization code may run even on server environments
// if a component just imports ReactDOM (e.g. for findDOMNode).
// Some environments might not have setTimeout or clearTimeout.
var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
var noTimeout = -1;
var schedulePassiveEffects = unstable_scheduleCallback;
var cancelPassiveEffects = unstable_cancelCallback;

// -------------------
//     Mutation
// -------------------

var supportsMutation = true;

function commitMount(domElement, type, newProps, internalInstanceHandle) {
  // Despite the naming that might imply otherwise, this method only
  // fires if there is an `Update` effect scheduled during mounting.
  // This happens if `finalizeInitialChildren` returns `true` (which it
  // does to implement the `autoFocus` attribute on the client). But
  // there are also other cases when this might happen (such as patching
  // up text content during hydration mismatch). So we'll check this again.
  if (shouldAutoFocusHostComponent(type, newProps)) {
    domElement.focus();
  }
}

function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
  // Update the props handle so that we know which props are the ones with
  // with current event handlers.
  updateFiberProps(domElement, newProps);
  // Apply the diff to the DOM node.
  updateProperties(domElement, updatePayload, type, oldProps, newProps);
}

function resetTextContent(domElement) {
  setTextContent(domElement, '');
}

function commitTextUpdate(textInstance, oldText, newText) {
  textInstance.nodeValue = newText;
}

function appendChild(parentInstance, child) {
  parentInstance.appendChild(child);
}

function appendChildToContainer(container, child) {
  var parentNode = void 0;
  if (container.nodeType === COMMENT_NODE) {
    parentNode = container.parentNode;
    parentNode.insertBefore(child, container);
  } else {
    parentNode = container;
    parentNode.appendChild(child);
  }
  // This container might be used for a portal.
  // If something inside a portal is clicked, that click should bubble
  // through the React tree. However, on Mobile Safari the click would
  // never bubble through the *DOM* tree unless an ancestor with onclick
  // event exists. So we wouldn't see it and dispatch it.
  // This is why we ensure that non React root containers have inline onclick
  // defined.
  // https://github.com/facebook/react/issues/11918
  var reactRootContainer = container._reactRootContainer;
  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
    // TODO: This cast may not be sound for SVG, MathML or custom elements.
    trapClickOnNonInteractiveElement(parentNode);
  }
}

function insertBefore(parentInstance, child, beforeChild) {
  parentInstance.insertBefore(child, beforeChild);
}

function insertInContainerBefore(container, child, beforeChild) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.insertBefore(child, beforeChild);
  } else {
    container.insertBefore(child, beforeChild);
  }
}

function removeChild(parentInstance, child) {
  parentInstance.removeChild(child);
}

function removeChildFromContainer(container, child) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.removeChild(child);
  } else {
    container.removeChild(child);
  }
}

function clearSuspenseBoundary(parentInstance, suspenseInstance) {
  var node = suspenseInstance;
  // Delete all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.
  var depth = 0;
  do {
    var nextNode = node.nextSibling;
    parentInstance.removeChild(node);
    if (nextNode && nextNode.nodeType === COMMENT_NODE) {
      var data = nextNode.data;
      if (data === SUSPENSE_END_DATA) {
        if (depth === 0) {
          parentInstance.removeChild(nextNode);
          return;
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_START_DATA) {
        depth++;
      }
    }
    node = nextNode;
  } while (node);
  // TODO: Warn, we didn't find the end comment boundary.
}

function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
  if (container.nodeType === COMMENT_NODE) {
    clearSuspenseBoundary(container.parentNode, suspenseInstance);
  } else if (container.nodeType === ELEMENT_NODE) {
    clearSuspenseBoundary(container, suspenseInstance);
  } else {
    // Document nodes should never contain suspense boundaries.
  }
}

function hideInstance(instance) {
  // TODO: Does this work for all element types? What about MathML? Should we
  // pass host context to this method?
  instance = instance;
  instance.style.display = 'none';
}

function hideTextInstance(textInstance) {
  textInstance.nodeValue = '';
}

function unhideInstance(instance, props) {
  instance = instance;
  var styleProp = props[STYLE];
  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
  instance.style.display = dangerousStyleValue('display', display);
}

function unhideTextInstance(textInstance, text) {
  textInstance.nodeValue = text;
}

// -------------------
//     Hydration
// -------------------

var supportsHydration = true;

function canHydrateInstance(instance, type, props) {
  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
    return null;
  }
  // This has now been refined to an element node.
  return instance;
}

function canHydrateTextInstance(instance, text) {
  if (text === '' || instance.nodeType !== TEXT_NODE) {
    // Empty strings are not parsed by HTML so there won't be a correct match here.
    return null;
  }
  // This has now been refined to a text node.
  return instance;
}

function canHydrateSuspenseInstance(instance) {
  if (instance.nodeType !== COMMENT_NODE) {
    // Empty strings are not parsed by HTML so there won't be a correct match here.
    return null;
  }
  // This has now been refined to a suspense node.
  return instance;
}

function getNextHydratableSibling(instance) {
  var node = instance.nextSibling;
  // Skip non-hydratable nodes.
  while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE && (!enableSuspenseServerRenderer || node.nodeType !== COMMENT_NODE || node.data !== SUSPENSE_START_DATA)) {
    node = node.nextSibling;
  }
  return node;
}

function getFirstHydratableChild(parentInstance) {
  var next = parentInstance.firstChild;
  // Skip non-hydratable nodes.
  while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE && (!enableSuspenseServerRenderer || next.nodeType !== COMMENT_NODE || next.data !== SUSPENSE_START_DATA)) {
    next = next.nextSibling;
  }
  return next;
}

function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, instance);
  // TODO: Possibly defer this until the commit phase where all the events
  // get attached.
  updateFiberProps(instance, props);
  var parentNamespace = void 0;
  {
    var hostContextDev = hostContext;
    parentNamespace = hostContextDev.namespace;
  }
  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
}

function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, textInstance);
  return diffHydratedText(textInstance, text);
}

function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
  var node = suspenseInstance.nextSibling;
  // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.
  var depth = 0;
  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;
      if (data === SUSPENSE_END_DATA) {
        if (depth === 0) {
          return getNextHydratableSibling(node);
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_START_DATA) {
        depth++;
      }
    }
    node = node.nextSibling;
  }
  // TODO: Warn, we didn't find the end comment boundary.
  return null;
}

function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
  {
    warnForUnmatchedText(textInstance, text);
  }
}

function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    warnForUnmatchedText(textInstance, text);
  }
}

function didNotHydrateContainerInstance(parentContainer, instance) {
  {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentContainer, instance);
    } else if (instance.nodeType === COMMENT_NODE) {
      // TODO: warnForDeletedHydratableSuspenseBoundary
    } else {
      warnForDeletedHydratableText(parentContainer, instance);
    }
  }
}

function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentInstance, instance);
    } else if (instance.nodeType === COMMENT_NODE) {
      // TODO: warnForDeletedHydratableSuspenseBoundary
    } else {
      warnForDeletedHydratableText(parentInstance, instance);
    }
  }
}

function didNotFindHydratableContainerInstance(parentContainer, type, props) {
  {
    warnForInsertedHydratedElement(parentContainer, type, props);
  }
}

function didNotFindHydratableContainerTextInstance(parentContainer, text) {
  {
    warnForInsertedHydratedText(parentContainer, text);
  }
}



function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    warnForInsertedHydratedElement(parentInstance, type, props);
  }
}

function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    warnForInsertedHydratedText(parentInstance, text);
  }
}

function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    // TODO: warnForInsertedHydratedSuspense(parentInstance);
  }
}

// Prefix measurements so that it's possible to filter them.
// Longer prefixes are hard to read in DevTools.
var reactEmoji = '\u269B';
var warningEmoji = '\u26D4';
var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

// Keep track of current fiber so that we know the path to unwind on pause.
// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
var currentFiber = null;
// If we're in the middle of user code, which fiber and method is it?
// Reusing `currentFiber` would be confusing for this because user code fiber
// can change during commit phase too, but we don't need to unwind it (since
// lifecycles in the commit phase don't resemble a tree).
var currentPhase = null;
var currentPhaseFiber = null;
// Did lifecycle hook schedule an update? This is often a performance problem,
// so we will keep track of it, and include it in the report.
// Track commits caused by cascading updates.
var isCommitting = false;
var hasScheduledUpdateInCurrentCommit = false;
var hasScheduledUpdateInCurrentPhase = false;
var commitCountInCurrentWorkLoop = 0;
var effectCountInCurrentCommit = 0;
var isWaitingForCallback = false;
// During commits, we only show a measurement once per method name
// to avoid stretch the commit phase with measurement overhead.
var labelsInCurrentCommit = new Set();

var formatMarkName = function (markName) {
  return reactEmoji + ' ' + markName;
};

var formatLabel = function (label, warning) {
  var prefix = warning ? warningEmoji + ' ' : reactEmoji + ' ';
  var suffix = warning ? ' Warning: ' + warning : '';
  return '' + prefix + label + suffix;
};

var beginMark = function (markName) {
  performance.mark(formatMarkName(markName));
};

var clearMark = function (markName) {
  performance.clearMarks(formatMarkName(markName));
};

var endMark = function (label, markName, warning) {
  var formattedMarkName = formatMarkName(markName);
  var formattedLabel = formatLabel(label, warning);
  try {
    performance.measure(formattedLabel, formattedMarkName);
  } catch (err) {}
  // If previous mark was missing for some reason, this will throw.
  // This could only happen if React crashed in an unexpected place earlier.
  // Don't pile on with more errors.

  // Clear marks immediately to avoid growing buffer.
  performance.clearMarks(formattedMarkName);
  performance.clearMeasures(formattedLabel);
};

var getFiberMarkName = function (label, debugID) {
  return label + ' (#' + debugID + ')';
};

var getFiberLabel = function (componentName, isMounted, phase) {
  if (phase === null) {
    // These are composite component total time measurements.
    return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
  } else {
    // Composite component methods.
    return componentName + '.' + phase;
  }
};

var beginFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);

  if (isCommitting && labelsInCurrentCommit.has(label)) {
    // During the commit phase, we don't show duplicate labels because
    // there is a fixed overhead for every measurement, and we don't
    // want to stretch the commit phase beyond necessary.
    return false;
  }
  labelsInCurrentCommit.add(label);

  var markName = getFiberMarkName(label, debugID);
  beginMark(markName);
  return true;
};

var clearFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  clearMark(markName);
};

var endFiberMark = function (fiber, phase, warning) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  endMark(label, markName, warning);
};

var shouldIgnoreFiber = function (fiber) {
  // Host components should be skipped in the timeline.
  // We could check typeof fiber.type, but does this work with RN?
  switch (fiber.tag) {
    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case Fragment:
    case ContextProvider:
    case ContextConsumer:
    case Mode:
      return true;
    default:
      return false;
  }
};

var clearPendingPhaseMeasurement = function () {
  if (currentPhase !== null && currentPhaseFiber !== null) {
    clearFiberMark(currentPhaseFiber, currentPhase);
  }
  currentPhaseFiber = null;
  currentPhase = null;
  hasScheduledUpdateInCurrentPhase = false;
};

var pauseTimers = function () {
  // Stops all currently active measurements so that they can be resumed
  // if we continue in a later deferred loop from the same unit of work.
  var fiber = currentFiber;
  while (fiber) {
    if (fiber._debugIsCurrentlyTiming) {
      endFiberMark(fiber, null, null);
    }
    fiber = fiber.return;
  }
};

var resumeTimersRecursively = function (fiber) {
  if (fiber.return !== null) {
    resumeTimersRecursively(fiber.return);
  }
  if (fiber._debugIsCurrentlyTiming) {
    beginFiberMark(fiber, null);
  }
};

var resumeTimers = function () {
  // Resumes all measurements that were active during the last deferred loop.
  if (currentFiber !== null) {
    resumeTimersRecursively(currentFiber);
  }
};

function recordEffect() {
  if (enableUserTimingAPI) {
    effectCountInCurrentCommit++;
  }
}

function recordScheduleUpdate() {
  if (enableUserTimingAPI) {
    if (isCommitting) {
      hasScheduledUpdateInCurrentCommit = true;
    }
    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
      hasScheduledUpdateInCurrentPhase = true;
    }
  }
}

function startRequestCallbackTimer() {
  if (enableUserTimingAPI) {
    if (supportsUserTiming && !isWaitingForCallback) {
      isWaitingForCallback = true;
      beginMark('(Waiting for async callback...)');
    }
  }
}

function stopRequestCallbackTimer(didExpire, expirationTime) {
  if (enableUserTimingAPI) {
    if (supportsUserTiming) {
      isWaitingForCallback = false;
      var warning = didExpire ? 'React was blocked by main thread' : null;
      endMark('(Waiting for async callback... will force flush in ' + expirationTime + ' ms)', '(Waiting for async callback...)', warning);
    }
  }
}

function startWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // If we pause, this is the fiber to unwind from.
    currentFiber = fiber;
    if (!beginFiberMark(fiber, null)) {
      return;
    }
    fiber._debugIsCurrentlyTiming = true;
  }
}

function cancelWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // Remember we shouldn't complete measurement for this fiber.
    // Otherwise flamechart will be deep even for small updates.
    fiber._debugIsCurrentlyTiming = false;
    clearFiberMark(fiber, null);
  }
}

function stopWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // If we pause, its parent is the fiber to unwind from.
    currentFiber = fiber.return;
    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }
    fiber._debugIsCurrentlyTiming = false;
    endFiberMark(fiber, null, null);
  }
}

function stopFailedWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // If we pause, its parent is the fiber to unwind from.
    currentFiber = fiber.return;
    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }
    fiber._debugIsCurrentlyTiming = false;
    var warning = fiber.tag === SuspenseComponent || fiber.tag === DehydratedSuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
    endFiberMark(fiber, null, warning);
  }
}

function startPhaseTimer(fiber, phase) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    clearPendingPhaseMeasurement();
    if (!beginFiberMark(fiber, phase)) {
      return;
    }
    currentPhaseFiber = fiber;
    currentPhase = phase;
  }
}

function stopPhaseTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    if (currentPhase !== null && currentPhaseFiber !== null) {
      var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
      endFiberMark(currentPhaseFiber, currentPhase, warning);
    }
    currentPhase = null;
    currentPhaseFiber = null;
  }
}

function startWorkLoopTimer(nextUnitOfWork) {
  if (enableUserTimingAPI) {
    currentFiber = nextUnitOfWork;
    if (!supportsUserTiming) {
      return;
    }
    commitCountInCurrentWorkLoop = 0;
    // This is top level call.
    // Any other measurements are performed within.
    beginMark('(React Tree Reconciliation)');
    // Resume any measurements that were in progress during the last loop.
    resumeTimers();
  }
}

function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var warning = null;
    if (interruptedBy !== null) {
      if (interruptedBy.tag === HostRoot) {
        warning = 'A top-level update interrupted the previous render';
      } else {
        var componentName = getComponentName(interruptedBy.type) || 'Unknown';
        warning = 'An update to ' + componentName + ' interrupted the previous render';
      }
    } else if (commitCountInCurrentWorkLoop > 1) {
      warning = 'There were cascading updates';
    }
    commitCountInCurrentWorkLoop = 0;
    var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)';
    // Pause any measurements until the next loop.
    pauseTimers();
    endMark(label, '(React Tree Reconciliation)', warning);
  }
}

function startCommitTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    isCommitting = true;
    hasScheduledUpdateInCurrentCommit = false;
    labelsInCurrentCommit.clear();
    beginMark('(Committing Changes)');
  }
}

function stopCommitTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var warning = null;
    if (hasScheduledUpdateInCurrentCommit) {
      warning = 'Lifecycle hook scheduled a cascading update';
    } else if (commitCountInCurrentWorkLoop > 0) {
      warning = 'Caused by a cascading update in earlier commit';
    }
    hasScheduledUpdateInCurrentCommit = false;
    commitCountInCurrentWorkLoop++;
    isCommitting = false;
    labelsInCurrentCommit.clear();

    endMark('(Committing Changes)', '(Committing Changes)', warning);
  }
}

function startCommitSnapshotEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    effectCountInCurrentCommit = 0;
    beginMark('(Committing Snapshot Effects)');
  }
}

function stopCommitSnapshotEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark('(Committing Snapshot Effects: ' + count + ' Total)', '(Committing Snapshot Effects)', null);
  }
}

function startCommitHostEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    effectCountInCurrentCommit = 0;
    beginMark('(Committing Host Effects)');
  }
}

function stopCommitHostEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
  }
}

function startCommitLifeCyclesTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    effectCountInCurrentCommit = 0;
    beginMark('(Calling Lifecycle Methods)');
  }
}

function stopCommitLifeCyclesTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
  }
}

var valueStack = [];

var fiberStack = void 0;

{
  fiberStack = [];
}

var index = -1;

function createCursor(defaultValue) {
  return {
    current: defaultValue
  };
}

function pop(cursor, fiber) {
  if (index < 0) {
    {
      warningWithoutStack$1(false, 'Unexpected pop.');
    }
    return;
  }

  {
    if (fiber !== fiberStack[index]) {
      warningWithoutStack$1(false, 'Unexpected Fiber popped.');
    }
  }

  cursor.current = valueStack[index];

  valueStack[index] = null;

  {
    fiberStack[index] = null;
  }

  index--;
}

function push(cursor, value, fiber) {
  index++;

  valueStack[index] = cursor.current;

  {
    fiberStack[index] = fiber;
  }

  cursor.current = value;
}

function checkThatStackIsEmpty() {
  {
    if (index !== -1) {
      warningWithoutStack$1(false, 'Expected an empty stack. Something was not reset properly.');
    }
  }
}

function resetStackAfterFatalErrorInDev() {
  {
    index = -1;
    valueStack.length = 0;
    fiberStack.length = 0;
  }
}

var warnedAboutMissingGetChildContext = void 0;

{
  warnedAboutMissingGetChildContext = {};
}

var emptyContextObject = {};
{
  Object.freeze(emptyContextObject);
}

// A cursor to the current merged context object on the stack.
var contextStackCursor = createCursor(emptyContextObject);
// A cursor to a boolean indicating whether the context has changed.
var didPerformWorkStackCursor = createCursor(false);
// Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.
var previousContext = emptyContextObject;

function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
  if (didPushOwnContextIfProvider && isContextProvider(Component)) {
    // If the fiber is a context provider itself, when we read its context
    // we may have already pushed its own child context on the stack. A context
    // provider should not "see" its own child context. Therefore we read the
    // previous (parent) context instead for a context provider.
    return previousContext;
  }
  return contextStackCursor.current;
}

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
  var instance = workInProgress.stateNode;
  instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
  instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
}

function getMaskedContext(workInProgress, unmaskedContext) {
  var type = workInProgress.type;
  var contextTypes = type.contextTypes;
  if (!contextTypes) {
    return emptyContextObject;
  }

  // Avoid recreating masked context unless unmasked context has changed.
  // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
  // This may trigger infinite loops if componentWillReceiveProps calls setState.
  var instance = workInProgress.stateNode;
  if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
    return instance.__reactInternalMemoizedMaskedChildContext;
  }

  var context = {};
  for (var key in contextTypes) {
    context[key] = unmaskedContext[key];
  }

  {
    var name = getComponentName(type) || 'Unknown';
    checkPropTypes_1(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
  }

  // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // Context is created before the class component is instantiated so check for instance.
  if (instance) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return context;
}

function hasContextChanged() {
  return didPerformWorkStackCursor.current;
}

function isContextProvider(type) {
  var childContextTypes = type.childContextTypes;
  return childContextTypes !== null && childContextTypes !== undefined;
}

function popContext(fiber) {
  pop(didPerformWorkStackCursor, fiber);
  pop(contextStackCursor, fiber);
}

function popTopLevelContextObject(fiber) {
  pop(didPerformWorkStackCursor, fiber);
  pop(contextStackCursor, fiber);
}

function pushTopLevelContextObject(fiber, context, didChange) {
  !(contextStackCursor.current === emptyContextObject) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  push(contextStackCursor, context, fiber);
  push(didPerformWorkStackCursor, didChange, fiber);
}

function processChildContext(fiber, type, parentContext) {
  var instance = fiber.stateNode;
  var childContextTypes = type.childContextTypes;

  // TODO (bvaughn) Replace this behavior with an invariant() in the future.
  // It has only been added in Fiber to match the (unintentional) behavior in Stack.
  if (typeof instance.getChildContext !== 'function') {
    {
      var componentName = getComponentName(type) || 'Unknown';

      if (!warnedAboutMissingGetChildContext[componentName]) {
        warnedAboutMissingGetChildContext[componentName] = true;
        warningWithoutStack$1(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
      }
    }
    return parentContext;
  }

  var childContext = void 0;
  {
    setCurrentPhase('getChildContext');
  }
  startPhaseTimer(fiber, 'getChildContext');
  childContext = instance.getChildContext();
  stopPhaseTimer();
  {
    setCurrentPhase(null);
  }
  for (var contextKey in childContext) {
    !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(type) || 'Unknown', contextKey) : void 0;
  }
  {
    var name = getComponentName(type) || 'Unknown';
    checkPropTypes_1(childContextTypes, childContext, 'child context', name,
    // In practice, there is one case in which we won't get a stack. It's when
    // somebody calls unstable_renderSubtreeIntoContainer() and we process
    // context from the parent component instance. The stack will be missing
    // because it's outside of the reconciliation, and so the pointer has not
    // been set. This is rare and doesn't matter. We'll also remove that API.
    getCurrentFiberStackInDev);
  }

  return _assign({}, parentContext, childContext);
}

function pushContextProvider(workInProgress) {
  var instance = workInProgress.stateNode;
  // We push the context as early as possible to ensure stack integrity.
  // If the instance does not exist yet, we will push null at first,
  // and replace it on the stack later when invalidating the context.
  var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;

  // Remember the parent context so we can merge with it later.
  // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
  previousContext = contextStackCursor.current;
  push(contextStackCursor, memoizedMergedChildContext, workInProgress);
  push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);

  return true;
}

function invalidateContextProvider(workInProgress, type, didChange) {
  var instance = workInProgress.stateNode;
  !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  if (didChange) {
    // Merge parent and own context.
    // Skip this if we're not updating due to sCU.
    // This avoids unnecessarily recomputing memoized values.
    var mergedContext = processChildContext(workInProgress, type, previousContext);
    instance.__reactInternalMemoizedMergedChildContext = mergedContext;

    // Replace the old (or empty) context with the new one.
    // It is important to unwind the context in the reverse order.
    pop(didPerformWorkStackCursor, workInProgress);
    pop(contextStackCursor, workInProgress);
    // Now push the new context and mark that it has changed.
    push(contextStackCursor, mergedContext, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  } else {
    pop(didPerformWorkStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  }
}

function findCurrentUnmaskedContext(fiber) {
  // Currently this is only used with renderSubtreeIntoContainer; not sure if it
  // makes sense elsewhere
  !(isFiberMounted(fiber) && fiber.tag === ClassComponent) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  var node = fiber;
  do {
    switch (node.tag) {
      case HostRoot:
        return node.stateNode.context;
      case ClassComponent:
        {
          var Component = node.type;
          if (isContextProvider(Component)) {
            return node.stateNode.__reactInternalMemoizedMergedChildContext;
          }
          break;
        }
    }
    node = node.return;
  } while (node !== null);
  invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.');
}

var onCommitFiberRoot = null;
var onCommitFiberUnmount = null;
var hasLoggedError = false;

function catchErrors(fn) {
  return function (arg) {
    try {
      return fn(arg);
    } catch (err) {
      if (true && !hasLoggedError) {
        hasLoggedError = true;
        warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
      }
    }
  };
}

var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';

function injectInternals(internals) {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
    // No DevTools
    return false;
  }
  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (hook.isDisabled) {
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // https://github.com/facebook/react/issues/3877
    return true;
  }
  if (!hook.supportsFiber) {
    {
      warningWithoutStack$1(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
    }
    // DevTools exists, even though it doesn't support Fiber.
    return true;
  }
  try {
    var rendererID = hook.inject(internals);
    // We have successfully injected, so now it is safe to set up hooks.
    onCommitFiberRoot = catchErrors(function (root) {
      return hook.onCommitFiberRoot(rendererID, root);
    });
    onCommitFiberUnmount = catchErrors(function (fiber) {
      return hook.onCommitFiberUnmount(rendererID, fiber);
    });
  } catch (err) {
    // Catch all errors because it is unsafe to throw during initialization.
    {
      warningWithoutStack$1(false, 'React DevTools encountered an error: %s.', err);
    }
  }
  // DevTools exists
  return true;
}

function onCommitRoot(root) {
  if (typeof onCommitFiberRoot === 'function') {
    onCommitFiberRoot(root);
  }
}

function onCommitUnmount(fiber) {
  if (typeof onCommitFiberUnmount === 'function') {
    onCommitFiberUnmount(fiber);
  }
}

// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111
var maxSigned31BitInt = 1073741823;

var NoWork = 0;
var Never = 1;
var Sync = maxSigned31BitInt;

var UNIT_SIZE = 10;
var MAGIC_NUMBER_OFFSET = maxSigned31BitInt - 1;

// 1 unit of expiration time represents 10ms.
function msToExpirationTime(ms) {
  // Always add an offset so that we don't clash with the magic number for NoWork.
  return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
}

function expirationTimeToMs(expirationTime) {
  return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
}

function ceiling(num, precision) {
  return ((num / precision | 0) + 1) * precision;
}

function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
  return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
}

var LOW_PRIORITY_EXPIRATION = 5000;
var LOW_PRIORITY_BATCH_SIZE = 250;

function computeAsyncExpiration(currentTime) {
  return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
}

// We intentionally set a higher expiration time for interactive updates in
// dev than in production.
//
// If the main thread is being blocked so long that you hit the expiration,
// it's a problem that could be solved with better scheduling.
//
// People will be more likely to notice this and fix it with the long
// expiration time in development.
//
// In production we opt for better UX at the risk of masking scheduling
// problems, by expiring fast.
var HIGH_PRIORITY_EXPIRATION = 500;
var HIGH_PRIORITY_BATCH_SIZE = 100;

function computeInteractiveExpiration(currentTime) {
  return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
}

var NoContext = 0;
var ConcurrentMode = 1;
var StrictMode = 2;
var ProfileMode = 4;

var hasBadMapPolyfill = void 0;

{
  hasBadMapPolyfill = false;
  try {
    var nonExtensibleObject = Object.preventExtensions({});
    var testMap = new Map([[nonExtensibleObject, null]]);
    var testSet = new Set([nonExtensibleObject]);
    // This is necessary for Rollup to not consider these unused.
    // https://github.com/rollup/rollup/issues/1771
    // TODO: we can remove these if Rollup fixes the bug.
    testMap.set(0, 0);
    testSet.add(0);
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

// A Fiber is work on a Component that needs to be done or was done. There can
// be more than one per component.


var debugCounter = void 0;

{
  debugCounter = 1;
}

function FiberNode(tag, pendingProps, key, mode) {
  // Instance
  this.tag = tag;
  this.key = key;
  this.elementType = null;
  this.type = null;
  this.stateNode = null;

  // Fiber
  this.return = null;
  this.child = null;
  this.sibling = null;
  this.index = 0;

  this.ref = null;

  this.pendingProps = pendingProps;
  this.memoizedProps = null;
  this.updateQueue = null;
  this.memoizedState = null;
  this.contextDependencies = null;

  this.mode = mode;

  // Effects
  this.effectTag = NoEffect;
  this.nextEffect = null;

  this.firstEffect = null;
  this.lastEffect = null;

  this.expirationTime = NoWork;
  this.childExpirationTime = NoWork;

  this.alternate = null;

  if (enableProfilerTimer) {
    // Note: The following is done to avoid a v8 performance cliff.
    //
    // Initializing the fields below to smis and later updating them with
    // double values will cause Fibers to end up having separate shapes.
    // This behavior/bug has something to do with Object.preventExtension().
    // Fortunately this only impacts DEV builds.
    // Unfortunately it makes React unusably slow for some applications.
    // To work around this, initialize the fields below with doubles.
    //
    // Learn more about this here:
    // https://github.com/facebook/react/issues/14365
    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
    this.actualDuration = Number.NaN;
    this.actualStartTime = Number.NaN;
    this.selfBaseDuration = Number.NaN;
    this.treeBaseDuration = Number.NaN;

    // It's okay to replace the initial doubles with smis after initialization.
    // This won't trigger the performance cliff mentioned above,
    // and it simplifies other profiler code (including DevTools).
    this.actualDuration = 0;
    this.actualStartTime = -1;
    this.selfBaseDuration = 0;
    this.treeBaseDuration = 0;
  }

  {
    this._debugID = debugCounter++;
    this._debugSource = null;
    this._debugOwner = null;
    this._debugIsCurrentlyTiming = false;
    this._debugHookTypes = null;
    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
      Object.preventExtensions(this);
    }
  }
}

// This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.
var createFiber = function (tag, pendingProps, key, mode) {
  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
  return new FiberNode(tag, pendingProps, key, mode);
};

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function isSimpleFunctionComponent(type) {
  return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
}

function resolveLazyComponentTag(Component) {
  if (typeof Component === 'function') {
    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
  } else if (Component !== undefined && Component !== null) {
    var $$typeof = Component.$$typeof;
    if ($$typeof === REACT_FORWARD_REF_TYPE) {
      return ForwardRef;
    }
    if ($$typeof === REACT_MEMO_TYPE) {
      return MemoComponent;
    }
  }
  return IndeterminateComponent;
}

// This is used to create an alternate fiber to do work on.
function createWorkInProgress(current, pendingProps, expirationTime) {
  var workInProgress = current.alternate;
  if (workInProgress === null) {
    // We use a double buffering pooling technique because we know that we'll
    // only ever need at most two versions of a tree. We pool the "other" unused
    // node that we're free to reuse. This is lazily created to avoid allocating
    // extra objects for things that are never updated. It also allow us to
    // reclaim the extra memory if needed.
    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
    workInProgress.elementType = current.elementType;
    workInProgress.type = current.type;
    workInProgress.stateNode = current.stateNode;

    {
      // DEV-only fields
      workInProgress._debugID = current._debugID;
      workInProgress._debugSource = current._debugSource;
      workInProgress._debugOwner = current._debugOwner;
      workInProgress._debugHookTypes = current._debugHookTypes;
    }

    workInProgress.alternate = current;
    current.alternate = workInProgress;
  } else {
    workInProgress.pendingProps = pendingProps;

    // We already have an alternate.
    // Reset the effect tag.
    workInProgress.effectTag = NoEffect;

    // The effect list is no longer valid.
    workInProgress.nextEffect = null;
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;

    if (enableProfilerTimer) {
      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
      // This prevents time from endlessly accumulating in new commits.
      // This has the downside of resetting values for different priority renders,
      // But works for yielding (the common case) and should support resuming.
      workInProgress.actualDuration = 0;
      workInProgress.actualStartTime = -1;
    }
  }

  workInProgress.childExpirationTime = current.childExpirationTime;
  workInProgress.expirationTime = current.expirationTime;

  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue;
  workInProgress.contextDependencies = current.contextDependencies;

  // These will be overridden during the parent's reconciliation
  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;

  if (enableProfilerTimer) {
    workInProgress.selfBaseDuration = current.selfBaseDuration;
    workInProgress.treeBaseDuration = current.treeBaseDuration;
  }

  return workInProgress;
}

function createHostRootFiber(isConcurrent) {
  var mode = isConcurrent ? ConcurrentMode | StrictMode : NoContext;

  if (enableProfilerTimer && isDevToolsPresent) {
    // Always collect profile timings when DevTools are present.
    // This enables DevTools to start capturing timing at any point–
    // Without some nodes in the tree having empty base times.
    mode |= ProfileMode;
  }

  return createFiber(HostRoot, null, null, mode);
}

function createFiberFromTypeAndProps(type, // React$ElementType
key, pendingProps, owner, mode, expirationTime) {
  var fiber = void 0;

  var fiberTag = IndeterminateComponent;
  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
  var resolvedType = type;
  if (typeof type === 'function') {
    if (shouldConstruct(type)) {
      fiberTag = ClassComponent;
    }
  } else if (typeof type === 'string') {
    fiberTag = HostComponent;
  } else {
    getTag: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
      case REACT_CONCURRENT_MODE_TYPE:
        return createFiberFromMode(pendingProps, mode | ConcurrentMode | StrictMode, expirationTime, key);
      case REACT_STRICT_MODE_TYPE:
        return createFiberFromMode(pendingProps, mode | StrictMode, expirationTime, key);
      case REACT_PROFILER_TYPE:
        return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
      case REACT_SUSPENSE_TYPE:
        return createFiberFromSuspense(pendingProps, mode, expirationTime, key);
      default:
        {
          if (typeof type === 'object' && type !== null) {
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE:
                fiberTag = ContextProvider;
                break getTag;
              case REACT_CONTEXT_TYPE:
                // This is a consumer
                fiberTag = ContextConsumer;
                break getTag;
              case REACT_FORWARD_REF_TYPE:
                fiberTag = ForwardRef;
                break getTag;
              case REACT_MEMO_TYPE:
                fiberTag = MemoComponent;
                break getTag;
              case REACT_LAZY_TYPE:
                fiberTag = LazyComponent;
                resolvedType = null;
                break getTag;
            }
          }
          var info = '';
          {
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
            }
            var ownerName = owner ? getComponentName(owner.type) : null;
            if (ownerName) {
              info += '\n\nCheck the render method of `' + ownerName + '`.';
            }
          }
          invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
        }
    }
  }

  fiber = createFiber(fiberTag, pendingProps, key, mode);
  fiber.elementType = type;
  fiber.type = resolvedType;
  fiber.expirationTime = expirationTime;

  return fiber;
}

function createFiberFromElement(element, mode, expirationTime) {
  var owner = null;
  {
    owner = element._owner;
  }
  var type = element.type;
  var key = element.key;
  var pendingProps = element.props;
  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
  {
    fiber._debugSource = element._source;
    fiber._debugOwner = element._owner;
  }
  return fiber;
}

function createFiberFromFragment(elements, mode, expirationTime, key) {
  var fiber = createFiber(Fragment, elements, key, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
  {
    if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
      warningWithoutStack$1(false, 'Profiler must specify an "id" string and "onRender" function as props');
    }
  }

  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
  // TODO: The Profiler fiber shouldn't have a type. It has a tag.
  fiber.elementType = REACT_PROFILER_TYPE;
  fiber.type = REACT_PROFILER_TYPE;
  fiber.expirationTime = expirationTime;

  return fiber;
}

function createFiberFromMode(pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(Mode, pendingProps, key, mode);

  // TODO: The Mode fiber shouldn't have a type. It has a tag.
  var type = (mode & ConcurrentMode) === NoContext ? REACT_STRICT_MODE_TYPE : REACT_CONCURRENT_MODE_TYPE;
  fiber.elementType = type;
  fiber.type = type;

  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);

  // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
  var type = REACT_SUSPENSE_TYPE;
  fiber.elementType = type;
  fiber.type = type;

  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromText(content, mode, expirationTime) {
  var fiber = createFiber(HostText, content, null, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromHostInstanceForDeletion() {
  var fiber = createFiber(HostComponent, null, null, NoContext);
  // TODO: These should not need a type.
  fiber.elementType = 'DELETED';
  fiber.type = 'DELETED';
  return fiber;
}

function createFiberFromPortal(portal, mode, expirationTime) {
  var pendingProps = portal.children !== null ? portal.children : [];
  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
  fiber.expirationTime = expirationTime;
  fiber.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null, // Used by persistent updates
    implementation: portal.implementation
  };
  return fiber;
}

// Used for stashing WIP properties to replay failed work in DEV.
function assignFiberPropertiesInDEV(target, source) {
  if (target === null) {
    // This Fiber's initial properties will always be overwritten.
    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
    target = createFiber(IndeterminateComponent, null, null, NoContext);
  }

  // This is intentionally written as a list of all properties.
  // We tried to use Object.assign() instead but this is called in
  // the hottest path, and Object.assign() was too slow:
  // https://github.com/facebook/react/issues/12502
  // This code is DEV-only so size is not a concern.

  target.tag = source.tag;
  target.key = source.key;
  target.elementType = source.elementType;
  target.type = source.type;
  target.stateNode = source.stateNode;
  target.return = source.return;
  target.child = source.child;
  target.sibling = source.sibling;
  target.index = source.index;
  target.ref = source.ref;
  target.pendingProps = source.pendingProps;
  target.memoizedProps = source.memoizedProps;
  target.updateQueue = source.updateQueue;
  target.memoizedState = source.memoizedState;
  target.contextDependencies = source.contextDependencies;
  target.mode = source.mode;
  target.effectTag = source.effectTag;
  target.nextEffect = source.nextEffect;
  target.firstEffect = source.firstEffect;
  target.lastEffect = source.lastEffect;
  target.expirationTime = source.expirationTime;
  target.childExpirationTime = source.childExpirationTime;
  target.alternate = source.alternate;
  if (enableProfilerTimer) {
    target.actualDuration = source.actualDuration;
    target.actualStartTime = source.actualStartTime;
    target.selfBaseDuration = source.selfBaseDuration;
    target.treeBaseDuration = source.treeBaseDuration;
  }
  target._debugID = source._debugID;
  target._debugSource = source._debugSource;
  target._debugOwner = source._debugOwner;
  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
  target._debugHookTypes = source._debugHookTypes;
  return target;
}

var ReactInternals$2 = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

var _ReactInternals$Sched$1 = ReactInternals$2.SchedulerTracing;
var __interactionsRef = _ReactInternals$Sched$1.__interactionsRef;
var __subscriberRef = _ReactInternals$Sched$1.__subscriberRef;
var unstable_clear = _ReactInternals$Sched$1.unstable_clear;
var unstable_getCurrent = _ReactInternals$Sched$1.unstable_getCurrent;
var unstable_getThreadID = _ReactInternals$Sched$1.unstable_getThreadID;
var unstable_subscribe = _ReactInternals$Sched$1.unstable_subscribe;
var unstable_trace = _ReactInternals$Sched$1.unstable_trace;
var unstable_unsubscribe = _ReactInternals$Sched$1.unstable_unsubscribe;
var unstable_wrap = _ReactInternals$Sched$1.unstable_wrap;

// TODO: This should be lifted into the renderer.


// The following attributes are only used by interaction tracing builds.
// They enable interactions to be associated with their async work,
// And expose interaction metadata to the React DevTools Profiler plugin.
// Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.


// Exported FiberRoot type includes all properties,
// To avoid requiring potentially error-prone :any casts throughout the project.
// Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).
// The types are defined separately within this file to ensure they stay in sync.
// (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)


function createFiberRoot(containerInfo, isConcurrent, hydrate) {
  // Cyclic construction. This cheats the type system right now because
  // stateNode is any.
  var uninitializedFiber = createHostRootFiber(isConcurrent);

  var root = void 0;
  if (enableSchedulerTracing) {
    root = {
      current: uninitializedFiber,
      containerInfo: containerInfo,
      pendingChildren: null,

      earliestPendingTime: NoWork,
      latestPendingTime: NoWork,
      earliestSuspendedTime: NoWork,
      latestSuspendedTime: NoWork,
      latestPingedTime: NoWork,

      pingCache: null,

      didError: false,

      pendingCommitExpirationTime: NoWork,
      finishedWork: null,
      timeoutHandle: noTimeout,
      context: null,
      pendingContext: null,
      hydrate: hydrate,
      nextExpirationTimeToWorkOn: NoWork,
      expirationTime: NoWork,
      firstBatch: null,
      nextScheduledRoot: null,

      interactionThreadID: unstable_getThreadID(),
      memoizedInteractions: new Set(),
      pendingInteractionMap: new Map()
    };
  } else {
    root = {
      current: uninitializedFiber,
      containerInfo: containerInfo,
      pendingChildren: null,

      pingCache: null,

      earliestPendingTime: NoWork,
      latestPendingTime: NoWork,
      earliestSuspendedTime: NoWork,
      latestSuspendedTime: NoWork,
      latestPingedTime: NoWork,

      didError: false,

      pendingCommitExpirationTime: NoWork,
      finishedWork: null,
      timeoutHandle: noTimeout,
      context: null,
      pendingContext: null,
      hydrate: hydrate,
      nextExpirationTimeToWorkOn: NoWork,
      expirationTime: NoWork,
      firstBatch: null,
      nextScheduledRoot: null
    };
  }

  uninitializedFiber.stateNode = root;

  // The reason for the way the Flow types are structured in this file,
  // Is to avoid needing :any casts everywhere interaction tracing fields are used.
  // Unfortunately that requires an :any cast for non-interaction tracing capable builds.
  // $FlowFixMe Remove this :any cast and replace it with something better.
  return root;
}

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

{
  var printWarning$1 = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning$1.apply(undefined, [format].concat(args));
    }
  };
}

var lowPriorityWarning$1 = lowPriorityWarning;

var ReactStrictModeWarnings = {
  discardPendingWarnings: function () {},
  flushPendingDeprecationWarnings: function () {},
  flushPendingUnsafeLifecycleWarnings: function () {},
  recordDeprecationWarnings: function (fiber, instance) {},
  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
  recordLegacyContextWarning: function (fiber, instance) {},
  flushLegacyContextWarning: function () {}
};

{
  var LIFECYCLE_SUGGESTIONS = {
    UNSAFE_componentWillMount: 'componentDidMount',
    UNSAFE_componentWillReceiveProps: 'static getDerivedStateFromProps',
    UNSAFE_componentWillUpdate: 'componentDidUpdate'
  };

  var pendingComponentWillMountWarnings = [];
  var pendingComponentWillReceivePropsWarnings = [];
  var pendingComponentWillUpdateWarnings = [];
  var pendingUnsafeLifecycleWarnings = new Map();
  var pendingLegacyContextWarning = new Map();

  // Tracks components we have already warned about.
  var didWarnAboutDeprecatedLifecycles = new Set();
  var didWarnAboutUnsafeLifecycles = new Set();
  var didWarnAboutLegacyContext = new Set();

  var setToSortedString = function (set) {
    var array = [];
    set.forEach(function (value) {
      array.push(value);
    });
    return array.sort().join(', ');
  };

  ReactStrictModeWarnings.discardPendingWarnings = function () {
    pendingComponentWillMountWarnings = [];
    pendingComponentWillReceivePropsWarnings = [];
    pendingComponentWillUpdateWarnings = [];
    pendingUnsafeLifecycleWarnings = new Map();
    pendingLegacyContextWarning = new Map();
  };

  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
    pendingUnsafeLifecycleWarnings.forEach(function (lifecycleWarningsMap, strictRoot) {
      var lifecyclesWarningMessages = [];

      Object.keys(lifecycleWarningsMap).forEach(function (lifecycle) {
        var lifecycleWarnings = lifecycleWarningsMap[lifecycle];
        if (lifecycleWarnings.length > 0) {
          var componentNames = new Set();
          lifecycleWarnings.forEach(function (fiber) {
            componentNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });

          var formatted = lifecycle.replace('UNSAFE_', '');
          var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle];
          var sortedComponentNames = setToSortedString(componentNames);

          lifecyclesWarningMessages.push(formatted + ': Please update the following components to use ' + (suggestion + ' instead: ' + sortedComponentNames));
        }
      });

      if (lifecyclesWarningMessages.length > 0) {
        var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);

        warningWithoutStack$1(false, 'Unsafe lifecycle methods were found within a strict-mode tree:%s' + '\n\n%s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, lifecyclesWarningMessages.join('\n\n'));
      }
    });

    pendingUnsafeLifecycleWarnings = new Map();
  };

  var findStrictRoot = function (fiber) {
    var maybeStrictRoot = null;

    var node = fiber;
    while (node !== null) {
      if (node.mode & StrictMode) {
        maybeStrictRoot = node;
      }
      node = node.return;
    }

    return maybeStrictRoot;
  };

  ReactStrictModeWarnings.flushPendingDeprecationWarnings = function () {
    if (pendingComponentWillMountWarnings.length > 0) {
      var uniqueNames = new Set();
      pendingComponentWillMountWarnings.forEach(function (fiber) {
        uniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutDeprecatedLifecycles.add(fiber.type);
      });

      var sortedNames = setToSortedString(uniqueNames);

      lowPriorityWarning$1(false, 'componentWillMount is deprecated and will be removed in the next major version. ' + 'Use componentDidMount instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillMount.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', sortedNames);

      pendingComponentWillMountWarnings = [];
    }

    if (pendingComponentWillReceivePropsWarnings.length > 0) {
      var _uniqueNames = new Set();
      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
        _uniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutDeprecatedLifecycles.add(fiber.type);
      });

      var _sortedNames = setToSortedString(_uniqueNames);

      lowPriorityWarning$1(false, 'componentWillReceiveProps is deprecated and will be removed in the next major version. ' + 'Use static getDerivedStateFromProps instead.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames);

      pendingComponentWillReceivePropsWarnings = [];
    }

    if (pendingComponentWillUpdateWarnings.length > 0) {
      var _uniqueNames2 = new Set();
      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
        _uniqueNames2.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutDeprecatedLifecycles.add(fiber.type);
      });

      var _sortedNames2 = setToSortedString(_uniqueNames2);

      lowPriorityWarning$1(false, 'componentWillUpdate is deprecated and will be removed in the next major version. ' + 'Use componentDidUpdate instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillUpdate.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames2);

      pendingComponentWillUpdateWarnings = [];
    }
  };

  ReactStrictModeWarnings.recordDeprecationWarnings = function (fiber, instance) {
    // Dedup strategy: Warn once per component.
    if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) {
      return;
    }

    // Don't warn about react-lifecycles-compat polyfilled components.
    if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
      pendingComponentWillMountWarnings.push(fiber);
    }
    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
      pendingComponentWillReceivePropsWarnings.push(fiber);
    }
    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
      pendingComponentWillUpdateWarnings.push(fiber);
    }
  };

  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
    var strictRoot = findStrictRoot(fiber);
    if (strictRoot === null) {
      warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
      return;
    }

    // Dedup strategy: Warn once per component.
    // This is difficult to track any other way since component names
    // are often vague and are likely to collide between 3rd party libraries.
    // An expand property is probably okay to use here since it's DEV-only,
    // and will only be set in the event of serious warnings.
    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
      return;
    }

    var warningsForRoot = void 0;
    if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {
      warningsForRoot = {
        UNSAFE_componentWillMount: [],
        UNSAFE_componentWillReceiveProps: [],
        UNSAFE_componentWillUpdate: []
      };

      pendingUnsafeLifecycleWarnings.set(strictRoot, warningsForRoot);
    } else {
      warningsForRoot = pendingUnsafeLifecycleWarnings.get(strictRoot);
    }

    var unsafeLifecycles = [];
    if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillMount === 'function') {
      unsafeLifecycles.push('UNSAFE_componentWillMount');
    }
    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
      unsafeLifecycles.push('UNSAFE_componentWillReceiveProps');
    }
    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillUpdate === 'function') {
      unsafeLifecycles.push('UNSAFE_componentWillUpdate');
    }

    if (unsafeLifecycles.length > 0) {
      unsafeLifecycles.forEach(function (lifecycle) {
        warningsForRoot[lifecycle].push(fiber);
      });
    }
  };

  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
    var strictRoot = findStrictRoot(fiber);
    if (strictRoot === null) {
      warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
      return;
    }

    // Dedup strategy: Warn once per component.
    if (didWarnAboutLegacyContext.has(fiber.type)) {
      return;
    }

    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
      if (warningsForRoot === undefined) {
        warningsForRoot = [];
        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
      }
      warningsForRoot.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
      var uniqueNames = new Set();
      fiberArray.forEach(function (fiber) {
        uniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutLegacyContext.add(fiber.type);
      });

      var sortedNames = setToSortedString(uniqueNames);
      var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);

      warningWithoutStack$1(false, 'Legacy context API has been detected within a strict-mode tree: %s' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, sortedNames);
    });
  };
}

// This lets us hook into Fiber to debug what it's doing.
// See https://github.com/facebook/react/pull/8033.
// This is not part of the public API, not even for React DevTools.
// You may only inject a debugTool if you work on React Fiber itself.
var ReactFiberInstrumentation = {
  debugTool: null
};

var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;

// TODO: Offscreen updates should never suspend. However, a promise that
// suspended inside an offscreen subtree should be able to ping at the priority
// of the outer render.

function markPendingPriorityLevel(root, expirationTime) {
  // If there's a gap between completing a failed root and retrying it,
  // additional updates may be scheduled. Clear `didError`, in case the update
  // is sufficient to fix the error.
  root.didError = false;

  // Update the latest and earliest pending times
  var earliestPendingTime = root.earliestPendingTime;
  if (earliestPendingTime === NoWork) {
    // No other pending updates.
    root.earliestPendingTime = root.latestPendingTime = expirationTime;
  } else {
    if (earliestPendingTime < expirationTime) {
      // This is the earliest pending update.
      root.earliestPendingTime = expirationTime;
    } else {
      var latestPendingTime = root.latestPendingTime;
      if (latestPendingTime > expirationTime) {
        // This is the latest pending update
        root.latestPendingTime = expirationTime;
      }
    }
  }
  findNextExpirationTimeToWorkOn(expirationTime, root);
}

function markCommittedPriorityLevels(root, earliestRemainingTime) {
  root.didError = false;

  if (earliestRemainingTime === NoWork) {
    // Fast path. There's no remaining work. Clear everything.
    root.earliestPendingTime = NoWork;
    root.latestPendingTime = NoWork;
    root.earliestSuspendedTime = NoWork;
    root.latestSuspendedTime = NoWork;
    root.latestPingedTime = NoWork;
    findNextExpirationTimeToWorkOn(NoWork, root);
    return;
  }

  if (earliestRemainingTime < root.latestPingedTime) {
    root.latestPingedTime = NoWork;
  }

  // Let's see if the previous latest known pending level was just flushed.
  var latestPendingTime = root.latestPendingTime;
  if (latestPendingTime !== NoWork) {
    if (latestPendingTime > earliestRemainingTime) {
      // We've flushed all the known pending levels.
      root.earliestPendingTime = root.latestPendingTime = NoWork;
    } else {
      var earliestPendingTime = root.earliestPendingTime;
      if (earliestPendingTime > earliestRemainingTime) {
        // We've flushed the earliest known pending level. Set this to the
        // latest pending time.
        root.earliestPendingTime = root.latestPendingTime;
      }
    }
  }

  // Now let's handle the earliest remaining level in the whole tree. We need to
  // decide whether to treat it as a pending level or as suspended. Check
  // it falls within the range of known suspended levels.

  var earliestSuspendedTime = root.earliestSuspendedTime;
  if (earliestSuspendedTime === NoWork) {
    // There's no suspended work. Treat the earliest remaining level as a
    // pending level.
    markPendingPriorityLevel(root, earliestRemainingTime);
    findNextExpirationTimeToWorkOn(NoWork, root);
    return;
  }

  var latestSuspendedTime = root.latestSuspendedTime;
  if (earliestRemainingTime < latestSuspendedTime) {
    // The earliest remaining level is later than all the suspended work. That
    // means we've flushed all the suspended work.
    root.earliestSuspendedTime = NoWork;
    root.latestSuspendedTime = NoWork;
    root.latestPingedTime = NoWork;

    // There's no suspended work. Treat the earliest remaining level as a
    // pending level.
    markPendingPriorityLevel(root, earliestRemainingTime);
    findNextExpirationTimeToWorkOn(NoWork, root);
    return;
  }

  if (earliestRemainingTime > earliestSuspendedTime) {
    // The earliest remaining time is earlier than all the suspended work.
    // Treat it as a pending update.
    markPendingPriorityLevel(root, earliestRemainingTime);
    findNextExpirationTimeToWorkOn(NoWork, root);
    return;
  }

  // The earliest remaining time falls within the range of known suspended
  // levels. We should treat this as suspended work.
  findNextExpirationTimeToWorkOn(NoWork, root);
}

function hasLowerPriorityWork(root, erroredExpirationTime) {
  var latestPendingTime = root.latestPendingTime;
  var latestSuspendedTime = root.latestSuspendedTime;
  var latestPingedTime = root.latestPingedTime;
  return latestPendingTime !== NoWork && latestPendingTime < erroredExpirationTime || latestSuspendedTime !== NoWork && latestSuspendedTime < erroredExpirationTime || latestPingedTime !== NoWork && latestPingedTime < erroredExpirationTime;
}

function isPriorityLevelSuspended(root, expirationTime) {
  var earliestSuspendedTime = root.earliestSuspendedTime;
  var latestSuspendedTime = root.latestSuspendedTime;
  return earliestSuspendedTime !== NoWork && expirationTime <= earliestSuspendedTime && expirationTime >= latestSuspendedTime;
}

function markSuspendedPriorityLevel(root, suspendedTime) {
  root.didError = false;
  clearPing(root, suspendedTime);

  // First, check the known pending levels and update them if needed.
  var earliestPendingTime = root.earliestPendingTime;
  var latestPendingTime = root.latestPendingTime;
  if (earliestPendingTime === suspendedTime) {
    if (latestPendingTime === suspendedTime) {
      // Both known pending levels were suspended. Clear them.
      root.earliestPendingTime = root.latestPendingTime = NoWork;
    } else {
      // The earliest pending level was suspended. Clear by setting it to the
      // latest pending level.
      root.earliestPendingTime = latestPendingTime;
    }
  } else if (latestPendingTime === suspendedTime) {
    // The latest pending level was suspended. Clear by setting it to the
    // latest pending level.
    root.latestPendingTime = earliestPendingTime;
  }

  // Finally, update the known suspended levels.
  var earliestSuspendedTime = root.earliestSuspendedTime;
  var latestSuspendedTime = root.latestSuspendedTime;
  if (earliestSuspendedTime === NoWork) {
    // No other suspended levels.
    root.earliestSuspendedTime = root.latestSuspendedTime = suspendedTime;
  } else {
    if (earliestSuspendedTime < suspendedTime) {
      // This is the earliest suspended level.
      root.earliestSuspendedTime = suspendedTime;
    } else if (latestSuspendedTime > suspendedTime) {
      // This is the latest suspended level
      root.latestSuspendedTime = suspendedTime;
    }
  }

  findNextExpirationTimeToWorkOn(suspendedTime, root);
}

function markPingedPriorityLevel(root, pingedTime) {
  root.didError = false;

  // TODO: When we add back resuming, we need to ensure the progressed work
  // is thrown out and not reused during the restarted render. One way to
  // invalidate the progressed work is to restart at expirationTime + 1.
  var latestPingedTime = root.latestPingedTime;
  if (latestPingedTime === NoWork || latestPingedTime > pingedTime) {
    root.latestPingedTime = pingedTime;
  }
  findNextExpirationTimeToWorkOn(pingedTime, root);
}

function clearPing(root, completedTime) {
  var latestPingedTime = root.latestPingedTime;
  if (latestPingedTime >= completedTime) {
    root.latestPingedTime = NoWork;
  }
}

function findEarliestOutstandingPriorityLevel(root, renderExpirationTime) {
  var earliestExpirationTime = renderExpirationTime;

  var earliestPendingTime = root.earliestPendingTime;
  var earliestSuspendedTime = root.earliestSuspendedTime;
  if (earliestPendingTime > earliestExpirationTime) {
    earliestExpirationTime = earliestPendingTime;
  }
  if (earliestSuspendedTime > earliestExpirationTime) {
    earliestExpirationTime = earliestSuspendedTime;
  }
  return earliestExpirationTime;
}

function didExpireAtExpirationTime(root, currentTime) {
  var expirationTime = root.expirationTime;
  if (expirationTime !== NoWork && currentTime <= expirationTime) {
    // The root has expired. Flush all work up to the current time.
    root.nextExpirationTimeToWorkOn = currentTime;
  }
}

function findNextExpirationTimeToWorkOn(completedExpirationTime, root) {
  var earliestSuspendedTime = root.earliestSuspendedTime;
  var latestSuspendedTime = root.latestSuspendedTime;
  var earliestPendingTime = root.earliestPendingTime;
  var latestPingedTime = root.latestPingedTime;

  // Work on the earliest pending time. Failing that, work on the latest
  // pinged time.
  var nextExpirationTimeToWorkOn = earliestPendingTime !== NoWork ? earliestPendingTime : latestPingedTime;

  // If there is no pending or pinged work, check if there's suspended work
  // that's lower priority than what we just completed.
  if (nextExpirationTimeToWorkOn === NoWork && (completedExpirationTime === NoWork || latestSuspendedTime < completedExpirationTime)) {
    // The lowest priority suspended work is the work most likely to be
    // committed next. Let's start rendering it again, so that if it times out,
    // it's ready to commit.
    nextExpirationTimeToWorkOn = latestSuspendedTime;
  }

  var expirationTime = nextExpirationTimeToWorkOn;
  if (expirationTime !== NoWork && earliestSuspendedTime > expirationTime) {
    // Expire using the earliest known expiration time.
    expirationTime = earliestSuspendedTime;
  }

  root.nextExpirationTimeToWorkOn = nextExpirationTimeToWorkOn;
  root.expirationTime = expirationTime;
}

function resolveDefaultProps(Component, baseProps) {
  if (Component && Component.defaultProps) {
    // Resolve default props. Taken from ReactElement
    var props = _assign({}, baseProps);
    var defaultProps = Component.defaultProps;
    for (var propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
    return props;
  }
  return baseProps;
}

function readLazyComponentType(lazyComponent) {
  var status = lazyComponent._status;
  var result = lazyComponent._result;
  switch (status) {
    case Resolved:
      {
        var Component = result;
        return Component;
      }
    case Rejected:
      {
        var error = result;
        throw error;
      }
    case Pending:
      {
        var thenable = result;
        throw thenable;
      }
    default:
      {
        lazyComponent._status = Pending;
        var ctor = lazyComponent._ctor;
        var _thenable = ctor();
        _thenable.then(function (moduleObject) {
          if (lazyComponent._status === Pending) {
            var defaultExport = moduleObject.default;
            {
              if (defaultExport === undefined) {
                warning$1(false, 'lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            lazyComponent._status = Resolved;
            lazyComponent._result = defaultExport;
          }
        }, function (error) {
          if (lazyComponent._status === Pending) {
            lazyComponent._status = Rejected;
            lazyComponent._result = error;
          }
        });
        // Handle synchronous thenables.
        switch (lazyComponent._status) {
          case Resolved:
            return lazyComponent._result;
          case Rejected:
            throw lazyComponent._result;
        }
        lazyComponent._result = _thenable;
        throw _thenable;
      }
  }
}

var fakeInternalInstance = {};
var isArray$1 = Array.isArray;

// React.Component uses a shared frozen object by default.
// We'll use it to determine whether we need to initialize legacy refs.
var emptyRefsObject = new React.Component().refs;

var didWarnAboutStateAssignmentForComponent = void 0;
var didWarnAboutUninitializedState = void 0;
var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0;
var didWarnAboutLegacyLifecyclesAndDerivedState = void 0;
var didWarnAboutUndefinedDerivedState = void 0;
var warnOnUndefinedDerivedState = void 0;
var warnOnInvalidCallback$1 = void 0;
var didWarnAboutDirectlyAssigningPropsToState = void 0;
var didWarnAboutContextTypeAndContextTypes = void 0;
var didWarnAboutInvalidateContextType = void 0;

{
  didWarnAboutStateAssignmentForComponent = new Set();
  didWarnAboutUninitializedState = new Set();
  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
  didWarnAboutDirectlyAssigningPropsToState = new Set();
  didWarnAboutUndefinedDerivedState = new Set();
  didWarnAboutContextTypeAndContextTypes = new Set();
  didWarnAboutInvalidateContextType = new Set();

  var didWarnOnInvalidCallback = new Set();

  warnOnInvalidCallback$1 = function (callback, callerName) {
    if (callback === null || typeof callback === 'function') {
      return;
    }
    var key = callerName + '_' + callback;
    if (!didWarnOnInvalidCallback.has(key)) {
      didWarnOnInvalidCallback.add(key);
      warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  };

  warnOnUndefinedDerivedState = function (type, partialState) {
    if (partialState === undefined) {
      var componentName = getComponentName(type) || 'Component';
      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
        didWarnAboutUndefinedDerivedState.add(componentName);
        warningWithoutStack$1(false, '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
      }
    }
  };

  // This is so gross but it's at least non-critical and can be removed if
  // it causes problems. This is meant to give a nicer error message for
  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
  // ...)) which otherwise throws a "_processChildContext is not a function"
  // exception.
  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
    enumerable: false,
    value: function () {
      invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
    }
  });
  Object.freeze(fakeInternalInstance);
}

function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
  var prevState = workInProgress.memoizedState;

  {
    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      // Invoke the function an extra time to help detect side-effects.
      getDerivedStateFromProps(nextProps, prevState);
    }
  }

  var partialState = getDerivedStateFromProps(nextProps, prevState);

  {
    warnOnUndefinedDerivedState(ctor, partialState);
  }
  // Merge the partial state and the previous state.
  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
  workInProgress.memoizedState = memoizedState;

  // Once the update queue is empty, persist the derived state onto the
  // base state.
  var updateQueue = workInProgress.updateQueue;
  if (updateQueue !== null && workInProgress.expirationTime === NoWork) {
    updateQueue.baseState = memoizedState;
  }
}

var classComponentUpdater = {
  isMounted: isMounted,
  enqueueSetState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTime();
    var expirationTime = computeExpirationForFiber(currentTime, fiber);

    var update = createUpdate(expirationTime);
    update.payload = payload;
    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback$1(callback, 'setState');
      }
      update.callback = callback;
    }

    flushPassiveEffects();
    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueReplaceState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTime();
    var expirationTime = computeExpirationForFiber(currentTime, fiber);

    var update = createUpdate(expirationTime);
    update.tag = ReplaceState;
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback$1(callback, 'replaceState');
      }
      update.callback = callback;
    }

    flushPassiveEffects();
    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueForceUpdate: function (inst, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTime();
    var expirationTime = computeExpirationForFiber(currentTime, fiber);

    var update = createUpdate(expirationTime);
    update.tag = ForceUpdate;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback$1(callback, 'forceUpdate');
      }
      update.callback = callback;
    }

    flushPassiveEffects();
    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  }
};

function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
  var instance = workInProgress.stateNode;
  if (typeof instance.shouldComponentUpdate === 'function') {
    startPhaseTimer(workInProgress, 'shouldComponentUpdate');
    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
    stopPhaseTimer();

    {
      !(shouldUpdate !== undefined) ? warningWithoutStack$1(false, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component') : void 0;
    }

    return shouldUpdate;
  }

  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
  }

  return true;
}

function checkClassInstance(workInProgress, ctor, newProps) {
  var instance = workInProgress.stateNode;
  {
    var name = getComponentName(ctor) || 'Component';
    var renderPresent = instance.render;

    if (!renderPresent) {
      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
        warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
      } else {
        warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
      }
    }

    var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
    !noGetInitialStateOnES6 ? warningWithoutStack$1(false, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name) : void 0;
    var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
    !noGetDefaultPropsOnES6 ? warningWithoutStack$1(false, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name) : void 0;
    var noInstancePropTypes = !instance.propTypes;
    !noInstancePropTypes ? warningWithoutStack$1(false, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name) : void 0;
    var noInstanceContextType = !instance.contextType;
    !noInstanceContextType ? warningWithoutStack$1(false, 'contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name) : void 0;
    var noInstanceContextTypes = !instance.contextTypes;
    !noInstanceContextTypes ? warningWithoutStack$1(false, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name) : void 0;

    if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
      didWarnAboutContextTypeAndContextTypes.add(ctor);
      warningWithoutStack$1(false, '%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
    }

    var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
    !noComponentShouldUpdate ? warningWithoutStack$1(false, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name) : void 0;
    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
      warningWithoutStack$1(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
    }
    var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
    !noComponentDidUnmount ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name) : void 0;
    var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
    !noComponentDidReceiveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name) : void 0;
    var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
    !noComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name) : void 0;
    var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';
    !noUnsafeComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name) : void 0;
    var hasMutatedProps = instance.props !== newProps;
    !(instance.props === undefined || !hasMutatedProps) ? warningWithoutStack$1(false, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name) : void 0;
    var noInstanceDefaultProps = !instance.defaultProps;
    !noInstanceDefaultProps ? warningWithoutStack$1(false, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name) : void 0;

    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
      warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
    }

    var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';
    !noInstanceGetDerivedStateFromProps ? warningWithoutStack$1(false, '%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
    var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromError !== 'function';
    !noInstanceGetDerivedStateFromCatch ? warningWithoutStack$1(false, '%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
    var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== 'function';
    !noStaticGetSnapshotBeforeUpdate ? warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name) : void 0;
    var _state = instance.state;
    if (_state && (typeof _state !== 'object' || isArray$1(_state))) {
      warningWithoutStack$1(false, '%s.state: must be set to an object or null', name);
    }
    if (typeof instance.getChildContext === 'function') {
      !(typeof ctor.childContextTypes === 'object') ? warningWithoutStack$1(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name) : void 0;
    }
  }
}

function adoptClassInstance(workInProgress, instance) {
  instance.updater = classComponentUpdater;
  workInProgress.stateNode = instance;
  // The instance needs access to the fiber so that it can schedule updates
  set(instance, workInProgress);
  {
    instance._reactInternalInstance = fakeInternalInstance;
  }
}

function constructClassInstance(workInProgress, ctor, props, renderExpirationTime) {
  var isLegacyContextConsumer = false;
  var unmaskedContext = emptyContextObject;
  var context = null;
  var contextType = ctor.contextType;

  {
    if ('contextType' in ctor) {
      var isValid =
      // Allow null for conditional declaration
      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
        didWarnAboutInvalidateContextType.add(ctor);

        var addendum = '';
        if (contextType === undefined) {
          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
        } else if (typeof contextType !== 'object') {
          addendum = ' However, it is set to a ' + typeof contextType + '.';
        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
          addendum = ' Did you accidentally pass the Context.Provider instead?';
        } else if (contextType._context !== undefined) {
          // <Context.Consumer>
          addendum = ' Did you accidentally pass the Context.Consumer instead?';
        } else {
          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
        }
        warningWithoutStack$1(false, '%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
      }
    }
  }

  if (typeof contextType === 'object' && contextType !== null) {
    context = readContext(contextType);
  } else {
    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    var contextTypes = ctor.contextTypes;
    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
  }

  // Instantiate twice to help detect side-effects.
  {
    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      new ctor(props, context); // eslint-disable-line no-new
    }
  }

  var instance = new ctor(props, context);
  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
  adoptClassInstance(workInProgress, instance);

  {
    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
      var componentName = getComponentName(ctor) || 'Component';
      if (!didWarnAboutUninitializedState.has(componentName)) {
        didWarnAboutUninitializedState.add(componentName);
        warningWithoutStack$1(false, '`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
      }
    }

    // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Warn about these lifecycles if they are present.
    // Don't warn about react-lifecycles-compat polyfilled methods though.
    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
      var foundWillMountName = null;
      var foundWillReceivePropsName = null;
      var foundWillUpdateName = null;
      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
        foundWillMountName = 'componentWillMount';
      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
        foundWillMountName = 'UNSAFE_componentWillMount';
      }
      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
        foundWillReceivePropsName = 'componentWillReceiveProps';
      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
      }
      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
        foundWillUpdateName = 'componentWillUpdate';
      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
      }
      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var _componentName = getComponentName(ctor) || 'Component';
        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
          warningWithoutStack$1(false, 'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks', _componentName, newApiName, foundWillMountName !== null ? '\n  ' + foundWillMountName : '', foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '', foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '');
        }
      }
    }
  }

  // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // ReactFiberContext usually updates this cache but can't for newly-created instances.
  if (isLegacyContextConsumer) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return instance;
}

function callComponentWillMount(workInProgress, instance) {
  startPhaseTimer(workInProgress, 'componentWillMount');
  var oldState = instance.state;

  if (typeof instance.componentWillMount === 'function') {
    instance.componentWillMount();
  }
  if (typeof instance.UNSAFE_componentWillMount === 'function') {
    instance.UNSAFE_componentWillMount();
  }

  stopPhaseTimer();

  if (oldState !== instance.state) {
    {
      warningWithoutStack$1(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
    }
    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
}

function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
  var oldState = instance.state;
  startPhaseTimer(workInProgress, 'componentWillReceiveProps');
  if (typeof instance.componentWillReceiveProps === 'function') {
    instance.componentWillReceiveProps(newProps, nextContext);
  }
  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
  }
  stopPhaseTimer();

  if (instance.state !== oldState) {
    {
      var componentName = getComponentName(workInProgress.type) || 'Component';
      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
        didWarnAboutStateAssignmentForComponent.add(componentName);
        warningWithoutStack$1(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
      }
    }
    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
}

// Invokes the mount life-cycles on a previously never rendered instance.
function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  {
    checkClassInstance(workInProgress, ctor, newProps);
  }

  var instance = workInProgress.stateNode;
  instance.props = newProps;
  instance.state = workInProgress.memoizedState;
  instance.refs = emptyRefsObject;

  var contextType = ctor.contextType;
  if (typeof contextType === 'object' && contextType !== null) {
    instance.context = readContext(contextType);
  } else {
    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    instance.context = getMaskedContext(workInProgress, unmaskedContext);
  }

  {
    if (instance.state === newProps) {
      var componentName = getComponentName(ctor) || 'Component';
      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
        didWarnAboutDirectlyAssigningPropsToState.add(componentName);
        warningWithoutStack$1(false, '%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);

      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
    }

    if (warnAboutDeprecatedLifecycles) {
      ReactStrictModeWarnings.recordDeprecationWarnings(workInProgress, instance);
    }
  }

  var updateQueue = workInProgress.updateQueue;
  if (updateQueue !== null) {
    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
    instance.state = workInProgress.memoizedState;
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    instance.state = workInProgress.memoizedState;
  }

  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.
  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
    callComponentWillMount(workInProgress, instance);
    // If we had additional state updates during this life-cycle, let's
    // process them now.
    updateQueue = workInProgress.updateQueue;
    if (updateQueue !== null) {
      processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
      instance.state = workInProgress.memoizedState;
    }
  }

  if (typeof instance.componentDidMount === 'function') {
    workInProgress.effectTag |= Update;
  }
}

function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;

  var oldProps = workInProgress.memoizedProps;
  instance.props = oldProps;

  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = void 0;
  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';

  // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.

  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.
  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();

  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  var updateQueue = workInProgress.updateQueue;
  if (updateQueue !== null) {
    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
    newState = workInProgress.memoizedState;
  }
  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }
    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillMount');
      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }
      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }
      stopPhaseTimer();
    }
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }

    // If shouldComponentUpdate returned false, we should still update the
    // memoized state to indicate that this work can be reused.
    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  }

  // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.
  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;

  return shouldUpdate;
}

// Invokes the update life-cycles and returns false if it shouldn't rerender.
function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;

  var oldProps = workInProgress.memoizedProps;
  instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);

  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = void 0;
  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';

  // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.

  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.
  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();

  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  var updateQueue = workInProgress.updateQueue;
  if (updateQueue !== null) {
    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
    newState = workInProgress.memoizedState;
  }

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }
    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    }
    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillUpdate');
      if (typeof instance.componentWillUpdate === 'function') {
        instance.componentWillUpdate(newProps, newState, nextContext);
      }
      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
      }
      stopPhaseTimer();
    }
    if (typeof instance.componentDidUpdate === 'function') {
      workInProgress.effectTag |= Update;
    }
    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      workInProgress.effectTag |= Snapshot;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }
    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    }

    // If shouldComponentUpdate returned false, we should still update the
    // memoized props/state to indicate that this work can be reused.
    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  }

  // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.
  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;

  return shouldUpdate;
}

var didWarnAboutMaps = void 0;
var didWarnAboutGenerators = void 0;
var didWarnAboutStringRefInStrictMode = void 0;
var ownerHasKeyUseWarning = void 0;
var ownerHasFunctionTypeWarning = void 0;
var warnForMissingKey = function (child) {};

{
  didWarnAboutMaps = false;
  didWarnAboutGenerators = false;
  didWarnAboutStringRefInStrictMode = {};

  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */
  ownerHasKeyUseWarning = {};
  ownerHasFunctionTypeWarning = {};

  warnForMissingKey = function (child) {
    if (child === null || typeof child !== 'object') {
      return;
    }
    if (!child._store || child._store.validated || child.key != null) {
      return;
    }
    !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    child._store.validated = true;

    var currentComponentErrorInfo = 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();
    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }
    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

    warning$1(false, 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
  };
}

var isArray = Array.isArray;

function coerceRef(returnFiber, current$$1, element) {
  var mixedRef = element.ref;
  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
    {
      if (returnFiber.mode & StrictMode) {
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (!didWarnAboutStringRefInStrictMode[componentName]) {
          warningWithoutStack$1(false, 'A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using createRef() instead.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-string-ref', mixedRef, getStackByFiberInDevAndProd(returnFiber));
          didWarnAboutStringRefInStrictMode[componentName] = true;
        }
      }
    }

    if (element._owner) {
      var owner = element._owner;
      var inst = void 0;
      if (owner) {
        var ownerFiber = owner;
        !(ownerFiber.tag === ClassComponent) ? invariant(false, 'Function components cannot have refs. Did you mean to use React.forwardRef()?') : void 0;
        inst = ownerFiber.stateNode;
      }
      !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
      var stringRef = '' + mixedRef;
      // Check if previous string ref matches new string ref
      if (current$$1 !== null && current$$1.ref !== null && typeof current$$1.ref === 'function' && current$$1.ref._stringRef === stringRef) {
        return current$$1.ref;
      }
      var ref = function (value) {
        var refs = inst.refs;
        if (refs === emptyRefsObject) {
          // This is a lazy pooled frozen object, so we need to initialize.
          refs = inst.refs = {};
        }
        if (value === null) {
          delete refs[stringRef];
        } else {
          refs[stringRef] = value;
        }
      };
      ref._stringRef = stringRef;
      return ref;
    } else {
      !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function, a string, an object returned by React.createRef(), or null.') : void 0;
      !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component\'s render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.', mixedRef) : void 0;
    }
  }
  return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
  if (returnFiber.type !== 'textarea') {
    var addendum = '';
    {
      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
    }
    invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
  }
}

function warnOnFunctionType() {
  var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

  if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
    return;
  }
  ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;

  warning$1(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
}

// This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.
function ChildReconciler(shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return;
    }
    // Deletions are added in reversed order so we add it to the front.
    // At this point, the return fiber's effect list is empty except for
    // deletions, so we can just append the deletion to the list. The remaining
    // effects aren't added until the complete phase. Once we implement
    // resuming, this may not be true.
    var last = returnFiber.lastEffect;
    if (last !== null) {
      last.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    childToDelete.nextEffect = null;
    childToDelete.effectTag = Deletion;
  }

  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return null;
    }

    // TODO: For the shouldClone case, this could be micro-optimized a bit by
    // assuming that after the first child we've already added everything.
    var childToDelete = currentFirstChild;
    while (childToDelete !== null) {
      deleteChild(returnFiber, childToDelete);
      childToDelete = childToDelete.sibling;
    }
    return null;
  }

  function mapRemainingChildren(returnFiber, currentFirstChild) {
    // Add the remaining children to a temporary map so that we can find them by
    // keys quickly. Implicit (null) keys get added to this set with their index
    var existingChildren = new Map();

    var existingChild = currentFirstChild;
    while (existingChild !== null) {
      if (existingChild.key !== null) {
        existingChildren.set(existingChild.key, existingChild);
      } else {
        existingChildren.set(existingChild.index, existingChild);
      }
      existingChild = existingChild.sibling;
    }
    return existingChildren;
  }

  function useFiber(fiber, pendingProps, expirationTime) {
    // We currently set sibling to null and index to 0 here because it is easy
    // to forget to do before returning it. E.g. for the single child case.
    var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
    clone.index = 0;
    clone.sibling = null;
    return clone;
  }

  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;
    if (!shouldTrackSideEffects) {
      // Noop.
      return lastPlacedIndex;
    }
    var current$$1 = newFiber.alternate;
    if (current$$1 !== null) {
      var oldIndex = current$$1.index;
      if (oldIndex < lastPlacedIndex) {
        // This is a move.
        newFiber.effectTag = Placement;
        return lastPlacedIndex;
      } else {
        // This item can stay in place.
        return oldIndex;
      }
    } else {
      // This is an insertion.
      newFiber.effectTag = Placement;
      return lastPlacedIndex;
    }
  }

  function placeSingleChild(newFiber) {
    // This is simpler for the single child case. We only need to do a
    // placement for inserting new children.
    if (shouldTrackSideEffects && newFiber.alternate === null) {
      newFiber.effectTag = Placement;
    }
    return newFiber;
  }

  function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
    if (current$$1 === null || current$$1.tag !== HostText) {
      // Insert
      var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current$$1, textContent, expirationTime);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateElement(returnFiber, current$$1, element, expirationTime) {
    if (current$$1 !== null && current$$1.elementType === element.type) {
      // Move based on index
      var existing = useFiber(current$$1, element.props, expirationTime);
      existing.ref = coerceRef(returnFiber, current$$1, element);
      existing.return = returnFiber;
      {
        existing._debugSource = element._source;
        existing._debugOwner = element._owner;
      }
      return existing;
    } else {
      // Insert
      var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
      created.ref = coerceRef(returnFiber, current$$1, element);
      created.return = returnFiber;
      return created;
    }
  }

  function updatePortal(returnFiber, current$$1, portal, expirationTime) {
    if (current$$1 === null || current$$1.tag !== HostPortal || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) {
      // Insert
      var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current$$1, portal.children || [], expirationTime);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
    if (current$$1 === null || current$$1.tag !== Fragment) {
      // Insert
      var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current$$1, fragment, expirationTime);
      existing.return = returnFiber;
      return existing;
    }
  }

  function createChild(returnFiber, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
            _created.ref = coerceRef(returnFiber, null, newChild);
            _created.return = returnFiber;
            return _created;
          }
        case REACT_PORTAL_TYPE:
          {
            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
            _created2.return = returnFiber;
            return _created2;
          }
      }

      if (isArray(newChild) || getIteratorFn(newChild)) {
        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
        _created3.return = returnFiber;
        return _created3;
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
    // Update the fiber if the keys match, otherwise return null.

    var key = oldFiber !== null ? oldFiber.key : null;

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      if (key !== null) {
        return null;
      }
      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.key === key) {
              if (newChild.type === REACT_FRAGMENT_TYPE) {
                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
              }
              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }
        case REACT_PORTAL_TYPE:
          {
            if (newChild.key === key) {
              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }
      }

      if (isArray(newChild) || getIteratorFn(newChild)) {
        if (key !== null) {
          return null;
        }

        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys, so we neither have to check the old nor
      // new node for the key. If both are text nodes, they match.
      var matchedFiber = existingChildren.get(newIdx) || null;
      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
            if (newChild.type === REACT_FRAGMENT_TYPE) {
              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
            }
            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
          }
        case REACT_PORTAL_TYPE:
          {
            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
            return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
          }
      }

      if (isArray(newChild) || getIteratorFn(newChild)) {
        var _matchedFiber3 = existingChildren.get(newIdx) || null;
        return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  /**
   * Warns if there is a duplicate or missing key
   */
  function warnOnInvalidKey(child, knownKeys) {
    {
      if (typeof child !== 'object' || child === null) {
        return knownKeys;
      }
      switch (child.$$typeof) {
        case REACT_ELEMENT_TYPE:
        case REACT_PORTAL_TYPE:
          warnForMissingKey(child);
          var key = child.key;
          if (typeof key !== 'string') {
            break;
          }
          if (knownKeys === null) {
            knownKeys = new Set();
            knownKeys.add(key);
            break;
          }
          if (!knownKeys.has(key)) {
            knownKeys.add(key);
            break;
          }
          warning$1(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
          break;
        default:
          break;
      }
    }
    return knownKeys;
  }

  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
    // This algorithm can't optimize by searching from both ends since we
    // don't have backpointers on fibers. I'm trying to see how far we can get
    // with that model. If it ends up not being worth the tradeoffs, we can
    // add it later.

    // Even with a two ended optimization, we'd want to optimize for the case
    // where there are few changes and brute force the comparison instead of
    // going for the Map. It'd like to explore hitting that path first in
    // forward-only mode and only go for the Map once we notice that we need
    // lots of look ahead. This doesn't handle reversal as well as two ended
    // search but that's unusual. Besides, for the two ended optimization to
    // work on Iterables, we'd need to copy the whole set.

    // In this first iteration, we'll just live with hitting the bad case
    // (adding everything to a Map) in for every insert/move.

    // If you change this code, also update reconcileChildrenIterator() which
    // uses the same algorithm.

    {
      // First, validate keys.
      var knownKeys = null;
      for (var i = 0; i < newChildren.length; i++) {
        var child = newChildren[i];
        knownKeys = warnOnInvalidKey(child, knownKeys);
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;

    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;
    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }
      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }
        break;
      }
      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }
      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }
      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (newIdx === newChildren.length) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
        if (!_newFiber) {
          continue;
        }
        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber;
        } else {
          previousNewFiber.sibling = _newFiber;
        }
        previousNewFiber = _newFiber;
      }
      return resultingFirstChild;
    }

    // Add all children to a key map for quick lookups.
    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

    // Keep scanning and use the map to restore deleted items as moves.
    for (; newIdx < newChildren.length; newIdx++) {
      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
      if (_newFiber2) {
        if (shouldTrackSideEffects) {
          if (_newFiber2.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
          }
        }
        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber2;
        } else {
          previousNewFiber.sibling = _newFiber2;
        }
        previousNewFiber = _newFiber2;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
    // This is the same implementation as reconcileChildrenArray(),
    // but using the iterator instead.

    var iteratorFn = getIteratorFn(newChildrenIterable);
    !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;

    {
      // We don't support rendering Generators because it's a mutation.
      // See https://github.com/facebook/react/issues/12995
      if (typeof Symbol === 'function' &&
      // $FlowFixMe Flow doesn't know about toStringTag
      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
        !didWarnAboutGenerators ? warning$1(false, 'Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.') : void 0;
        didWarnAboutGenerators = true;
      }

      // Warn about using Maps as children
      if (newChildrenIterable.entries === iteratorFn) {
        !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
        didWarnAboutMaps = true;
      }

      // First, validate keys.
      // We'll get a different iterator later for the main pass.
      var _newChildren = iteratorFn.call(newChildrenIterable);
      if (_newChildren) {
        var knownKeys = null;
        var _step = _newChildren.next();
        for (; !_step.done; _step = _newChildren.next()) {
          var child = _step.value;
          knownKeys = warnOnInvalidKey(child, knownKeys);
        }
      }
    }

    var newChildren = iteratorFn.call(newChildrenIterable);
    !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;

    var resultingFirstChild = null;
    var previousNewFiber = null;

    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;

    var step = newChildren.next();
    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }
      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (!oldFiber) {
          oldFiber = nextOldFiber;
        }
        break;
      }
      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }
      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }
      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (step.done) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
        if (_newFiber3 === null) {
          continue;
        }
        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber3;
        } else {
          previousNewFiber.sibling = _newFiber3;
        }
        previousNewFiber = _newFiber3;
      }
      return resultingFirstChild;
    }

    // Add all children to a key map for quick lookups.
    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

    // Keep scanning and use the map to restore deleted items as moves.
    for (; !step.done; newIdx++, step = newChildren.next()) {
      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
      if (_newFiber4 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber4.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
          }
        }
        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber4;
        } else {
          previousNewFiber.sibling = _newFiber4;
        }
        previousNewFiber = _newFiber4;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
    // There's no need to check for keys on text nodes since we don't have a
    // way to define them.
    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
      // We already have an existing node so let's just update it and delete
      // the rest.
      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
      var existing = useFiber(currentFirstChild, textContent, expirationTime);
      existing.return = returnFiber;
      return existing;
    }
    // The existing first child is not a text node so we need to create one
    // and delete the existing ones.
    deleteRemainingChildren(returnFiber, currentFirstChild);
    var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  }

  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
    var key = element.key;
    var child = currentFirstChild;
    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.elementType === element.type) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
          existing.ref = coerceRef(returnFiber, child, element);
          existing.return = returnFiber;
          {
            existing._debugSource = element._source;
            existing._debugOwner = element._owner;
          }
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }
      child = child.sibling;
    }

    if (element.type === REACT_FRAGMENT_TYPE) {
      var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
      created.return = returnFiber;
      return created;
    } else {
      var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
      _created4.return = returnFiber;
      return _created4;
    }
  }

  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
    var key = portal.key;
    var child = currentFirstChild;
    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, portal.children || [], expirationTime);
          existing.return = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }
      child = child.sibling;
    }

    var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  }

  // This API will tag the children with the side-effect of the reconciliation
  // itself. They will be added to the side-effect list as we pass through the
  // children and the parent.
  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
    // This function is not recursive.
    // If the top level item is an array, we treat it as a set of children,
    // not as a fragment. Nested arrays on the other hand will be treated as
    // fragment nodes. Recursion happens at the normal flow.

    // Handle top level unkeyed fragments as if they were arrays.
    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
    // We treat the ambiguous cases above the same.
    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
    if (isUnkeyedTopLevelFragment) {
      newChild = newChild.props.children;
    }

    // Handle object types
    var isObject = typeof newChild === 'object' && newChild !== null;

    if (isObject) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
        case REACT_PORTAL_TYPE:
          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
      }
    }

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
    }

    if (isArray(newChild)) {
      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (getIteratorFn(newChild)) {
      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (isObject) {
      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }
    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
      // If the new child is undefined, and the return fiber is a composite
      // component, throw an error. If Fiber return types are disabled,
      // we already threw above.
      switch (returnFiber.tag) {
        case ClassComponent:
          {
            {
              var instance = returnFiber.stateNode;
              if (instance.render._isMockFunction) {
                // We allow auto-mocks to proceed as if they're returning null.
                break;
              }
            }
          }
        // Intentionally fall through to the next case, which handles both
        // functions and classes
        // eslint-disable-next-lined no-fallthrough
        case FunctionComponent:
          {
            var Component = returnFiber.type;
            invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
          }
      }
    }

    // Remaining cases are all treated as empty.
    return deleteRemainingChildren(returnFiber, currentFirstChild);
  }

  return reconcileChildFibers;
}

var reconcileChildFibers = ChildReconciler(true);
var mountChildFibers = ChildReconciler(false);

function cloneChildFibers(current$$1, workInProgress) {
  !(current$$1 === null || workInProgress.child === current$$1.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;

  if (workInProgress.child === null) {
    return;
  }

  var currentChild = workInProgress.child;
  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
  workInProgress.child = newChild;

  newChild.return = workInProgress;
  while (currentChild.sibling !== null) {
    currentChild = currentChild.sibling;
    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
    newChild.return = workInProgress;
  }
  newChild.sibling = null;
}

var NO_CONTEXT = {};

var contextStackCursor$1 = createCursor(NO_CONTEXT);
var contextFiberStackCursor = createCursor(NO_CONTEXT);
var rootInstanceStackCursor = createCursor(NO_CONTEXT);

function requiredContext(c) {
  !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  return c;
}

function getRootHostContainer() {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  return rootInstance;
}

function pushHostContainer(fiber, nextRootInstance) {
  // Push current root instance onto the stack;
  // This allows us to reset root when portals are popped.
  push(rootInstanceStackCursor, nextRootInstance, fiber);
  // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.
  push(contextFiberStackCursor, fiber, fiber);

  // Finally, we need to push the host context to the stack.
  // However, we can't just call getRootHostContext() and push it because
  // we'd have a different number of entries on the stack depending on
  // whether getRootHostContext() throws somewhere in renderer code or not.
  // So we push an empty value first. This lets us safely unwind on errors.
  push(contextStackCursor$1, NO_CONTEXT, fiber);
  var nextRootContext = getRootHostContext(nextRootInstance);
  // Now that we know this function doesn't throw, replace it.
  pop(contextStackCursor$1, fiber);
  push(contextStackCursor$1, nextRootContext, fiber);
}

function popHostContainer(fiber) {
  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
  pop(rootInstanceStackCursor, fiber);
}

function getHostContext() {
  var context = requiredContext(contextStackCursor$1.current);
  return context;
}

function pushHostContext(fiber) {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  var context = requiredContext(contextStackCursor$1.current);
  var nextContext = getChildHostContext(context, fiber.type, rootInstance);

  // Don't push this Fiber's context unless it's unique.
  if (context === nextContext) {
    return;
  }

  // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.
  push(contextFiberStackCursor, fiber, fiber);
  push(contextStackCursor$1, nextContext, fiber);
}

function popHostContext(fiber) {
  // Do not pop unless this Fiber provided the current context.
  // pushHostContext() only pushes Fibers that provide unique contexts.
  if (contextFiberStackCursor.current !== fiber) {
    return;
  }

  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
}

var NoEffect$1 = /*             */0;
var UnmountSnapshot = /*      */2;
var UnmountMutation = /*      */4;
var MountMutation = /*        */8;
var UnmountLayout = /*        */16;
var MountLayout = /*          */32;
var MountPassive = /*         */64;
var UnmountPassive = /*       */128;

var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;


var didWarnAboutMismatchedHooksForComponent = void 0;
{
  didWarnAboutMismatchedHooksForComponent = new Set();
}

// These are set right before calling the component.
var renderExpirationTime = NoWork;
// The work-in-progress fiber. I've named it differently to distinguish it from
// the work-in-progress hook.
var currentlyRenderingFiber$1 = null;

// Hooks are stored as a linked list on the fiber's memoizedState field. The
// current hook list is the list that belongs to the current fiber. The
// work-in-progress hook list is a new list that will be added to the
// work-in-progress fiber.
var currentHook = null;
var nextCurrentHook = null;
var firstWorkInProgressHook = null;
var workInProgressHook = null;
var nextWorkInProgressHook = null;

var remainingExpirationTime = NoWork;
var componentUpdateQueue = null;
var sideEffectTag = 0;

// Updates scheduled during render will trigger an immediate re-render at the
// end of the current pass. We can't store these updates on the normal queue,
// because if the work is aborted, they should be discarded. Because this is
// a relatively rare case, we also don't want to add an additional field to
// either the hook or queue object types. So we store them in a lazily create
// map of queue -> render-phase updates, which are discarded once the component
// completes without re-rendering.

// Whether an update was scheduled during the currently executing render pass.
var didScheduleRenderPhaseUpdate = false;
// Lazily created map of render-phase updates
var renderPhaseUpdates = null;
// Counter to prevent infinite loops.
var numberOfReRenders = 0;
var RE_RENDER_LIMIT = 25;

// In DEV, this is the name of the currently executing primitive hook
var currentHookNameInDev = null;

// In DEV, this list ensures that hooks are called in the same order between renders.
// The list stores the order of hooks used during the initial render (mount).
// Subsequent renders (updates) reference this list.
var hookTypesDev = null;
var hookTypesUpdateIndexDev = -1;

function mountHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev === null) {
      hookTypesDev = [hookName];
    } else {
      hookTypesDev.push(hookName);
    }
  }
}

function updateHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev !== null) {
      hookTypesUpdateIndexDev++;
      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
        warnOnHookMismatchInDev(hookName);
      }
    }
  }
}

function warnOnHookMismatchInDev(currentHookName) {
  {
    var componentName = getComponentName(currentlyRenderingFiber$1.type);
    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
      didWarnAboutMismatchedHooksForComponent.add(componentName);

      if (hookTypesDev !== null) {
        var table = '';

        var secondColumnStart = 30;

        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
          var oldHookName = hookTypesDev[i];
          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;

          var row = i + 1 + '. ' + oldHookName;

          // Extra space so second column lines up
          // lol @ IE not supporting String#repeat
          while (row.length < secondColumnStart) {
            row += ' ';
          }

          row += newHookName + '\n';

          table += row;
        }

        warning$1(false, 'React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
      }
    }
  }
}

function throwInvalidHookError() {
  invariant(false, 'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.');
}

function areHookInputsEqual(nextDeps, prevDeps) {
  if (prevDeps === null) {
    {
      warning$1(false, '%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
    }
    return false;
  }

  {
    // Don't bother comparing lengths in prod because these arrays should be
    // passed inline.
    if (nextDeps.length !== prevDeps.length) {
      warning$1(false, 'The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, '[' + nextDeps.join(', ') + ']', '[' + prevDeps.join(', ') + ']');
    }
  }
  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
    if (is(nextDeps[i], prevDeps[i])) {
      continue;
    }
    return false;
  }
  return true;
}

function renderWithHooks(current, workInProgress, Component, props, refOrContext, nextRenderExpirationTime) {
  renderExpirationTime = nextRenderExpirationTime;
  currentlyRenderingFiber$1 = workInProgress;
  nextCurrentHook = current !== null ? current.memoizedState : null;

  {
    hookTypesDev = current !== null ? current._debugHookTypes : null;
    hookTypesUpdateIndexDev = -1;
  }

  // The following should have already been reset
  // currentHook = null;
  // workInProgressHook = null;

  // remainingExpirationTime = NoWork;
  // componentUpdateQueue = null;

  // didScheduleRenderPhaseUpdate = false;
  // renderPhaseUpdates = null;
  // numberOfReRenders = 0;
  // sideEffectTag = 0;

  // TODO Warn if no hooks are used at all during mount, then some are used during update.
  // Currently we will identify the update render as a mount because nextCurrentHook === null.
  // This is tricky because it's valid for certain types of components (e.g. React.lazy)

  // Using nextCurrentHook to differentiate between mount/update only works if at least one stateful hook is used.
  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
  // so nextCurrentHook would be null during updates and mounts.
  {
    if (nextCurrentHook !== null) {
      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
    } else if (hookTypesDev !== null) {
      // This dispatcher handles an edge case where a component is updating,
      // but no stateful hooks have been used.
      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
      // This dispatcher does that.
      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
    } else {
      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
    }
  }

  var children = Component(props, refOrContext);

  if (didScheduleRenderPhaseUpdate) {
    do {
      didScheduleRenderPhaseUpdate = false;
      numberOfReRenders += 1;

      // Start over from the beginning of the list
      nextCurrentHook = current !== null ? current.memoizedState : null;
      nextWorkInProgressHook = firstWorkInProgressHook;

      currentHook = null;
      workInProgressHook = null;
      componentUpdateQueue = null;

      {
        // Also validate hook order for cascading updates.
        hookTypesUpdateIndexDev = -1;
      }

      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;

      children = Component(props, refOrContext);
    } while (didScheduleRenderPhaseUpdate);

    renderPhaseUpdates = null;
    numberOfReRenders = 0;
  }

  // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.
  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

  var renderedWork = currentlyRenderingFiber$1;

  renderedWork.memoizedState = firstWorkInProgressHook;
  renderedWork.expirationTime = remainingExpirationTime;
  renderedWork.updateQueue = componentUpdateQueue;
  renderedWork.effectTag |= sideEffectTag;

  {
    renderedWork._debugHookTypes = hookTypesDev;
  }

  // This check uses currentHook so that it works the same in DEV and prod bundles.
  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;

  renderExpirationTime = NoWork;
  currentlyRenderingFiber$1 = null;

  currentHook = null;
  nextCurrentHook = null;
  firstWorkInProgressHook = null;
  workInProgressHook = null;
  nextWorkInProgressHook = null;

  {
    currentHookNameInDev = null;
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
  }

  remainingExpirationTime = NoWork;
  componentUpdateQueue = null;
  sideEffectTag = 0;

  // These were reset above
  // didScheduleRenderPhaseUpdate = false;
  // renderPhaseUpdates = null;
  // numberOfReRenders = 0;

  !!didRenderTooFewHooks ? invariant(false, 'Rendered fewer hooks than expected. This may be caused by an accidental early return statement.') : void 0;

  return children;
}

function bailoutHooks(current, workInProgress, expirationTime) {
  workInProgress.updateQueue = current.updateQueue;
  workInProgress.effectTag &= ~(Passive | Update);
  if (current.expirationTime <= expirationTime) {
    current.expirationTime = NoWork;
  }
}

function resetHooks() {
  // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.
  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

  // This is used to reset the state of this module when a component throws.
  // It's also called inside mountIndeterminateComponent if we determine the
  // component is a module-style component.
  renderExpirationTime = NoWork;
  currentlyRenderingFiber$1 = null;

  currentHook = null;
  nextCurrentHook = null;
  firstWorkInProgressHook = null;
  workInProgressHook = null;
  nextWorkInProgressHook = null;

  {
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;

    currentHookNameInDev = null;
  }

  remainingExpirationTime = NoWork;
  componentUpdateQueue = null;
  sideEffectTag = 0;

  didScheduleRenderPhaseUpdate = false;
  renderPhaseUpdates = null;
  numberOfReRenders = 0;
}

function mountWorkInProgressHook() {
  var hook = {
    memoizedState: null,

    baseState: null,
    queue: null,
    baseUpdate: null,

    next: null
  };

  if (workInProgressHook === null) {
    // This is the first hook in the list
    firstWorkInProgressHook = workInProgressHook = hook;
  } else {
    // Append to the end of the list
    workInProgressHook = workInProgressHook.next = hook;
  }
  return workInProgressHook;
}

function updateWorkInProgressHook() {
  // This function is used both for updates and for re-renders triggered by a
  // render phase update. It assumes there is either a current hook we can
  // clone, or a work-in-progress hook from a previous render pass that we can
  // use as a base. When we reach the end of the base list, we must switch to
  // the dispatcher used for mounts.
  if (nextWorkInProgressHook !== null) {
    // There's already a work-in-progress. Reuse it.
    workInProgressHook = nextWorkInProgressHook;
    nextWorkInProgressHook = workInProgressHook.next;

    currentHook = nextCurrentHook;
    nextCurrentHook = currentHook !== null ? currentHook.next : null;
  } else {
    // Clone from the current hook.
    !(nextCurrentHook !== null) ? invariant(false, 'Rendered more hooks than during the previous render.') : void 0;
    currentHook = nextCurrentHook;

    var newHook = {
      memoizedState: currentHook.memoizedState,

      baseState: currentHook.baseState,
      queue: currentHook.queue,
      baseUpdate: currentHook.baseUpdate,

      next: null
    };

    if (workInProgressHook === null) {
      // This is the first hook in the list.
      workInProgressHook = firstWorkInProgressHook = newHook;
    } else {
      // Append to the end of the list.
      workInProgressHook = workInProgressHook.next = newHook;
    }
    nextCurrentHook = currentHook.next;
  }
  return workInProgressHook;
}

function createFunctionComponentUpdateQueue() {
  return {
    lastEffect: null
  };
}

function basicStateReducer(state, action) {
  return typeof action === 'function' ? action(state) : action;
}

function mountReducer(reducer, initialArg, init) {
  var hook = mountWorkInProgressHook();
  var initialState = void 0;
  if (init !== undefined) {
    initialState = init(initialArg);
  } else {
    initialState = initialArg;
  }
  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    last: null,
    dispatch: null,
    lastRenderedReducer: reducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null,
  // Flow doesn't know this is non-null, but we do.
  currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;
  !(queue !== null) ? invariant(false, 'Should have a queue. This is likely a bug in React. Please file an issue.') : void 0;

  queue.lastRenderedReducer = reducer;

  if (numberOfReRenders > 0) {
    // This is a re-render. Apply the new render phase updates to the previous
    var _dispatch = queue.dispatch;
    if (renderPhaseUpdates !== null) {
      // Render phase updates are stored in a map of queue -> linked list
      var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
      if (firstRenderPhaseUpdate !== undefined) {
        renderPhaseUpdates.delete(queue);
        var newState = hook.memoizedState;
        var update = firstRenderPhaseUpdate;
        do {
          // Process this render phase update. We don't have to check the
          // priority because it will always be the same as the current
          // render's.
          var _action = update.action;
          newState = reducer(newState, _action);
          update = update.next;
        } while (update !== null);

        // Mark that the fiber performed work, but only if the new state is
        // different from the current state.
        if (!is(newState, hook.memoizedState)) {
          markWorkInProgressReceivedUpdate();
        }

        hook.memoizedState = newState;
        // Don't persist the state accumlated from the render phase updates to
        // the base state unless the queue is empty.
        // TODO: Not sure if this is the desired semantics, but it's what we
        // do for gDSFP. I can't remember why.
        if (hook.baseUpdate === queue.last) {
          hook.baseState = newState;
        }

        queue.lastRenderedState = newState;

        return [newState, _dispatch];
      }
    }
    return [hook.memoizedState, _dispatch];
  }

  // The last update in the entire queue
  var last = queue.last;
  // The last update that is part of the base state.
  var baseUpdate = hook.baseUpdate;
  var baseState = hook.baseState;

  // Find the first unprocessed update.
  var first = void 0;
  if (baseUpdate !== null) {
    if (last !== null) {
      // For the first update, the queue is a circular linked list where
      // `queue.last.next = queue.first`. Once the first update commits, and
      // the `baseUpdate` is no longer empty, we can unravel the list.
      last.next = null;
    }
    first = baseUpdate.next;
  } else {
    first = last !== null ? last.next : null;
  }
  if (first !== null) {
    var _newState = baseState;
    var newBaseState = null;
    var newBaseUpdate = null;
    var prevUpdate = baseUpdate;
    var _update = first;
    var didSkip = false;
    do {
      var updateExpirationTime = _update.expirationTime;
      if (updateExpirationTime < renderExpirationTime) {
        // Priority is insufficient. Skip this update. If this is the first
        // skipped update, the previous update/state is the new base
        // update/state.
        if (!didSkip) {
          didSkip = true;
          newBaseUpdate = prevUpdate;
          newBaseState = _newState;
        }
        // Update the remaining priority in the queue.
        if (updateExpirationTime > remainingExpirationTime) {
          remainingExpirationTime = updateExpirationTime;
        }
      } else {
        // Process this update.
        if (_update.eagerReducer === reducer) {
          // If this update was processed eagerly, and its reducer matches the
          // current reducer, we can use the eagerly computed state.
          _newState = _update.eagerState;
        } else {
          var _action2 = _update.action;
          _newState = reducer(_newState, _action2);
        }
      }
      prevUpdate = _update;
      _update = _update.next;
    } while (_update !== null && _update !== first);

    if (!didSkip) {
      newBaseUpdate = prevUpdate;
      newBaseState = _newState;
    }

    // Mark that the fiber performed work, but only if the new state is
    // different from the current state.
    if (!is(_newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = _newState;
    hook.baseUpdate = newBaseUpdate;
    hook.baseState = newBaseState;

    queue.lastRenderedState = _newState;
  }

  var dispatch = queue.dispatch;
  return [hook.memoizedState, dispatch];
}

function mountState(initialState) {
  var hook = mountWorkInProgressHook();
  if (typeof initialState === 'function') {
    initialState = initialState();
  }
  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    last: null,
    dispatch: null,
    lastRenderedReducer: basicStateReducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null,
  // Flow doesn't know this is non-null, but we do.
  currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateState(initialState) {
  return updateReducer(basicStateReducer, initialState);
}

function pushEffect(tag, create, destroy, deps) {
  var effect = {
    tag: tag,
    create: create,
    destroy: destroy,
    deps: deps,
    // Circular
    next: null
  };
  if (componentUpdateQueue === null) {
    componentUpdateQueue = createFunctionComponentUpdateQueue();
    componentUpdateQueue.lastEffect = effect.next = effect;
  } else {
    var _lastEffect = componentUpdateQueue.lastEffect;
    if (_lastEffect === null) {
      componentUpdateQueue.lastEffect = effect.next = effect;
    } else {
      var firstEffect = _lastEffect.next;
      _lastEffect.next = effect;
      effect.next = firstEffect;
      componentUpdateQueue.lastEffect = effect;
    }
  }
  return effect;
}

function mountRef(initialValue) {
  var hook = mountWorkInProgressHook();
  var ref = { current: initialValue };
  {
    Object.seal(ref);
  }
  hook.memoizedState = ref;
  return ref;
}

function updateRef(initialValue) {
  var hook = updateWorkInProgressHook();
  return hook.memoizedState;
}

function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  sideEffectTag |= fiberEffectTag;
  hook.memoizedState = pushEffect(hookEffectTag, create, undefined, nextDeps);
}

function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var destroy = undefined;

  if (currentHook !== null) {
    var prevEffect = currentHook.memoizedState;
    destroy = prevEffect.destroy;
    if (nextDeps !== null) {
      var prevDeps = prevEffect.deps;
      if (areHookInputsEqual(nextDeps, prevDeps)) {
        pushEffect(NoEffect$1, create, destroy, nextDeps);
        return;
      }
    }
  }

  sideEffectTag |= fiberEffectTag;
  hook.memoizedState = pushEffect(hookEffectTag, create, destroy, nextDeps);
}

function mountEffect(create, deps) {
  return mountEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
}

function updateEffect(create, deps) {
  return updateEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
}

function mountLayoutEffect(create, deps) {
  return mountEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
}

function updateLayoutEffect(create, deps) {
  return updateEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
}

function imperativeHandleEffect(create, ref) {
  if (typeof ref === 'function') {
    var refCallback = ref;
    var _inst = create();
    refCallback(_inst);
    return function () {
      refCallback(null);
    };
  } else if (ref !== null && ref !== undefined) {
    var refObject = ref;
    {
      !refObject.hasOwnProperty('current') ? warning$1(false, 'Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}') : void 0;
    }
    var _inst2 = create();
    refObject.current = _inst2;
    return function () {
      refObject.current = null;
    };
  }
}

function mountImperativeHandle(ref, create, deps) {
  {
    !(typeof create === 'function') ? warning$1(false, 'Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null') : void 0;
  }

  // TODO: If deps are provided, should we skip comparing the ref itself?
  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;

  return mountEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function updateImperativeHandle(ref, create, deps) {
  {
    !(typeof create === 'function') ? warning$1(false, 'Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null') : void 0;
  }

  // TODO: If deps are provided, should we skip comparing the ref itself?
  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;

  return updateEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function mountDebugValue(value, formatterFn) {
  // This hook is normally a no-op.
  // The react-debug-hooks package injects its own implementation
  // so that e.g. DevTools can display custom hook values.
}

var updateDebugValue = mountDebugValue;

function mountCallback(callback, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function updateCallback(callback, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;
  if (prevState !== null) {
    if (nextDeps !== null) {
      var prevDeps = prevState[1];
      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }
  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function mountMemo(nextCreate, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function updateMemo(nextCreate, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;
  if (prevState !== null) {
    // Assume these are defined. If they're not, areHookInputsEqual will warn.
    if (nextDeps !== null) {
      var prevDeps = prevState[1];
      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }
  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

// in a test-like environment, we want to warn if dispatchAction()
// is called outside of a batchedUpdates/TestUtils.act(...) call.
var shouldWarnForUnbatchedSetState = false;

{
  // jest isn't a 'global', it's just exposed to tests via a wrapped function
  // further, this isn't a test file, so flow doesn't recognize the symbol. So...
  // $FlowExpectedError - because requirements don't give a damn about your type sigs.
  if ('undefined' !== typeof jest) {
    shouldWarnForUnbatchedSetState = true;
  }
}

function dispatchAction(fiber, queue, action) {
  !(numberOfReRenders < RE_RENDER_LIMIT) ? invariant(false, 'Too many re-renders. React limits the number of renders to prevent an infinite loop.') : void 0;

  {
    !(arguments.length <= 3) ? warning$1(false, "State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().') : void 0;
  }

  var alternate = fiber.alternate;
  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
    // This is a render phase update. Stash it in a lazily-created map of
    // queue -> linked list of updates. After this render pass, we'll restart
    // and apply the stashed updates on top of the work-in-progress hook.
    didScheduleRenderPhaseUpdate = true;
    var update = {
      expirationTime: renderExpirationTime,
      action: action,
      eagerReducer: null,
      eagerState: null,
      next: null
    };
    if (renderPhaseUpdates === null) {
      renderPhaseUpdates = new Map();
    }
    var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
    if (firstRenderPhaseUpdate === undefined) {
      renderPhaseUpdates.set(queue, update);
    } else {
      // Append the update to the end of the list.
      var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
      while (lastRenderPhaseUpdate.next !== null) {
        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
      }
      lastRenderPhaseUpdate.next = update;
    }
  } else {
    flushPassiveEffects();

    var currentTime = requestCurrentTime();
    var _expirationTime = computeExpirationForFiber(currentTime, fiber);

    var _update2 = {
      expirationTime: _expirationTime,
      action: action,
      eagerReducer: null,
      eagerState: null,
      next: null
    };

    // Append the update to the end of the list.
    var _last = queue.last;
    if (_last === null) {
      // This is the first update. Create a circular list.
      _update2.next = _update2;
    } else {
      var first = _last.next;
      if (first !== null) {
        // Still circular.
        _update2.next = first;
      }
      _last.next = _update2;
    }
    queue.last = _update2;

    if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
      // The queue is currently empty, which means we can eagerly compute the
      // next state before entering the render phase. If the new state is the
      // same as the current state, we may be able to bail out entirely.
      var _lastRenderedReducer = queue.lastRenderedReducer;
      if (_lastRenderedReducer !== null) {
        var prevDispatcher = void 0;
        {
          prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        }
        try {
          var currentState = queue.lastRenderedState;
          var _eagerState = _lastRenderedReducer(currentState, action);
          // Stash the eagerly computed state, and the reducer used to compute
          // it, on the update object. If the reducer hasn't changed by the
          // time we enter the render phase, then the eager state can be used
          // without calling the reducer again.
          _update2.eagerReducer = _lastRenderedReducer;
          _update2.eagerState = _eagerState;
          if (is(_eagerState, currentState)) {
            // Fast path. We can bail out without scheduling React to re-render.
            // It's still possible that we'll need to rebase this update later,
            // if the component re-renders for a different reason and by that
            // time the reducer has changed.
            return;
          }
        } catch (error) {
          // Suppress the error. It will throw again in the render phase.
        } finally {
          {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        }
      }
    }
    {
      if (shouldWarnForUnbatchedSetState === true) {
        warnIfNotCurrentlyBatchingInDev(fiber);
      }
    }
    scheduleWork(fiber, _expirationTime);
  }
}

var ContextOnlyDispatcher = {
  readContext: readContext,

  useCallback: throwInvalidHookError,
  useContext: throwInvalidHookError,
  useEffect: throwInvalidHookError,
  useImperativeHandle: throwInvalidHookError,
  useLayoutEffect: throwInvalidHookError,
  useMemo: throwInvalidHookError,
  useReducer: throwInvalidHookError,
  useRef: throwInvalidHookError,
  useState: throwInvalidHookError,
  useDebugValue: throwInvalidHookError
};

var HooksDispatcherOnMountInDEV = null;
var HooksDispatcherOnMountWithHookTypesInDEV = null;
var HooksDispatcherOnUpdateInDEV = null;
var InvalidNestedHooksDispatcherOnMountInDEV = null;
var InvalidNestedHooksDispatcherOnUpdateInDEV = null;

{
  var warnInvalidContextAccess = function () {
    warning$1(false, 'Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
  };

  var warnInvalidHookAccess = function () {
    warning$1(false, 'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://fb.me/rules-of-hooks');
  };

  HooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      mountHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      mountHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      mountHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      mountHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      mountHookTypesDev();
      return mountDebugValue(value, formatterFn);
    }
  };

  HooksDispatcherOnMountWithHookTypesInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return mountDebugValue(value, formatterFn);
    }
  };

  HooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue(value, formatterFn);
    }
  };

  InvalidNestedHooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDebugValue(value, formatterFn);
    }
  };

  InvalidNestedHooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue(value, formatterFn);
    }
  };
}

var commitTime = 0;
var profilerStartTime = -1;

function getCommitTime() {
  return commitTime;
}

function recordCommitTime() {
  if (!enableProfilerTimer) {
    return;
  }
  commitTime = unstable_now();
}

function startProfilerTimer(fiber) {
  if (!enableProfilerTimer) {
    return;
  }

  profilerStartTime = unstable_now();

  if (fiber.actualStartTime < 0) {
    fiber.actualStartTime = unstable_now();
  }
}

function stopProfilerTimerIfRunning(fiber) {
  if (!enableProfilerTimer) {
    return;
  }
  profilerStartTime = -1;
}

function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
  if (!enableProfilerTimer) {
    return;
  }

  if (profilerStartTime >= 0) {
    var elapsedTime = unstable_now() - profilerStartTime;
    fiber.actualDuration += elapsedTime;
    if (overrideBaseTime) {
      fiber.selfBaseDuration = elapsedTime;
    }
    profilerStartTime = -1;
  }
}

// The deepest Fiber on the stack involved in a hydration context.
// This may have been an insertion or a hydration.
var hydrationParentFiber = null;
var nextHydratableInstance = null;
var isHydrating = false;

function enterHydrationState(fiber) {
  if (!supportsHydration) {
    return false;
  }

  var parentInstance = fiber.stateNode.containerInfo;
  nextHydratableInstance = getFirstHydratableChild(parentInstance);
  hydrationParentFiber = fiber;
  isHydrating = true;
  return true;
}

function reenterHydrationStateFromDehydratedSuspenseInstance(fiber) {
  if (!supportsHydration) {
    return false;
  }

  var suspenseInstance = fiber.stateNode;
  nextHydratableInstance = getNextHydratableSibling(suspenseInstance);
  popToNextHostParent(fiber);
  isHydrating = true;
  return true;
}

function deleteHydratableInstance(returnFiber, instance) {
  {
    switch (returnFiber.tag) {
      case HostRoot:
        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
        break;
      case HostComponent:
        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
        break;
    }
  }

  var childToDelete = createFiberFromHostInstanceForDeletion();
  childToDelete.stateNode = instance;
  childToDelete.return = returnFiber;
  childToDelete.effectTag = Deletion;

  // This might seem like it belongs on progressedFirstDeletion. However,
  // these children are not part of the reconciliation list of children.
  // Even if we abort and rereconcile the children, that will try to hydrate
  // again and the nodes are still in the host tree so these will be
  // recreated.
  if (returnFiber.lastEffect !== null) {
    returnFiber.lastEffect.nextEffect = childToDelete;
    returnFiber.lastEffect = childToDelete;
  } else {
    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
  }
}

function insertNonHydratedInstance(returnFiber, fiber) {
  fiber.effectTag |= Placement;
  {
    switch (returnFiber.tag) {
      case HostRoot:
        {
          var parentContainer = returnFiber.stateNode.containerInfo;
          switch (fiber.tag) {
            case HostComponent:
              var type = fiber.type;
              var props = fiber.pendingProps;
              didNotFindHydratableContainerInstance(parentContainer, type, props);
              break;
            case HostText:
              var text = fiber.pendingProps;
              didNotFindHydratableContainerTextInstance(parentContainer, text);
              break;
            case SuspenseComponent:
              
              break;
          }
          break;
        }
      case HostComponent:
        {
          var parentType = returnFiber.type;
          var parentProps = returnFiber.memoizedProps;
          var parentInstance = returnFiber.stateNode;
          switch (fiber.tag) {
            case HostComponent:
              var _type = fiber.type;
              var _props = fiber.pendingProps;
              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
              break;
            case HostText:
              var _text = fiber.pendingProps;
              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
              break;
            case SuspenseComponent:
              didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);
              break;
          }
          break;
        }
      default:
        return;
    }
  }
}

function tryHydrate(fiber, nextInstance) {
  switch (fiber.tag) {
    case HostComponent:
      {
        var type = fiber.type;
        var props = fiber.pendingProps;
        var instance = canHydrateInstance(nextInstance, type, props);
        if (instance !== null) {
          fiber.stateNode = instance;
          return true;
        }
        return false;
      }
    case HostText:
      {
        var text = fiber.pendingProps;
        var textInstance = canHydrateTextInstance(nextInstance, text);
        if (textInstance !== null) {
          fiber.stateNode = textInstance;
          return true;
        }
        return false;
      }
    case SuspenseComponent:
      {
        if (enableSuspenseServerRenderer) {
          var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
          if (suspenseInstance !== null) {
            // Downgrade the tag to a dehydrated component until we've hydrated it.
            fiber.tag = DehydratedSuspenseComponent;
            fiber.stateNode = suspenseInstance;
            return true;
          }
        }
        return false;
      }
    default:
      return false;
  }
}

function tryToClaimNextHydratableInstance(fiber) {
  if (!isHydrating) {
    return;
  }
  var nextInstance = nextHydratableInstance;
  if (!nextInstance) {
    // Nothing to hydrate. Make it an insertion.
    insertNonHydratedInstance(hydrationParentFiber, fiber);
    isHydrating = false;
    hydrationParentFiber = fiber;
    return;
  }
  var firstAttemptedInstance = nextInstance;
  if (!tryHydrate(fiber, nextInstance)) {
    // If we can't hydrate this instance let's try the next one.
    // We use this as a heuristic. It's based on intuition and not data so it
    // might be flawed or unnecessary.
    nextInstance = getNextHydratableSibling(firstAttemptedInstance);
    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    }
    // We matched the next one, we'll now assume that the first one was
    // superfluous and we'll delete it. Since we can't eagerly delete it
    // we'll have to schedule a deletion. To do that, this node needs a dummy
    // fiber associated with it.
    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
  }
  hydrationParentFiber = fiber;
  nextHydratableInstance = getFirstHydratableChild(nextInstance);
}

function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
  if (!supportsHydration) {
    invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
  }

  var instance = fiber.stateNode;
  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
  // TODO: Type this specific to this type of component.
  fiber.updateQueue = updatePayload;
  // If the update payload indicates that there is a change or if there
  // is a new ref we mark this as an update.
  if (updatePayload !== null) {
    return true;
  }
  return false;
}

function prepareToHydrateHostTextInstance(fiber) {
  if (!supportsHydration) {
    invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
  }

  var textInstance = fiber.stateNode;
  var textContent = fiber.memoizedProps;
  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
  {
    if (shouldUpdate) {
      // We assume that prepareToHydrateHostTextInstance is called in a context where the
      // hydration parent is the parent host component of this host text.
      var returnFiber = hydrationParentFiber;
      if (returnFiber !== null) {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;
              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
              break;
            }
          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
              break;
            }
        }
      }
    }
  }
  return shouldUpdate;
}

function skipPastDehydratedSuspenseInstance(fiber) {
  if (!supportsHydration) {
    invariant(false, 'Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
  }
  var suspenseInstance = fiber.stateNode;
  !suspenseInstance ? invariant(false, 'Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  nextHydratableInstance = getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
}

function popToNextHostParent(fiber) {
  var parent = fiber.return;
  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== DehydratedSuspenseComponent) {
    parent = parent.return;
  }
  hydrationParentFiber = parent;
}

function popHydrationState(fiber) {
  if (!supportsHydration) {
    return false;
  }
  if (fiber !== hydrationParentFiber) {
    // We're deeper than the current hydration context, inside an inserted
    // tree.
    return false;
  }
  if (!isHydrating) {
    // If we're not currently hydrating but we're in a hydration context, then
    // we were an insertion and now need to pop up reenter hydration of our
    // siblings.
    popToNextHostParent(fiber);
    isHydrating = true;
    return false;
  }

  var type = fiber.type;

  // If we have any remaining hydratable nodes, we need to delete them now.
  // We only do this deeper than head and body since they tend to have random
  // other nodes in them. We also ignore components with pure text content in
  // side of them.
  // TODO: Better heuristic.
  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
    var nextInstance = nextHydratableInstance;
    while (nextInstance) {
      deleteHydratableInstance(fiber, nextInstance);
      nextInstance = getNextHydratableSibling(nextInstance);
    }
  }

  popToNextHostParent(fiber);
  nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
  return true;
}

function resetHydrationState() {
  if (!supportsHydration) {
    return;
  }

  hydrationParentFiber = null;
  nextHydratableInstance = null;
  isHydrating = false;
}

var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;

var didReceiveUpdate = false;

var didWarnAboutBadClass = void 0;
var didWarnAboutContextTypeOnFunctionComponent = void 0;
var didWarnAboutGetDerivedStateOnFunctionComponent = void 0;
var didWarnAboutFunctionRefs = void 0;
var didWarnAboutReassigningProps = void 0;

{
  didWarnAboutBadClass = {};
  didWarnAboutContextTypeOnFunctionComponent = {};
  didWarnAboutGetDerivedStateOnFunctionComponent = {};
  didWarnAboutFunctionRefs = {};
  didWarnAboutReassigningProps = false;
}

function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
  if (current$$1 === null) {
    // If this is a fresh new component that hasn't been rendered yet, we
    // won't update its child set by applying minimal side-effects. Instead,
    // we will add them all to the child before it gets rendered. That means
    // we can optimize this reconciliation pass by not tracking side-effects.
    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    // If the current child is the same as the work in progress, it means that
    // we haven't yet started any work on these children. Therefore, we use
    // the clone algorithm to create a copy of all the current children.

    // If we had any progressed work already, that is invalid at this point so
    // let's throw it out.
    workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
  }
}

function forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime) {
  // This function is fork of reconcileChildren. It's used in cases where we
  // want to reconcile without matching against the existing set. This has the
  // effect of all current children being unmounted; even if the type and key
  // are the same, the old child is unmounted and a new child is created.
  //
  // To do this, we're going to go through the reconcile algorithm twice. In
  // the first pass, we schedule a deletion for all the current children by
  // passing null.
  workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime);
  // In the second pass, we mount the new children. The trick here is that we
  // pass null in place of where we usually pass the current child set. This has
  // the effect of remounting all children regardless of whether their their
  // identity matches.
  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
}

function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens after the first render suspends.
  // We'll need to figure out if this is fine or can cause issues.

  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;
      if (innerPropTypes) {
        checkPropTypes_1(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  }

  var render = Component.render;
  var ref = workInProgress.ref;

  // The rest is a fork of updateFunctionComponent
  var nextChildren = void 0;
  prepareToReadContext(workInProgress, renderExpirationTime);
  {
    ReactCurrentOwner$3.current = workInProgress;
    setCurrentPhase('render');
    nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);
    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      // Only double-render components with Hooks
      if (workInProgress.memoizedState !== null) {
        nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);
      }
    }
    setCurrentPhase(null);
  }

  if (current$$1 !== null && !didReceiveUpdate) {
    bailoutHooks(current$$1, workInProgress, renderExpirationTime);
    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  }

  // React DevTools reads this flag.
  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
  if (current$$1 === null) {
    var type = Component.type;
    if (isSimpleFunctionComponent(type) && Component.compare === null &&
    // SimpleMemoComponent codepath doesn't resolve outer props either.
    Component.defaultProps === undefined) {
      // If this is a plain function component without default props,
      // and with only the default shallow comparison, we upgrade it
      // to a SimpleMemoComponent to allow fast path updates.
      workInProgress.tag = SimpleMemoComponent;
      workInProgress.type = type;
      {
        validateFunctionComponentInDev(workInProgress, type);
      }
      return updateSimpleMemoComponent(current$$1, workInProgress, type, nextProps, updateExpirationTime, renderExpirationTime);
    }
    {
      var innerPropTypes = type.propTypes;
      if (innerPropTypes) {
        // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes_1(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(type), getCurrentFiberStackInDev);
      }
    }
    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
    child.ref = workInProgress.ref;
    child.return = workInProgress;
    workInProgress.child = child;
    return child;
  }
  {
    var _type = Component.type;
    var _innerPropTypes = _type.propTypes;
    if (_innerPropTypes) {
      // Inner memo component props aren't currently validated in createElement.
      // We could move it there, but we'd still need this for lazy code path.
      checkPropTypes_1(_innerPropTypes, nextProps, // Resolved props
      'prop', getComponentName(_type), getCurrentFiberStackInDev);
    }
  }
  var currentChild = current$$1.child; // This is always exactly one child
  if (updateExpirationTime < renderExpirationTime) {
    // This will be the props with resolved defaultProps,
    // unlike current.memoizedProps which will be the unresolved ones.
    var prevProps = currentChild.memoizedProps;
    // Default to shallow comparison
    var compare = Component.compare;
    compare = compare !== null ? compare : shallowEqual;
    if (compare(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    }
  }
  // React DevTools reads this flag.
  workInProgress.effectTag |= PerformedWork;
  var newChild = createWorkInProgress(currentChild, nextProps, renderExpirationTime);
  newChild.ref = workInProgress.ref;
  newChild.return = workInProgress;
  workInProgress.child = newChild;
  return newChild;
}

function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens when the inner render suspends.
  // We'll need to figure out if this is fine or can cause issues.

  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var outerMemoType = workInProgress.elementType;
      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
        // We warn when you define propTypes on lazy()
        // so let's just skip over it to find memo() outer wrapper.
        // Inner props for memo are validated later.
        outerMemoType = refineResolvedLazyComponent(outerMemoType);
      }
      var outerPropTypes = outerMemoType && outerMemoType.propTypes;
      if (outerPropTypes) {
        checkPropTypes_1(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
        'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
      }
      // Inner propTypes will be validated in the function component path.
    }
  }
  if (current$$1 !== null) {
    var prevProps = current$$1.memoizedProps;
    if (shallowEqual(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
      didReceiveUpdate = false;
      if (updateExpirationTime < renderExpirationTime) {
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }
    }
  }
  return updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
}

function updateFragment(current$$1, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateMode(current$$1, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps.children;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateProfiler(current$$1, workInProgress, renderExpirationTime) {
  if (enableProfilerTimer) {
    workInProgress.effectTag |= Update;
  }
  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function markRef(current$$1, workInProgress) {
  var ref = workInProgress.ref;
  if (current$$1 === null && ref !== null || current$$1 !== null && current$$1.ref !== ref) {
    // Schedule a Ref effect
    workInProgress.effectTag |= Ref;
  }
}

function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;
      if (innerPropTypes) {
        checkPropTypes_1(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  }

  var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
  var context = getMaskedContext(workInProgress, unmaskedContext);

  var nextChildren = void 0;
  prepareToReadContext(workInProgress, renderExpirationTime);
  {
    ReactCurrentOwner$3.current = workInProgress;
    setCurrentPhase('render');
    nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);
    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      // Only double-render components with Hooks
      if (workInProgress.memoizedState !== null) {
        nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);
      }
    }
    setCurrentPhase(null);
  }

  if (current$$1 !== null && !didReceiveUpdate) {
    bailoutHooks(current$$1, workInProgress, renderExpirationTime);
    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  }

  // React DevTools reads this flag.
  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;
      if (innerPropTypes) {
        checkPropTypes_1(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  }

  // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.
  var hasContext = void 0;
  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }
  prepareToReadContext(workInProgress, renderExpirationTime);

  var instance = workInProgress.stateNode;
  var shouldUpdate = void 0;
  if (instance === null) {
    if (current$$1 !== null) {
      // An class component without an instance only mounts if it suspended
      // inside a non- concurrent tree, in an inconsistent state. We want to
      // tree it like a new mount, even though an empty version of it already
      // committed. Disconnect the alternate pointers.
      current$$1.alternate = null;
      workInProgress.alternate = null;
      // Since this is conceptually a new fiber, schedule a Placement effect
      workInProgress.effectTag |= Placement;
    }
    // In the initial pass we might need to construct the instance.
    constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
    mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
    shouldUpdate = true;
  } else if (current$$1 === null) {
    // In a resume, we'll already have an instance we can reuse.
    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
  } else {
    shouldUpdate = updateClassInstance(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
  }
  var nextUnitOfWork = finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);
  {
    var inst = workInProgress.stateNode;
    if (inst.props !== nextProps) {
      !didWarnAboutReassigningProps ? warning$1(false, 'It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component') : void 0;
      didWarnAboutReassigningProps = true;
    }
  }
  return nextUnitOfWork;
}

function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
  // Refs should update even if shouldComponentUpdate returns false
  markRef(current$$1, workInProgress);

  var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

  if (!shouldUpdate && !didCaptureError) {
    // Context providers should defer to sCU for rendering
    if (hasContext) {
      invalidateContextProvider(workInProgress, Component, false);
    }

    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  }

  var instance = workInProgress.stateNode;

  // Rerender
  ReactCurrentOwner$3.current = workInProgress;
  var nextChildren = void 0;
  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
    // If we captured an error, but getDerivedStateFrom catch is not defined,
    // unmount all the children. componentDidCatch will schedule an update to
    // re-render a fallback. This is temporary until we migrate everyone to
    // the new API.
    // TODO: Warn in a future release.
    nextChildren = null;

    if (enableProfilerTimer) {
      stopProfilerTimerIfRunning(workInProgress);
    }
  } else {
    {
      setCurrentPhase('render');
      nextChildren = instance.render();
      if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
        instance.render();
      }
      setCurrentPhase(null);
    }
  }

  // React DevTools reads this flag.
  workInProgress.effectTag |= PerformedWork;
  if (current$$1 !== null && didCaptureError) {
    // If we're recovering from an error, reconcile without reusing any of
    // the existing children. Conceptually, the normal children and the children
    // that are shown on error are two different sets, so we shouldn't reuse
    // normal children even if their identities match.
    forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime);
  } else {
    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  }

  // Memoize state using the values we just used to render.
  // TODO: Restructure so we never read values from the instance.
  workInProgress.memoizedState = instance.state;

  // The context might have changed so we need to recalculate it.
  if (hasContext) {
    invalidateContextProvider(workInProgress, Component, true);
  }

  return workInProgress.child;
}

function pushHostRootContext(workInProgress) {
  var root = workInProgress.stateNode;
  if (root.pendingContext) {
    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
  } else if (root.context) {
    // Should always be set
    pushTopLevelContextObject(workInProgress, root.context, false);
  }
  pushHostContainer(workInProgress, root.containerInfo);
}

function updateHostRoot(current$$1, workInProgress, renderExpirationTime) {
  pushHostRootContext(workInProgress);
  var updateQueue = workInProgress.updateQueue;
  !(updateQueue !== null) ? invariant(false, 'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  var nextProps = workInProgress.pendingProps;
  var prevState = workInProgress.memoizedState;
  var prevChildren = prevState !== null ? prevState.element : null;
  processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime);
  var nextState = workInProgress.memoizedState;
  // Caution: React DevTools currently depends on this property
  // being called "element".
  var nextChildren = nextState.element;
  if (nextChildren === prevChildren) {
    // If the state is the same as before, that's a bailout because we had
    // no work that expires at this time.
    resetHydrationState();
    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  }
  var root = workInProgress.stateNode;
  if ((current$$1 === null || current$$1.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
    // If we don't have any current children this might be the first pass.
    // We always try to hydrate. If this isn't a hydration pass there won't
    // be any children to hydrate which is effectively the same thing as
    // not hydrating.

    // This is a bit of a hack. We track the host root as a placement to
    // know that we're currently in a mounting state. That way isMounted
    // works as expected. We must reset this before committing.
    // TODO: Delete this when we delete isMounted and findDOMNode.
    workInProgress.effectTag |= Placement;

    // Ensure that children mount into this root without tracking
    // side-effects. This ensures that we don't store Placement effects on
    // nodes that will be hydrated.
    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    // Otherwise reset hydration state in case we aborted and resumed another
    // root.
    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
    resetHydrationState();
  }
  return workInProgress.child;
}

function updateHostComponent(current$$1, workInProgress, renderExpirationTime) {
  pushHostContext(workInProgress);

  if (current$$1 === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  }

  var type = workInProgress.type;
  var nextProps = workInProgress.pendingProps;
  var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;

  var nextChildren = nextProps.children;
  var isDirectTextChild = shouldSetTextContent(type, nextProps);

  if (isDirectTextChild) {
    // We special case a direct text child of a host node. This is a common
    // case. We won't handle it as a reified child. We will instead handle
    // this in the host environment that also have access to this prop. That
    // avoids allocating another HostText fiber and traversing it.
    nextChildren = null;
  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
    // If we're switching from a direct text child to a normal child, or to
    // empty, we need to schedule the text content to be reset.
    workInProgress.effectTag |= ContentReset;
  }

  markRef(current$$1, workInProgress);

  // Check the host config to see if the children are offscreen/hidden.
  if (renderExpirationTime !== Never && workInProgress.mode & ConcurrentMode && shouldDeprioritizeSubtree(type, nextProps)) {
    // Schedule this fiber to re-render at offscreen priority. Then bailout.
    workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
    return null;
  }

  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateHostText(current$$1, workInProgress) {
  if (current$$1 === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  }
  // Nothing to do here. This is terminal. We'll do the completion step
  // immediately after.
  return null;
}

function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
  if (_current !== null) {
    // An lazy component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null;
    // Since this is conceptually a new fiber, schedule a Placement effect
    workInProgress.effectTag |= Placement;
  }

  var props = workInProgress.pendingProps;
  // We can't start a User Timing measurement with correct label yet.
  // Cancel and resume right after we know the tag.
  cancelWorkTimer(workInProgress);
  var Component = readLazyComponentType(elementType);
  // Store the unwrapped component in the type.
  workInProgress.type = Component;
  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
  startWorkTimer(workInProgress);
  var resolvedProps = resolveDefaultProps(Component, props);
  var child = void 0;
  switch (resolvedTag) {
    case FunctionComponent:
      {
        {
          validateFunctionComponentInDev(workInProgress, Component);
        }
        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        break;
      }
    case ClassComponent:
      {
        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        break;
      }
    case ForwardRef:
      {
        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        break;
      }
    case MemoComponent:
      {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = Component.propTypes;
            if (outerPropTypes) {
              checkPropTypes_1(outerPropTypes, resolvedProps, // Resolved for outer only
              'prop', getComponentName(Component), getCurrentFiberStackInDev);
            }
          }
        }
        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
        updateExpirationTime, renderExpirationTime);
        break;
      }
    default:
      {
        var hint = '';
        {
          if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
            hint = ' Did you wrap a component in React.lazy() more than once?';
          }
        }
        // This message intentionally doesn't mention ForwardRef or MemoComponent
        // because the fact that it's a separate type of work is an
        // implementation detail.
        invariant(false, 'Element type is invalid. Received a promise that resolves to: %s. Lazy element type must resolve to a class or function.%s', Component, hint);
      }
  }
  return child;
}

function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
  if (_current !== null) {
    // An incomplete component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null;
    // Since this is conceptually a new fiber, schedule a Placement effect
    workInProgress.effectTag |= Placement;
  }

  // Promote the fiber to a class and try rendering again.
  workInProgress.tag = ClassComponent;

  // The rest of this function is a fork of `updateClassComponent`

  // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.
  var hasContext = void 0;
  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }
  prepareToReadContext(workInProgress, renderExpirationTime);

  constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
  mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);

  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
}

function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
  if (_current !== null) {
    // An indeterminate component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null;
    // Since this is conceptually a new fiber, schedule a Placement effect
    workInProgress.effectTag |= Placement;
  }

  var props = workInProgress.pendingProps;
  var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
  var context = getMaskedContext(workInProgress, unmaskedContext);

  prepareToReadContext(workInProgress, renderExpirationTime);

  var value = void 0;

  {
    if (Component.prototype && typeof Component.prototype.render === 'function') {
      var componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutBadClass[componentName]) {
        warningWithoutStack$1(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
        didWarnAboutBadClass[componentName] = true;
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
    }

    ReactCurrentOwner$3.current = workInProgress;
    value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
  }
  // React DevTools reads this flag.
  workInProgress.effectTag |= PerformedWork;

  if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
    // Proceed under the assumption that this is a class instance
    workInProgress.tag = ClassComponent;

    // Throw out any hooks that were used.
    resetHooks();

    // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.
    var hasContext = false;
    if (isContextProvider(Component)) {
      hasContext = true;
      pushContextProvider(workInProgress);
    } else {
      hasContext = false;
    }

    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;

    var getDerivedStateFromProps = Component.getDerivedStateFromProps;
    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
    }

    adoptClassInstance(workInProgress, value);
    mountClassInstance(workInProgress, Component, props, renderExpirationTime);
    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
  } else {
    // Proceed under the assumption that this is a function component
    workInProgress.tag = FunctionComponent;
    {
      if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
        // Only double-render components with Hooks
        if (workInProgress.memoizedState !== null) {
          value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
        }
      }
    }
    reconcileChildren(null, workInProgress, value, renderExpirationTime);
    {
      validateFunctionComponentInDev(workInProgress, Component);
    }
    return workInProgress.child;
  }
}

function validateFunctionComponentInDev(workInProgress, Component) {
  if (Component) {
    !!Component.childContextTypes ? warningWithoutStack$1(false, '%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component') : void 0;
  }
  if (workInProgress.ref !== null) {
    var info = '';
    var ownerName = getCurrentFiberOwnerNameInDevOrNull();
    if (ownerName) {
      info += '\n\nCheck the render method of `' + ownerName + '`.';
    }

    var warningKey = ownerName || workInProgress._debugID || '';
    var debugSource = workInProgress._debugSource;
    if (debugSource) {
      warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
    }
    if (!didWarnAboutFunctionRefs[warningKey]) {
      didWarnAboutFunctionRefs[warningKey] = true;
      warning$1(false, 'Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
    }
  }

  if (typeof Component.getDerivedStateFromProps === 'function') {
    var componentName = getComponentName(Component) || 'Unknown';

    if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {
      warningWithoutStack$1(false, '%s: Function components do not support getDerivedStateFromProps.', componentName);
      didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;
    }
  }

  if (typeof Component.contextType === 'object' && Component.contextType !== null) {
    var _componentName = getComponentName(Component) || 'Unknown';

    if (!didWarnAboutContextTypeOnFunctionComponent[_componentName]) {
      warningWithoutStack$1(false, '%s: Function components do not support contextType.', _componentName);
      didWarnAboutContextTypeOnFunctionComponent[_componentName] = true;
    }
  }
}

function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
  var mode = workInProgress.mode;
  var nextProps = workInProgress.pendingProps;

  // We should attempt to render the primary children unless this boundary
  // already suspended during this render (`alreadyCaptured` is true).
  var nextState = workInProgress.memoizedState;

  var nextDidTimeout = void 0;
  if ((workInProgress.effectTag & DidCapture) === NoEffect) {
    // This is the first attempt.
    nextState = null;
    nextDidTimeout = false;
  } else {
    // Something in this boundary's subtree already suspended. Switch to
    // rendering the fallback children.
    nextState = {
      timedOutAt: nextState !== null ? nextState.timedOutAt : NoWork
    };
    nextDidTimeout = true;
    workInProgress.effectTag &= ~DidCapture;
  }

  // This next part is a bit confusing. If the children timeout, we switch to
  // showing the fallback children in place of the "primary" children.
  // However, we don't want to delete the primary children because then their
  // state will be lost (both the React state and the host state, e.g.
  // uncontrolled form inputs). Instead we keep them mounted and hide them.
  // Both the fallback children AND the primary children are rendered at the
  // same time. Once the primary children are un-suspended, we can delete
  // the fallback children — don't need to preserve their state.
  //
  // The two sets of children are siblings in the host environment, but
  // semantically, for purposes of reconciliation, they are two separate sets.
  // So we store them using two fragment fibers.
  //
  // However, we want to avoid allocating extra fibers for every placeholder.
  // They're only necessary when the children time out, because that's the
  // only time when both sets are mounted.
  //
  // So, the extra fragment fibers are only used if the children time out.
  // Otherwise, we render the primary children directly. This requires some
  // custom reconciliation logic to preserve the state of the primary
  // children. It's essentially a very basic form of re-parenting.

  // `child` points to the child fiber. In the normal case, this is the first
  // fiber of the primary children set. In the timed-out case, it's a
  // a fragment fiber containing the primary children.
  var child = void 0;
  // `next` points to the next fiber React should render. In the normal case,
  // it's the same as `child`: the first fiber of the primary children set.
  // In the timed-out case, it's a fragment fiber containing the *fallback*
  // children -- we skip over the primary children entirely.
  var next = void 0;
  if (current$$1 === null) {
    if (enableSuspenseServerRenderer) {
      // If we're currently hydrating, try to hydrate this boundary.
      // But only if this has a fallback.
      if (nextProps.fallback !== undefined) {
        tryToClaimNextHydratableInstance(workInProgress);
        // This could've changed the tag if this was a dehydrated suspense component.
        if (workInProgress.tag === DehydratedSuspenseComponent) {
          return updateDehydratedSuspenseComponent(null, workInProgress, renderExpirationTime);
        }
      }
    }

    // This is the initial mount. This branch is pretty simple because there's
    // no previous state that needs to be preserved.
    if (nextDidTimeout) {
      // Mount separate fragments for primary and fallback children.
      var nextFallbackChildren = nextProps.fallback;
      var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);

      if ((workInProgress.mode & ConcurrentMode) === NoContext) {
        // Outside of concurrent mode, we commit the effects from the
        var progressedState = workInProgress.memoizedState;
        var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
        primaryChildFragment.child = progressedPrimaryChild;
      }

      var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
      primaryChildFragment.sibling = fallbackChildFragment;
      child = primaryChildFragment;
      // Skip the primary children, and continue working on the
      // fallback children.
      next = fallbackChildFragment;
      child.return = next.return = workInProgress;
    } else {
      // Mount the primary children without an intermediate fragment fiber.
      var nextPrimaryChildren = nextProps.children;
      child = next = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
    }
  } else {
    // This is an update. This branch is more complicated because we need to
    // ensure the state of the primary children is preserved.
    var prevState = current$$1.memoizedState;
    var prevDidTimeout = prevState !== null;
    if (prevDidTimeout) {
      // The current tree already timed out. That means each child set is
      var currentPrimaryChildFragment = current$$1.child;
      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
      if (nextDidTimeout) {
        // Still timed out. Reuse the current primary children by cloning
        // its fragment. We're going to skip over these entirely.
        var _nextFallbackChildren = nextProps.fallback;
        var _primaryChildFragment = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps, NoWork);

        if ((workInProgress.mode & ConcurrentMode) === NoContext) {
          // Outside of concurrent mode, we commit the effects from the
          var _progressedState = workInProgress.memoizedState;
          var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;
          if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
            _primaryChildFragment.child = _progressedPrimaryChild;
          }
        }

        // Because primaryChildFragment is a new fiber that we're inserting as the
        // parent of a new tree, we need to set its treeBaseDuration.
        if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
          // treeBaseDuration is the sum of all the child tree base durations.
          var treeBaseDuration = 0;
          var hiddenChild = _primaryChildFragment.child;
          while (hiddenChild !== null) {
            treeBaseDuration += hiddenChild.treeBaseDuration;
            hiddenChild = hiddenChild.sibling;
          }
          _primaryChildFragment.treeBaseDuration = treeBaseDuration;
        }

        // Clone the fallback child fragment, too. These we'll continue
        // working on.
        var _fallbackChildFragment = _primaryChildFragment.sibling = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren, currentFallbackChildFragment.expirationTime);
        child = _primaryChildFragment;
        _primaryChildFragment.childExpirationTime = NoWork;
        // Skip the primary children, and continue working on the
        // fallback children.
        next = _fallbackChildFragment;
        child.return = next.return = workInProgress;
      } else {
        // No longer suspended. Switch back to showing the primary children,
        // and remove the intermediate fragment fiber.
        var _nextPrimaryChildren = nextProps.children;
        var currentPrimaryChild = currentPrimaryChildFragment.child;
        var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime);

        // If this render doesn't suspend, we need to delete the fallback
        // children. Wait until the complete phase, after we've confirmed the
        // fallback is no longer needed.
        // TODO: Would it be better to store the fallback fragment on
        // the stateNode?

        // Continue rendering the children, like we normally do.
        child = next = primaryChild;
      }
    } else {
      // The current tree has not already timed out. That means the primary
      // children are not wrapped in a fragment fiber.
      var _currentPrimaryChild = current$$1.child;
      if (nextDidTimeout) {
        // Timed out. Wrap the children in a fragment fiber to keep them
        // separate from the fallback children.
        var _nextFallbackChildren2 = nextProps.fallback;
        var _primaryChildFragment2 = createFiberFromFragment(
        // It shouldn't matter what the pending props are because we aren't
        // going to render this fragment.
        null, mode, NoWork, null);
        _primaryChildFragment2.child = _currentPrimaryChild;

        // Even though we're creating a new fiber, there are no new children,
        // because we're reusing an already mounted tree. So we don't need to
        // schedule a placement.
        // primaryChildFragment.effectTag |= Placement;

        if ((workInProgress.mode & ConcurrentMode) === NoContext) {
          // Outside of concurrent mode, we commit the effects from the
          var _progressedState2 = workInProgress.memoizedState;
          var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;
          _primaryChildFragment2.child = _progressedPrimaryChild2;
        }

        // Because primaryChildFragment is a new fiber that we're inserting as the
        // parent of a new tree, we need to set its treeBaseDuration.
        if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
          // treeBaseDuration is the sum of all the child tree base durations.
          var _treeBaseDuration = 0;
          var _hiddenChild = _primaryChildFragment2.child;
          while (_hiddenChild !== null) {
            _treeBaseDuration += _hiddenChild.treeBaseDuration;
            _hiddenChild = _hiddenChild.sibling;
          }
          _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
        }

        // Create a fragment from the fallback children, too.
        var _fallbackChildFragment2 = _primaryChildFragment2.sibling = createFiberFromFragment(_nextFallbackChildren2, mode, renderExpirationTime, null);
        _fallbackChildFragment2.effectTag |= Placement;
        child = _primaryChildFragment2;
        _primaryChildFragment2.childExpirationTime = NoWork;
        // Skip the primary children, and continue working on the
        // fallback children.
        next = _fallbackChildFragment2;
        child.return = next.return = workInProgress;
      } else {
        // Still haven't timed out.  Continue rendering the children, like we
        // normally do.
        var _nextPrimaryChildren2 = nextProps.children;
        next = child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
      }
    }
    workInProgress.stateNode = current$$1.stateNode;
  }

  workInProgress.memoizedState = nextState;
  workInProgress.child = child;
  return next;
}

function updateDehydratedSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
  if (current$$1 === null) {
    // During the first pass, we'll bail out and not drill into the children.
    // Instead, we'll leave the content in place and try to hydrate it later.
    workInProgress.expirationTime = Never;
    return null;
  }
  // We use childExpirationTime to indicate that a child might depend on context, so if
  // any context has changed, we need to treat is as if the input might have changed.
  var hasContextChanged$$1 = current$$1.childExpirationTime >= renderExpirationTime;
  if (didReceiveUpdate || hasContextChanged$$1) {
    // This boundary has changed since the first render. This means that we are now unable to
    // hydrate it. We might still be able to hydrate it using an earlier expiration time but
    // during this render we can't. Instead, we're going to delete the whole subtree and
    // instead inject a new real Suspense boundary to take its place, which may render content
    // or fallback. The real Suspense boundary will suspend for a while so we have some time
    // to ensure it can produce real content, but all state and pending events will be lost.

    // Detach from the current dehydrated boundary.
    current$$1.alternate = null;
    workInProgress.alternate = null;

    // Insert a deletion in the effect list.
    var returnFiber = workInProgress.return;
    !(returnFiber !== null) ? invariant(false, 'Suspense boundaries are never on the root. This is probably a bug in React.') : void 0;
    var last = returnFiber.lastEffect;
    if (last !== null) {
      last.nextEffect = current$$1;
      returnFiber.lastEffect = current$$1;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = current$$1;
    }
    current$$1.nextEffect = null;
    current$$1.effectTag = Deletion;

    // Upgrade this work in progress to a real Suspense component.
    workInProgress.tag = SuspenseComponent;
    workInProgress.stateNode = null;
    workInProgress.memoizedState = null;
    // This is now an insertion.
    workInProgress.effectTag |= Placement;
    // Retry as a real Suspense component.
    return updateSuspenseComponent(null, workInProgress, renderExpirationTime);
  }
  if ((workInProgress.effectTag & DidCapture) === NoEffect) {
    // This is the first attempt.
    reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress);
    var nextProps = workInProgress.pendingProps;
    var nextChildren = nextProps.children;
    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    return workInProgress.child;
  } else {
    // Something suspended. Leave the existing children in place.
    // TODO: In non-concurrent mode, should we commit the nodes we have hydrated so far?
    workInProgress.child = null;
    return null;
  }
}

function updatePortalComponent(current$$1, workInProgress, renderExpirationTime) {
  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
  var nextChildren = workInProgress.pendingProps;
  if (current$$1 === null) {
    // Portals are special because we don't append the children during mount
    // but at commit. Therefore we need to track insertions which the normal
    // flow doesn't do during mount. This doesn't happen at the root because
    // the root always starts with a "current" with a null child.
    // TODO: Consider unifying this with how the root works.
    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  }
  return workInProgress.child;
}

function updateContextProvider(current$$1, workInProgress, renderExpirationTime) {
  var providerType = workInProgress.type;
  var context = providerType._context;

  var newProps = workInProgress.pendingProps;
  var oldProps = workInProgress.memoizedProps;

  var newValue = newProps.value;

  {
    var providerPropTypes = workInProgress.type.propTypes;

    if (providerPropTypes) {
      checkPropTypes_1(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
    }
  }

  pushProvider(workInProgress, newValue);

  if (oldProps !== null) {
    var oldValue = oldProps.value;
    var changedBits = calculateChangedBits(context, newValue, oldValue);
    if (changedBits === 0) {
      // No change. Bailout early if children are the same.
      if (oldProps.children === newProps.children && !hasContextChanged()) {
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }
    } else {
      // The context value changed. Search for matching consumers and schedule
      // them to update.
      propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
    }
  }

  var newChildren = newProps.children;
  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
  return workInProgress.child;
}

var hasWarnedAboutUsingContextAsConsumer = false;

function updateContextConsumer(current$$1, workInProgress, renderExpirationTime) {
  var context = workInProgress.type;
  // The logic below for Context differs depending on PROD or DEV mode. In
  // DEV mode, we create a separate object for Context.Consumer that acts
  // like a proxy to Context. This proxy object adds unnecessary code in PROD
  // so we use the old behaviour (Context.Consumer references Context) to
  // reduce size and overhead. The separate object references context via
  // a property called "_context", which also gives us the ability to check
  // in DEV mode if this property exists or not and warn if it does not.
  {
    if (context._context === undefined) {
      // This may be because it's a Context (rather than a Consumer).
      // Or it may be because it's older React where they're the same thing.
      // We only want to warn if we're sure it's a new React.
      if (context !== context.Consumer) {
        if (!hasWarnedAboutUsingContextAsConsumer) {
          hasWarnedAboutUsingContextAsConsumer = true;
          warning$1(false, 'Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
        }
      }
    } else {
      context = context._context;
    }
  }
  var newProps = workInProgress.pendingProps;
  var render = newProps.children;

  {
    !(typeof render === 'function') ? warningWithoutStack$1(false, 'A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.') : void 0;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var newValue = readContext(context, newProps.unstable_observedBits);
  var newChildren = void 0;
  {
    ReactCurrentOwner$3.current = workInProgress;
    setCurrentPhase('render');
    newChildren = render(newValue);
    setCurrentPhase(null);
  }

  // React DevTools reads this flag.
  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
  return workInProgress.child;
}

function markWorkInProgressReceivedUpdate() {
  didReceiveUpdate = true;
}

function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
  cancelWorkTimer(workInProgress);

  if (current$$1 !== null) {
    // Reuse previous context list
    workInProgress.contextDependencies = current$$1.contextDependencies;
  }

  if (enableProfilerTimer) {
    // Don't update "base" render times for bailouts.
    stopProfilerTimerIfRunning(workInProgress);
  }

  // Check if the children have any pending work.
  var childExpirationTime = workInProgress.childExpirationTime;
  if (childExpirationTime < renderExpirationTime) {
    // The children don't have any work either. We can skip them.
    // TODO: Once we add back resuming, we should check if the children are
    // a work-in-progress set. If so, we need to transfer their effects.
    return null;
  } else {
    // This fiber doesn't have work, but its subtree does. Clone the child
    // fibers and continue.
    cloneChildFibers(current$$1, workInProgress);
    return workInProgress.child;
  }
}

function beginWork(current$$1, workInProgress, renderExpirationTime) {
  var updateExpirationTime = workInProgress.expirationTime;

  if (current$$1 !== null) {
    var oldProps = current$$1.memoizedProps;
    var newProps = workInProgress.pendingProps;

    if (oldProps !== newProps || hasContextChanged()) {
      // If props or context changed, mark the fiber as having performed work.
      // This may be unset if the props are determined to be equal later (memo).
      didReceiveUpdate = true;
    } else if (updateExpirationTime < renderExpirationTime) {
      didReceiveUpdate = false;
      // This fiber does not have any pending work. Bailout without entering
      // the begin phase. There's still some bookkeeping we that needs to be done
      // in this optimized path, mostly pushing stuff onto the stack.
      switch (workInProgress.tag) {
        case HostRoot:
          pushHostRootContext(workInProgress);
          resetHydrationState();
          break;
        case HostComponent:
          pushHostContext(workInProgress);
          break;
        case ClassComponent:
          {
            var Component = workInProgress.type;
            if (isContextProvider(Component)) {
              pushContextProvider(workInProgress);
            }
            break;
          }
        case HostPortal:
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          break;
        case ContextProvider:
          {
            var newValue = workInProgress.memoizedProps.value;
            pushProvider(workInProgress, newValue);
            break;
          }
        case Profiler:
          if (enableProfilerTimer) {
            workInProgress.effectTag |= Update;
          }
          break;
        case SuspenseComponent:
          {
            var state = workInProgress.memoizedState;
            var didTimeout = state !== null;
            if (didTimeout) {
              // If this boundary is currently timed out, we need to decide
              // whether to retry the primary children, or to skip over it and
              // go straight to the fallback. Check the priority of the primary
              var primaryChildFragment = workInProgress.child;
              var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;
              if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
                // The primary children have pending work. Use the normal path
                // to attempt to render the primary children again.
                return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
              } else {
                // The primary children do not have pending work with sufficient
                // priority. Bailout.
                var child = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                if (child !== null) {
                  // The fallback children have pending work. Skip over the
                  // primary children and work on the fallback.
                  return child.sibling;
                } else {
                  return null;
                }
              }
            }
            break;
          }
        case DehydratedSuspenseComponent:
          {
            if (enableSuspenseServerRenderer) {
              // We know that this component will suspend again because if it has
              // been unsuspended it has committed as a regular Suspense component.
              // If it needs to be retried, it should have work scheduled on it.
              workInProgress.effectTag |= DidCapture;
              break;
            }
          }
      }
      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    }
  } else {
    didReceiveUpdate = false;
  }

  // Before entering the begin phase, clear the expiration time.
  workInProgress.expirationTime = NoWork;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
      {
        var elementType = workInProgress.elementType;
        return mountIndeterminateComponent(current$$1, workInProgress, elementType, renderExpirationTime);
      }
    case LazyComponent:
      {
        var _elementType = workInProgress.elementType;
        return mountLazyComponent(current$$1, workInProgress, _elementType, updateExpirationTime, renderExpirationTime);
      }
    case FunctionComponent:
      {
        var _Component = workInProgress.type;
        var unresolvedProps = workInProgress.pendingProps;
        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
        return updateFunctionComponent(current$$1, workInProgress, _Component, resolvedProps, renderExpirationTime);
      }
    case ClassComponent:
      {
        var _Component2 = workInProgress.type;
        var _unresolvedProps = workInProgress.pendingProps;
        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
        return updateClassComponent(current$$1, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
      }
    case HostRoot:
      return updateHostRoot(current$$1, workInProgress, renderExpirationTime);
    case HostComponent:
      return updateHostComponent(current$$1, workInProgress, renderExpirationTime);
    case HostText:
      return updateHostText(current$$1, workInProgress);
    case SuspenseComponent:
      return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
    case HostPortal:
      return updatePortalComponent(current$$1, workInProgress, renderExpirationTime);
    case ForwardRef:
      {
        var type = workInProgress.type;
        var _unresolvedProps2 = workInProgress.pendingProps;
        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
        return updateForwardRef(current$$1, workInProgress, type, _resolvedProps2, renderExpirationTime);
      }
    case Fragment:
      return updateFragment(current$$1, workInProgress, renderExpirationTime);
    case Mode:
      return updateMode(current$$1, workInProgress, renderExpirationTime);
    case Profiler:
      return updateProfiler(current$$1, workInProgress, renderExpirationTime);
    case ContextProvider:
      return updateContextProvider(current$$1, workInProgress, renderExpirationTime);
    case ContextConsumer:
      return updateContextConsumer(current$$1, workInProgress, renderExpirationTime);
    case MemoComponent:
      {
        var _type2 = workInProgress.type;
        var _unresolvedProps3 = workInProgress.pendingProps;
        // Resolve outer props first, then resolve inner props.
        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = _type2.propTypes;
            if (outerPropTypes) {
              checkPropTypes_1(outerPropTypes, _resolvedProps3, // Resolved for outer only
              'prop', getComponentName(_type2), getCurrentFiberStackInDev);
            }
          }
        }
        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
        return updateMemoComponent(current$$1, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
      }
    case SimpleMemoComponent:
      {
        return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
      }
    case IncompleteClassComponent:
      {
        var _Component3 = workInProgress.type;
        var _unresolvedProps4 = workInProgress.pendingProps;
        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
        return mountIncompleteClassComponent(current$$1, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
      }
    case DehydratedSuspenseComponent:
      {
        if (enableSuspenseServerRenderer) {
          return updateDehydratedSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
        }
        break;
      }
  }
  invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
}

var valueCursor = createCursor(null);

var rendererSigil = void 0;
{
  // Use this to detect multiple renderers using the same context
  rendererSigil = {};
}

var currentlyRenderingFiber = null;
var lastContextDependency = null;
var lastContextWithAllBitsObserved = null;

var isDisallowedContextReadInDEV = false;

function resetContextDependences() {
  // This is called right before React yields execution, to ensure `readContext`
  // cannot be called outside the render phase.
  currentlyRenderingFiber = null;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;
  {
    isDisallowedContextReadInDEV = false;
  }
}

function enterDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = true;
  }
}

function exitDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = false;
  }
}

function pushProvider(providerFiber, nextValue) {
  var context = providerFiber.type._context;

  if (isPrimaryRenderer) {
    push(valueCursor, context._currentValue, providerFiber);

    context._currentValue = nextValue;
    {
      !(context._currentRenderer === undefined || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
      context._currentRenderer = rendererSigil;
    }
  } else {
    push(valueCursor, context._currentValue2, providerFiber);

    context._currentValue2 = nextValue;
    {
      !(context._currentRenderer2 === undefined || context._currentRenderer2 === null || context._currentRenderer2 === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
      context._currentRenderer2 = rendererSigil;
    }
  }
}

function popProvider(providerFiber) {
  var currentValue = valueCursor.current;

  pop(valueCursor, providerFiber);

  var context = providerFiber.type._context;
  if (isPrimaryRenderer) {
    context._currentValue = currentValue;
  } else {
    context._currentValue2 = currentValue;
  }
}

function calculateChangedBits(context, newValue, oldValue) {
  if (is(oldValue, newValue)) {
    // No change
    return 0;
  } else {
    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : maxSigned31BitInt;

    {
      !((changedBits & maxSigned31BitInt) === changedBits) ? warning$1(false, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits) : void 0;
    }
    return changedBits | 0;
  }
}

function scheduleWorkOnParentPath(parent, renderExpirationTime) {
  // Update the child expiration time of all the ancestors, including
  // the alternates.
  var node = parent;
  while (node !== null) {
    var alternate = node.alternate;
    if (node.childExpirationTime < renderExpirationTime) {
      node.childExpirationTime = renderExpirationTime;
      if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
        alternate.childExpirationTime = renderExpirationTime;
      }
    } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
      alternate.childExpirationTime = renderExpirationTime;
    } else {
      // Neither alternate was updated, which means the rest of the
      // ancestor path already has sufficient priority.
      break;
    }
    node = node.return;
  }
}

function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
  var fiber = workInProgress.child;
  if (fiber !== null) {
    // Set the return pointer of the child to the work-in-progress fiber.
    fiber.return = workInProgress;
  }
  while (fiber !== null) {
    var nextFiber = void 0;

    // Visit this fiber.
    var list = fiber.contextDependencies;
    if (list !== null) {
      nextFiber = fiber.child;

      var dependency = list.first;
      while (dependency !== null) {
        // Check if the context matches.
        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
          // Match! Schedule an update on this fiber.

          if (fiber.tag === ClassComponent) {
            // Schedule a force update on the work-in-progress.
            var update = createUpdate(renderExpirationTime);
            update.tag = ForceUpdate;
            // TODO: Because we don't have a work-in-progress, this will add the
            // update to the current fiber, too, which means it will persist even if
            // this render is thrown away. Since it's a race condition, not sure it's
            // worth fixing.
            enqueueUpdate(fiber, update);
          }

          if (fiber.expirationTime < renderExpirationTime) {
            fiber.expirationTime = renderExpirationTime;
          }
          var alternate = fiber.alternate;
          if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
            alternate.expirationTime = renderExpirationTime;
          }

          scheduleWorkOnParentPath(fiber.return, renderExpirationTime);

          // Mark the expiration time on the list, too.
          if (list.expirationTime < renderExpirationTime) {
            list.expirationTime = renderExpirationTime;
          }

          // Since we already found a match, we can stop traversing the
          // dependency list.
          break;
        }
        dependency = dependency.next;
      }
    } else if (fiber.tag === ContextProvider) {
      // Don't scan deeper if this is a matching provider
      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
    } else if (enableSuspenseServerRenderer && fiber.tag === DehydratedSuspenseComponent) {
      // If a dehydrated suspense component is in this subtree, we don't know
      // if it will have any context consumers in it. The best we can do is
      // mark it as having updates on its children.
      if (fiber.expirationTime < renderExpirationTime) {
        fiber.expirationTime = renderExpirationTime;
      }
      var _alternate = fiber.alternate;
      if (_alternate !== null && _alternate.expirationTime < renderExpirationTime) {
        _alternate.expirationTime = renderExpirationTime;
      }
      // This is intentionally passing this fiber as the parent
      // because we want to schedule this fiber as having work
      // on its children. We'll use the childExpirationTime on
      // this fiber to indicate that a context has changed.
      scheduleWorkOnParentPath(fiber, renderExpirationTime);
      nextFiber = fiber.sibling;
    } else {
      // Traverse down.
      nextFiber = fiber.child;
    }

    if (nextFiber !== null) {
      // Set the return pointer of the child to the work-in-progress fiber.
      nextFiber.return = fiber;
    } else {
      // No child. Traverse to next sibling.
      nextFiber = fiber;
      while (nextFiber !== null) {
        if (nextFiber === workInProgress) {
          // We're back to the root of this subtree. Exit.
          nextFiber = null;
          break;
        }
        var sibling = nextFiber.sibling;
        if (sibling !== null) {
          // Set the return pointer of the sibling to the work-in-progress fiber.
          sibling.return = nextFiber.return;
          nextFiber = sibling;
          break;
        }
        // No more siblings. Traverse up.
        nextFiber = nextFiber.return;
      }
    }
    fiber = nextFiber;
  }
}

function prepareToReadContext(workInProgress, renderExpirationTime) {
  currentlyRenderingFiber = workInProgress;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;

  var currentDependencies = workInProgress.contextDependencies;
  if (currentDependencies !== null && currentDependencies.expirationTime >= renderExpirationTime) {
    // Context list has a pending update. Mark that this fiber performed work.
    markWorkInProgressReceivedUpdate();
  }

  // Reset the work-in-progress list
  workInProgress.contextDependencies = null;
}

function readContext(context, observedBits) {
  {
    // This warning would fire if you read context inside a Hook like useMemo.
    // Unlike the class check below, it's not enforced in production for perf.
    !!isDisallowedContextReadInDEV ? warning$1(false, 'Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().') : void 0;
  }

  if (lastContextWithAllBitsObserved === context) {
    // Nothing to do. We already observe everything in this context.
  } else if (observedBits === false || observedBits === 0) {
    // Do not observe any updates.
  } else {
    var resolvedObservedBits = void 0; // Avoid deopting on observable arguments or heterogeneous types.
    if (typeof observedBits !== 'number' || observedBits === maxSigned31BitInt) {
      // Observe all updates.
      lastContextWithAllBitsObserved = context;
      resolvedObservedBits = maxSigned31BitInt;
    } else {
      resolvedObservedBits = observedBits;
    }

    var contextItem = {
      context: context,
      observedBits: resolvedObservedBits,
      next: null
    };

    if (lastContextDependency === null) {
      !(currentlyRenderingFiber !== null) ? invariant(false, 'Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().') : void 0;

      // This is the first dependency for this component. Create a new list.
      lastContextDependency = contextItem;
      currentlyRenderingFiber.contextDependencies = {
        first: contextItem,
        expirationTime: NoWork
      };
    } else {
      // Append a new context item.
      lastContextDependency = lastContextDependency.next = contextItem;
    }
  }
  return isPrimaryRenderer ? context._currentValue : context._currentValue2;
}

// UpdateQueue is a linked list of prioritized updates.
//
// Like fibers, update queues come in pairs: a current queue, which represents
// the visible state of the screen, and a work-in-progress queue, which can be
// mutated and processed asynchronously before it is committed — a form of
// double buffering. If a work-in-progress render is discarded before finishing,
// we create a new work-in-progress by cloning the current queue.
//
// Both queues share a persistent, singly-linked list structure. To schedule an
// update, we append it to the end of both queues. Each queue maintains a
// pointer to first update in the persistent list that hasn't been processed.
// The work-in-progress pointer always has a position equal to or greater than
// the current queue, since we always work on that one. The current queue's
// pointer is only updated during the commit phase, when we swap in the
// work-in-progress.
//
// For example:
//
//   Current pointer:           A - B - C - D - E - F
//   Work-in-progress pointer:              D - E - F
//                                          ^
//                                          The work-in-progress queue has
//                                          processed more updates than current.
//
// The reason we append to both queues is because otherwise we might drop
// updates without ever processing them. For example, if we only add updates to
// the work-in-progress queue, some updates could be lost whenever a work-in
// -progress render restarts by cloning from current. Similarly, if we only add
// updates to the current queue, the updates will be lost whenever an already
// in-progress queue commits and swaps with the current queue. However, by
// adding to both queues, we guarantee that the update will be part of the next
// work-in-progress. (And because the work-in-progress queue becomes the
// current queue once it commits, there's no danger of applying the same
// update twice.)
//
// Prioritization
// --------------
//
// Updates are not sorted by priority, but by insertion; new updates are always
// appended to the end of the list.
//
// The priority is still important, though. When processing the update queue
// during the render phase, only the updates with sufficient priority are
// included in the result. If we skip an update because it has insufficient
// priority, it remains in the queue to be processed later, during a lower
// priority render. Crucially, all updates subsequent to a skipped update also
// remain in the queue *regardless of their priority*. That means high priority
// updates are sometimes processed twice, at two separate priorities. We also
// keep track of a base state, that represents the state before the first
// update in the queue is applied.
//
// For example:
//
//   Given a base state of '', and the following queue of updates
//
//     A1 - B2 - C1 - D2
//
//   where the number indicates the priority, and the update is applied to the
//   previous state by appending a letter, React will process these updates as
//   two separate renders, one per distinct priority level:
//
//   First render, at priority 1:
//     Base state: ''
//     Updates: [A1, C1]
//     Result state: 'AC'
//
//   Second render, at priority 2:
//     Base state: 'A'            <-  The base state does not include C1,
//                                    because B2 was skipped.
//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
//     Result state: 'ABCD'
//
// Because we process updates in insertion order, and rebase high priority
// updates when preceding updates are skipped, the final result is deterministic
// regardless of priority. Intermediate state may vary according to system
// resources, but the final state is always the same.

var UpdateState = 0;
var ReplaceState = 1;
var ForceUpdate = 2;
var CaptureUpdate = 3;

// Global state that is reset at the beginning of calling `processUpdateQueue`.
// It should only be read right after calling `processUpdateQueue`, via
// `checkHasForceUpdateAfterProcessing`.
var hasForceUpdate = false;

var didWarnUpdateInsideUpdate = void 0;
var currentlyProcessingQueue = void 0;
var resetCurrentlyProcessingQueue = void 0;
{
  didWarnUpdateInsideUpdate = false;
  currentlyProcessingQueue = null;
  resetCurrentlyProcessingQueue = function () {
    currentlyProcessingQueue = null;
  };
}

function createUpdateQueue(baseState) {
  var queue = {
    baseState: baseState,
    firstUpdate: null,
    lastUpdate: null,
    firstCapturedUpdate: null,
    lastCapturedUpdate: null,
    firstEffect: null,
    lastEffect: null,
    firstCapturedEffect: null,
    lastCapturedEffect: null
  };
  return queue;
}

function cloneUpdateQueue(currentQueue) {
  var queue = {
    baseState: currentQueue.baseState,
    firstUpdate: currentQueue.firstUpdate,
    lastUpdate: currentQueue.lastUpdate,

    // TODO: With resuming, if we bail out and resuse the child tree, we should
    // keep these effects.
    firstCapturedUpdate: null,
    lastCapturedUpdate: null,

    firstEffect: null,
    lastEffect: null,

    firstCapturedEffect: null,
    lastCapturedEffect: null
  };
  return queue;
}

function createUpdate(expirationTime) {
  return {
    expirationTime: expirationTime,

    tag: UpdateState,
    payload: null,
    callback: null,

    next: null,
    nextEffect: null
  };
}

function appendUpdateToQueue(queue, update) {
  // Append the update to the end of the list.
  if (queue.lastUpdate === null) {
    // Queue is empty
    queue.firstUpdate = queue.lastUpdate = update;
  } else {
    queue.lastUpdate.next = update;
    queue.lastUpdate = update;
  }
}

function enqueueUpdate(fiber, update) {
  // Update queues are created lazily.
  var alternate = fiber.alternate;
  var queue1 = void 0;
  var queue2 = void 0;
  if (alternate === null) {
    // There's only one fiber.
    queue1 = fiber.updateQueue;
    queue2 = null;
    if (queue1 === null) {
      queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
    }
  } else {
    // There are two owners.
    queue1 = fiber.updateQueue;
    queue2 = alternate.updateQueue;
    if (queue1 === null) {
      if (queue2 === null) {
        // Neither fiber has an update queue. Create new ones.
        queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
        queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
      } else {
        // Only one fiber has an update queue. Clone to create a new one.
        queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
      }
    } else {
      if (queue2 === null) {
        // Only one fiber has an update queue. Clone to create a new one.
        queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
      } else {
        // Both owners have an update queue.
      }
    }
  }
  if (queue2 === null || queue1 === queue2) {
    // There's only a single queue.
    appendUpdateToQueue(queue1, update);
  } else {
    // There are two queues. We need to append the update to both queues,
    // while accounting for the persistent structure of the list — we don't
    // want the same update to be added multiple times.
    if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
      // One of the queues is not empty. We must add the update to both queues.
      appendUpdateToQueue(queue1, update);
      appendUpdateToQueue(queue2, update);
    } else {
      // Both queues are non-empty. The last update is the same in both lists,
      // because of structural sharing. So, only append to one of the lists.
      appendUpdateToQueue(queue1, update);
      // But we still need to update the `lastUpdate` pointer of queue2.
      queue2.lastUpdate = update;
    }
  }

  {
    if (fiber.tag === ClassComponent && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
      warningWithoutStack$1(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
      didWarnUpdateInsideUpdate = true;
    }
  }
}

function enqueueCapturedUpdate(workInProgress, update) {
  // Captured updates go into a separate list, and only on the work-in-
  // progress queue.
  var workInProgressQueue = workInProgress.updateQueue;
  if (workInProgressQueue === null) {
    workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);
  } else {
    // TODO: I put this here rather than createWorkInProgress so that we don't
    // clone the queue unnecessarily. There's probably a better way to
    // structure this.
    workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
  }

  // Append the update to the end of the list.
  if (workInProgressQueue.lastCapturedUpdate === null) {
    // This is the first render phase update
    workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
  } else {
    workInProgressQueue.lastCapturedUpdate.next = update;
    workInProgressQueue.lastCapturedUpdate = update;
  }
}

function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
  var current = workInProgress.alternate;
  if (current !== null) {
    // If the work-in-progress queue is equal to the current queue,
    // we need to clone it first.
    if (queue === current.updateQueue) {
      queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
    }
  }
  return queue;
}

function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
  switch (update.tag) {
    case ReplaceState:
      {
        var _payload = update.payload;
        if (typeof _payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();
            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
              _payload.call(instance, prevState, nextProps);
            }
          }
          var nextState = _payload.call(instance, prevState, nextProps);
          {
            exitDisallowedContextReadInDEV();
          }
          return nextState;
        }
        // State object
        return _payload;
      }
    case CaptureUpdate:
      {
        workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
      }
    // Intentional fallthrough
    case UpdateState:
      {
        var _payload2 = update.payload;
        var partialState = void 0;
        if (typeof _payload2 === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();
            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
              _payload2.call(instance, prevState, nextProps);
            }
          }
          partialState = _payload2.call(instance, prevState, nextProps);
          {
            exitDisallowedContextReadInDEV();
          }
        } else {
          // Partial state object
          partialState = _payload2;
        }
        if (partialState === null || partialState === undefined) {
          // Null and undefined are treated as no-ops.
          return prevState;
        }
        // Merge the partial state and the previous state.
        return _assign({}, prevState, partialState);
      }
    case ForceUpdate:
      {
        hasForceUpdate = true;
        return prevState;
      }
  }
  return prevState;
}

function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
  hasForceUpdate = false;

  queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

  {
    currentlyProcessingQueue = queue;
  }

  // These values may change as we process the queue.
  var newBaseState = queue.baseState;
  var newFirstUpdate = null;
  var newExpirationTime = NoWork;

  // Iterate through the list of updates to compute the result.
  var update = queue.firstUpdate;
  var resultState = newBaseState;
  while (update !== null) {
    var updateExpirationTime = update.expirationTime;
    if (updateExpirationTime < renderExpirationTime) {
      // This update does not have sufficient priority. Skip it.
      if (newFirstUpdate === null) {
        // This is the first skipped update. It will be the first update in
        // the new list.
        newFirstUpdate = update;
        // Since this is the first update that was skipped, the current result
        // is the new base state.
        newBaseState = resultState;
      }
      // Since this update will remain in the list, update the remaining
      // expiration time.
      if (newExpirationTime < updateExpirationTime) {
        newExpirationTime = updateExpirationTime;
      }
    } else {
      // This update does have sufficient priority. Process it and compute
      // a new result.
      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
      var _callback = update.callback;
      if (_callback !== null) {
        workInProgress.effectTag |= Callback;
        // Set this to null, in case it was mutated during an aborted render.
        update.nextEffect = null;
        if (queue.lastEffect === null) {
          queue.firstEffect = queue.lastEffect = update;
        } else {
          queue.lastEffect.nextEffect = update;
          queue.lastEffect = update;
        }
      }
    }
    // Continue to the next update.
    update = update.next;
  }

  // Separately, iterate though the list of captured updates.
  var newFirstCapturedUpdate = null;
  update = queue.firstCapturedUpdate;
  while (update !== null) {
    var _updateExpirationTime = update.expirationTime;
    if (_updateExpirationTime < renderExpirationTime) {
      // This update does not have sufficient priority. Skip it.
      if (newFirstCapturedUpdate === null) {
        // This is the first skipped captured update. It will be the first
        // update in the new list.
        newFirstCapturedUpdate = update;
        // If this is the first update that was skipped, the current result is
        // the new base state.
        if (newFirstUpdate === null) {
          newBaseState = resultState;
        }
      }
      // Since this update will remain in the list, update the remaining
      // expiration time.
      if (newExpirationTime < _updateExpirationTime) {
        newExpirationTime = _updateExpirationTime;
      }
    } else {
      // This update does have sufficient priority. Process it and compute
      // a new result.
      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
      var _callback2 = update.callback;
      if (_callback2 !== null) {
        workInProgress.effectTag |= Callback;
        // Set this to null, in case it was mutated during an aborted render.
        update.nextEffect = null;
        if (queue.lastCapturedEffect === null) {
          queue.firstCapturedEffect = queue.lastCapturedEffect = update;
        } else {
          queue.lastCapturedEffect.nextEffect = update;
          queue.lastCapturedEffect = update;
        }
      }
    }
    update = update.next;
  }

  if (newFirstUpdate === null) {
    queue.lastUpdate = null;
  }
  if (newFirstCapturedUpdate === null) {
    queue.lastCapturedUpdate = null;
  } else {
    workInProgress.effectTag |= Callback;
  }
  if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
    // We processed every update, without skipping. That means the new base
    // state is the same as the result state.
    newBaseState = resultState;
  }

  queue.baseState = newBaseState;
  queue.firstUpdate = newFirstUpdate;
  queue.firstCapturedUpdate = newFirstCapturedUpdate;

  // Set the remaining expiration time to be whatever is remaining in the queue.
  // This should be fine because the only two other things that contribute to
  // expiration time are props and context. We're already in the middle of the
  // begin phase by the time we start processing the queue, so we've already
  // dealt with the props. Context in components that specify
  // shouldComponentUpdate is tricky; but we'll have to account for
  // that regardless.
  workInProgress.expirationTime = newExpirationTime;
  workInProgress.memoizedState = resultState;

  {
    currentlyProcessingQueue = null;
  }
}

function callCallback(callback, context) {
  !(typeof callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', callback) : void 0;
  callback.call(context);
}

function resetHasForceUpdateBeforeProcessing() {
  hasForceUpdate = false;
}

function checkHasForceUpdateAfterProcessing() {
  return hasForceUpdate;
}

function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime) {
  // If the finished render included captured updates, and there are still
  // lower priority updates left over, we need to keep the captured updates
  // in the queue so that they are rebased and not dropped once we process the
  // queue again at the lower priority.
  if (finishedQueue.firstCapturedUpdate !== null) {
    // Join the captured update list to the end of the normal list.
    if (finishedQueue.lastUpdate !== null) {
      finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
      finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
    }
    // Clear the list of captured updates.
    finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
  }

  // Commit the effects
  commitUpdateEffects(finishedQueue.firstEffect, instance);
  finishedQueue.firstEffect = finishedQueue.lastEffect = null;

  commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
  finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
}

function commitUpdateEffects(effect, instance) {
  while (effect !== null) {
    var _callback3 = effect.callback;
    if (_callback3 !== null) {
      effect.callback = null;
      callCallback(_callback3, instance);
    }
    effect = effect.nextEffect;
  }
}

function createCapturedValue(value, source) {
  // If the value is an error, call this function immediately after it is thrown
  // so the stack is accurate.
  return {
    value: value,
    source: source,
    stack: getStackByFiberInDevAndProd(source)
  };
}

function markUpdate(workInProgress) {
  // Tag the fiber with an update effect. This turns a Placement into
  // a PlacementAndUpdate.
  workInProgress.effectTag |= Update;
}

function markRef$1(workInProgress) {
  workInProgress.effectTag |= Ref;
}

var appendAllChildren = void 0;
var updateHostContainer = void 0;
var updateHostComponent$1 = void 0;
var updateHostText$1 = void 0;
if (supportsMutation) {
  // Mutation mode

  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;
    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText) {
        appendInitialChild(parent, node.stateNode);
      } else if (node.tag === HostPortal) {
        // If we have a portal child, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) {
        return;
      }
      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function (workInProgress) {
    // Noop
  };
  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    // If we have an alternate, that means this is an update and we need to
    // schedule a side-effect to do the updates.
    var oldProps = current.memoizedProps;
    if (oldProps === newProps) {
      // In mutation mode, this is sufficient for a bailout because
      // we won't touch this node even if children changed.
      return;
    }

    // If we get updated because one of our children updated, we don't
    // have newProps so we'll have to reuse them.
    // TODO: Split the update API as separate for the props vs. children.
    // Even better would be if children weren't special cased at all tho.
    var instance = workInProgress.stateNode;
    var currentHostContext = getHostContext();
    // TODO: Experiencing an error where oldProps is null. Suggests a host
    // component is hitting the resume path. Figure out why. Possibly
    // related to `hidden`.
    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
    // TODO: Type this specific to this type of component.
    workInProgress.updateQueue = updatePayload;
    // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update. All the work is done in commitWork.
    if (updatePayload) {
      markUpdate(workInProgress);
    }
  };
  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    // If the text differs, mark it as an update. All the work in done in commitWork.
    if (oldText !== newText) {
      markUpdate(workInProgress);
    }
  };
} else if (supportsPersistence) {
  // Persistent host tree mode

  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;
    while (node !== null) {
      // eslint-disable-next-line no-labels
      branches: if (node.tag === HostComponent) {
        var instance = node.stateNode;
        if (needsVisibilityToggle) {
          var props = node.memoizedProps;
          var type = node.type;
          if (isHidden) {
            // This child is inside a timed out tree. Hide it.
            instance = cloneHiddenInstance(instance, type, props, node);
          } else {
            // This child was previously inside a timed out tree. If it was not
            // updated during this render, it may need to be unhidden. Clone
            // again to be sure.
            instance = cloneUnhiddenInstance(instance, type, props, node);
          }
          node.stateNode = instance;
        }
        appendInitialChild(parent, instance);
      } else if (node.tag === HostText) {
        var _instance = node.stateNode;
        if (needsVisibilityToggle) {
          var text = node.memoizedProps;
          var rootContainerInstance = getRootHostContainer();
          var currentHostContext = getHostContext();
          if (isHidden) {
            _instance = createHiddenTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
          } else {
            _instance = createTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
          }
          node.stateNode = _instance;
        }
        appendInitialChild(parent, _instance);
      } else if (node.tag === HostPortal) {
        // If we have a portal child, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.tag === SuspenseComponent) {
        var current = node.alternate;
        if (current !== null) {
          var oldState = current.memoizedState;
          var newState = node.memoizedState;
          var oldIsHidden = oldState !== null;
          var newIsHidden = newState !== null;
          if (oldIsHidden !== newIsHidden) {
            // The placeholder either just timed out or switched back to the normal
            // children after having previously timed out. Toggle the visibility of
            // the direct host children.
            var primaryChildParent = newIsHidden ? node.child : node;
            if (primaryChildParent !== null) {
              appendAllChildren(parent, primaryChildParent, true, newIsHidden);
            }
            // eslint-disable-next-line no-labels
            break branches;
          }
        }
        if (node.child !== null) {
          // Continue traversing like normal
          node.child.return = node;
          node = node.child;
          continue;
        }
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      // $FlowFixMe This is correct but Flow is confused by the labeled break.
      node = node;
      if (node === workInProgress) {
        return;
      }
      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  // An unfortunate fork of appendAllChildren because we have two different parent types.
  var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;
    while (node !== null) {
      // eslint-disable-next-line no-labels
      branches: if (node.tag === HostComponent) {
        var instance = node.stateNode;
        if (needsVisibilityToggle) {
          var props = node.memoizedProps;
          var type = node.type;
          if (isHidden) {
            // This child is inside a timed out tree. Hide it.
            instance = cloneHiddenInstance(instance, type, props, node);
          } else {
            // This child was previously inside a timed out tree. If it was not
            // updated during this render, it may need to be unhidden. Clone
            // again to be sure.
            instance = cloneUnhiddenInstance(instance, type, props, node);
          }
          node.stateNode = instance;
        }
        appendChildToContainerChildSet(containerChildSet, instance);
      } else if (node.tag === HostText) {
        var _instance2 = node.stateNode;
        if (needsVisibilityToggle) {
          var text = node.memoizedProps;
          var rootContainerInstance = getRootHostContainer();
          var currentHostContext = getHostContext();
          if (isHidden) {
            _instance2 = createHiddenTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
          } else {
            _instance2 = createTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
          }
          node.stateNode = _instance2;
        }
        appendChildToContainerChildSet(containerChildSet, _instance2);
      } else if (node.tag === HostPortal) {
        // If we have a portal child, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.tag === SuspenseComponent) {
        var current = node.alternate;
        if (current !== null) {
          var oldState = current.memoizedState;
          var newState = node.memoizedState;
          var oldIsHidden = oldState !== null;
          var newIsHidden = newState !== null;
          if (oldIsHidden !== newIsHidden) {
            // The placeholder either just timed out or switched back to the normal
            // children after having previously timed out. Toggle the visibility of
            // the direct host children.
            var primaryChildParent = newIsHidden ? node.child : node;
            if (primaryChildParent !== null) {
              appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);
            }
            // eslint-disable-next-line no-labels
            break branches;
          }
        }
        if (node.child !== null) {
          // Continue traversing like normal
          node.child.return = node;
          node = node.child;
          continue;
        }
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      // $FlowFixMe This is correct but Flow is confused by the labeled break.
      node = node;
      if (node === workInProgress) {
        return;
      }
      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  };
  updateHostContainer = function (workInProgress) {
    var portalOrRoot = workInProgress.stateNode;
    var childrenUnchanged = workInProgress.firstEffect === null;
    if (childrenUnchanged) {
      // No changes, just reuse the existing instance.
    } else {
      var container = portalOrRoot.containerInfo;
      var newChildSet = createContainerChildSet(container);
      // If children might have changed, we have to add them all to the set.
      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
      portalOrRoot.pendingChildren = newChildSet;
      // Schedule an update on the container to swap out the container.
      markUpdate(workInProgress);
      finalizeContainerChildren(container, newChildSet);
    }
  };
  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    var currentInstance = current.stateNode;
    var oldProps = current.memoizedProps;
    // If there are no effects associated with this node, then none of our children had any updates.
    // This guarantees that we can reuse all of them.
    var childrenUnchanged = workInProgress.firstEffect === null;
    if (childrenUnchanged && oldProps === newProps) {
      // No changes, just reuse the existing instance.
      // Note that this might release a previous clone.
      workInProgress.stateNode = currentInstance;
      return;
    }
    var recyclableInstance = workInProgress.stateNode;
    var currentHostContext = getHostContext();
    var updatePayload = null;
    if (oldProps !== newProps) {
      updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
    }
    if (childrenUnchanged && updatePayload === null) {
      // No changes, just reuse the existing instance.
      // Note that this might release a previous clone.
      workInProgress.stateNode = currentInstance;
      return;
    }
    var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);
    if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
      markUpdate(workInProgress);
    }
    workInProgress.stateNode = newInstance;
    if (childrenUnchanged) {
      // If there are no other effects in this tree, we need to flag this node as having one.
      // Even though we're not going to use it for anything.
      // Otherwise parents won't know that there are new children to propagate upwards.
      markUpdate(workInProgress);
    } else {
      // If children might have changed, we have to add them all to the set.
      appendAllChildren(newInstance, workInProgress, false, false);
    }
  };
  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    if (oldText !== newText) {
      // If the text content differs, we'll create a new text instance for it.
      var rootContainerInstance = getRootHostContainer();
      var currentHostContext = getHostContext();
      workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
      // We'll have to mark it as having an effect, even though we won't use the effect for anything.
      // This lets the parents know that at least one of their children has changed.
      markUpdate(workInProgress);
    }
  };
} else {
  // No host operations
  updateHostContainer = function (workInProgress) {
    // Noop
  };
  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    // Noop
  };
  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    // Noop
  };
}

function completeWork(current, workInProgress, renderExpirationTime) {
  var newProps = workInProgress.pendingProps;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
      break;
    case LazyComponent:
      break;
    case SimpleMemoComponent:
    case FunctionComponent:
      break;
    case ClassComponent:
      {
        var Component = workInProgress.type;
        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }
        break;
      }
    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var fiberRoot = workInProgress.stateNode;
        if (fiberRoot.pendingContext) {
          fiberRoot.context = fiberRoot.pendingContext;
          fiberRoot.pendingContext = null;
        }
        if (current === null || current.child === null) {
          // If we hydrated, pop so that we can delete any remaining children
          // that weren't hydrated.
          popHydrationState(workInProgress);
          // This resets the hacky state to fix isMounted before committing.
          // TODO: Delete this when we delete isMounted and findDOMNode.
          workInProgress.effectTag &= ~Placement;
        }
        updateHostContainer(workInProgress);
        break;
      }
    case HostComponent:
      {
        popHostContext(workInProgress);
        var rootContainerInstance = getRootHostContainer();
        var type = workInProgress.type;
        if (current !== null && workInProgress.stateNode != null) {
          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

          if (current.ref !== workInProgress.ref) {
            markRef$1(workInProgress);
          }
        } else {
          if (!newProps) {
            !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            // This can happen when we abort work.
            break;
          }

          var currentHostContext = getHostContext();
          // TODO: Move createInstance to beginWork and keep it on a context
          // "stack" as the parent. Then append children as we go in beginWork
          // or completeWork depending on we want to add then top->down or
          // bottom->up. Top->down is faster in IE11.
          var wasHydrated = popHydrationState(workInProgress);
          if (wasHydrated) {
            // TODO: Move this and createInstance step into the beginPhase
            // to consolidate.
            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
              // If changes to the hydrated node needs to be applied at the
              // commit-phase we mark this as such.
              markUpdate(workInProgress);
            }
          } else {
            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);

            appendAllChildren(instance, workInProgress, false, false);

            // Certain renderers require commit-time effects for initial mount.
            // (eg DOM renderer supports auto-focus for certain elements).
            // Make sure such renderers get scheduled for later work.
            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {
              markUpdate(workInProgress);
            }
            workInProgress.stateNode = instance;
          }

          if (workInProgress.ref !== null) {
            // If there is a ref on a host node we need to schedule a callback
            markRef$1(workInProgress);
          }
        }
        break;
      }
    case HostText:
      {
        var newText = newProps;
        if (current && workInProgress.stateNode != null) {
          var oldText = current.memoizedProps;
          // If we have an alternate, that means this is an update and we need
          // to schedule a side-effect to do the updates.
          updateHostText$1(current, workInProgress, oldText, newText);
        } else {
          if (typeof newText !== 'string') {
            !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            // This can happen when we abort work.
          }
          var _rootContainerInstance = getRootHostContainer();
          var _currentHostContext = getHostContext();
          var _wasHydrated = popHydrationState(workInProgress);
          if (_wasHydrated) {
            if (prepareToHydrateHostTextInstance(workInProgress)) {
              markUpdate(workInProgress);
            }
          } else {
            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
          }
        }
        break;
      }
    case ForwardRef:
      break;
    case SuspenseComponent:
      {
        var nextState = workInProgress.memoizedState;
        if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
          // Something suspended. Re-render with the fallback children.
          workInProgress.expirationTime = renderExpirationTime;
          // Do not reset the effect list.
          return workInProgress;
        }

        var nextDidTimeout = nextState !== null;
        var prevDidTimeout = current !== null && current.memoizedState !== null;

        if (current !== null && !nextDidTimeout && prevDidTimeout) {
          // We just switched from the fallback to the normal children. Delete
          // the fallback.
          // TODO: Would it be better to store the fallback fragment on
          var currentFallbackChild = current.child.sibling;
          if (currentFallbackChild !== null) {
            // Deletions go at the beginning of the return fiber's effect list
            var first = workInProgress.firstEffect;
            if (first !== null) {
              workInProgress.firstEffect = currentFallbackChild;
              currentFallbackChild.nextEffect = first;
            } else {
              workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
              currentFallbackChild.nextEffect = null;
            }
            currentFallbackChild.effectTag = Deletion;
          }
        }

        if (nextDidTimeout || prevDidTimeout) {
          // If the children are hidden, or if they were previous hidden, schedule
          // an effect to toggle their visibility. This is also used to attach a
          // retry listener to the promise.
          workInProgress.effectTag |= Update;
        }
        break;
      }
    case Fragment:
      break;
    case Mode:
      break;
    case Profiler:
      break;
    case HostPortal:
      popHostContainer(workInProgress);
      updateHostContainer(workInProgress);
      break;
    case ContextProvider:
      // Pop provider fiber
      popProvider(workInProgress);
      break;
    case ContextConsumer:
      break;
    case MemoComponent:
      break;
    case IncompleteClassComponent:
      {
        // Same as class component case. I put it down here so that the tags are
        // sequential to ensure this switch is compiled to a jump table.
        var _Component = workInProgress.type;
        if (isContextProvider(_Component)) {
          popContext(workInProgress);
        }
        break;
      }
    case DehydratedSuspenseComponent:
      {
        if (enableSuspenseServerRenderer) {
          if (current === null) {
            var _wasHydrated2 = popHydrationState(workInProgress);
            !_wasHydrated2 ? invariant(false, 'A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.') : void 0;
            skipPastDehydratedSuspenseInstance(workInProgress);
          } else if ((workInProgress.effectTag & DidCapture) === NoEffect) {
            // This boundary did not suspend so it's now hydrated.
            // To handle any future suspense cases, we're going to now upgrade it
            // to a Suspense component. We detach it from the existing current fiber.
            current.alternate = null;
            workInProgress.alternate = null;
            workInProgress.tag = SuspenseComponent;
            workInProgress.memoizedState = null;
            workInProgress.stateNode = null;
          }
        }
        break;
      }
    default:
      invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
  }

  return null;
}

function shouldCaptureSuspense(workInProgress) {
  // In order to capture, the Suspense component must have a fallback prop.
  if (workInProgress.memoizedProps.fallback === undefined) {
    return false;
  }
  // If it was the primary children that just suspended, capture and render the
  // fallback. Otherwise, don't capture and bubble to the next boundary.
  var nextState = workInProgress.memoizedState;
  return nextState === null;
}

// This module is forked in different environments.
// By default, return `true` to log errors to the console.
// Forks can return `false` if this isn't desirable.
function showErrorDialog(capturedError) {
  return true;
}

function logCapturedError(capturedError) {
  var logError = showErrorDialog(capturedError);

  // Allow injected showErrorDialog() to prevent default console.error logging.
  // This enables renderers like ReactNative to better manage redbox behavior.
  if (logError === false) {
    return;
  }

  var error = capturedError.error;
  {
    var componentName = capturedError.componentName,
        componentStack = capturedError.componentStack,
        errorBoundaryName = capturedError.errorBoundaryName,
        errorBoundaryFound = capturedError.errorBoundaryFound,
        willRetry = capturedError.willRetry;

    // Browsers support silencing uncaught errors by calling
    // `preventDefault()` in window `error` handler.
    // We record this information as an expando on the error.

    if (error != null && error._suppressLogging) {
      if (errorBoundaryFound && willRetry) {
        // The error is recoverable and was silenced.
        // Ignore it and don't print the stack addendum.
        // This is handy for testing error boundaries without noise.
        return;
      }
      // The error is fatal. Since the silencing might have
      // been accidental, we'll surface it anyway.
      // However, the browser would have silenced the original error
      // so we'll print it first, and then print the stack addendum.
      console.error(error);
      // For a more detailed description of this block, see:
      // https://github.com/facebook/react/pull/13384
    }

    var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';

    var errorBoundaryMessage = void 0;
    // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
    if (errorBoundaryFound && errorBoundaryName) {
      if (willRetry) {
        errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
      } else {
        errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
      }
    } else {
      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
    }
    var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage);

    // In development, we provide our own message with just the component stack.
    // We don't include the original error message and JS stack because the browser
    // has already printed it. Even if the application swallows the error, it is still
    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
    console.error(combinedMessage);
  }
}

var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
{
  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
}

var PossiblyWeakSet$1 = typeof WeakSet === 'function' ? WeakSet : Set;

function logError(boundary, errorInfo) {
  var source = errorInfo.source;
  var stack = errorInfo.stack;
  if (stack === null && source !== null) {
    stack = getStackByFiberInDevAndProd(source);
  }

  var capturedError = {
    componentName: source !== null ? getComponentName(source.type) : null,
    componentStack: stack !== null ? stack : '',
    error: errorInfo.value,
    errorBoundary: null,
    errorBoundaryName: null,
    errorBoundaryFound: false,
    willRetry: false
  };

  if (boundary !== null && boundary.tag === ClassComponent) {
    capturedError.errorBoundary = boundary.stateNode;
    capturedError.errorBoundaryName = getComponentName(boundary.type);
    capturedError.errorBoundaryFound = true;
    capturedError.willRetry = true;
  }

  try {
    logCapturedError(capturedError);
  } catch (e) {
    // This method must not throw, or React internal state will get messed up.
    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
    // we want to report this error outside of the normal stack as a last resort.
    // https://github.com/facebook/react/issues/13188
    setTimeout(function () {
      throw e;
    });
  }
}

var callComponentWillUnmountWithTimer = function (current$$1, instance) {
  startPhaseTimer(current$$1, 'componentWillUnmount');
  instance.props = current$$1.memoizedProps;
  instance.state = current$$1.memoizedState;
  instance.componentWillUnmount();
  stopPhaseTimer();
};

// Capture errors so they don't interrupt unmounting.
function safelyCallComponentWillUnmount(current$$1, instance) {
  {
    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);
    if (hasCaughtError()) {
      var unmountError = clearCaughtError();
      captureCommitPhaseError(current$$1, unmountError);
    }
  }
}

function safelyDetachRef(current$$1) {
  var ref = current$$1.ref;
  if (ref !== null) {
    if (typeof ref === 'function') {
      {
        invokeGuardedCallback(null, ref, null, null);
        if (hasCaughtError()) {
          var refError = clearCaughtError();
          captureCommitPhaseError(current$$1, refError);
        }
      }
    } else {
      ref.current = null;
    }
  }
}

function safelyCallDestroy(current$$1, destroy) {
  {
    invokeGuardedCallback(null, destroy, null);
    if (hasCaughtError()) {
      var error = clearCaughtError();
      captureCommitPhaseError(current$$1, error);
    }
  }
}

function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
      {
        commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork);
        return;
      }
    case ClassComponent:
      {
        if (finishedWork.effectTag & Snapshot) {
          if (current$$1 !== null) {
            var prevProps = current$$1.memoizedProps;
            var prevState = current$$1.memoizedState;
            startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
            var instance = finishedWork.stateNode;
            // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.
            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
              }
            }
            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
            {
              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                didWarnSet.add(finishedWork.type);
                warningWithoutStack$1(false, '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
              }
            }
            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
            stopPhaseTimer();
          }
        }
        return;
      }
    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case IncompleteClassComponent:
      // Nothing to do for these component types
      return;
    default:
      {
        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
      }
  }
}

function commitHookEffectList(unmountTag, mountTag, finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;
    do {
      if ((effect.tag & unmountTag) !== NoEffect$1) {
        // Unmount
        var destroy = effect.destroy;
        effect.destroy = undefined;
        if (destroy !== undefined) {
          destroy();
        }
      }
      if ((effect.tag & mountTag) !== NoEffect$1) {
        // Mount
        var create = effect.create;
        effect.destroy = create();

        {
          var _destroy = effect.destroy;
          if (_destroy !== undefined && typeof _destroy !== 'function') {
            var addendum = void 0;
            if (_destroy === null) {
              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
            } else if (typeof _destroy.then === 'function') {
              addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + '}, [someId]); // Or [] if effect doesn\'t need props or state\n\n' + 'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';
            } else {
              addendum = ' You returned: ' + _destroy;
            }
            warningWithoutStack$1(false, 'An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s%s', addendum, getStackByFiberInDevAndProd(finishedWork));
          }
        }
      }
      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitPassiveHookEffects(finishedWork) {
  commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork);
  commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
}

function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
      {
        commitHookEffectList(UnmountLayout, MountLayout, finishedWork);
        break;
      }
    case ClassComponent:
      {
        var instance = finishedWork.stateNode;
        if (finishedWork.effectTag & Update) {
          if (current$$1 === null) {
            startPhaseTimer(finishedWork, 'componentDidMount');
            // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.
            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
              }
            }
            instance.componentDidMount();
            stopPhaseTimer();
          } else {
            var prevProps = finishedWork.elementType === finishedWork.type ? current$$1.memoizedProps : resolveDefaultProps(finishedWork.type, current$$1.memoizedProps);
            var prevState = current$$1.memoizedState;
            startPhaseTimer(finishedWork, 'componentDidUpdate');
            // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.
            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
              }
            }
            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
            stopPhaseTimer();
          }
        }
        var updateQueue = finishedWork.updateQueue;
        if (updateQueue !== null) {
          {
            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
              !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
              !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
            }
          }
          // We could update instance props and state here,
          // but instead we rely on them being set during last render.
          // TODO: revisit this when we implement resuming.
          commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);
        }
        return;
      }
    case HostRoot:
      {
        var _updateQueue = finishedWork.updateQueue;
        if (_updateQueue !== null) {
          var _instance = null;
          if (finishedWork.child !== null) {
            switch (finishedWork.child.tag) {
              case HostComponent:
                _instance = getPublicInstance(finishedWork.child.stateNode);
                break;
              case ClassComponent:
                _instance = finishedWork.child.stateNode;
                break;
            }
          }
          commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);
        }
        return;
      }
    case HostComponent:
      {
        var _instance2 = finishedWork.stateNode;

        // Renderers may schedule work to be done after host components are mounted
        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
        // These effects should only be committed when components are first mounted,
        // aka when there is no current/alternate.
        if (current$$1 === null && finishedWork.effectTag & Update) {
          var type = finishedWork.type;
          var props = finishedWork.memoizedProps;
          commitMount(_instance2, type, props, finishedWork);
        }

        return;
      }
    case HostText:
      {
        // We have no life-cycles associated with text.
        return;
      }
    case HostPortal:
      {
        // We have no life-cycles associated with portals.
        return;
      }
    case Profiler:
      {
        if (enableProfilerTimer) {
          var onRender = finishedWork.memoizedProps.onRender;

          if (enableSchedulerTracing) {
            onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
          } else {
            onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime());
          }
        }
        return;
      }
    case SuspenseComponent:
      break;
    case IncompleteClassComponent:
      break;
    default:
      {
        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
      }
  }
}

function hideOrUnhideAllChildren(finishedWork, isHidden) {
  if (supportsMutation) {
    // We only have the top Fiber that was inserted but we need to recurse down its
    var node = finishedWork;
    while (true) {
      if (node.tag === HostComponent) {
        var instance = node.stateNode;
        if (isHidden) {
          hideInstance(instance);
        } else {
          unhideInstance(node.stateNode, node.memoizedProps);
        }
      } else if (node.tag === HostText) {
        var _instance3 = node.stateNode;
        if (isHidden) {
          hideTextInstance(_instance3);
        } else {
          unhideTextInstance(_instance3, node.memoizedProps);
        }
      } else if (node.tag === SuspenseComponent && node.memoizedState !== null) {
        // Found a nested Suspense component that timed out. Skip over the
        var fallbackChildFragment = node.child.sibling;
        fallbackChildFragment.return = node;
        node = fallbackChildFragment;
        continue;
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === finishedWork) {
        return;
      }
      while (node.sibling === null) {
        if (node.return === null || node.return === finishedWork) {
          return;
        }
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
}

function commitAttachRef(finishedWork) {
  var ref = finishedWork.ref;
  if (ref !== null) {
    var instance = finishedWork.stateNode;
    var instanceToUse = void 0;
    switch (finishedWork.tag) {
      case HostComponent:
        instanceToUse = getPublicInstance(instance);
        break;
      default:
        instanceToUse = instance;
    }
    if (typeof ref === 'function') {
      ref(instanceToUse);
    } else {
      {
        if (!ref.hasOwnProperty('current')) {
          warningWithoutStack$1(false, 'Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
        }
      }

      ref.current = instanceToUse;
    }
  }
}

function commitDetachRef(current$$1) {
  var currentRef = current$$1.ref;
  if (currentRef !== null) {
    if (typeof currentRef === 'function') {
      currentRef(null);
    } else {
      currentRef.current = null;
    }
  }
}

// User-originating errors (lifecycles and refs) should not interrupt
// deletion, so don't let them throw. Host-originating errors should
// interrupt deletion, so it's okay
function commitUnmount(current$$1) {
  onCommitUnmount(current$$1);

  switch (current$$1.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
      {
        var updateQueue = current$$1.updateQueue;
        if (updateQueue !== null) {
          var lastEffect = updateQueue.lastEffect;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              var destroy = effect.destroy;
              if (destroy !== undefined) {
                safelyCallDestroy(current$$1, destroy);
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        break;
      }
    case ClassComponent:
      {
        safelyDetachRef(current$$1);
        var instance = current$$1.stateNode;
        if (typeof instance.componentWillUnmount === 'function') {
          safelyCallComponentWillUnmount(current$$1, instance);
        }
        return;
      }
    case HostComponent:
      {
        safelyDetachRef(current$$1);
        return;
      }
    case HostPortal:
      {
        // TODO: this is recursive.
        // We are also not using this parent because
        // the portal will get pushed immediately.
        if (supportsMutation) {
          unmountHostComponents(current$$1);
        } else if (supportsPersistence) {
          emptyPortalContainer(current$$1);
        }
        return;
      }
  }
}

function commitNestedUnmounts(root) {
  // While we're inside a removed host node we don't want to call
  // removeChild on the inner nodes because they're removed by the top
  // call anyway. We also want to call componentWillUnmount on all
  // composites before this host node is removed from the tree. Therefore
  var node = root;
  while (true) {
    commitUnmount(node);
    // Visit children because they may contain more composite or host nodes.
    // Skip portals because commitUnmount() currently visits them recursively.
    if (node.child !== null && (
    // If we use mutation we drill down into portals using commitUnmount above.
    // If we don't use mutation we drill down into portals here instead.
    !supportsMutation || node.tag !== HostPortal)) {
      node.child.return = node;
      node = node.child;
      continue;
    }
    if (node === root) {
      return;
    }
    while (node.sibling === null) {
      if (node.return === null || node.return === root) {
        return;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function detachFiber(current$$1) {
  // Cut off the return pointers to disconnect it from the tree. Ideally, we
  // should clear the child pointer of the parent alternate to let this
  // get GC:ed but we don't know which for sure which parent is the current
  // one so we'll settle for GC:ing the subtree of this child. This child
  // itself will be GC:ed when the parent updates the next time.
  current$$1.return = null;
  current$$1.child = null;
  current$$1.memoizedState = null;
  current$$1.updateQueue = null;
  var alternate = current$$1.alternate;
  if (alternate !== null) {
    alternate.return = null;
    alternate.child = null;
    alternate.memoizedState = null;
    alternate.updateQueue = null;
  }
}

function emptyPortalContainer(current$$1) {
  if (!supportsPersistence) {
    return;
  }

  var portal = current$$1.stateNode;
  var containerInfo = portal.containerInfo;

  var emptyChildSet = createContainerChildSet(containerInfo);
  replaceContainerChildren(containerInfo, emptyChildSet);
}

function commitContainer(finishedWork) {
  if (!supportsPersistence) {
    return;
  }

  switch (finishedWork.tag) {
    case ClassComponent:
      {
        return;
      }
    case HostComponent:
      {
        return;
      }
    case HostText:
      {
        return;
      }
    case HostRoot:
    case HostPortal:
      {
        var portalOrRoot = finishedWork.stateNode;
        var containerInfo = portalOrRoot.containerInfo,
            _pendingChildren = portalOrRoot.pendingChildren;

        replaceContainerChildren(containerInfo, _pendingChildren);
        return;
      }
    default:
      {
        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
      }
  }
}

function getHostParentFiber(fiber) {
  var parent = fiber.return;
  while (parent !== null) {
    if (isHostParent(parent)) {
      return parent;
    }
    parent = parent.return;
  }
  invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
}

function isHostParent(fiber) {
  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
}

function getHostSibling(fiber) {
  // We're going to search forward into the tree until we find a sibling host
  // node. Unfortunately, if multiple insertions are done in a row we have to
  // search past them. This leads to exponential search for the next sibling.
  var node = fiber;
  siblings: while (true) {
    // If we didn't find anything, let's try the next sibling.
    while (node.sibling === null) {
      if (node.return === null || isHostParent(node.return)) {
        // If we pop out of the root or hit the parent the fiber we are the
        // last sibling.
        return null;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedSuspenseComponent) {
      // If it is not host node and, we might have a host node inside it.
      // Try to search down until we find one.
      if (node.effectTag & Placement) {
        // If we don't have a child, try the siblings instead.
        continue siblings;
      }
      // If we don't have a child, try the siblings instead.
      // We also skip portals because they are not part of this host tree.
      if (node.child === null || node.tag === HostPortal) {
        continue siblings;
      } else {
        node.child.return = node;
        node = node.child;
      }
    }
    // Check if this host node is stable or about to be placed.
    if (!(node.effectTag & Placement)) {
      // Found it!
      return node.stateNode;
    }
  }
}

function commitPlacement(finishedWork) {
  if (!supportsMutation) {
    return;
  }

  // Recursively insert all host nodes into the parent.
  var parentFiber = getHostParentFiber(finishedWork);

  // Note: these two variables *must* always be updated together.
  var parent = void 0;
  var isContainer = void 0;

  switch (parentFiber.tag) {
    case HostComponent:
      parent = parentFiber.stateNode;
      isContainer = false;
      break;
    case HostRoot:
      parent = parentFiber.stateNode.containerInfo;
      isContainer = true;
      break;
    case HostPortal:
      parent = parentFiber.stateNode.containerInfo;
      isContainer = true;
      break;
    default:
      invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
  }
  if (parentFiber.effectTag & ContentReset) {
    // Reset the text content of the parent before doing any insertions
    resetTextContent(parent);
    // Clear ContentReset from the effect tag
    parentFiber.effectTag &= ~ContentReset;
  }

  var before = getHostSibling(finishedWork);
  // We only have the top Fiber that was inserted but we need to recurse down its
  // children to find all the terminal nodes.
  var node = finishedWork;
  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      if (before) {
        if (isContainer) {
          insertInContainerBefore(parent, node.stateNode, before);
        } else {
          insertBefore(parent, node.stateNode, before);
        }
      } else {
        if (isContainer) {
          appendChildToContainer(parent, node.stateNode);
        } else {
          appendChild(parent, node.stateNode);
        }
      }
    } else if (node.tag === HostPortal) {
      // If the insertion itself is a portal, then we don't want to traverse
      // down its children. Instead, we'll get insertions from each child in
      // the portal directly.
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }
    if (node === finishedWork) {
      return;
    }
    while (node.sibling === null) {
      if (node.return === null || node.return === finishedWork) {
        return;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function unmountHostComponents(current$$1) {
  // We only have the top Fiber that was deleted but we need to recurse down its
  var node = current$$1;

  // Each iteration, currentParent is populated with node's host parent if not
  // currentParentIsValid.
  var currentParentIsValid = false;

  // Note: these two variables *must* always be updated together.
  var currentParent = void 0;
  var currentParentIsContainer = void 0;

  while (true) {
    if (!currentParentIsValid) {
      var parent = node.return;
      findParent: while (true) {
        !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        switch (parent.tag) {
          case HostComponent:
            currentParent = parent.stateNode;
            currentParentIsContainer = false;
            break findParent;
          case HostRoot:
            currentParent = parent.stateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;
          case HostPortal:
            currentParent = parent.stateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;
        }
        parent = parent.return;
      }
      currentParentIsValid = true;
    }

    if (node.tag === HostComponent || node.tag === HostText) {
      commitNestedUnmounts(node);
      // After all the children have unmounted, it is now safe to remove the
      // node from the tree.
      if (currentParentIsContainer) {
        removeChildFromContainer(currentParent, node.stateNode);
      } else {
        removeChild(currentParent, node.stateNode);
      }
      // Don't visit children because we already visited them.
    } else if (enableSuspenseServerRenderer && node.tag === DehydratedSuspenseComponent) {
      // Delete the dehydrated suspense boundary and all of its content.
      if (currentParentIsContainer) {
        clearSuspenseBoundaryFromContainer(currentParent, node.stateNode);
      } else {
        clearSuspenseBoundary(currentParent, node.stateNode);
      }
    } else if (node.tag === HostPortal) {
      if (node.child !== null) {
        // When we go into a portal, it becomes the parent to remove from.
        // We will reassign it back when we pop the portal on the way up.
        currentParent = node.stateNode.containerInfo;
        currentParentIsContainer = true;
        // Visit children because portals might contain host components.
        node.child.return = node;
        node = node.child;
        continue;
      }
    } else {
      commitUnmount(node);
      // Visit children because we may find more host components below.
      if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
    }
    if (node === current$$1) {
      return;
    }
    while (node.sibling === null) {
      if (node.return === null || node.return === current$$1) {
        return;
      }
      node = node.return;
      if (node.tag === HostPortal) {
        // When we go out of the portal, we need to restore the parent.
        // Since we don't keep a stack of them, we will search for it.
        currentParentIsValid = false;
      }
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function commitDeletion(current$$1) {
  if (supportsMutation) {
    // Recursively delete all host nodes from the parent.
    // Detach refs and call componentWillUnmount() on the whole subtree.
    unmountHostComponents(current$$1);
  } else {
    // Detach refs and call componentWillUnmount() on the whole subtree.
    commitNestedUnmounts(current$$1);
  }
  detachFiber(current$$1);
}

function commitWork(current$$1, finishedWork) {
  if (!supportsMutation) {
    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case MemoComponent:
      case SimpleMemoComponent:
        {
          // Note: We currently never use MountMutation, but useLayout uses
          // UnmountMutation.
          commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
          return;
        }
    }

    commitContainer(finishedWork);
    return;
  }

  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
      {
        // Note: We currently never use MountMutation, but useLayout uses
        // UnmountMutation.
        commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
        return;
      }
    case ClassComponent:
      {
        return;
      }
    case HostComponent:
      {
        var instance = finishedWork.stateNode;
        if (instance != null) {
          // Commit the work prepared earlier.
          var newProps = finishedWork.memoizedProps;
          // For hydration we reuse the update path but we treat the oldProps
          // as the newProps. The updatePayload will contain the real change in
          // this case.
          var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
          var type = finishedWork.type;
          // TODO: Type the updateQueue to be specific to host components.
          var updatePayload = finishedWork.updateQueue;
          finishedWork.updateQueue = null;
          if (updatePayload !== null) {
            commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
          }
        }
        return;
      }
    case HostText:
      {
        !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        var textInstance = finishedWork.stateNode;
        var newText = finishedWork.memoizedProps;
        // For hydration we reuse the update path but we treat the oldProps
        // as the newProps. The updatePayload will contain the real change in
        // this case.
        var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
        commitTextUpdate(textInstance, oldText, newText);
        return;
      }
    case HostRoot:
      {
        return;
      }
    case Profiler:
      {
        return;
      }
    case SuspenseComponent:
      {
        var newState = finishedWork.memoizedState;

        var newDidTimeout = void 0;
        var primaryChildParent = finishedWork;
        if (newState === null) {
          newDidTimeout = false;
        } else {
          newDidTimeout = true;
          primaryChildParent = finishedWork.child;
          if (newState.timedOutAt === NoWork) {
            // If the children had not already timed out, record the time.
            // This is used to compute the elapsed time during subsequent
            // attempts to render the children.
            newState.timedOutAt = requestCurrentTime();
          }
        }

        if (primaryChildParent !== null) {
          hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
        }

        // If this boundary just timed out, then it will have a set of thenables.
        // For each thenable, attach a listener so that when it resolves, React
        // attempts to re-render the boundary in the primary (pre-timeout) state.
        var thenables = finishedWork.updateQueue;
        if (thenables !== null) {
          finishedWork.updateQueue = null;
          var retryCache = finishedWork.stateNode;
          if (retryCache === null) {
            retryCache = finishedWork.stateNode = new PossiblyWeakSet$1();
          }
          thenables.forEach(function (thenable) {
            // Memoize using the boundary fiber to prevent redundant listeners.
            var retry = retryTimedOutBoundary.bind(null, finishedWork, thenable);
            if (enableSchedulerTracing) {
              retry = unstable_wrap(retry);
            }
            if (!retryCache.has(thenable)) {
              retryCache.add(thenable);
              thenable.then(retry, retry);
            }
          });
        }

        return;
      }
    case IncompleteClassComponent:
      {
        return;
      }
    default:
      {
        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
      }
  }
}

function commitResetTextContent(current$$1) {
  if (!supportsMutation) {
    return;
  }
  resetTextContent(current$$1.stateNode);
}

var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;

function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime);
  // Unmount the root by rendering null.
  update.tag = CaptureUpdate;
  // Caution: React DevTools currently depends on this property
  // being called "element".
  update.payload = { element: null };
  var error = errorInfo.value;
  update.callback = function () {
    onUncaughtError(error);
    logError(fiber, errorInfo);
  };
  return update;
}

function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime);
  update.tag = CaptureUpdate;
  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
  if (typeof getDerivedStateFromError === 'function') {
    var error = errorInfo.value;
    update.payload = function () {
      return getDerivedStateFromError(error);
    };
  }

  var inst = fiber.stateNode;
  if (inst !== null && typeof inst.componentDidCatch === 'function') {
    update.callback = function callback() {
      if (typeof getDerivedStateFromError !== 'function') {
        // To preserve the preexisting retry behavior of error boundaries,
        // we keep track of which ones already failed during this batch.
        // This gets reset before we yield back to the browser.
        // TODO: Warn in strict mode if getDerivedStateFromError is
        // not defined.
        markLegacyErrorBoundaryAsFailed(this);
      }
      var error = errorInfo.value;
      var stack = errorInfo.stack;
      logError(fiber, errorInfo);
      this.componentDidCatch(error, {
        componentStack: stack !== null ? stack : ''
      });
      {
        if (typeof getDerivedStateFromError !== 'function') {
          // If componentDidCatch is the only error boundary method defined,
          // then it needs to call setState to recover from errors.
          // If no state update is scheduled then the boundary will swallow the error.
          !(fiber.expirationTime === Sync) ? warningWithoutStack$1(false, '%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown') : void 0;
        }
      }
    };
  }
  return update;
}

function attachPingListener(root, renderExpirationTime, thenable) {
  // Attach a listener to the promise to "ping" the root and retry. But
  // only if one does not already exist for the current render expiration
  // time (which acts like a "thread ID" here).
  var pingCache = root.pingCache;
  var threadIDs = void 0;
  if (pingCache === null) {
    pingCache = root.pingCache = new PossiblyWeakMap();
    threadIDs = new Set();
    pingCache.set(thenable, threadIDs);
  } else {
    threadIDs = pingCache.get(thenable);
    if (threadIDs === undefined) {
      threadIDs = new Set();
      pingCache.set(thenable, threadIDs);
    }
  }
  if (!threadIDs.has(renderExpirationTime)) {
    // Memoize using the thread ID to prevent redundant listeners.
    threadIDs.add(renderExpirationTime);
    var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);
    if (enableSchedulerTracing) {
      ping = unstable_wrap(ping);
    }
    thenable.then(ping, ping);
  }
}

function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
  // The source fiber did not complete.
  sourceFiber.effectTag |= Incomplete;
  // Its effect list is no longer valid.
  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
    // This is a thenable.
    var thenable = value;

    // Find the earliest timeout threshold of all the placeholders in the
    // ancestor path. We could avoid this traversal by storing the thresholds on
    // the stack, but we choose not to because we only hit this path if we're
    // IO-bound (i.e. if something suspends). Whereas the stack is used even in
    // the non-IO- bound case.
    var _workInProgress = returnFiber;
    var earliestTimeoutMs = -1;
    var startTimeMs = -1;
    do {
      if (_workInProgress.tag === SuspenseComponent) {
        var current$$1 = _workInProgress.alternate;
        if (current$$1 !== null) {
          var currentState = current$$1.memoizedState;
          if (currentState !== null) {
            // Reached a boundary that already timed out. Do not search
            // any further.
            var timedOutAt = currentState.timedOutAt;
            startTimeMs = expirationTimeToMs(timedOutAt);
            // Do not search any further.
            break;
          }
        }
        var timeoutPropMs = _workInProgress.pendingProps.maxDuration;
        if (typeof timeoutPropMs === 'number') {
          if (timeoutPropMs <= 0) {
            earliestTimeoutMs = 0;
          } else if (earliestTimeoutMs === -1 || timeoutPropMs < earliestTimeoutMs) {
            earliestTimeoutMs = timeoutPropMs;
          }
        }
      }
      // If there is a DehydratedSuspenseComponent we don't have to do anything because
      // if something suspends inside it, we will simply leave that as dehydrated. It
      // will never timeout.
      _workInProgress = _workInProgress.return;
    } while (_workInProgress !== null);

    // Schedule the nearest Suspense to re-render the timed out view.
    _workInProgress = returnFiber;
    do {
      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress)) {
        // Found the nearest boundary.

        // Stash the promise on the boundary fiber. If the boundary times out, we'll
        var thenables = _workInProgress.updateQueue;
        if (thenables === null) {
          var updateQueue = new Set();
          updateQueue.add(thenable);
          _workInProgress.updateQueue = updateQueue;
        } else {
          thenables.add(thenable);
        }

        // If the boundary is outside of concurrent mode, we should *not*
        // suspend the commit. Pretend as if the suspended component rendered
        // null and keep rendering. In the commit phase, we'll schedule a
        // subsequent synchronous update to re-render the Suspense.
        //
        // Note: It doesn't matter whether the component that suspended was
        // inside a concurrent mode tree. If the Suspense is outside of it, we
        // should *not* suspend the commit.
        if ((_workInProgress.mode & ConcurrentMode) === NoEffect) {
          _workInProgress.effectTag |= DidCapture;

          // We're going to commit this fiber even though it didn't complete.
          // But we shouldn't call any lifecycle methods or callbacks. Remove
          // all lifecycle effect tags.
          sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

          if (sourceFiber.tag === ClassComponent) {
            var currentSourceFiber = sourceFiber.alternate;
            if (currentSourceFiber === null) {
              // This is a new mount. Change the tag so it's not mistaken for a
              // completed class component. For example, we should not call
              // componentWillUnmount if it is deleted.
              sourceFiber.tag = IncompleteClassComponent;
            } else {
              // When we try rendering again, we should not reuse the current fiber,
              // since it's known to be in an inconsistent state. Use a force updte to
              // prevent a bail out.
              var update = createUpdate(Sync);
              update.tag = ForceUpdate;
              enqueueUpdate(sourceFiber, update);
            }
          }

          // The source fiber did not complete. Mark it with Sync priority to
          // indicate that it still has pending work.
          sourceFiber.expirationTime = Sync;

          // Exit without suspending.
          return;
        }

        // Confirmed that the boundary is in a concurrent mode tree. Continue
        // with the normal suspend path.

        attachPingListener(root, renderExpirationTime, thenable);

        var absoluteTimeoutMs = void 0;
        if (earliestTimeoutMs === -1) {
          // If no explicit threshold is given, default to an arbitrarily large
          // value. The actual size doesn't matter because the threshold for the
          // whole tree will be clamped to the expiration time.
          absoluteTimeoutMs = maxSigned31BitInt;
        } else {
          if (startTimeMs === -1) {
            // This suspend happened outside of any already timed-out
            // placeholders. We don't know exactly when the update was
            // scheduled, but we can infer an approximate start time from the
            // expiration time. First, find the earliest uncommitted expiration
            // time in the tree, including work that is suspended. Then subtract
            // the offset used to compute an async update's expiration time.
            // This will cause high priority (interactive) work to expire
            // earlier than necessary, but we can account for this by adjusting
            // for the Just Noticeable Difference.
            var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, renderExpirationTime);
            var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
            startTimeMs = earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
          }
          absoluteTimeoutMs = startTimeMs + earliestTimeoutMs;
        }

        // Mark the earliest timeout in the suspended fiber's ancestor path.
        // After completing the root, we'll take the largest of all the
        // suspended fiber's timeouts and use it to compute a timeout for the
        // whole tree.
        renderDidSuspend(root, absoluteTimeoutMs, renderExpirationTime);

        _workInProgress.effectTag |= ShouldCapture;
        _workInProgress.expirationTime = renderExpirationTime;
        return;
      } else if (enableSuspenseServerRenderer && _workInProgress.tag === DehydratedSuspenseComponent) {
        attachPingListener(root, renderExpirationTime, thenable);

        // Since we already have a current fiber, we can eagerly add a retry listener.
        var retryCache = _workInProgress.memoizedState;
        if (retryCache === null) {
          retryCache = _workInProgress.memoizedState = new PossiblyWeakSet();
          var _current = _workInProgress.alternate;
          !_current ? invariant(false, 'A dehydrated suspense boundary must commit before trying to render. This is probably a bug in React.') : void 0;
          _current.memoizedState = retryCache;
        }
        // Memoize using the boundary fiber to prevent redundant listeners.
        if (!retryCache.has(thenable)) {
          retryCache.add(thenable);
          var retry = retryTimedOutBoundary.bind(null, _workInProgress, thenable);
          if (enableSchedulerTracing) {
            retry = unstable_wrap(retry);
          }
          thenable.then(retry, retry);
        }
        _workInProgress.effectTag |= ShouldCapture;
        _workInProgress.expirationTime = renderExpirationTime;
        return;
      }
      // This boundary already captured during this render. Continue to the next
      // boundary.
      _workInProgress = _workInProgress.return;
    } while (_workInProgress !== null);
    // No boundary was found. Fallthrough to error mode.
    // TODO: Use invariant so the message is stripped in prod?
    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
  }

  // We didn't find a boundary that could handle this type of exception. Start
  // over and traverse parent path again, this time treating the exception
  // as an error.
  renderDidError();
  value = createCapturedValue(value, sourceFiber);
  var workInProgress = returnFiber;
  do {
    switch (workInProgress.tag) {
      case HostRoot:
        {
          var _errorInfo = value;
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime;
          var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);
          enqueueCapturedUpdate(workInProgress, _update);
          return;
        }
      case ClassComponent:
        // Capture and retry
        var errorInfo = value;
        var ctor = workInProgress.type;
        var instance = workInProgress.stateNode;
        if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime;
          // Schedule the error boundary to re-render using updated state
          var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);
          enqueueCapturedUpdate(workInProgress, _update2);
          return;
        }
        break;
      default:
        break;
    }
    workInProgress = workInProgress.return;
  } while (workInProgress !== null);
}

function unwindWork(workInProgress, renderExpirationTime) {
  switch (workInProgress.tag) {
    case ClassComponent:
      {
        var Component = workInProgress.type;
        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }
        var effectTag = workInProgress.effectTag;
        if (effectTag & ShouldCapture) {
          workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
          return workInProgress;
        }
        return null;
      }
    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var _effectTag = workInProgress.effectTag;
        !((_effectTag & DidCapture) === NoEffect) ? invariant(false, 'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.') : void 0;
        workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
        return workInProgress;
      }
    case HostComponent:
      {
        // TODO: popHydrationState
        popHostContext(workInProgress);
        return null;
      }
    case SuspenseComponent:
      {
        var _effectTag2 = workInProgress.effectTag;
        if (_effectTag2 & ShouldCapture) {
          workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
          // Captured a suspense effect. Re-render the boundary.
          return workInProgress;
        }
        return null;
      }
    case DehydratedSuspenseComponent:
      {
        if (enableSuspenseServerRenderer) {
          // TODO: popHydrationState
          var _effectTag3 = workInProgress.effectTag;
          if (_effectTag3 & ShouldCapture) {
            workInProgress.effectTag = _effectTag3 & ~ShouldCapture | DidCapture;
            // Captured a suspense effect. Re-render the boundary.
            return workInProgress;
          }
        }
        return null;
      }
    case HostPortal:
      popHostContainer(workInProgress);
      return null;
    case ContextProvider:
      popProvider(workInProgress);
      return null;
    default:
      return null;
  }
}

function unwindInterruptedWork(interruptedWork) {
  switch (interruptedWork.tag) {
    case ClassComponent:
      {
        var childContextTypes = interruptedWork.type.childContextTypes;
        if (childContextTypes !== null && childContextTypes !== undefined) {
          popContext(interruptedWork);
        }
        break;
      }
    case HostRoot:
      {
        popHostContainer(interruptedWork);
        popTopLevelContextObject(interruptedWork);
        break;
      }
    case HostComponent:
      {
        popHostContext(interruptedWork);
        break;
      }
    case HostPortal:
      popHostContainer(interruptedWork);
      break;
    case ContextProvider:
      popProvider(interruptedWork);
      break;
    default:
      break;
  }
}

var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;


var didWarnAboutStateTransition = void 0;
var didWarnSetStateChildContext = void 0;
var warnAboutUpdateOnUnmounted = void 0;
var warnAboutInvalidUpdates = void 0;

if (enableSchedulerTracing) {
  // Provide explicit error message when production+profiling bundle of e.g. react-dom
  // is used with production (non-profiling) bundle of scheduler/tracing
  !(__interactionsRef != null && __interactionsRef.current != null) ? invariant(false, 'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling') : void 0;
}

{
  didWarnAboutStateTransition = false;
  didWarnSetStateChildContext = false;
  var didWarnStateUpdateForUnmountedComponent = {};

  warnAboutUpdateOnUnmounted = function (fiber, isClass) {
    // We show the whole stack but dedupe on the top component's name because
    // the problematic code almost always lies inside that component.
    var componentName = getComponentName(fiber.type) || 'ReactComponent';
    if (didWarnStateUpdateForUnmountedComponent[componentName]) {
      return;
    }
    warningWithoutStack$1(false, "Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', isClass ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
    didWarnStateUpdateForUnmountedComponent[componentName] = true;
  };

  warnAboutInvalidUpdates = function (instance) {
    switch (phase) {
      case 'getChildContext':
        if (didWarnSetStateChildContext) {
          return;
        }
        warningWithoutStack$1(false, 'setState(...): Cannot call setState() inside getChildContext()');
        didWarnSetStateChildContext = true;
        break;
      case 'render':
        if (didWarnAboutStateTransition) {
          return;
        }
        warningWithoutStack$1(false, 'Cannot update during an existing state transition (such as within ' + '`render`). Render methods should be a pure function of props and state.');
        didWarnAboutStateTransition = true;
        break;
    }
  };
}

// Used to ensure computeUniqueAsyncExpiration is monotonically decreasing.
var lastUniqueAsyncExpiration = Sync - 1;

var isWorking = false;

// The next work in progress fiber that we're currently working on.
var nextUnitOfWork = null;
var nextRoot = null;
// The time at which we're currently rendering work.
var nextRenderExpirationTime = NoWork;
var nextLatestAbsoluteTimeoutMs = -1;
var nextRenderDidError = false;

// The next fiber with an effect that we're currently committing.
var nextEffect = null;

var isCommitting$1 = false;
var rootWithPendingPassiveEffects = null;
var passiveEffectCallbackHandle = null;
var passiveEffectCallback = null;

var legacyErrorBoundariesThatAlreadyFailed = null;

// Used for performance tracking.
var interruptedBy = null;

var stashedWorkInProgressProperties = void 0;
var replayUnitOfWork = void 0;
var mayReplayFailedUnitOfWork = void 0;
var isReplayingFailedUnitOfWork = void 0;
var originalReplayError = void 0;
var rethrowOriginalError = void 0;
if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
  stashedWorkInProgressProperties = null;
  mayReplayFailedUnitOfWork = true;
  isReplayingFailedUnitOfWork = false;
  originalReplayError = null;
  replayUnitOfWork = function (failedUnitOfWork, thrownValue, isYieldy) {
    if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
      // Don't replay promises. Treat everything else like an error.
      // TODO: Need to figure out a different strategy if/when we add
      // support for catching other types.
      return;
    }

    // Restore the original state of the work-in-progress
    if (stashedWorkInProgressProperties === null) {
      // This should never happen. Don't throw because this code is DEV-only.
      warningWithoutStack$1(false, 'Could not replay rendering after an error. This is likely a bug in React. ' + 'Please file an issue.');
      return;
    }
    assignFiberPropertiesInDEV(failedUnitOfWork, stashedWorkInProgressProperties);

    switch (failedUnitOfWork.tag) {
      case HostRoot:
        popHostContainer(failedUnitOfWork);
        popTopLevelContextObject(failedUnitOfWork);
        break;
      case HostComponent:
        popHostContext(failedUnitOfWork);
        break;
      case ClassComponent:
        {
          var Component = failedUnitOfWork.type;
          if (isContextProvider(Component)) {
            popContext(failedUnitOfWork);
          }
          break;
        }
      case HostPortal:
        popHostContainer(failedUnitOfWork);
        break;
      case ContextProvider:
        popProvider(failedUnitOfWork);
        break;
    }
    // Replay the begin phase.
    isReplayingFailedUnitOfWork = true;
    originalReplayError = thrownValue;
    invokeGuardedCallback(null, workLoop, null, isYieldy);
    isReplayingFailedUnitOfWork = false;
    originalReplayError = null;
    if (hasCaughtError()) {
      var replayError = clearCaughtError();
      if (replayError != null && thrownValue != null) {
        try {
          // Reading the expando property is intentionally
          // inside `try` because it might be a getter or Proxy.
          if (replayError._suppressLogging) {
            // Also suppress logging for the original error.
            thrownValue._suppressLogging = true;
          }
        } catch (inner) {
          // Ignore.
        }
      }
    } else {
      // If the begin phase did not fail the second time, set this pointer
      // back to the original value.
      nextUnitOfWork = failedUnitOfWork;
    }
  };
  rethrowOriginalError = function () {
    throw originalReplayError;
  };
}

function resetStack() {
  if (nextUnitOfWork !== null) {
    var interruptedWork = nextUnitOfWork.return;
    while (interruptedWork !== null) {
      unwindInterruptedWork(interruptedWork);
      interruptedWork = interruptedWork.return;
    }
  }

  {
    ReactStrictModeWarnings.discardPendingWarnings();
    checkThatStackIsEmpty();
  }

  nextRoot = null;
  nextRenderExpirationTime = NoWork;
  nextLatestAbsoluteTimeoutMs = -1;
  nextRenderDidError = false;
  nextUnitOfWork = null;
}

function commitAllHostEffects() {
  while (nextEffect !== null) {
    {
      setCurrentFiber(nextEffect);
    }
    recordEffect();

    var effectTag = nextEffect.effectTag;

    if (effectTag & ContentReset) {
      commitResetTextContent(nextEffect);
    }

    if (effectTag & Ref) {
      var current$$1 = nextEffect.alternate;
      if (current$$1 !== null) {
        commitDetachRef(current$$1);
      }
    }

    // The following switch statement is only concerned about placement,
    // updates, and deletions. To avoid needing to add a case for every
    // possible bitmap value, we remove the secondary effects from the
    // effect tag and switch on that value.
    var primaryEffectTag = effectTag & (Placement | Update | Deletion);
    switch (primaryEffectTag) {
      case Placement:
        {
          commitPlacement(nextEffect);
          // Clear the "placement" from effect tag so that we know that this is inserted, before
          // any life-cycles like componentDidMount gets called.
          // TODO: findDOMNode doesn't rely on this any more but isMounted
          // does and isMounted is deprecated anyway so we should be able
          // to kill this.
          nextEffect.effectTag &= ~Placement;
          break;
        }
      case PlacementAndUpdate:
        {
          // Placement
          commitPlacement(nextEffect);
          // Clear the "placement" from effect tag so that we know that this is inserted, before
          // any life-cycles like componentDidMount gets called.
          nextEffect.effectTag &= ~Placement;

          // Update
          var _current = nextEffect.alternate;
          commitWork(_current, nextEffect);
          break;
        }
      case Update:
        {
          var _current2 = nextEffect.alternate;
          commitWork(_current2, nextEffect);
          break;
        }
      case Deletion:
        {
          commitDeletion(nextEffect);
          break;
        }
    }
    nextEffect = nextEffect.nextEffect;
  }

  {
    resetCurrentFiber();
  }
}

function commitBeforeMutationLifecycles() {
  while (nextEffect !== null) {
    {
      setCurrentFiber(nextEffect);
    }

    var effectTag = nextEffect.effectTag;
    if (effectTag & Snapshot) {
      recordEffect();
      var current$$1 = nextEffect.alternate;
      commitBeforeMutationLifeCycles(current$$1, nextEffect);
    }

    nextEffect = nextEffect.nextEffect;
  }

  {
    resetCurrentFiber();
  }
}

function commitAllLifeCycles(finishedRoot, committedExpirationTime) {
  {
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    ReactStrictModeWarnings.flushLegacyContextWarning();

    if (warnAboutDeprecatedLifecycles) {
      ReactStrictModeWarnings.flushPendingDeprecationWarnings();
    }
  }
  while (nextEffect !== null) {
    {
      setCurrentFiber(nextEffect);
    }
    var effectTag = nextEffect.effectTag;

    if (effectTag & (Update | Callback)) {
      recordEffect();
      var current$$1 = nextEffect.alternate;
      commitLifeCycles(finishedRoot, current$$1, nextEffect, committedExpirationTime);
    }

    if (effectTag & Ref) {
      recordEffect();
      commitAttachRef(nextEffect);
    }

    if (effectTag & Passive) {
      rootWithPendingPassiveEffects = finishedRoot;
    }

    nextEffect = nextEffect.nextEffect;
  }
  {
    resetCurrentFiber();
  }
}

function commitPassiveEffects(root, firstEffect) {
  rootWithPendingPassiveEffects = null;
  passiveEffectCallbackHandle = null;
  passiveEffectCallback = null;

  // Set this to true to prevent re-entrancy
  var previousIsRendering = isRendering;
  isRendering = true;

  var effect = firstEffect;
  do {
    {
      setCurrentFiber(effect);
    }

    if (effect.effectTag & Passive) {
      var didError = false;
      var error = void 0;
      {
        invokeGuardedCallback(null, commitPassiveHookEffects, null, effect);
        if (hasCaughtError()) {
          didError = true;
          error = clearCaughtError();
        }
      }
      if (didError) {
        captureCommitPhaseError(effect, error);
      }
    }
    effect = effect.nextEffect;
  } while (effect !== null);
  {
    resetCurrentFiber();
  }

  isRendering = previousIsRendering;

  // Check if work was scheduled by one of the effects
  var rootExpirationTime = root.expirationTime;
  if (rootExpirationTime !== NoWork) {
    requestWork(root, rootExpirationTime);
  }
  // Flush any sync work that was scheduled by effects
  if (!isBatchingUpdates && !isRendering) {
    performSyncWork();
  }
}

function isAlreadyFailedLegacyErrorBoundary(instance) {
  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
}

function markLegacyErrorBoundaryAsFailed(instance) {
  if (legacyErrorBoundariesThatAlreadyFailed === null) {
    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
  } else {
    legacyErrorBoundariesThatAlreadyFailed.add(instance);
  }
}

function flushPassiveEffects() {
  if (passiveEffectCallbackHandle !== null) {
    cancelPassiveEffects(passiveEffectCallbackHandle);
  }
  if (passiveEffectCallback !== null) {
    // We call the scheduled callback instead of commitPassiveEffects directly
    // to ensure tracing works correctly.
    passiveEffectCallback();
  }
}

function commitRoot(root, finishedWork) {
  isWorking = true;
  isCommitting$1 = true;
  startCommitTimer();

  !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  var committedExpirationTime = root.pendingCommitExpirationTime;
  !(committedExpirationTime !== NoWork) ? invariant(false, 'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  root.pendingCommitExpirationTime = NoWork;

  // Update the pending priority levels to account for the work that we are
  // about to commit. This needs to happen before calling the lifecycles, since
  // they may schedule additional updates.
  var updateExpirationTimeBeforeCommit = finishedWork.expirationTime;
  var childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;
  var earliestRemainingTimeBeforeCommit = childExpirationTimeBeforeCommit > updateExpirationTimeBeforeCommit ? childExpirationTimeBeforeCommit : updateExpirationTimeBeforeCommit;
  markCommittedPriorityLevels(root, earliestRemainingTimeBeforeCommit);

  var prevInteractions = null;
  if (enableSchedulerTracing) {
    // Restore any pending interactions at this point,
    // So that cascading work triggered during the render phase will be accounted for.
    prevInteractions = __interactionsRef.current;
    __interactionsRef.current = root.memoizedInteractions;
  }

  // Reset this to null before calling lifecycles
  ReactCurrentOwner$2.current = null;

  var firstEffect = void 0;
  if (finishedWork.effectTag > PerformedWork) {
    // A fiber's effect list consists only of its children, not itself. So if
    // the root has an effect, we need to add it to the end of the list. The
    // resulting list is the set that would belong to the root's parent, if
    // it had one; that is, all the effects in the tree including the root.
    if (finishedWork.lastEffect !== null) {
      finishedWork.lastEffect.nextEffect = finishedWork;
      firstEffect = finishedWork.firstEffect;
    } else {
      firstEffect = finishedWork;
    }
  } else {
    // There is no effect on the root.
    firstEffect = finishedWork.firstEffect;
  }

  prepareForCommit(root.containerInfo);

  // Invoke instances of getSnapshotBeforeUpdate before mutation.
  nextEffect = firstEffect;
  startCommitSnapshotEffectsTimer();
  while (nextEffect !== null) {
    var didError = false;
    var error = void 0;
    {
      invokeGuardedCallback(null, commitBeforeMutationLifecycles, null);
      if (hasCaughtError()) {
        didError = true;
        error = clearCaughtError();
      }
    }
    if (didError) {
      !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      captureCommitPhaseError(nextEffect, error);
      // Clean-up
      if (nextEffect !== null) {
        nextEffect = nextEffect.nextEffect;
      }
    }
  }
  stopCommitSnapshotEffectsTimer();

  if (enableProfilerTimer) {
    // Mark the current commit time to be shared by all Profilers in this batch.
    // This enables them to be grouped later.
    recordCommitTime();
  }

  // Commit all the side-effects within a tree. We'll do this in two passes.
  // The first pass performs all the host insertions, updates, deletions and
  // ref unmounts.
  nextEffect = firstEffect;
  startCommitHostEffectsTimer();
  while (nextEffect !== null) {
    var _didError = false;
    var _error = void 0;
    {
      invokeGuardedCallback(null, commitAllHostEffects, null);
      if (hasCaughtError()) {
        _didError = true;
        _error = clearCaughtError();
      }
    }
    if (_didError) {
      !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      captureCommitPhaseError(nextEffect, _error);
      // Clean-up
      if (nextEffect !== null) {
        nextEffect = nextEffect.nextEffect;
      }
    }
  }
  stopCommitHostEffectsTimer();

  resetAfterCommit(root.containerInfo);

  // The work-in-progress tree is now the current tree. This must come after
  // the first pass of the commit phase, so that the previous tree is still
  // current during componentWillUnmount, but before the second pass, so that
  // the finished work is current during componentDidMount/Update.
  root.current = finishedWork;

  // In the second pass we'll perform all life-cycles and ref callbacks.
  // Life-cycles happen as a separate pass so that all placements, updates,
  // and deletions in the entire tree have already been invoked.
  // This pass also triggers any renderer-specific initial effects.
  nextEffect = firstEffect;
  startCommitLifeCyclesTimer();
  while (nextEffect !== null) {
    var _didError2 = false;
    var _error2 = void 0;
    {
      invokeGuardedCallback(null, commitAllLifeCycles, null, root, committedExpirationTime);
      if (hasCaughtError()) {
        _didError2 = true;
        _error2 = clearCaughtError();
      }
    }
    if (_didError2) {
      !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      captureCommitPhaseError(nextEffect, _error2);
      if (nextEffect !== null) {
        nextEffect = nextEffect.nextEffect;
      }
    }
  }

  if (firstEffect !== null && rootWithPendingPassiveEffects !== null) {
    // This commit included a passive effect. These do not need to fire until
    // after the next paint. Schedule an callback to fire them in an async
    // event. To ensure serial execution, the callback will be flushed early if
    // we enter rootWithPendingPassiveEffects commit phase before then.
    var callback = commitPassiveEffects.bind(null, root, firstEffect);
    if (enableSchedulerTracing) {
      // TODO: Avoid this extra callback by mutating the tracing ref directly,
      // like we do at the beginning of commitRoot. I've opted not to do that
      // here because that code is still in flux.
      callback = unstable_wrap(callback);
    }
    passiveEffectCallbackHandle = unstable_runWithPriority(unstable_NormalPriority, function () {
      return schedulePassiveEffects(callback);
    });
    passiveEffectCallback = callback;
  }

  isCommitting$1 = false;
  isWorking = false;
  stopCommitLifeCyclesTimer();
  stopCommitTimer();
  onCommitRoot(finishedWork.stateNode);
  if (true && ReactFiberInstrumentation_1.debugTool) {
    ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
  }

  var updateExpirationTimeAfterCommit = finishedWork.expirationTime;
  var childExpirationTimeAfterCommit = finishedWork.childExpirationTime;
  var earliestRemainingTimeAfterCommit = childExpirationTimeAfterCommit > updateExpirationTimeAfterCommit ? childExpirationTimeAfterCommit : updateExpirationTimeAfterCommit;
  if (earliestRemainingTimeAfterCommit === NoWork) {
    // If there's no remaining work, we can clear the set of already failed
    // error boundaries.
    legacyErrorBoundariesThatAlreadyFailed = null;
  }
  onCommit(root, earliestRemainingTimeAfterCommit);

  if (enableSchedulerTracing) {
    __interactionsRef.current = prevInteractions;

    var subscriber = void 0;

    try {
      subscriber = __subscriberRef.current;
      if (subscriber !== null && root.memoizedInteractions.size > 0) {
        var threadID = computeThreadID(committedExpirationTime, root.interactionThreadID);
        subscriber.onWorkStopped(root.memoizedInteractions, threadID);
      }
    } catch (error) {
      // It's not safe for commitRoot() to throw.
      // Store the error for now and we'll re-throw in finishRendering().
      if (!hasUnhandledError) {
        hasUnhandledError = true;
        unhandledError = error;
      }
    } finally {
      // Clear completed interactions from the pending Map.
      // Unless the render was suspended or cascading work was scheduled,
      // In which case– leave pending interactions until the subsequent render.
      var pendingInteractionMap = root.pendingInteractionMap;
      pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
        // Only decrement the pending interaction count if we're done.
        // If there's still work at the current priority,
        // That indicates that we are waiting for suspense data.
        if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
          pendingInteractionMap.delete(scheduledExpirationTime);

          scheduledInteractions.forEach(function (interaction) {
            interaction.__count--;

            if (subscriber !== null && interaction.__count === 0) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error) {
                // It's not safe for commitRoot() to throw.
                // Store the error for now and we'll re-throw in finishRendering().
                if (!hasUnhandledError) {
                  hasUnhandledError = true;
                  unhandledError = error;
                }
              }
            }
          });
        }
      });
    }
  }
}

function resetChildExpirationTime(workInProgress, renderTime) {
  if (renderTime !== Never && workInProgress.childExpirationTime === Never) {
    // The children of this component are hidden. Don't bubble their
    // expiration times.
    return;
  }

  var newChildExpirationTime = NoWork;

  // Bubble up the earliest expiration time.
  if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
    // We're in profiling mode.
    // Let's use this same traversal to update the render durations.
    var actualDuration = workInProgress.actualDuration;
    var treeBaseDuration = workInProgress.selfBaseDuration;

    // When a fiber is cloned, its actualDuration is reset to 0.
    // This value will only be updated if work is done on the fiber (i.e. it doesn't bailout).
    // When work is done, it should bubble to the parent's actualDuration.
    // If the fiber has not been cloned though, (meaning no work was done),
    // Then this value will reflect the amount of time spent working on a previous render.
    // In that case it should not bubble.
    // We determine whether it was cloned by comparing the child pointer.
    var shouldBubbleActualDurations = workInProgress.alternate === null || workInProgress.child !== workInProgress.alternate.child;

    var child = workInProgress.child;
    while (child !== null) {
      var childUpdateExpirationTime = child.expirationTime;
      var childChildExpirationTime = child.childExpirationTime;
      if (childUpdateExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = childUpdateExpirationTime;
      }
      if (childChildExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = childChildExpirationTime;
      }
      if (shouldBubbleActualDurations) {
        actualDuration += child.actualDuration;
      }
      treeBaseDuration += child.treeBaseDuration;
      child = child.sibling;
    }
    workInProgress.actualDuration = actualDuration;
    workInProgress.treeBaseDuration = treeBaseDuration;
  } else {
    var _child = workInProgress.child;
    while (_child !== null) {
      var _childUpdateExpirationTime = _child.expirationTime;
      var _childChildExpirationTime = _child.childExpirationTime;
      if (_childUpdateExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = _childUpdateExpirationTime;
      }
      if (_childChildExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = _childChildExpirationTime;
      }
      _child = _child.sibling;
    }
  }

  workInProgress.childExpirationTime = newChildExpirationTime;
}

function completeUnitOfWork(workInProgress) {
  // Attempt to complete the current unit of work, then move to the
  // next sibling. If there are no more siblings, return to the
  // parent fiber.
  while (true) {
    // The current, flushed, state of this fiber is the alternate.
    // Ideally nothing should rely on this, but relying on it here
    // means that we don't need an additional field on the work in
    // progress.
    var current$$1 = workInProgress.alternate;
    {
      setCurrentFiber(workInProgress);
    }

    var returnFiber = workInProgress.return;
    var siblingFiber = workInProgress.sibling;

    if ((workInProgress.effectTag & Incomplete) === NoEffect) {
      if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
        // Don't replay if it fails during completion phase.
        mayReplayFailedUnitOfWork = false;
      }
      // This fiber completed.
      // Remember we're completing this unit so we can find a boundary if it fails.
      nextUnitOfWork = workInProgress;
      if (enableProfilerTimer) {
        if (workInProgress.mode & ProfileMode) {
          startProfilerTimer(workInProgress);
        }
        nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);
        if (workInProgress.mode & ProfileMode) {
          // Update render duration assuming we didn't error.
          stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
        }
      } else {
        nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);
      }
      if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
        // We're out of completion phase so replaying is fine now.
        mayReplayFailedUnitOfWork = true;
      }
      stopWorkTimer(workInProgress);
      resetChildExpirationTime(workInProgress, nextRenderExpirationTime);
      {
        resetCurrentFiber();
      }

      if (nextUnitOfWork !== null) {
        // Completing this fiber spawned new work. Work on that next.
        return nextUnitOfWork;
      }

      if (returnFiber !== null &&
      // Do not append effects to parents if a sibling failed to complete
      (returnFiber.effectTag & Incomplete) === NoEffect) {
        // Append all the effects of the subtree and this fiber onto the effect
        // list of the parent. The completion order of the children affects the
        // side-effect order.
        if (returnFiber.firstEffect === null) {
          returnFiber.firstEffect = workInProgress.firstEffect;
        }
        if (workInProgress.lastEffect !== null) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
          }
          returnFiber.lastEffect = workInProgress.lastEffect;
        }

        // If this fiber had side-effects, we append it AFTER the children's
        // side-effects. We can perform certain side-effects earlier if
        // needed, by doing multiple passes over the effect list. We don't want
        // to schedule our own side-effect on our own list because if end up
        // reusing children we'll schedule this effect onto itself since we're
        // at the end.
        var effectTag = workInProgress.effectTag;
        // Skip both NoWork and PerformedWork tags when creating the effect list.
        // PerformedWork effect is read by React DevTools but shouldn't be committed.
        if (effectTag > PerformedWork) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress;
          } else {
            returnFiber.firstEffect = workInProgress;
          }
          returnFiber.lastEffect = workInProgress;
        }
      }

      if (true && ReactFiberInstrumentation_1.debugTool) {
        ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
      }

      if (siblingFiber !== null) {
        // If there is more work to do in this returnFiber, do that next.
        return siblingFiber;
      } else if (returnFiber !== null) {
        // If there's no more work in this returnFiber. Complete the returnFiber.
        workInProgress = returnFiber;
        continue;
      } else {
        // We've reached the root.
        return null;
      }
    } else {
      if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
        // Record the render duration for the fiber that errored.
        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);

        // Include the time spent working on failed children before continuing.
        var actualDuration = workInProgress.actualDuration;
        var child = workInProgress.child;
        while (child !== null) {
          actualDuration += child.actualDuration;
          child = child.sibling;
        }
        workInProgress.actualDuration = actualDuration;
      }

      // This fiber did not complete because something threw. Pop values off
      // the stack without entering the complete phase. If this is a boundary,
      // capture values if possible.
      var next = unwindWork(workInProgress, nextRenderExpirationTime);
      // Because this fiber did not complete, don't reset its expiration time.
      if (workInProgress.effectTag & DidCapture) {
        // Restarting an error boundary
        stopFailedWorkTimer(workInProgress);
      } else {
        stopWorkTimer(workInProgress);
      }

      {
        resetCurrentFiber();
      }

      if (next !== null) {
        stopWorkTimer(workInProgress);
        if (true && ReactFiberInstrumentation_1.debugTool) {
          ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
        }

        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        // Since we're restarting, remove anything that is not a host effect
        // from the effect tag.
        next.effectTag &= HostEffectMask;
        return next;
      }

      if (returnFiber !== null) {
        // Mark the parent fiber as incomplete and clear its effect list.
        returnFiber.firstEffect = returnFiber.lastEffect = null;
        returnFiber.effectTag |= Incomplete;
      }

      if (true && ReactFiberInstrumentation_1.debugTool) {
        ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
      }

      if (siblingFiber !== null) {
        // If there is more work to do in this returnFiber, do that next.
        return siblingFiber;
      } else if (returnFiber !== null) {
        // If there's no more work in this returnFiber. Complete the returnFiber.
        workInProgress = returnFiber;
        continue;
      } else {
        return null;
      }
    }
  }

  // Without this explicit null return Flow complains of invalid return type
  // TODO Remove the above while(true) loop
  // eslint-disable-next-line no-unreachable
  return null;
}

function performUnitOfWork(workInProgress) {
  // The current, flushed, state of this fiber is the alternate.
  // Ideally nothing should rely on this, but relying on it here
  // means that we don't need an additional field on the work in
  // progress.
  var current$$1 = workInProgress.alternate;

  // See if beginning this work spawns more work.
  startWorkTimer(workInProgress);
  {
    setCurrentFiber(workInProgress);
  }

  if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
    stashedWorkInProgressProperties = assignFiberPropertiesInDEV(stashedWorkInProgressProperties, workInProgress);
  }

  var next = void 0;
  if (enableProfilerTimer) {
    if (workInProgress.mode & ProfileMode) {
      startProfilerTimer(workInProgress);
    }

    next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);
    workInProgress.memoizedProps = workInProgress.pendingProps;

    if (workInProgress.mode & ProfileMode) {
      // Record the render duration assuming we didn't bailout (or error).
      stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
    }
  } else {
    next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);
    workInProgress.memoizedProps = workInProgress.pendingProps;
  }

  {
    resetCurrentFiber();
    if (isReplayingFailedUnitOfWork) {
      // Currently replaying a failed unit of work. This should be unreachable,
      // because the render phase is meant to be idempotent, and it should
      // have thrown again. Since it didn't, rethrow the original error, so
      // React's internal stack is not misaligned.
      rethrowOriginalError();
    }
  }
  if (true && ReactFiberInstrumentation_1.debugTool) {
    ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
  }

  if (next === null) {
    // If this doesn't spawn new work, complete the current work.
    next = completeUnitOfWork(workInProgress);
  }

  ReactCurrentOwner$2.current = null;

  return next;
}

function workLoop(isYieldy) {
  if (!isYieldy) {
    // Flush work without yielding
    while (nextUnitOfWork !== null) {
      nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
    }
  } else {
    // Flush asynchronous work until there's a higher priority event
    while (nextUnitOfWork !== null && !shouldYieldToRenderer()) {
      nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
    }
  }
}

function renderRoot(root, isYieldy) {
  !!isWorking ? invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  flushPassiveEffects();

  isWorking = true;
  var previousDispatcher = ReactCurrentDispatcher.current;
  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

  var expirationTime = root.nextExpirationTimeToWorkOn;

  // Check if we're starting from a fresh stack, or if we're resuming from
  // previously yielded work.
  if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || nextUnitOfWork === null) {
    // Reset the stack and start working from the root.
    resetStack();
    nextRoot = root;
    nextRenderExpirationTime = expirationTime;
    nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime);
    root.pendingCommitExpirationTime = NoWork;

    if (enableSchedulerTracing) {
      // Determine which interactions this batch of work currently includes,
      // So that we can accurately attribute time spent working on it,
      var interactions = new Set();
      root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
        if (scheduledExpirationTime >= expirationTime) {
          scheduledInteractions.forEach(function (interaction) {
            return interactions.add(interaction);
          });
        }
      });

      // Store the current set of interactions on the FiberRoot for a few reasons:
      // We can re-use it in hot functions like renderRoot() without having to recalculate it.
      // We will also use it in commitWork() to pass to any Profiler onRender() hooks.
      // This also provides DevTools with a way to access it when the onCommitRoot() hook is called.
      root.memoizedInteractions = interactions;

      if (interactions.size > 0) {
        var subscriber = __subscriberRef.current;
        if (subscriber !== null) {
          var threadID = computeThreadID(expirationTime, root.interactionThreadID);
          try {
            subscriber.onWorkStarted(interactions, threadID);
          } catch (error) {
            // Work thrown by an interaction tracing subscriber should be rethrown,
            // But only once it's safe (to avoid leaving the scheduler in an invalid state).
            // Store the error for now and we'll re-throw in finishRendering().
            if (!hasUnhandledError) {
              hasUnhandledError = true;
              unhandledError = error;
            }
          }
        }
      }
    }
  }

  var prevInteractions = null;
  if (enableSchedulerTracing) {
    // We're about to start new traced work.
    // Restore pending interactions so cascading work triggered during the render phase will be accounted for.
    prevInteractions = __interactionsRef.current;
    __interactionsRef.current = root.memoizedInteractions;
  }

  var didFatal = false;

  startWorkLoopTimer(nextUnitOfWork);

  do {
    try {
      workLoop(isYieldy);
    } catch (thrownValue) {
      resetContextDependences();
      resetHooks();

      // Reset in case completion throws.
      // This is only used in DEV and when replaying is on.
      var mayReplay = void 0;
      if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
        mayReplay = mayReplayFailedUnitOfWork;
        mayReplayFailedUnitOfWork = true;
      }

      if (nextUnitOfWork === null) {
        // This is a fatal error.
        didFatal = true;
        onUncaughtError(thrownValue);
      } else {
        if (enableProfilerTimer && nextUnitOfWork.mode & ProfileMode) {
          // Record the time spent rendering before an error was thrown.
          // This avoids inaccurate Profiler durations in the case of a suspended render.
          stopProfilerTimerIfRunningAndRecordDelta(nextUnitOfWork, true);
        }

        {
          // Reset global debug state
          // We assume this is defined in DEV
          resetCurrentlyProcessingQueue();
        }

        if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
          if (mayReplay) {
            var failedUnitOfWork = nextUnitOfWork;
            replayUnitOfWork(failedUnitOfWork, thrownValue, isYieldy);
          }
        }

        // TODO: we already know this isn't true in some cases.
        // At least this shows a nicer error message until we figure out the cause.
        // https://github.com/facebook/react/issues/12449#issuecomment-386727431
        !(nextUnitOfWork !== null) ? invariant(false, 'Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.') : void 0;

        var sourceFiber = nextUnitOfWork;
        var returnFiber = sourceFiber.return;
        if (returnFiber === null) {
          // This is the root. The root could capture its own errors. However,
          // we don't know if it errors before or after we pushed the host
          // context. This information is needed to avoid a stack mismatch.
          // Because we're not sure, treat this as a fatal error. We could track
          // which phase it fails in, but doesn't seem worth it. At least
          // for now.
          didFatal = true;
          onUncaughtError(thrownValue);
        } else {
          throwException(root, returnFiber, sourceFiber, thrownValue, nextRenderExpirationTime);
          nextUnitOfWork = completeUnitOfWork(sourceFiber);
          continue;
        }
      }
    }
    break;
  } while (true);

  if (enableSchedulerTracing) {
    // Traced work is done for now; restore the previous interactions.
    __interactionsRef.current = prevInteractions;
  }

  // We're done performing work. Time to clean up.
  isWorking = false;
  ReactCurrentDispatcher.current = previousDispatcher;
  resetContextDependences();
  resetHooks();

  // Yield back to main thread.
  if (didFatal) {
    var _didCompleteRoot = false;
    stopWorkLoopTimer(interruptedBy, _didCompleteRoot);
    interruptedBy = null;
    // There was a fatal error.
    {
      resetStackAfterFatalErrorInDev();
    }
    // `nextRoot` points to the in-progress root. A non-null value indicates
    // that we're in the middle of an async render. Set it to null to indicate
    // there's no more work to be done in the current batch.
    nextRoot = null;
    onFatal(root);
    return;
  }

  if (nextUnitOfWork !== null) {
    // There's still remaining async work in this tree, but we ran out of time
    // in the current frame. Yield back to the renderer. Unless we're
    // interrupted by a higher priority update, we'll continue later from where
    // we left off.
    var _didCompleteRoot2 = false;
    stopWorkLoopTimer(interruptedBy, _didCompleteRoot2);
    interruptedBy = null;
    onYield(root);
    return;
  }

  // We completed the whole tree.
  var didCompleteRoot = true;
  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
  var rootWorkInProgress = root.current.alternate;
  !(rootWorkInProgress !== null) ? invariant(false, 'Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  // `nextRoot` points to the in-progress root. A non-null value indicates
  // that we're in the middle of an async render. Set it to null to indicate
  // there's no more work to be done in the current batch.
  nextRoot = null;
  interruptedBy = null;

  if (nextRenderDidError) {
    // There was an error
    if (hasLowerPriorityWork(root, expirationTime)) {
      // There's lower priority work. If so, it may have the effect of fixing
      // the exception that was just thrown. Exit without committing. This is
      // similar to a suspend, but without a timeout because we're not waiting
      // for a promise to resolve. React will restart at the lower
      // priority level.
      markSuspendedPriorityLevel(root, expirationTime);
      var suspendedExpirationTime = expirationTime;
      var rootExpirationTime = root.expirationTime;
      onSuspend(root, rootWorkInProgress, suspendedExpirationTime, rootExpirationTime, -1 // Indicates no timeout
      );
      return;
    } else if (
    // There's no lower priority work, but we're rendering asynchronously.
    // Synchronously attempt to render the same level one more time. This is
    // similar to a suspend, but without a timeout because we're not waiting
    // for a promise to resolve.
    !root.didError && isYieldy) {
      root.didError = true;
      var _suspendedExpirationTime = root.nextExpirationTimeToWorkOn = expirationTime;
      var _rootExpirationTime = root.expirationTime = Sync;
      onSuspend(root, rootWorkInProgress, _suspendedExpirationTime, _rootExpirationTime, -1 // Indicates no timeout
      );
      return;
    }
  }

  if (isYieldy && nextLatestAbsoluteTimeoutMs !== -1) {
    // The tree was suspended.
    var _suspendedExpirationTime2 = expirationTime;
    markSuspendedPriorityLevel(root, _suspendedExpirationTime2);

    // Find the earliest uncommitted expiration time in the tree, including
    // work that is suspended. The timeout threshold cannot be longer than
    // the overall expiration.
    var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, expirationTime);
    var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
    if (earliestExpirationTimeMs < nextLatestAbsoluteTimeoutMs) {
      nextLatestAbsoluteTimeoutMs = earliestExpirationTimeMs;
    }

    // Subtract the current time from the absolute timeout to get the number
    // of milliseconds until the timeout. In other words, convert an absolute
    // timestamp to a relative time. This is the value that is passed
    // to `setTimeout`.
    var currentTimeMs = expirationTimeToMs(requestCurrentTime());
    var msUntilTimeout = nextLatestAbsoluteTimeoutMs - currentTimeMs;
    msUntilTimeout = msUntilTimeout < 0 ? 0 : msUntilTimeout;

    // TODO: Account for the Just Noticeable Difference

    var _rootExpirationTime2 = root.expirationTime;
    onSuspend(root, rootWorkInProgress, _suspendedExpirationTime2, _rootExpirationTime2, msUntilTimeout);
    return;
  }

  // Ready to commit.
  onComplete(root, rootWorkInProgress, expirationTime);
}

function captureCommitPhaseError(sourceFiber, value) {
  var expirationTime = Sync;
  var fiber = sourceFiber.return;
  while (fiber !== null) {
    switch (fiber.tag) {
      case ClassComponent:
        var ctor = fiber.type;
        var instance = fiber.stateNode;
        if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
          var errorInfo = createCapturedValue(value, sourceFiber);
          var update = createClassErrorUpdate(fiber, errorInfo, expirationTime);
          enqueueUpdate(fiber, update);
          scheduleWork(fiber, expirationTime);
          return;
        }
        break;
      case HostRoot:
        {
          var _errorInfo = createCapturedValue(value, sourceFiber);
          var _update = createRootErrorUpdate(fiber, _errorInfo, expirationTime);
          enqueueUpdate(fiber, _update);
          scheduleWork(fiber, expirationTime);
          return;
        }
    }
    fiber = fiber.return;
  }

  if (sourceFiber.tag === HostRoot) {
    // Error was thrown at the root. There is no parent, so the root
    // itself should capture it.
    var rootFiber = sourceFiber;
    var _errorInfo2 = createCapturedValue(value, rootFiber);
    var _update2 = createRootErrorUpdate(rootFiber, _errorInfo2, expirationTime);
    enqueueUpdate(rootFiber, _update2);
    scheduleWork(rootFiber, expirationTime);
  }
}

function computeThreadID(expirationTime, interactionThreadID) {
  // Interaction threads are unique per root and expiration time.
  return expirationTime * 1000 + interactionThreadID;
}

// Creates a unique async expiration time.
function computeUniqueAsyncExpiration() {
  var currentTime = requestCurrentTime();
  var result = computeAsyncExpiration(currentTime);
  if (result >= lastUniqueAsyncExpiration) {
    // Since we assume the current time monotonically increases, we only hit
    // this branch when computeUniqueAsyncExpiration is fired multiple times
    // within a 200ms window (or whatever the async bucket size is).
    result = lastUniqueAsyncExpiration - 1;
  }
  lastUniqueAsyncExpiration = result;
  return lastUniqueAsyncExpiration;
}

function computeExpirationForFiber(currentTime, fiber) {
  var priorityLevel = unstable_getCurrentPriorityLevel();

  var expirationTime = void 0;
  if ((fiber.mode & ConcurrentMode) === NoContext) {
    // Outside of concurrent mode, updates are always synchronous.
    expirationTime = Sync;
  } else if (isWorking && !isCommitting$1) {
    // During render phase, updates expire during as the current render.
    expirationTime = nextRenderExpirationTime;
  } else {
    switch (priorityLevel) {
      case unstable_ImmediatePriority:
        expirationTime = Sync;
        break;
      case unstable_UserBlockingPriority:
        expirationTime = computeInteractiveExpiration(currentTime);
        break;
      case unstable_NormalPriority:
        // This is a normal, concurrent update
        expirationTime = computeAsyncExpiration(currentTime);
        break;
      case unstable_LowPriority:
      case unstable_IdlePriority:
        expirationTime = Never;
        break;
      default:
        invariant(false, 'Unknown priority level. This error is likely caused by a bug in React. Please file an issue.');
    }

    // If we're in the middle of rendering a tree, do not update at the same
    // expiration time that is already rendering.
    if (nextRoot !== null && expirationTime === nextRenderExpirationTime) {
      expirationTime -= 1;
    }
  }

  // Keep track of the lowest pending interactive expiration time. This
  // allows us to synchronously flush all interactive updates
  // when needed.
  // TODO: Move this to renderer?
  if (priorityLevel === unstable_UserBlockingPriority && (lowestPriorityPendingInteractiveExpirationTime === NoWork || expirationTime < lowestPriorityPendingInteractiveExpirationTime)) {
    lowestPriorityPendingInteractiveExpirationTime = expirationTime;
  }

  return expirationTime;
}

function renderDidSuspend(root, absoluteTimeoutMs, suspendedTime) {
  // Schedule the timeout.
  if (absoluteTimeoutMs >= 0 && nextLatestAbsoluteTimeoutMs < absoluteTimeoutMs) {
    nextLatestAbsoluteTimeoutMs = absoluteTimeoutMs;
  }
}

function renderDidError() {
  nextRenderDidError = true;
}

function pingSuspendedRoot(root, thenable, pingTime) {
  // A promise that previously suspended React from committing has resolved.
  // If React is still suspended, try again at the previous level (pingTime).

  var pingCache = root.pingCache;
  if (pingCache !== null) {
    // The thenable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    pingCache.delete(thenable);
  }

  if (nextRoot !== null && nextRenderExpirationTime === pingTime) {
    // Received a ping at the same priority level at which we're currently
    // rendering. Restart from the root.
    nextRoot = null;
  } else {
    // Confirm that the root is still suspended at this level. Otherwise exit.
    if (isPriorityLevelSuspended(root, pingTime)) {
      // Ping at the original level
      markPingedPriorityLevel(root, pingTime);
      var rootExpirationTime = root.expirationTime;
      if (rootExpirationTime !== NoWork) {
        requestWork(root, rootExpirationTime);
      }
    }
  }
}

function retryTimedOutBoundary(boundaryFiber, thenable) {
  // The boundary fiber (a Suspense component) previously timed out and was
  // rendered in its fallback state. One of the promises that suspended it has
  // resolved, which means at least part of the tree was likely unblocked. Try
  var retryCache = void 0;
  if (enableSuspenseServerRenderer) {
    switch (boundaryFiber.tag) {
      case SuspenseComponent:
        retryCache = boundaryFiber.stateNode;
        break;
      case DehydratedSuspenseComponent:
        retryCache = boundaryFiber.memoizedState;
        break;
      default:
        invariant(false, 'Pinged unknown suspense boundary type. This is probably a bug in React.');
    }
  } else {
    retryCache = boundaryFiber.stateNode;
  }
  if (retryCache !== null) {
    // The thenable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    retryCache.delete(thenable);
  }

  var currentTime = requestCurrentTime();
  var retryTime = computeExpirationForFiber(currentTime, boundaryFiber);
  var root = scheduleWorkToRoot(boundaryFiber, retryTime);
  if (root !== null) {
    markPendingPriorityLevel(root, retryTime);
    var rootExpirationTime = root.expirationTime;
    if (rootExpirationTime !== NoWork) {
      requestWork(root, rootExpirationTime);
    }
  }
}

function scheduleWorkToRoot(fiber, expirationTime) {
  recordScheduleUpdate();

  {
    if (fiber.tag === ClassComponent) {
      var instance = fiber.stateNode;
      warnAboutInvalidUpdates(instance);
    }
  }

  // Update the source fiber's expiration time
  if (fiber.expirationTime < expirationTime) {
    fiber.expirationTime = expirationTime;
  }
  var alternate = fiber.alternate;
  if (alternate !== null && alternate.expirationTime < expirationTime) {
    alternate.expirationTime = expirationTime;
  }
  // Walk the parent path to the root and update the child expiration time.
  var node = fiber.return;
  var root = null;
  if (node === null && fiber.tag === HostRoot) {
    root = fiber.stateNode;
  } else {
    while (node !== null) {
      alternate = node.alternate;
      if (node.childExpirationTime < expirationTime) {
        node.childExpirationTime = expirationTime;
        if (alternate !== null && alternate.childExpirationTime < expirationTime) {
          alternate.childExpirationTime = expirationTime;
        }
      } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
        alternate.childExpirationTime = expirationTime;
      }
      if (node.return === null && node.tag === HostRoot) {
        root = node.stateNode;
        break;
      }
      node = node.return;
    }
  }

  if (enableSchedulerTracing) {
    if (root !== null) {
      var interactions = __interactionsRef.current;
      if (interactions.size > 0) {
        var pendingInteractionMap = root.pendingInteractionMap;
        var pendingInteractions = pendingInteractionMap.get(expirationTime);
        if (pendingInteractions != null) {
          interactions.forEach(function (interaction) {
            if (!pendingInteractions.has(interaction)) {
              // Update the pending async work count for previously unscheduled interaction.
              interaction.__count++;
            }

            pendingInteractions.add(interaction);
          });
        } else {
          pendingInteractionMap.set(expirationTime, new Set(interactions));

          // Update the pending async work count for the current interactions.
          interactions.forEach(function (interaction) {
            interaction.__count++;
          });
        }

        var subscriber = __subscriberRef.current;
        if (subscriber !== null) {
          var threadID = computeThreadID(expirationTime, root.interactionThreadID);
          subscriber.onWorkScheduled(interactions, threadID);
        }
      }
    }
  }
  return root;
}

function warnIfNotCurrentlyBatchingInDev(fiber) {
  {
    if (isRendering === false && isBatchingUpdates === false) {
      warningWithoutStack$1(false, 'An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see in the browser." + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
    }
  }
}

function scheduleWork(fiber, expirationTime) {
  var root = scheduleWorkToRoot(fiber, expirationTime);
  if (root === null) {
    {
      switch (fiber.tag) {
        case ClassComponent:
          warnAboutUpdateOnUnmounted(fiber, true);
          break;
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent:
          warnAboutUpdateOnUnmounted(fiber, false);
          break;
      }
    }
    return;
  }

  if (!isWorking && nextRenderExpirationTime !== NoWork && expirationTime > nextRenderExpirationTime) {
    // This is an interruption. (Used for performance tracking.)
    interruptedBy = fiber;
    resetStack();
  }
  markPendingPriorityLevel(root, expirationTime);
  if (
  // If we're in the render phase, we don't need to schedule this root
  // for an update, because we'll do it before we exit...
  !isWorking || isCommitting$1 ||
  // ...unless this is a different root than the one we're rendering.
  nextRoot !== root) {
    var rootExpirationTime = root.expirationTime;
    requestWork(root, rootExpirationTime);
  }
  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
    // Reset this back to zero so subsequent updates don't throw.
    nestedUpdateCount = 0;
    invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
  }
}

function syncUpdates(fn, a, b, c, d) {
  return unstable_runWithPriority(unstable_ImmediatePriority, function () {
    return fn(a, b, c, d);
  });
}

// TODO: Everything below this is written as if it has been lifted to the
// renderers. I'll do this in a follow-up.

// Linked-list of roots
var firstScheduledRoot = null;
var lastScheduledRoot = null;

var callbackExpirationTime = NoWork;
var callbackID = void 0;
var isRendering = false;
var nextFlushedRoot = null;
var nextFlushedExpirationTime = NoWork;
var lowestPriorityPendingInteractiveExpirationTime = NoWork;
var hasUnhandledError = false;
var unhandledError = null;

var isBatchingUpdates = false;
var isUnbatchingUpdates = false;

var completedBatches = null;

var originalStartTimeMs = unstable_now();
var currentRendererTime = msToExpirationTime(originalStartTimeMs);
var currentSchedulerTime = currentRendererTime;

// Use these to prevent an infinite loop of nested updates
var NESTED_UPDATE_LIMIT = 50;
var nestedUpdateCount = 0;
var lastCommittedRootDuringThisBatch = null;

function recomputeCurrentRendererTime() {
  var currentTimeMs = unstable_now() - originalStartTimeMs;
  currentRendererTime = msToExpirationTime(currentTimeMs);
}

function scheduleCallbackWithExpirationTime(root, expirationTime) {
  if (callbackExpirationTime !== NoWork) {
    // A callback is already scheduled. Check its expiration time (timeout).
    if (expirationTime < callbackExpirationTime) {
      // Existing callback has sufficient timeout. Exit.
      return;
    } else {
      if (callbackID !== null) {
        // Existing callback has insufficient timeout. Cancel and schedule a
        // new one.
        unstable_cancelCallback(callbackID);
      }
    }
    // The request callback timer is already running. Don't start a new one.
  } else {
    startRequestCallbackTimer();
  }

  callbackExpirationTime = expirationTime;
  var currentMs = unstable_now() - originalStartTimeMs;
  var expirationTimeMs = expirationTimeToMs(expirationTime);
  var timeout = expirationTimeMs - currentMs;
  callbackID = unstable_scheduleCallback(performAsyncWork, { timeout: timeout });
}

// For every call to renderRoot, one of onFatal, onComplete, onSuspend, and
// onYield is called upon exiting. We use these in lieu of returning a tuple.
// I've also chosen not to inline them into renderRoot because these will
// eventually be lifted into the renderer.
function onFatal(root) {
  root.finishedWork = null;
}

function onComplete(root, finishedWork, expirationTime) {
  root.pendingCommitExpirationTime = expirationTime;
  root.finishedWork = finishedWork;
}

function onSuspend(root, finishedWork, suspendedExpirationTime, rootExpirationTime, msUntilTimeout) {
  root.expirationTime = rootExpirationTime;
  if (msUntilTimeout === 0 && !shouldYieldToRenderer()) {
    // Don't wait an additional tick. Commit the tree immediately.
    root.pendingCommitExpirationTime = suspendedExpirationTime;
    root.finishedWork = finishedWork;
  } else if (msUntilTimeout > 0) {
    // Wait `msUntilTimeout` milliseconds before committing.
    root.timeoutHandle = scheduleTimeout(onTimeout.bind(null, root, finishedWork, suspendedExpirationTime), msUntilTimeout);
  }
}

function onYield(root) {
  root.finishedWork = null;
}

function onTimeout(root, finishedWork, suspendedExpirationTime) {
  // The root timed out. Commit it.
  root.pendingCommitExpirationTime = suspendedExpirationTime;
  root.finishedWork = finishedWork;
  // Read the current time before entering the commit phase. We can be
  // certain this won't cause tearing related to batching of event updates
  // because we're at the top of a timer event.
  recomputeCurrentRendererTime();
  currentSchedulerTime = currentRendererTime;
  flushRoot(root, suspendedExpirationTime);
}

function onCommit(root, expirationTime) {
  root.expirationTime = expirationTime;
  root.finishedWork = null;
}

function requestCurrentTime() {
  // requestCurrentTime is called by the scheduler to compute an expiration
  // time.
  //
  // Expiration times are computed by adding to the current time (the start
  // time). However, if two updates are scheduled within the same event, we
  // should treat their start times as simultaneous, even if the actual clock
  // time has advanced between the first and second call.

  // In other words, because expiration times determine how updates are batched,
  // we want all updates of like priority that occur within the same event to
  // receive the same expiration time. Otherwise we get tearing.
  //
  // We keep track of two separate times: the current "renderer" time and the
  // current "scheduler" time. The renderer time can be updated whenever; it
  // only exists to minimize the calls performance.now.
  //
  // But the scheduler time can only be updated if there's no pending work, or
  // if we know for certain that we're not in the middle of an event.

  if (isRendering) {
    // We're already rendering. Return the most recently read time.
    return currentSchedulerTime;
  }
  // Check if there's pending work.
  findHighestPriorityRoot();
  if (nextFlushedExpirationTime === NoWork || nextFlushedExpirationTime === Never) {
    // If there's no pending work, or if the pending work is offscreen, we can
    // read the current time without risk of tearing.
    recomputeCurrentRendererTime();
    currentSchedulerTime = currentRendererTime;
    return currentSchedulerTime;
  }
  // There's already pending work. We might be in the middle of a browser
  // event. If we were to read the current time, it could cause multiple updates
  // within the same event to receive different expiration times, leading to
  // tearing. Return the last read time. During the next idle callback, the
  // time will be updated.
  return currentSchedulerTime;
}

// requestWork is called by the scheduler whenever a root receives an update.
// It's up to the renderer to call renderRoot at some point in the future.
function requestWork(root, expirationTime) {
  addRootToSchedule(root, expirationTime);
  if (isRendering) {
    // Prevent reentrancy. Remaining work will be scheduled at the end of
    // the currently rendering batch.
    return;
  }

  if (isBatchingUpdates) {
    // Flush work at the end of the batch.
    if (isUnbatchingUpdates) {
      // ...unless we're inside unbatchedUpdates, in which case we should
      // flush it now.
      nextFlushedRoot = root;
      nextFlushedExpirationTime = Sync;
      performWorkOnRoot(root, Sync, false);
    }
    return;
  }

  // TODO: Get rid of Sync and use current time?
  if (expirationTime === Sync) {
    performSyncWork();
  } else {
    scheduleCallbackWithExpirationTime(root, expirationTime);
  }
}

function addRootToSchedule(root, expirationTime) {
  // Add the root to the schedule.
  // Check if this root is already part of the schedule.
  if (root.nextScheduledRoot === null) {
    // This root is not already scheduled. Add it.
    root.expirationTime = expirationTime;
    if (lastScheduledRoot === null) {
      firstScheduledRoot = lastScheduledRoot = root;
      root.nextScheduledRoot = root;
    } else {
      lastScheduledRoot.nextScheduledRoot = root;
      lastScheduledRoot = root;
      lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
    }
  } else {
    // This root is already scheduled, but its priority may have increased.
    var remainingExpirationTime = root.expirationTime;
    if (expirationTime > remainingExpirationTime) {
      // Update the priority.
      root.expirationTime = expirationTime;
    }
  }
}

function findHighestPriorityRoot() {
  var highestPriorityWork = NoWork;
  var highestPriorityRoot = null;
  if (lastScheduledRoot !== null) {
    var previousScheduledRoot = lastScheduledRoot;
    var root = firstScheduledRoot;
    while (root !== null) {
      var remainingExpirationTime = root.expirationTime;
      if (remainingExpirationTime === NoWork) {
        // This root no longer has work. Remove it from the scheduler.

        // TODO: This check is redudant, but Flow is confused by the branch
        // below where we set lastScheduledRoot to null, even though we break
        // from the loop right after.
        !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        if (root === root.nextScheduledRoot) {
          // This is the only root in the list.
          root.nextScheduledRoot = null;
          firstScheduledRoot = lastScheduledRoot = null;
          break;
        } else if (root === firstScheduledRoot) {
          // This is the first root in the list.
          var next = root.nextScheduledRoot;
          firstScheduledRoot = next;
          lastScheduledRoot.nextScheduledRoot = next;
          root.nextScheduledRoot = null;
        } else if (root === lastScheduledRoot) {
          // This is the last root in the list.
          lastScheduledRoot = previousScheduledRoot;
          lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
          root.nextScheduledRoot = null;
          break;
        } else {
          previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
          root.nextScheduledRoot = null;
        }
        root = previousScheduledRoot.nextScheduledRoot;
      } else {
        if (remainingExpirationTime > highestPriorityWork) {
          // Update the priority, if it's higher
          highestPriorityWork = remainingExpirationTime;
          highestPriorityRoot = root;
        }
        if (root === lastScheduledRoot) {
          break;
        }
        if (highestPriorityWork === Sync) {
          // Sync is highest priority by definition so
          // we can stop searching.
          break;
        }
        previousScheduledRoot = root;
        root = root.nextScheduledRoot;
      }
    }
  }

  nextFlushedRoot = highestPriorityRoot;
  nextFlushedExpirationTime = highestPriorityWork;
}

// TODO: This wrapper exists because many of the older tests (the ones that use
// flushDeferredPri) rely on the number of times `shouldYield` is called. We
// should get rid of it.
var didYield = false;
function shouldYieldToRenderer() {
  if (didYield) {
    return true;
  }
  if (unstable_shouldYield()) {
    didYield = true;
    return true;
  }
  return false;
}

function performAsyncWork() {
  try {
    if (!shouldYieldToRenderer()) {
      // The callback timed out. That means at least one update has expired.
      // Iterate through the root schedule. If they contain expired work, set
      // the next render expiration time to the current time. This has the effect
      // of flushing all expired work in a single batch, instead of flushing each
      // level one at a time.
      if (firstScheduledRoot !== null) {
        recomputeCurrentRendererTime();
        var root = firstScheduledRoot;
        do {
          didExpireAtExpirationTime(root, currentRendererTime);
          // The root schedule is circular, so this is never null.
          root = root.nextScheduledRoot;
        } while (root !== firstScheduledRoot);
      }
    }
    performWork(NoWork, true);
  } finally {
    didYield = false;
  }
}

function performSyncWork() {
  performWork(Sync, false);
}

function performWork(minExpirationTime, isYieldy) {
  // Keep working on roots until there's no more work, or until there's a higher
  // priority event.
  findHighestPriorityRoot();

  if (isYieldy) {
    recomputeCurrentRendererTime();
    currentSchedulerTime = currentRendererTime;

    if (enableUserTimingAPI) {
      var didExpire = nextFlushedExpirationTime > currentRendererTime;
      var timeout = expirationTimeToMs(nextFlushedExpirationTime);
      stopRequestCallbackTimer(didExpire, timeout);
    }

    while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime && !(didYield && currentRendererTime > nextFlushedExpirationTime)) {
      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, currentRendererTime > nextFlushedExpirationTime);
      findHighestPriorityRoot();
      recomputeCurrentRendererTime();
      currentSchedulerTime = currentRendererTime;
    }
  } else {
    while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime) {
      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, false);
      findHighestPriorityRoot();
    }
  }

  // We're done flushing work. Either we ran out of time in this callback,
  // or there's no more work left with sufficient priority.

  // If we're inside a callback, set this to false since we just completed it.
  if (isYieldy) {
    callbackExpirationTime = NoWork;
    callbackID = null;
  }
  // If there's work left over, schedule a new callback.
  if (nextFlushedExpirationTime !== NoWork) {
    scheduleCallbackWithExpirationTime(nextFlushedRoot, nextFlushedExpirationTime);
  }

  // Clean-up.
  finishRendering();
}

function flushRoot(root, expirationTime) {
  !!isRendering ? invariant(false, 'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.') : void 0;
  // Perform work on root as if the given expiration time is the current time.
  // This has the effect of synchronously flushing all work up to and
  // including the given time.
  nextFlushedRoot = root;
  nextFlushedExpirationTime = expirationTime;
  performWorkOnRoot(root, expirationTime, false);
  // Flush any sync work that was scheduled by lifecycles
  performSyncWork();
}

function finishRendering() {
  nestedUpdateCount = 0;
  lastCommittedRootDuringThisBatch = null;

  if (completedBatches !== null) {
    var batches = completedBatches;
    completedBatches = null;
    for (var i = 0; i < batches.length; i++) {
      var batch = batches[i];
      try {
        batch._onComplete();
      } catch (error) {
        if (!hasUnhandledError) {
          hasUnhandledError = true;
          unhandledError = error;
        }
      }
    }
  }

  if (hasUnhandledError) {
    var error = unhandledError;
    unhandledError = null;
    hasUnhandledError = false;
    throw error;
  }
}

function performWorkOnRoot(root, expirationTime, isYieldy) {
  !!isRendering ? invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  isRendering = true;

  // Check if this is async work or sync/expired work.
  if (!isYieldy) {
    // Flush work without yielding.
    // TODO: Non-yieldy work does not necessarily imply expired work. A renderer
    // may want to perform some work without yielding, but also without
    // requiring the root to complete (by triggering placeholders).

    var finishedWork = root.finishedWork;
    if (finishedWork !== null) {
      // This root is already complete. We can commit it.
      completeRoot(root, finishedWork, expirationTime);
    } else {
      root.finishedWork = null;
      // If this root previously suspended, clear its existing timeout, since
      // we're about to try rendering again.
      var timeoutHandle = root.timeoutHandle;
      if (timeoutHandle !== noTimeout) {
        root.timeoutHandle = noTimeout;
        // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
        cancelTimeout(timeoutHandle);
      }
      renderRoot(root, isYieldy);
      finishedWork = root.finishedWork;
      if (finishedWork !== null) {
        // We've completed the root. Commit it.
        completeRoot(root, finishedWork, expirationTime);
      }
    }
  } else {
    // Flush async work.
    var _finishedWork = root.finishedWork;
    if (_finishedWork !== null) {
      // This root is already complete. We can commit it.
      completeRoot(root, _finishedWork, expirationTime);
    } else {
      root.finishedWork = null;
      // If this root previously suspended, clear its existing timeout, since
      // we're about to try rendering again.
      var _timeoutHandle = root.timeoutHandle;
      if (_timeoutHandle !== noTimeout) {
        root.timeoutHandle = noTimeout;
        // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
        cancelTimeout(_timeoutHandle);
      }
      renderRoot(root, isYieldy);
      _finishedWork = root.finishedWork;
      if (_finishedWork !== null) {
        // We've completed the root. Check the if we should yield one more time
        // before committing.
        if (!shouldYieldToRenderer()) {
          // Still time left. Commit the root.
          completeRoot(root, _finishedWork, expirationTime);
        } else {
          // There's no time left. Mark this root as complete. We'll come
          // back and commit it later.
          root.finishedWork = _finishedWork;
        }
      }
    }
  }

  isRendering = false;
}

function completeRoot(root, finishedWork, expirationTime) {
  // Check if there's a batch that matches this expiration time.
  var firstBatch = root.firstBatch;
  if (firstBatch !== null && firstBatch._expirationTime >= expirationTime) {
    if (completedBatches === null) {
      completedBatches = [firstBatch];
    } else {
      completedBatches.push(firstBatch);
    }
    if (firstBatch._defer) {
      // This root is blocked from committing by a batch. Unschedule it until
      // we receive another update.
      root.finishedWork = finishedWork;
      root.expirationTime = NoWork;
      return;
    }
  }

  // Commit the root.
  root.finishedWork = null;

  // Check if this is a nested update (a sync update scheduled during the
  // commit phase).
  if (root === lastCommittedRootDuringThisBatch) {
    // If the next root is the same as the previous root, this is a nested
    // update. To prevent an infinite loop, increment the nested update count.
    nestedUpdateCount++;
  } else {
    // Reset whenever we switch roots.
    lastCommittedRootDuringThisBatch = root;
    nestedUpdateCount = 0;
  }
  unstable_runWithPriority(unstable_ImmediatePriority, function () {
    commitRoot(root, finishedWork);
  });
}

function onUncaughtError(error) {
  !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  // Unschedule this root so we don't work on it again until there's
  // another update.
  nextFlushedRoot.expirationTime = NoWork;
  if (!hasUnhandledError) {
    hasUnhandledError = true;
    unhandledError = error;
  }
}

// TODO: Batching should be implemented at the renderer level, not inside
// the reconciler.
function batchedUpdates$1(fn, a) {
  var previousIsBatchingUpdates = isBatchingUpdates;
  isBatchingUpdates = true;
  try {
    return fn(a);
  } finally {
    isBatchingUpdates = previousIsBatchingUpdates;
    if (!isBatchingUpdates && !isRendering) {
      performSyncWork();
    }
  }
}

// TODO: Batching should be implemented at the renderer level, not inside
// the reconciler.
function unbatchedUpdates(fn, a) {
  if (isBatchingUpdates && !isUnbatchingUpdates) {
    isUnbatchingUpdates = true;
    try {
      return fn(a);
    } finally {
      isUnbatchingUpdates = false;
    }
  }
  return fn(a);
}

// TODO: Batching should be implemented at the renderer level, not within
// the reconciler.
function flushSync(fn, a) {
  !!isRendering ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
  var previousIsBatchingUpdates = isBatchingUpdates;
  isBatchingUpdates = true;
  try {
    return syncUpdates(fn, a);
  } finally {
    isBatchingUpdates = previousIsBatchingUpdates;
    performSyncWork();
  }
}

function interactiveUpdates$1(fn, a, b) {
  // If there are any pending interactive updates, synchronously flush them.
  // This needs to happen before we read any handlers, because the effect of
  // the previous event may influence which handlers are called during
  // this event.
  if (!isBatchingUpdates && !isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
    // Synchronously flush pending interactive updates.
    performWork(lowestPriorityPendingInteractiveExpirationTime, false);
    lowestPriorityPendingInteractiveExpirationTime = NoWork;
  }
  var previousIsBatchingUpdates = isBatchingUpdates;
  isBatchingUpdates = true;
  try {
    return unstable_runWithPriority(unstable_UserBlockingPriority, function () {
      return fn(a, b);
    });
  } finally {
    isBatchingUpdates = previousIsBatchingUpdates;
    if (!isBatchingUpdates && !isRendering) {
      performSyncWork();
    }
  }
}

function flushInteractiveUpdates$1() {
  if (!isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
    // Synchronously flush pending interactive updates.
    performWork(lowestPriorityPendingInteractiveExpirationTime, false);
    lowestPriorityPendingInteractiveExpirationTime = NoWork;
  }
}

function flushControlled(fn) {
  var previousIsBatchingUpdates = isBatchingUpdates;
  isBatchingUpdates = true;
  try {
    syncUpdates(fn);
  } finally {
    isBatchingUpdates = previousIsBatchingUpdates;
    if (!isBatchingUpdates && !isRendering) {
      performSyncWork();
    }
  }
}

// 0 is PROD, 1 is DEV.
// Might add PROFILE later.


var didWarnAboutNestedUpdates = void 0;
var didWarnAboutFindNodeInStrictMode = void 0;

{
  didWarnAboutNestedUpdates = false;
  didWarnAboutFindNodeInStrictMode = {};
}

function getContextForSubtree(parentComponent) {
  if (!parentComponent) {
    return emptyContextObject;
  }

  var fiber = get(parentComponent);
  var parentContext = findCurrentUnmaskedContext(fiber);

  if (fiber.tag === ClassComponent) {
    var Component = fiber.type;
    if (isContextProvider(Component)) {
      return processChildContext(fiber, Component, parentContext);
    }
  }

  return parentContext;
}

function scheduleRootUpdate(current$$1, element, expirationTime, callback) {
  {
    if (phase === 'render' && current !== null && !didWarnAboutNestedUpdates) {
      didWarnAboutNestedUpdates = true;
      warningWithoutStack$1(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
    }
  }

  var update = createUpdate(expirationTime);
  // Caution: React DevTools currently depends on this property
  // being called "element".
  update.payload = { element: element };

  callback = callback === undefined ? null : callback;
  if (callback !== null) {
    !(typeof callback === 'function') ? warningWithoutStack$1(false, 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback) : void 0;
    update.callback = callback;
  }

  flushPassiveEffects();
  enqueueUpdate(current$$1, update);
  scheduleWork(current$$1, expirationTime);

  return expirationTime;
}

function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
  // TODO: If this is a nested container, this won't be the root.
  var current$$1 = container.current;

  {
    if (ReactFiberInstrumentation_1.debugTool) {
      if (current$$1.alternate === null) {
        ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
      } else if (element === null) {
        ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
      } else {
        ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
      }
    }
  }

  var context = getContextForSubtree(parentComponent);
  if (container.context === null) {
    container.context = context;
  } else {
    container.pendingContext = context;
  }

  return scheduleRootUpdate(current$$1, element, expirationTime, callback);
}

function findHostInstance(component) {
  var fiber = get(component);
  if (fiber === undefined) {
    if (typeof component.render === 'function') {
      invariant(false, 'Unable to find node on an unmounted component.');
    } else {
      invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
    }
  }
  var hostFiber = findCurrentHostFiber(fiber);
  if (hostFiber === null) {
    return null;
  }
  return hostFiber.stateNode;
}

function findHostInstanceWithWarning(component, methodName) {
  {
    var fiber = get(component);
    if (fiber === undefined) {
      if (typeof component.render === 'function') {
        invariant(false, 'Unable to find node on an unmounted component.');
      } else {
        invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
      }
    }
    var hostFiber = findCurrentHostFiber(fiber);
    if (hostFiber === null) {
      return null;
    }
    if (hostFiber.mode & StrictMode) {
      var componentName = getComponentName(fiber.type) || 'Component';
      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
        didWarnAboutFindNodeInStrictMode[componentName] = true;
        if (fiber.mode & StrictMode) {
          warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-find-node', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
        } else {
          warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-find-node', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
        }
      }
    }
    return hostFiber.stateNode;
  }
  return findHostInstance(component);
}

function createContainer(containerInfo, isConcurrent, hydrate) {
  return createFiberRoot(containerInfo, isConcurrent, hydrate);
}

function updateContainer(element, container, parentComponent, callback) {
  var current$$1 = container.current;
  var currentTime = requestCurrentTime();
  var expirationTime = computeExpirationForFiber(currentTime, current$$1);
  return updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback);
}

function getPublicRootInstance(container) {
  var containerFiber = container.current;
  if (!containerFiber.child) {
    return null;
  }
  switch (containerFiber.child.tag) {
    case HostComponent:
      return getPublicInstance(containerFiber.child.stateNode);
    default:
      return containerFiber.child.stateNode;
  }
}

function findHostInstanceWithNoPortals(fiber) {
  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
  if (hostFiber === null) {
    return null;
  }
  return hostFiber.stateNode;
}

var overrideProps = null;

{
  var copyWithSetImpl = function (obj, path, idx, value) {
    if (idx >= path.length) {
      return value;
    }
    var key = path[idx];
    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
    // $FlowFixMe number or string is fine here
    updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
    return updated;
  };

  var copyWithSet = function (obj, path, value) {
    return copyWithSetImpl(obj, path, 0, value);
  };

  // Support DevTools props for function components, forwardRef, memo, host components, etc.
  overrideProps = function (fiber, path, value) {
    flushPassiveEffects();
    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }
    scheduleWork(fiber, Sync);
  };
}

function injectIntoDevTools(devToolsConfig) {
  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;


  return injectInternals(_assign({}, devToolsConfig, {
    overrideProps: overrideProps,
    currentDispatcherRef: ReactCurrentDispatcher,
    findHostInstanceByFiber: function (fiber) {
      var hostFiber = findCurrentHostFiber(fiber);
      if (hostFiber === null) {
        return null;
      }
      return hostFiber.stateNode;
    },
    findFiberByHostInstance: function (instance) {
      if (!findFiberByHostInstance) {
        // Might not be implemented by the renderer.
        return null;
      }
      return findFiberByHostInstance(instance);
    }
  }));
}

// This file intentionally does *not* have the Flow annotation.
// Don't add it. See `./inline-typed.js` for an explanation.

function createPortal$1(children, containerInfo,
// TODO: figure out the API for cross-renderer implementation.
implementation) {
  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  return {
    // This tag allow us to uniquely identify this as a React Portal
    $$typeof: REACT_PORTAL_TYPE,
    key: key == null ? null : '' + key,
    children: children,
    containerInfo: containerInfo,
    implementation: implementation
  };
}

// TODO: this is special because it gets imported during build.

var ReactVersion = '16.8.6';

// TODO: This type is shared between the reconciler and ReactDOM, but will
// eventually be lifted out to the renderer.

var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;

var topLevelUpdateWarnings = void 0;
var warnOnInvalidCallback = void 0;
var didWarnAboutUnstableCreatePortal = false;

{
  if (typeof Map !== 'function' ||
  // $FlowIssue Flow incorrectly thinks Map has no prototype
  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' ||
  // $FlowIssue Flow incorrectly thinks Set has no prototype
  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
    warningWithoutStack$1(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
  }

  topLevelUpdateWarnings = function (container) {
    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
      if (hostInstance) {
        !(hostInstance.parentNode === container) ? warningWithoutStack$1(false, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.') : void 0;
      }
    }

    var isRootRenderedBySomeReact = !!container._reactRootContainer;
    var rootEl = getReactRootElementInContainer(container);
    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));

    !(!hasNonRootReactChild || isRootRenderedBySomeReact) ? warningWithoutStack$1(false, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

    !(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY') ? warningWithoutStack$1(false, 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
  };

  warnOnInvalidCallback = function (callback, callerName) {
    !(callback === null || typeof callback === 'function') ? warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback) : void 0;
  };
}

setRestoreImplementation(restoreControlledState$1);

function ReactBatch(root) {
  var expirationTime = computeUniqueAsyncExpiration();
  this._expirationTime = expirationTime;
  this._root = root;
  this._next = null;
  this._callbacks = null;
  this._didComplete = false;
  this._hasChildren = false;
  this._children = null;
  this._defer = true;
}
ReactBatch.prototype.render = function (children) {
  !this._defer ? invariant(false, 'batch.render: Cannot render a batch that already committed.') : void 0;
  this._hasChildren = true;
  this._children = children;
  var internalRoot = this._root._internalRoot;
  var expirationTime = this._expirationTime;
  var work = new ReactWork();
  updateContainerAtExpirationTime(children, internalRoot, null, expirationTime, work._onCommit);
  return work;
};
ReactBatch.prototype.then = function (onComplete) {
  if (this._didComplete) {
    onComplete();
    return;
  }
  var callbacks = this._callbacks;
  if (callbacks === null) {
    callbacks = this._callbacks = [];
  }
  callbacks.push(onComplete);
};
ReactBatch.prototype.commit = function () {
  var internalRoot = this._root._internalRoot;
  var firstBatch = internalRoot.firstBatch;
  !(this._defer && firstBatch !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;

  if (!this._hasChildren) {
    // This batch is empty. Return.
    this._next = null;
    this._defer = false;
    return;
  }

  var expirationTime = this._expirationTime;

  // Ensure this is the first batch in the list.
  if (firstBatch !== this) {
    // This batch is not the earliest batch. We need to move it to the front.
    // Update its expiration time to be the expiration time of the earliest
    // batch, so that we can flush it without flushing the other batches.
    if (this._hasChildren) {
      expirationTime = this._expirationTime = firstBatch._expirationTime;
      // Rendering this batch again ensures its children will be the final state
      // when we flush (updates are processed in insertion order: last
      // update wins).
      // TODO: This forces a restart. Should we print a warning?
      this.render(this._children);
    }

    // Remove the batch from the list.
    var previous = null;
    var batch = firstBatch;
    while (batch !== this) {
      previous = batch;
      batch = batch._next;
    }
    !(previous !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;
    previous._next = batch._next;

    // Add it to the front.
    this._next = firstBatch;
    firstBatch = internalRoot.firstBatch = this;
  }

  // Synchronously flush all the work up to this batch's expiration time.
  this._defer = false;
  flushRoot(internalRoot, expirationTime);

  // Pop the batch from the list.
  var next = this._next;
  this._next = null;
  firstBatch = internalRoot.firstBatch = next;

  // Append the next earliest batch's children to the update queue.
  if (firstBatch !== null && firstBatch._hasChildren) {
    firstBatch.render(firstBatch._children);
  }
};
ReactBatch.prototype._onComplete = function () {
  if (this._didComplete) {
    return;
  }
  this._didComplete = true;
  var callbacks = this._callbacks;
  if (callbacks === null) {
    return;
  }
  // TODO: Error handling.
  for (var i = 0; i < callbacks.length; i++) {
    var _callback = callbacks[i];
    _callback();
  }
};

function ReactWork() {
  this._callbacks = null;
  this._didCommit = false;
  // TODO: Avoid need to bind by replacing callbacks in the update queue with
  // list of Work objects.
  this._onCommit = this._onCommit.bind(this);
}
ReactWork.prototype.then = function (onCommit) {
  if (this._didCommit) {
    onCommit();
    return;
  }
  var callbacks = this._callbacks;
  if (callbacks === null) {
    callbacks = this._callbacks = [];
  }
  callbacks.push(onCommit);
};
ReactWork.prototype._onCommit = function () {
  if (this._didCommit) {
    return;
  }
  this._didCommit = true;
  var callbacks = this._callbacks;
  if (callbacks === null) {
    return;
  }
  // TODO: Error handling.
  for (var i = 0; i < callbacks.length; i++) {
    var _callback2 = callbacks[i];
    !(typeof _callback2 === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback2) : void 0;
    _callback2();
  }
};

function ReactRoot(container, isConcurrent, hydrate) {
  var root = createContainer(container, isConcurrent, hydrate);
  this._internalRoot = root;
}
ReactRoot.prototype.render = function (children, callback) {
  var root = this._internalRoot;
  var work = new ReactWork();
  callback = callback === undefined ? null : callback;
  {
    warnOnInvalidCallback(callback, 'render');
  }
  if (callback !== null) {
    work.then(callback);
  }
  updateContainer(children, root, null, work._onCommit);
  return work;
};
ReactRoot.prototype.unmount = function (callback) {
  var root = this._internalRoot;
  var work = new ReactWork();
  callback = callback === undefined ? null : callback;
  {
    warnOnInvalidCallback(callback, 'render');
  }
  if (callback !== null) {
    work.then(callback);
  }
  updateContainer(null, root, null, work._onCommit);
  return work;
};
ReactRoot.prototype.legacy_renderSubtreeIntoContainer = function (parentComponent, children, callback) {
  var root = this._internalRoot;
  var work = new ReactWork();
  callback = callback === undefined ? null : callback;
  {
    warnOnInvalidCallback(callback, 'render');
  }
  if (callback !== null) {
    work.then(callback);
  }
  updateContainer(children, root, parentComponent, work._onCommit);
  return work;
};
ReactRoot.prototype.createBatch = function () {
  var batch = new ReactBatch(this);
  var expirationTime = batch._expirationTime;

  var internalRoot = this._internalRoot;
  var firstBatch = internalRoot.firstBatch;
  if (firstBatch === null) {
    internalRoot.firstBatch = batch;
    batch._next = null;
  } else {
    // Insert sorted by expiration time then insertion order
    var insertAfter = null;
    var insertBefore = firstBatch;
    while (insertBefore !== null && insertBefore._expirationTime >= expirationTime) {
      insertAfter = insertBefore;
      insertBefore = insertBefore._next;
    }
    batch._next = insertBefore;
    if (insertAfter !== null) {
      insertAfter._next = batch;
    }
  }

  return batch;
};

/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
}

function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOCUMENT_NODE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function shouldHydrateDueToLegacyHeuristic(container) {
  var rootElement = getReactRootElementInContainer(container);
  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
}

setBatchingImplementation(batchedUpdates$1, interactiveUpdates$1, flushInteractiveUpdates$1);

var warnedAboutHydrateAPI = false;

function legacyCreateRootFromDOMContainer(container, forceHydrate) {
  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
  // First clear any existing content.
  if (!shouldHydrate) {
    var warned = false;
    var rootSibling = void 0;
    while (rootSibling = container.lastChild) {
      {
        if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
          warned = true;
          warningWithoutStack$1(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
        }
      }
      container.removeChild(rootSibling);
    }
  }
  {
    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
      warnedAboutHydrateAPI = true;
      lowPriorityWarning$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
    }
  }
  // Legacy roots are not async by default.
  var isConcurrent = false;
  return new ReactRoot(container, isConcurrent, shouldHydrate);
}

function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
  {
    topLevelUpdateWarnings(container);
  }

  // TODO: Without `any` type, Flow says "Property cannot be accessed on any
  // member of intersection type." Whyyyyyy.
  var root = container._reactRootContainer;
  if (!root) {
    // Initial mount
    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
    if (typeof callback === 'function') {
      var originalCallback = callback;
      callback = function () {
        var instance = getPublicRootInstance(root._internalRoot);
        originalCallback.call(instance);
      };
    }
    // Initial mount should not be batched.
    unbatchedUpdates(function () {
      if (parentComponent != null) {
        root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
      } else {
        root.render(children, callback);
      }
    });
  } else {
    if (typeof callback === 'function') {
      var _originalCallback = callback;
      callback = function () {
        var instance = getPublicRootInstance(root._internalRoot);
        _originalCallback.call(instance);
      };
    }
    // Update
    if (parentComponent != null) {
      root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
    } else {
      root.render(children, callback);
    }
  }
  return getPublicRootInstance(root._internalRoot);
}

function createPortal$$1(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
  // TODO: pass ReactDOM portal implementation as third argument
  return createPortal$1(children, container, null, key);
}

var ReactDOM = {
  createPortal: createPortal$$1,

  findDOMNode: function (componentOrElement) {
    {
      var owner = ReactCurrentOwner.current;
      if (owner !== null && owner.stateNode !== null) {
        var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
        !warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component') : void 0;
        owner.stateNode._warnedAboutRefsInRender = true;
      }
    }
    if (componentOrElement == null) {
      return null;
    }
    if (componentOrElement.nodeType === ELEMENT_NODE) {
      return componentOrElement;
    }
    {
      return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
    }
    return findHostInstance(componentOrElement);
  },
  hydrate: function (element, container, callback) {
    !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
    {
      !!container._reactHasBeenPassedToCreateRootDEV ? warningWithoutStack$1(false, 'You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.%s(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
    }
    // TODO: throw or warn if we couldn't hydrate?
    return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
  },
  render: function (element, container, callback) {
    !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
    {
      !!container._reactHasBeenPassedToCreateRootDEV ? warningWithoutStack$1(false, 'You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.%s(). This is not supported. ' + 'Did you mean to call root.render(element)?', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
    }
    return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
  },
  unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
    !isValidContainer(containerNode) ? invariant(false, 'Target container is not a DOM element.') : void 0;
    !(parentComponent != null && has(parentComponent)) ? invariant(false, 'parentComponent must be a valid React Component') : void 0;
    return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
  },
  unmountComponentAtNode: function (container) {
    !isValidContainer(container) ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;

    {
      !!container._reactHasBeenPassedToCreateRootDEV ? warningWithoutStack$1(false, 'You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.%s(). This is not supported. Did you mean to call root.unmount()?', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
    }

    if (container._reactRootContainer) {
      {
        var rootEl = getReactRootElementInContainer(container);
        var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
        !!renderedByDifferentReact ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
      }

      // Unmount should not be batched.
      unbatchedUpdates(function () {
        legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
          container._reactRootContainer = null;
        });
      });
      // If you call unmountComponentAtNode twice in quick succession, you'll
      // get `true` twice. That's probably fine?
      return true;
    } else {
      {
        var _rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));

        // Check if the container itself is a React root node.
        var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

        !!hasNonRootReactChild ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
      }

      return false;
    }
  },


  // Temporary alias since we already shipped React 16 RC with it.
  // TODO: remove in React 17.
  unstable_createPortal: function () {
    if (!didWarnAboutUnstableCreatePortal) {
      didWarnAboutUnstableCreatePortal = true;
      lowPriorityWarning$1(false, 'The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
    }
    return createPortal$$1.apply(undefined, arguments);
  },


  unstable_batchedUpdates: batchedUpdates$1,

  unstable_interactiveUpdates: interactiveUpdates$1,

  flushSync: flushSync,

  unstable_createRoot: createRoot,
  unstable_flushControlled: flushControlled,

  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
    // Keep in sync with ReactDOMUnstableNativeDependencies.js
    // and ReactTestUtils.js. This is an array for better minification.
    Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injection.injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch]
  }
};

function createRoot(container, options) {
  var functionName = enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot';
  !isValidContainer(container) ? invariant(false, '%s(...): Target container is not a DOM element.', functionName) : void 0;
  {
    !!container._reactRootContainer ? warningWithoutStack$1(false, 'You are calling ReactDOM.%s() on a container that was previously ' + 'passed to ReactDOM.render(). This is not supported.', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
    container._reactHasBeenPassedToCreateRootDEV = true;
  }
  var hydrate = options != null && options.hydrate === true;
  return new ReactRoot(container, true, hydrate);
}

if (enableStableConcurrentModeAPIs) {
  ReactDOM.createRoot = createRoot;
  ReactDOM.unstable_createRoot = undefined;
}

var foundDevTools = injectIntoDevTools({
  findFiberByHostInstance: getClosestInstanceFromNode,
  bundleType: 1,
  version: ReactVersion,
  rendererPackageName: 'react-dom'
});

{
  if (!foundDevTools && canUseDOM && window.top === window.self) {
    // If we're in Chrome or Firefox, provide a download link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
      var protocol = window.location.protocol;
      // Don't warn in exotic cases like chrome-extension://.
      if (/^(https?|file):$/.test(protocol)) {
        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
      }
    }
  }
}



var ReactDOM$2 = Object.freeze({
	default: ReactDOM
});

var ReactDOM$3 = ( ReactDOM$2 && ReactDOM ) || ReactDOM$2;

// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.
var reactDom = ReactDOM$3.default || ReactDOM$3;

return reactDom;

})));